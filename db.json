{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/bg_01.jpg","path":"images/bg_01.jpg","modified":0,"renderable":0},{"_id":"source/images/bg_02.jpg","path":"images/bg_02.jpg","modified":0,"renderable":0},{"_id":"source/images/bg_03.jpg","path":"images/bg_03.jpg","modified":0,"renderable":0},{"_id":"source/images/head.png","path":"images/head.png","modified":0,"renderable":0},{"_id":"source/images/header_01.jpg","path":"images/header_01.jpg","modified":0,"renderable":0},{"_id":"source/images/header_02.jpg","path":"images/header_02.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/bg_03.jpg","path":"images/bg_03.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-more.png","path":"images/favicon-more.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/left_con_01.jpg","path":"images/left_con_01.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/styles.styl","hash":"d8e351c3023ba189c0ea54cc06f1f5e4b1b78f24","modified":1640450848927},{"_id":"source/_posts/CSS3阴影-box-shadow.md","hash":"521b0a7c104a2701f247c01ece6070bc4611ea72","modified":1642164260470},{"_id":"source/_posts/async-await详解.md","hash":"c9b6e941c1d1ed4bec17a7e435fab3d1a5aea1f2","modified":1642164268281},{"_id":"source/_posts/git版本回退.md","hash":"780b8128311de03c2b6e03315b287451b4c8d005","modified":1642164305964},{"_id":"source/_posts/js中一些好用的数组方法.md","hash":"465443329386839a39b1a3c59b11e69b13dcfd5a","modified":1642164342581},{"_id":"source/_posts/js函数柯里化.md","hash":"725fc0df416ef00c9dfc6f431ba0613ff6a2b107","modified":1642164281701},{"_id":"source/_posts/vue3对比vue2.md","hash":"540f5932a32d967fe55e9a51405f47d2808e1d53","modified":1642079155956},{"_id":"source/_posts/vue基础.md","hash":"9f3585f0fd13f4e4ad3ca520b22e959d6656c721","modified":1642164497673},{"_id":"source/_posts/webSocket.md","hash":"949e0072245ee799cd7ba1c76c90501ed64b4a76","modified":1642164520442},{"_id":"source/_posts/white-space.md","hash":"46fd22c7b1b85b7823dd2458f1ee63e583111cde","modified":1633965254081},{"_id":"source/_posts/常用的表单验证.md","hash":"489e8488358ae20a61c22a18b5a1609f36eb8f39","modified":1642164572748},{"_id":"source/_posts/用CSS代码让你的列表网页提升渲染性能.md","hash":"accfb2910d0db924bc3838f19fa70e63a171ab6a","modified":1642164591106},{"_id":"source/images/bg_03.jpg","hash":"15a7a8d9f27333032cc7797fbd64f250271022bc","modified":1632361996546},{"_id":"source/images/bg_01.jpg","hash":"03f00d410a7ccc4134625bd3352129a150498ea6","modified":1632361996489},{"_id":"source/images/header_01.jpg","hash":"25a6d8226ac5f0560b9b7c074333468272335403","modified":1632362007476},{"_id":"source/categories/index-1.md","hash":"b13c7286ea258ff9611dd9ac02c9b4601624307d","modified":1633194079455},{"_id":"source/categories/index.md","hash":"0775707ad678ac653935a73b416f23ef30c48a60","modified":1632233882253},{"_id":"source/tags/index.md","hash":"26b26e8c69106f17ce29b1dcaf72f651d8e667e8","modified":1633194218665},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-01.png","hash":"4f055b88921ad073263c9a3ff89dfc07ead5c58a","modified":1633532143452},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-02.png","hash":"f97516b5cfb10c0c7c4f65092e5092360770137d","modified":1633532678904},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-03.png","hash":"238b2adb4b4d703a9592b3dbe88a9feba7173d86","modified":1633532781360},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-04.png","hash":"c447895d276c9b1fdaff1566e3612e8c6a772588","modified":1633532909717},{"_id":"source/images/header_02.jpg","hash":"744f81dc47506b747c0a0abf6851f793fd739799","modified":1632362007506},{"_id":"source/images/head.png","hash":"4913ce36a23d9b54da48d82fc8aa2d9d4dd287c4","modified":1640524897179},{"_id":"source/images/bg_02.jpg","hash":"bec6ace3c93372487c6e8d4be51be3d01f0d9046","modified":1632361996520},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1632229321129},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1632229321129},{"_id":"themes/next/.gitignore","hash":"00dfdd5e482155434664f9eab001cdaa91f2c98c","modified":1640926351299},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1632229321129},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1632229321134},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1632229321134},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1632229321134},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1632229321135},{"_id":"themes/next/_config.yml","hash":"f1113440447ec3b1ece0d554e86a89b05c81883b","modified":1640525033435},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1632229321135},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1632229321142},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1632229321171},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1632229321130},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1632229321130},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1632229321132},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1632229321132},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1632229321132},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1632229321132},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1632229321132},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1632229321133},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1632229321133},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1632229321133},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1632229321133},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1632229321136},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1632229321136},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1632229321136},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1632229321136},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1632229321137},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1632229321137},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1632229321137},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1632229321138},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1632229321138},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1632229321143},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1632229321143},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1632229321143},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1632229321143},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1632229321143},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1632229321144},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1632229321144},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1632229321144},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1632229321144},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1632229321145},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1632229321145},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1632229321145},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1632229321146},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1632229321146},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1632229321146},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1632229321146},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1632229321147},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1632229321147},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1632229321147},{"_id":"themes/next/languages/zh-CN.yml","hash":"43b582cfe82bf163ee9a673012f405fbae4353c2","modified":1632233797247},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1632229321148},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1632229321148},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1640448626622},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1632229321169},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1632229321170},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1632229321170},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1632229321170},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1632229321170},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1632229321171},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1632229321177},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1632229321131},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1632229321130},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1632229321131},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1632229321132},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1632229321138},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1632229321139},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1632229321139},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1632229321139},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1632229321139},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1632229321142},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1632229321142},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1632229321142},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1632229321142},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1640449393488},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1632229321149},{"_id":"themes/next/layout/_macro/post.swig","hash":"be826acb46e4dbee91443d36bb19e4bb2a9ee5b0","modified":1640449442828},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1633181184990},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1632229321150},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1b8f4f97a5663c5bca85b5ce210d4a9578326ef2","modified":1633061032322},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1632229321153},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1632229321155},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1632229321158},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1632229321158},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1632229321158},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1632229321159},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1632229321160},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1632229321161},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1632229321162},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1632229321165},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1632229321166},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1632229321167},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1632229321171},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1632229321175},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1632229321175},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1632229321176},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1632229321176},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1632229321176},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1632229321176},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1632229321177},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1632229321177},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1632229321177},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1632229321177},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1632229321178},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1632229321178},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1632229321178},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1632229321178},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1632229321178},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1632229321179},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1632229321179},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1632229321179},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1632229321179},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1632229321180},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1632229321200},{"_id":"themes/next/source/css/main.styl","hash":"1e2c236284b078757766166b6f46f4f5edd24d58","modified":1640451343889},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1632229321208},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632229321208},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632229321208},{"_id":"themes/next/source/images/bg_03.jpg","hash":"15a7a8d9f27333032cc7797fbd64f250271022bc","modified":1632361996546},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1632229321210},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1632229321210},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1632229321210},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632229321210},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632229321211},{"_id":"themes/next/source/images/favicon.png","hash":"ee89b9f25ece9543af8f7406c0c625330f50f206","modified":1633182907747},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1632229321211},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1632229321211},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1632229321212},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1632229321212},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1633020211948},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1632229321213},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1632229321214},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1632229321215},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1632229321151},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1632229321151},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1632229321152},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1632229321152},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1632229321152},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1632229321153},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1632229321153},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1632229321154},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1632229321154},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1632229321155},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1632229321155},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1632229321156},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1632229321156},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1632229321156},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1632229321157},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1632229321157},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1632229321157},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1632229321157},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1632229321159},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1632229321159},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1632229321160},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1632229321160},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1632229321160},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1632229321161},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1632229321162},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1632229321162},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1632229321162},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1632229321162},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1632229321163},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1632229321165},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1632229321165},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1632229321165},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1632229321166},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1632229321166},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1632229321167},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1632229321167},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1632229321167},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1632229321168},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1632229321169},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1632229321169},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1632229321172},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1632229321172},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1632229321172},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1632229321173},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1632229321173},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1632229321175},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1632229321175},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1632229321205},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1632229321205},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1632229321206},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1632229321206},{"_id":"themes/next/source/css/_variables/base.styl","hash":"620cb02a4e182b44d494586528ace9847adc7b6c","modified":1633022699250},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1633020586455},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1632229321213},{"_id":"themes/next/source/lib/three/.gitignore","hash":"5767276045f60da2350895a59aa6e138b0e83294","modified":1632236229550},{"_id":"themes/next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1632236229551},{"_id":"themes/next/source/lib/three/README.md","hash":"76071f107e07113ccb23192680782577a15c5350","modified":1632236229551},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"558838e0821f76c1e6d58add25116853caa1976c","modified":1632236229551},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"1b371d908c6729f15877601792583e25cc4e6091","modified":1632236229552},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"8667c49d81292b55e4ec8c0ec9f8eb42f4ababab","modified":1632236229552},{"_id":"themes/next/source/lib/three/package.json","hash":"ff493a283c04f87a272abdffa8aa29fb4368b803","modified":1632236229553},{"_id":"themes/next/source/lib/three/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1632236229553},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"62fe85b767c525a07bbec1193c0840ee924dad9a","modified":1632236229554},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1632229321218},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1632229321218},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1632229321190},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1632229321190},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1632229321180},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1632229321187},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"a9d134e5564d3d846ba1cdba5786b1a32f8e9044","modified":1633059644018},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1632229321193},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1632229321195},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1632229321195},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1633020925085},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1632229321203},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1632229321204},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1632229321205},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1632229321205},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1632229321205},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1632229321204},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1632229321203},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1632229321203},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1632229321216},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1632229321217},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1632236229546},{"_id":"themes/next/source/lib/three/.git/config","hash":"c9c13087a3f33e6f46cd35a93c8b9bdf27618852","modified":1632236229549},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1632236225467},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"51439496ae6791f8b002584e71f5d10f4f1a1f71","modified":1632236229542},{"_id":"themes/next/source/lib/three/.git/index","hash":"0f370e4fa993c3ce9cb11d5f1907faa30aa69440","modified":1632236229557},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1632236229550},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"71141daa39bbcedcf14ae95c05023a57828a5a43","modified":1632236229553},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"69725cd0af6868c5aa059343cc6e18e0c10b2f2e","modified":1632236229553},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"10795d7f1e5393b2b5e1529b017ee4e0ffe82ac9","modified":1632236229554},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"8381c792b161001a1b5cf39613c6d48e2588b3ce","modified":1632236229554},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"ac382962d408f16acf07b925b94bb15495b5207c","modified":1632236229554},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1632229321188},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1632229321188},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1632229321190},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1632229321190},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1632229321192},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1632229321192},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1632229321193},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1632229321192},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1632229321193},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1632229321193},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1632229321183},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1632229321183},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1632229321183},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1632229321187},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1632229321187},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1632229321187},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1632229321188},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1632229321188},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1632229321199},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1632229321199},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1632229321199},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1632229321200},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1632236225468},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1632236225468},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1632236225469},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1632236225469},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1632236225470},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1632236225470},{"_id":"themes/next/source/lib/three/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1632236225472},{"_id":"themes/next/source/lib/three/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1632236225472},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1632236225472},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1632236225473},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"6df29120ca8fd1c342262596eb133dc61b237cea","modified":1632236229547},{"_id":"themes/next/source/lib/three/.git/objects/pack/pack-75f0bd54ccc830622c5523e90e168e5d930b759d.idx","hash":"5f4f97f13dbe353456fa6978bc089b4320f79272","modified":1632236229383},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1632236229547},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"6df29120ca8fd1c342262596eb133dc61b237cea","modified":1632236229548},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1632236229545},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"6df29120ca8fd1c342262596eb133dc61b237cea","modified":1632236229545},{"_id":"themes/next/source/images/favicon-more.png","hash":"8e81d401fd7d3f28cd77bb2d3859aa3aae2c720e","modified":1633182907683},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1632229321217},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1632229321217},{"_id":"themes/next/source/lib/three/.git/objects/pack/pack-75f0bd54ccc830622c5523e90e168e5d930b759d.pack","hash":"89e534013b432027b94500494ad5573cd869ce00","modified":1632236229383},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1632236229557},{"_id":"themes/next/source/images/left_con_01.jpg","hash":"12be299455f28e3a5194163b3dc123ea9b4e958f","modified":1632362007537},{"_id":"public/search.xml","hash":"74d1f543e105b7b6b941be92d0b3d22952a2d123","modified":1642164602181},{"_id":"public/categories/index.html","hash":"2c5969891f37bdaaa7429fa1c12662a3bae17dfa","modified":1642164602181},{"_id":"public/tags/index.html","hash":"130d2aa0cec48846973fde9d91e314642179fe20","modified":1642164602181},{"_id":"public/categories/index-1.html","hash":"a081e80eccf1b3891b96930045d814296b5591f6","modified":1642164602181},{"_id":"public/archives/2021/11/index.html","hash":"7b36f501f2dcfb0c174a1879a0319f5d75c58c70","modified":1642164602181},{"_id":"public/categories/css/index.html","hash":"cb45f823cb2f8051a976c1ad64460af68dd66a95","modified":1642164602181},{"_id":"public/categories/javaScript/index.html","hash":"6c51459091b9923acbc82276218f32f450a12b54","modified":1642164602181},{"_id":"public/categories/git/index.html","hash":"e73dcc227f7d56a25ed7d86304fc78dd8429de38","modified":1642164602181},{"_id":"public/categories/vue/index.html","hash":"34459b2bc9b0c015793be941ed8089bc27f6f82e","modified":1642164602181},{"_id":"public/tags/async-await/index.html","hash":"c2b7e181a605b7d34f5b8e81ab8662c9a83d1185","modified":1642164602181},{"_id":"public/tags/数组方法/index.html","hash":"773279059ddfbf0c4b49d3d92a637342abb6743b","modified":1642164602181},{"_id":"public/tags/js函数柯里化/index.html","hash":"46ba9e32fac02d022710705d0a34d14414a6d5ce","modified":1642164602181},{"_id":"public/tags/vue3对比vue2/index.html","hash":"9b50f5ffdf3cc40cf8e2850ec9175d22a1ed1151","modified":1642164602181},{"_id":"public/tags/vue基础/index.html","hash":"5388e510478332d02a5cfeed6ecb1614ee4d549d","modified":1642164602181},{"_id":"public/tags/white-space/index.html","hash":"b279d73f90d8f01f35e59334a757f83f8b199974","modified":1642164602181},{"_id":"public/tags/表单验证/index.html","hash":"5d202833ab0b987aa1a4f2fe360985215c31826c","modified":1642164602181},{"_id":"public/tags/webSocket/index.html","hash":"0e43860eefc18e9da9ec1bcf73423c23761d4d14","modified":1642164602181},{"_id":"public/page/2/index.html","hash":"95ddb7e71bbf2fb943df69df7f9df308bc63ca1f","modified":1642164602181},{"_id":"public/2021/11/02/vue3对比vue2/index.html","hash":"4d28a69c4978d9bb4ba35814b711f834b515d211","modified":1642164602181},{"_id":"public/2021/10/12/js函数柯里化/index.html","hash":"512056b823266f6de73e49e8c1f3b7921b856f73","modified":1642164602181},{"_id":"public/2021/10/11/white-space/index.html","hash":"96414ff6edee3e687fad5e64fe19779eb85a6312","modified":1642164602181},{"_id":"public/2021/10/09/async-await详解/index.html","hash":"47181479586462e74bd0b13a56ee7596929413e0","modified":1642164602181},{"_id":"public/2021/10/08/vue基础/index.html","hash":"567a3a6d8c6158b43d46f0d6fc84dfa9c8678a09","modified":1642164602181},{"_id":"public/2021/10/07/git版本回退/index.html","hash":"83e54d3e274958400577f846780a3676a5b53962","modified":1642164602181},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/index.html","hash":"c43e118a0ba20fc3e88587d8d4eb191e86903ebd","modified":1642164602181},{"_id":"public/2021/10/04/js中一些好用的数组方法/index.html","hash":"2c620539841aeb3df213e8df09fdc948f59ea433","modified":1642164602181},{"_id":"public/2021/10/04/webSocket/index.html","hash":"a844a53c0bb5f38ef23b61e94c8541ff1dd46481","modified":1642164602181},{"_id":"public/2021/10/03/用CSS代码让你的列表网页提升渲染性能/index.html","hash":"29cd24b427346e969b25c444a0f30a1f33a732af","modified":1642164602181},{"_id":"public/2021/10/02/常用的表单验证/index.html","hash":"e22057ad59e06fe96af31adfbbb3a21394e1751d","modified":1642164602181},{"_id":"public/archives/index.html","hash":"6e6bb9133583dedca0ad8f17363a836ab103bda9","modified":1642164602181},{"_id":"public/archives/2021/index.html","hash":"c99cec8831ed18fd1ba63476421c9aae579e795e","modified":1642164602181},{"_id":"public/archives/2021/10/index.html","hash":"0eefb0cda302d7acacd579781af1ad510642b010","modified":1642164602181},{"_id":"public/index.html","hash":"06fb3cc1c22dca926ecaa5b9432507b1463ffc0a","modified":1642164602181},{"_id":"public/images/bg_03.jpg","hash":"15a7a8d9f27333032cc7797fbd64f250271022bc","modified":1640525091617},{"_id":"public/images/header_01.jpg","hash":"25a6d8226ac5f0560b9b7c074333468272335403","modified":1640525091617},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1640525091617},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640525091617},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1640525091617},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1640525091617},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1640525091617},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1640525091617},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1640525091617},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1640525091617},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1640525091617},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1640525091617},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640525091617},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640525091617},{"_id":"public/images/favicon.png","hash":"ee89b9f25ece9543af8f7406c0c625330f50f206","modified":1640525091617},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1640525091617},{"_id":"public/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1640525091617},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-01.png","hash":"4f055b88921ad073263c9a3ff89dfc07ead5c58a","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-02.png","hash":"f97516b5cfb10c0c7c4f65092e5092360770137d","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-04.png","hash":"c447895d276c9b1fdaff1566e3612e8c6a772588","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-03.png","hash":"238b2adb4b4d703a9592b3dbe88a9feba7173d86","modified":1640525091617},{"_id":"public/images/bg_01.jpg","hash":"03f00d410a7ccc4134625bd3352129a150498ea6","modified":1640525091617},{"_id":"public/images/header_02.jpg","hash":"744f81dc47506b747c0a0abf6851f793fd739799","modified":1640525091617},{"_id":"public/images/favicon-more.png","hash":"8e81d401fd7d3f28cd77bb2d3859aa3aae2c720e","modified":1640525091617},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1640525091617},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1640525091617},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1640525091617},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1640525091617},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1640525091617},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1640525091617},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1640525091617},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1640525091617},{"_id":"public/lib/three/README.html","hash":"d8faebc08f93684752eeb936400e62117bd59b6e","modified":1640525091617},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1640525091617},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1640525091617},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1640525091617},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1640525091617},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1640525091617},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1640525091617},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1640525091617},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1640525091617},{"_id":"public/css/main.css","hash":"1fef56c2eb323e4abb41f6add0b3528f4c946bcf","modified":1640525091617},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1640525091617},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1640525091617},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1640525091617},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1640525091617},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1640525091617},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1640525091617},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1640525091617},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1640525091617},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1640525091617},{"_id":"public/images/head.png","hash":"4913ce36a23d9b54da48d82fc8aa2d9d4dd287c4","modified":1640525091617},{"_id":"public/images/bg_02.jpg","hash":"bec6ace3c93372487c6e8d4be51be3d01f0d9046","modified":1640525091617},{"_id":"public/images/left_con_01.jpg","hash":"12be299455f28e3a5194163b3dc123ea9b4e958f","modified":1640525091617},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1640525091617},{"_id":"source/_posts/Vite.md","hash":"f289cf976dc3ba6bed4b4c9fa12aa31675fa26c4","modified":1642162439005},{"_id":"source/_posts/前端程序员必须知道的-Web-漏洞.md","hash":"8537aaf0f277b2d214e81f871dc52a36c098a5d4","modified":1642164168780},{"_id":"public/archives/2022/index.html","hash":"2314d8fd7b6b68c381ff729810223ea37690de8b","modified":1642164602181},{"_id":"public/archives/2022/01/index.html","hash":"bbe591aea626bfd29b4eb5adcb6d27c697de2b8b","modified":1642164602181},{"_id":"public/categories/前端安全/index.html","hash":"8cc11b5e71320682415b2a86d9b36bf3866bcdf6","modified":1642164602181},{"_id":"public/tags/vite/index.html","hash":"10f43d2b58414af8a8782b723e1c53df2cf8b5db","modified":1642164602181},{"_id":"public/tags/前端安全/index.html","hash":"9c9f7297426ca0643f826be2fa391cee1a946e76","modified":1642164602181},{"_id":"public/2022/01/14/前端程序员必须知道的-Web-漏洞/index.html","hash":"fd87972882b2a8aa2d14cc92999071a3be7a1bef","modified":1642164602181},{"_id":"public/2022/01/14/Vite/index.html","hash":"dc472d2378702c93fcea0b9bb3babd787c2e2360","modified":1642164602181}],"Category":[{"name":"css","_id":"ckxnaa6ev00040gfz8sm71ybg"},{"name":"javaScript","_id":"ckxnaa6ey000a0gfzdjui6y6c"},{"name":"git","_id":"ckxnaa6f0000g0gfz5i5yeu0x"},{"name":"vue","_id":"ckxnaa6f5000w0gfz9ik5hta2"},{"name":"前端安全","_id":"ckyeeekyr0005i0fz4whf8n2l"}],"Data":[{"_id":"styles","data":"body {\n  background-color: #eee;\n}\n"}],"Page":[{"title":"分类","date":"2021-09-21T14:17:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-09-21 22:17:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-09-21T14:18:02.253Z","path":"categories/index.html","layout":"page","_id":"ckxnaa6eq00000gfz9dx4g6c2","content":"","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":""},{"title":"tags","date":"2021-10-02T17:03:14.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-10-03 01:03:14\ntype: tags\n---\n","updated":"2021-10-02T17:03:38.665Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxnaa6et00020gfz2qdjfyg7","content":"","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":""},{"title":"categories","date":"2021-10-02T17:00:58.000Z","type":"categories","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2021-10-03 01:00:58\ntype: categories\n---\n","updated":"2021-10-02T17:01:19.455Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"ckxnaa6ew00050gfz37sravm0","content":"","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":""}],"Post":[{"title":"CSS3阴影(box-shadow)","date":"2021-10-06T14:51:21.000Z","_content":"\n##### 1、单侧投影\n\n- 外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 \n\n- 单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。\n\n```html\n<style>\n.left {\n box-shadow: -8px 0 5px -5px #333;\n}\n.right {\n box-shadow: 8px 0 5px -5px #333;\n}\n.top {\n box-shadow: 0 -8px 5px -5px #333;\n}\n.bottom {\n box-shadow: 0 8px 5px -5px #333;\n}\n</style>\n<div class='left'>左</div>\n<div class='right'>右</div>\n<div class='top'>上</div>\n<div class='bottom'>下</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png)\n\n##### 2、立体文字阴影\n\n- 立体文字阴影的关键点在于多层 text-shadow 的叠加\n- 合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码\n- 运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和\n- HSL(颜色值)\n- - H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  - S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  - L：Lightness(亮度)。取值为：0.0% - 100.0%\n\n```css\n<style>\n@function blessing($color) {\n $val: 0px 0px $color;\n @for $i from 1 through 50 {\n $color: fade-out(desaturate($color, 1%), .02);\n $val: #{$val}, -#{$i}px #{$i}px #{$color};\n }\n @return $val;\n}\n\ndiv {\n text-align: center;\n font-size: 20vmin;\n line-height: 45vh;\n text-shadow: blessing(hsl(0, 100%, 50%));\n color: hsl(14, 100%, 60%);\n}\n</style>\n<div>福</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png)\n\n##### 3、线性渐变模拟长阴影\n\n- 借用了元素的两个伪元素\n- 通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置\n\n```css\n<style>\ndiv {\n position: relative;\n width: 30vmin;\n height: 30vmin;\n line-height: 30vh;\n text-align: center;\n font-size: 30px;\n background: #fff;\n margin: 30vmin auto;\n}\n\ndiv::before,\ndiv::after {\n content: \"\";\n position: absolute;\n top: 0;\n left: 0;\n right: 0;\n bottom: 0;\n z-index: -1;\n}\n\ndiv::before {\n content: ':before';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 50%;\n transform: translate(100%, 0) skewY(45deg) scaleX(.6);\n background: linear-gradient(90deg, rgba(0, 0, 0, .3), transparent);\n}\n\ndiv::after {\n content: ':after';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 0;\n transform: translate(0%, 100%) skewX(45deg) scaleY(.6);\n background: linear-gradient(180deg, rgba(0, 0, 0, .3), transparent);\n}\n</style>\n<div>Web秀</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png)\n\n##### 4、渐变实现内切角\n\n- 阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果\n- 阴影实现缺点，单个标签最多只能是2个内切圆角\n- 径向渐变实现内切圆角可以是4边\n\n```css\n<style>\ndiv {\n position: relative;\n width: 20vw;\n height: 8vw;\n margin: 1vw auto;\n border-radius: 1vmin;\n overflow: hidden;\n line-height: 8vw;\n color: #fff;\n text-align: center;\n}\n\n.shadow::before {\n position: absolute;\n content: \"\";\n top: -2vw;\n left: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.shadow::after {\n position: absolute;\n content: \"\";\n bottom: -2vw;\n right: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.linear {\n background-size: 70% 70%;\n background-image: \n radial-gradient(\n circle at 100% 100%, \n transparent 1vw, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 100% 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 100%, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw);\n background-repeat: no-repeat;\n background-position: \n right bottom, \n left top, \n right top, \n left bottom;\n}\n</style>\n<div class=\"shadow\">阴影实现缺点最多是2边</div>\n<div class=\"linear\">径向渐变内切圆角4边</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png)","source":"_posts/CSS3阴影-box-shadow.md","raw":"---\ntitle: CSS3阴影(box-shadow)\ndate: 2021-10-06 22:51:21\ntags:\ncategories: css\n---\n\n##### 1、单侧投影\n\n- 外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 \n\n- 单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。\n\n```html\n<style>\n.left {\n box-shadow: -8px 0 5px -5px #333;\n}\n.right {\n box-shadow: 8px 0 5px -5px #333;\n}\n.top {\n box-shadow: 0 -8px 5px -5px #333;\n}\n.bottom {\n box-shadow: 0 8px 5px -5px #333;\n}\n</style>\n<div class='left'>左</div>\n<div class='right'>右</div>\n<div class='top'>上</div>\n<div class='bottom'>下</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png)\n\n##### 2、立体文字阴影\n\n- 立体文字阴影的关键点在于多层 text-shadow 的叠加\n- 合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码\n- 运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和\n- HSL(颜色值)\n- - H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  - S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  - L：Lightness(亮度)。取值为：0.0% - 100.0%\n\n```css\n<style>\n@function blessing($color) {\n $val: 0px 0px $color;\n @for $i from 1 through 50 {\n $color: fade-out(desaturate($color, 1%), .02);\n $val: #{$val}, -#{$i}px #{$i}px #{$color};\n }\n @return $val;\n}\n\ndiv {\n text-align: center;\n font-size: 20vmin;\n line-height: 45vh;\n text-shadow: blessing(hsl(0, 100%, 50%));\n color: hsl(14, 100%, 60%);\n}\n</style>\n<div>福</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png)\n\n##### 3、线性渐变模拟长阴影\n\n- 借用了元素的两个伪元素\n- 通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置\n\n```css\n<style>\ndiv {\n position: relative;\n width: 30vmin;\n height: 30vmin;\n line-height: 30vh;\n text-align: center;\n font-size: 30px;\n background: #fff;\n margin: 30vmin auto;\n}\n\ndiv::before,\ndiv::after {\n content: \"\";\n position: absolute;\n top: 0;\n left: 0;\n right: 0;\n bottom: 0;\n z-index: -1;\n}\n\ndiv::before {\n content: ':before';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 50%;\n transform: translate(100%, 0) skewY(45deg) scaleX(.6);\n background: linear-gradient(90deg, rgba(0, 0, 0, .3), transparent);\n}\n\ndiv::after {\n content: ':after';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 0;\n transform: translate(0%, 100%) skewX(45deg) scaleY(.6);\n background: linear-gradient(180deg, rgba(0, 0, 0, .3), transparent);\n}\n</style>\n<div>Web秀</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png)\n\n##### 4、渐变实现内切角\n\n- 阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果\n- 阴影实现缺点，单个标签最多只能是2个内切圆角\n- 径向渐变实现内切圆角可以是4边\n\n```css\n<style>\ndiv {\n position: relative;\n width: 20vw;\n height: 8vw;\n margin: 1vw auto;\n border-radius: 1vmin;\n overflow: hidden;\n line-height: 8vw;\n color: #fff;\n text-align: center;\n}\n\n.shadow::before {\n position: absolute;\n content: \"\";\n top: -2vw;\n left: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.shadow::after {\n position: absolute;\n content: \"\";\n bottom: -2vw;\n right: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.linear {\n background-size: 70% 70%;\n background-image: \n radial-gradient(\n circle at 100% 100%, \n transparent 1vw, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 100% 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 100%, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw);\n background-repeat: no-repeat;\n background-position: \n right bottom, \n left top, \n right top, \n left bottom;\n}\n</style>\n<div class=\"shadow\">阴影实现缺点最多是2边</div>\n<div class=\"linear\">径向渐变内切圆角4边</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png)","slug":"CSS3阴影-box-shadow","published":1,"updated":"2022-01-14T12:44:20.470Z","_id":"ckxnaa6es00010gfz7ryq57i5","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"1、单侧投影\"><a href=\"#1、单侧投影\" class=\"headerlink\" title=\"1、单侧投影\"></a>1、单侧投影</h5><ul>\n<li><p>外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 </p>\n</li>\n<li><p>单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: -<span class=\"number\">8px</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">8px</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.top</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">8px</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.bottom</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">8px</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;left&#x27;</span>&gt;</span>左<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;right&#x27;</span>&gt;</span>右<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;top&#x27;</span>&gt;</span>上<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;bottom&#x27;</span>&gt;</span>下<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png\"></p>\n<h5 id=\"2、立体文字阴影\"><a href=\"#2、立体文字阴影\" class=\"headerlink\" title=\"2、立体文字阴影\"></a>2、立体文字阴影</h5><ul>\n<li>立体文字阴影的关键点在于多层 text-shadow 的叠加</li>\n<li>合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码</li>\n<li>运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和</li>\n<li>HSL(颜色值)</li>\n<li><ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"keyword\">@function</span> blessing($<span class=\"attribute\">color</span>) &#123;</span><br><span class=\"line\"> $val: <span class=\"number\">0px</span> <span class=\"number\">0px</span> $color;</span><br><span class=\"line\"> <span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">50</span> &#123;</span><br><span class=\"line\"> $<span class=\"attribute\">color</span>: <span class=\"built_in\">fade-out</span>(<span class=\"built_in\">desaturate</span>($color, <span class=\"number\">1%</span>), .<span class=\"number\">02</span>);</span><br><span class=\"line\"> $val: #&#123;$val&#125;, -#&#123;$<span class=\"selector-tag\">i</span>&#125;px #&#123;$<span class=\"selector-tag\">i</span>&#125;px #&#123;$<span class=\"attribute\">color</span>&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">@return</span> $val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">20vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">45vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-shadow</span>: <span class=\"built_in\">blessing</span>(<span class=\"built_in\">hsl</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">50%</span>));</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"built_in\">hsl</span>(<span class=\"number\">14</span>, <span class=\"number\">100%</span>, <span class=\"number\">60%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span>&gt;福&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png\"></p>\n<h5 id=\"3、线性渐变模拟长阴影\"><a href=\"#3、线性渐变模拟长阴影\" class=\"headerlink\" title=\"3、线性渐变模拟长阴影\"></a>3、线性渐变模拟长阴影</h5><ul>\n<li>借用了元素的两个伪元素</li>\n<li>通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">30vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">30vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">30vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>: <span class=\"number\">30vmin</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;:before&#x27;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">30vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>) <span class=\"built_in\">skewY</span>(<span class=\"number\">45deg</span>) <span class=\"built_in\">scaleX</span>(.<span class=\"number\">6</span>);</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">90deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">3</span>), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;:after&#x27;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">30vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0%</span>, <span class=\"number\">100%</span>) <span class=\"built_in\">skewX</span>(<span class=\"number\">45deg</span>) <span class=\"built_in\">scaleY</span>(.<span class=\"number\">6</span>);</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">180deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">3</span>), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span>&gt;Web秀&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png\"></p>\n<h5 id=\"4、渐变实现内切角\"><a href=\"#4、渐变实现内切角\" class=\"headerlink\" title=\"4、渐变实现内切角\"></a>4、渐变实现内切角</h5><ul>\n<li>阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果</li>\n<li>阴影实现缺点，单个标签最多只能是2个内切圆角</li>\n<li>径向渐变实现内切圆角可以是4边</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">20vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">8vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>: <span class=\"number\">1vw</span> auto;</span><br><span class=\"line\"> <span class=\"attribute\">border-radius</span>: <span class=\"number\">1vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">8vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shadow</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">top</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">left</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">15vw</span> <span class=\"number\">#e91e63</span>; </span><br><span class=\"line\"> <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shadow</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">bottom</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">right</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">15vw</span> <span class=\"number\">#e91e63</span>; </span><br><span class=\"line\"> <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.linear</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">background-size</span>: <span class=\"number\">70%</span> <span class=\"number\">70%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-image</span>: </span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">100%</span> <span class=\"number\">100%</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">1vw</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>),</span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">0</span> <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>),</span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">100%</span> <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>),</span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">0</span> <span class=\"number\">100%</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>);</span><br><span class=\"line\"> <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\"> <span class=\"attribute\">background-position</span>: </span><br><span class=\"line\"> right bottom, </span><br><span class=\"line\"> left top, </span><br><span class=\"line\"> right top, </span><br><span class=\"line\"> left bottom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;shadow&quot;&gt;阴影实现缺点最多是<span class=\"number\">2</span>边&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;linear&quot;&gt;径向渐变内切圆角<span class=\"number\">4</span>边&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png\"></p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"1、单侧投影\"><a href=\"#1、单侧投影\" class=\"headerlink\" title=\"1、单侧投影\"></a>1、单侧投影</h5><ul>\n<li><p>外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 </p>\n</li>\n<li><p>单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.left</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: -<span class=\"number\">8px</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.right</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">8px</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.top</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> -<span class=\"number\">8px</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.bottom</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">8px</span> <span class=\"number\">5px</span> -<span class=\"number\">5px</span> <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;left&#x27;</span>&gt;</span>左<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;right&#x27;</span>&gt;</span>右<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;top&#x27;</span>&gt;</span>上<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;bottom&#x27;</span>&gt;</span>下<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png\"></p>\n<h5 id=\"2、立体文字阴影\"><a href=\"#2、立体文字阴影\" class=\"headerlink\" title=\"2、立体文字阴影\"></a>2、立体文字阴影</h5><ul>\n<li>立体文字阴影的关键点在于多层 text-shadow 的叠加</li>\n<li>合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码</li>\n<li>运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和</li>\n<li>HSL(颜色值)</li>\n<li><ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"keyword\">@function</span> blessing($<span class=\"attribute\">color</span>) &#123;</span><br><span class=\"line\"> $val: <span class=\"number\">0px</span> <span class=\"number\">0px</span> $color;</span><br><span class=\"line\"> <span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through <span class=\"number\">50</span> &#123;</span><br><span class=\"line\"> $<span class=\"attribute\">color</span>: <span class=\"built_in\">fade-out</span>(<span class=\"built_in\">desaturate</span>($color, <span class=\"number\">1%</span>), .<span class=\"number\">02</span>);</span><br><span class=\"line\"> $val: #&#123;$val&#125;, -#&#123;$<span class=\"selector-tag\">i</span>&#125;px #&#123;$<span class=\"selector-tag\">i</span>&#125;px #&#123;$<span class=\"attribute\">color</span>&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">@return</span> $val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">20vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">45vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-shadow</span>: <span class=\"built_in\">blessing</span>(<span class=\"built_in\">hsl</span>(<span class=\"number\">0</span>, <span class=\"number\">100%</span>, <span class=\"number\">50%</span>));</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"built_in\">hsl</span>(<span class=\"number\">14</span>, <span class=\"number\">100%</span>, <span class=\"number\">60%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span>&gt;福&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png\"></p>\n<h5 id=\"3、线性渐变模拟长阴影\"><a href=\"#3、线性渐变模拟长阴影\" class=\"headerlink\" title=\"3、线性渐变模拟长阴影\"></a>3、线性渐变模拟长阴影</h5><ul>\n<li>借用了元素的两个伪元素</li>\n<li>通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">30vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">30vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">30vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>: <span class=\"number\">30vmin</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;:before&#x27;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">30vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">100%</span>, <span class=\"number\">0</span>) <span class=\"built_in\">skewY</span>(<span class=\"number\">45deg</span>) <span class=\"built_in\">scaleX</span>(.<span class=\"number\">6</span>);</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">90deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">3</span>), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;:after&#x27;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">30vh</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(<span class=\"number\">0%</span>, <span class=\"number\">100%</span>) <span class=\"built_in\">skewX</span>(<span class=\"number\">45deg</span>) <span class=\"built_in\">scaleY</span>(.<span class=\"number\">6</span>);</span><br><span class=\"line\"> <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">180deg</span>, <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, .<span class=\"number\">3</span>), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span>&gt;Web秀&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png\"></p>\n<h5 id=\"4、渐变实现内切角\"><a href=\"#4、渐变实现内切角\" class=\"headerlink\" title=\"4、渐变实现内切角\"></a>4、渐变实现内切角</h5><ul>\n<li>阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果</li>\n<li>阴影实现缺点，单个标签最多只能是2个内切圆角</li>\n<li>径向渐变实现内切圆角可以是4边</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">20vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">8vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>: <span class=\"number\">1vw</span> auto;</span><br><span class=\"line\"> <span class=\"attribute\">border-radius</span>: <span class=\"number\">1vmin</span>;</span><br><span class=\"line\"> <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">8vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\"> <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shadow</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">top</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">left</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">15vw</span> <span class=\"number\">#e91e63</span>; </span><br><span class=\"line\"> <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.shadow</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"> <span class=\"attribute\">bottom</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">right</span>: -<span class=\"number\">2vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">4vw</span>;</span><br><span class=\"line\"> <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">15vw</span> <span class=\"number\">#e91e63</span>; </span><br><span class=\"line\"> <span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.linear</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">background-size</span>: <span class=\"number\">70%</span> <span class=\"number\">70%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-image</span>: </span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">100%</span> <span class=\"number\">100%</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">1vw</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>),</span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">0</span> <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>),</span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">100%</span> <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>),</span><br><span class=\"line\"> <span class=\"built_in\">radial-gradient</span>(</span><br><span class=\"line\"> circle at <span class=\"number\">0</span> <span class=\"number\">100%</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">0</span>, </span><br><span class=\"line\"> transparent <span class=\"number\">2vw</span>, </span><br><span class=\"line\"> <span class=\"number\">#03A9F5</span> <span class=\"number\">2vw</span>);</span><br><span class=\"line\"> <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\"> <span class=\"attribute\">background-position</span>: </span><br><span class=\"line\"> right bottom, </span><br><span class=\"line\"> left top, </span><br><span class=\"line\"> right top, </span><br><span class=\"line\"> left bottom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;shadow&quot;&gt;阴影实现缺点最多是<span class=\"number\">2</span>边&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;linear&quot;&gt;径向渐变内切圆角<span class=\"number\">4</span>边&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png\"></p>\n"},{"title":"async/await详解","date":"2021-10-09T14:45:39.000Z","_content":"\n#### 1、前言\n\n&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。\n\n#### 2、详解\n\n&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。\n\n##### 2.1、async\n\n&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。\n\n- 函数返回非Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg)\n\n&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。\n\n- ###### 函数返回Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg)\n\n&emsp;&emsp;可以看出返回的也是Promise对象。\n\n##### 2.2、await\n\n&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。\n\n![](https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png)\n\n&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。\n\n##### 2.3、async、await结合使用\n\n**语法：**\n\n```js\nasync function 函数名() {\n\tawait XXX;\n}\n```\n\n**示例代码：**\n\n```js\nfunction testAsync() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中...')\n\t\t\t\tresolve('resolve return')\n\t\t\t} else {\n\t\t\t\treject('reject return')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nfunction testAsync2() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中2...')\n\t\t\t\tresolve('resolve return2')\n\t\t\t} else {\n\t\t\t\treject('reject return2')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nasync function test() {\n\tconsole.log('test开始...');\n\tvar value1 = await testAsync();\n\tconsole.log(value1);\n\tvar value2 = await testAsync2();\n\tconsole.log(value2);\n\tvar value3 = await 'test结束...';\n\tconsole.log(value3);\n}\n\nconsole.log(test());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\" />\n\n&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。\n\n&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：\n\n```js\nfunction fun1() {\n\treturn '函数1'\n}\n\nfunction fun2() {\n\treturn '函数2'\n}\n\nfunction fun3() {\n\tconsole.log(fun1());\n\tconsole.log(test()); // async/await函数\n\tconsole.log(fun2());\n}\n\n console.log(fun3());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\" />\n\n梳理一下函数的执行过程:\n\n1. 先执行函数1\n2. 进入test函数并输出开始\n3. 在test函数中遇到await，立即返回Promise对象\n4. 执行函数2\n5. 执行test函数中的testAsync方法\n6. 等到test函数中的testAsync方法执行完后，继续执行testAsync2方法\n7. test函数结束\n\n&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n##### 2.4、async、await异常处理\n\n&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try...catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。\n\n```js\n // 第一种写法\n async function myFunction() {\n   try {\n     await something();\n   } catch (err) {\n     console.log(err);\n   }\n }\n \n // 第二种写法\n async function myFunction() {\n   await somethingPromise()\n   .catch(function (err) {\n     console.log(err);\n   });\n }\n```\n\n#### 3、总结\n\n&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n&emsp;&emsp;可以使用try...catch或.catch对async函数进行异常处理。","source":"_posts/async-await详解.md","raw":"---\ntitle: async/await详解\ndate: 2021-10-09 22:45:39\ntags: async/await\ncategories: javaScript\n---\n\n#### 1、前言\n\n&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。\n\n#### 2、详解\n\n&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。\n\n##### 2.1、async\n\n&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。\n\n- 函数返回非Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg)\n\n&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。\n\n- ###### 函数返回Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg)\n\n&emsp;&emsp;可以看出返回的也是Promise对象。\n\n##### 2.2、await\n\n&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。\n\n![](https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png)\n\n&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。\n\n##### 2.3、async、await结合使用\n\n**语法：**\n\n```js\nasync function 函数名() {\n\tawait XXX;\n}\n```\n\n**示例代码：**\n\n```js\nfunction testAsync() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中...')\n\t\t\t\tresolve('resolve return')\n\t\t\t} else {\n\t\t\t\treject('reject return')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nfunction testAsync2() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中2...')\n\t\t\t\tresolve('resolve return2')\n\t\t\t} else {\n\t\t\t\treject('reject return2')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nasync function test() {\n\tconsole.log('test开始...');\n\tvar value1 = await testAsync();\n\tconsole.log(value1);\n\tvar value2 = await testAsync2();\n\tconsole.log(value2);\n\tvar value3 = await 'test结束...';\n\tconsole.log(value3);\n}\n\nconsole.log(test());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\" />\n\n&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。\n\n&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：\n\n```js\nfunction fun1() {\n\treturn '函数1'\n}\n\nfunction fun2() {\n\treturn '函数2'\n}\n\nfunction fun3() {\n\tconsole.log(fun1());\n\tconsole.log(test()); // async/await函数\n\tconsole.log(fun2());\n}\n\n console.log(fun3());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\" />\n\n梳理一下函数的执行过程:\n\n1. 先执行函数1\n2. 进入test函数并输出开始\n3. 在test函数中遇到await，立即返回Promise对象\n4. 执行函数2\n5. 执行test函数中的testAsync方法\n6. 等到test函数中的testAsync方法执行完后，继续执行testAsync2方法\n7. test函数结束\n\n&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n##### 2.4、async、await异常处理\n\n&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try...catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。\n\n```js\n // 第一种写法\n async function myFunction() {\n   try {\n     await something();\n   } catch (err) {\n     console.log(err);\n   }\n }\n \n // 第二种写法\n async function myFunction() {\n   await somethingPromise()\n   .catch(function (err) {\n     console.log(err);\n   });\n }\n```\n\n#### 3、总结\n\n&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n&emsp;&emsp;可以使用try...catch或.catch对async函数进行异常处理。","slug":"async-await详解","published":1,"updated":"2022-01-14T12:44:28.281Z","_id":"ckxnaa6eu00030gfzg9xa0xyk","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h4><p>&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。</p>\n<h4 id=\"2、详解\"><a href=\"#2、详解\" class=\"headerlink\" title=\"2、详解\"></a>2、详解</h4><p>&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。</p>\n<h5 id=\"2-1、async\"><a href=\"#2-1、async\" class=\"headerlink\" title=\"2.1、async\"></a>2.1、async</h5><p>&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。</p>\n<ul>\n<li>函数返回非Promise对象</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg\"></p>\n<p>&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。</p>\n<ul>\n<li><h6 id=\"函数返回Promise对象\"><a href=\"#函数返回Promise对象\" class=\"headerlink\" title=\"函数返回Promise对象\"></a>函数返回Promise对象</h6></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg\"></p>\n<p>&emsp;&emsp;可以看出返回的也是Promise对象。</p>\n<h5 id=\"2-2、await\"><a href=\"#2-2、await\" class=\"headerlink\" title=\"2.2、await\"></a>2.2、await</h5><p>&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png\"></p>\n<p>&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。</p>\n<h5 id=\"2-3、async、await结合使用\"><a href=\"#2-3、async、await结合使用\" class=\"headerlink\" title=\"2.3、async、await结合使用\"></a>2.3、async、await结合使用</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> XXX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAsync</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请求中...&#x27;</span>)</span><br><span class=\"line\">\t\t\t\tresolve(<span class=\"string\">&#x27;resolve return&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\treject(<span class=\"string\">&#x27;reject return&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAsync2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请求中2...&#x27;</span>)</span><br><span class=\"line\">\t\t\t\tresolve(<span class=\"string\">&#x27;resolve return2&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\treject(<span class=\"string\">&#x27;reject return2&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test开始...&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value1 = <span class=\"keyword\">await</span> testAsync();</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value1);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value2 = <span class=\"keyword\">await</span> testAsync2();</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value2);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value3 = <span class=\"keyword\">await</span> <span class=\"string\">&#x27;test结束...&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\">\n\n<p>&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。</p>\n<p>&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;函数1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;函数2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(fun1());</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(test()); <span class=\"comment\">// async/await函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(fun2());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(fun3());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\">\n\n<p>梳理一下函数的执行过程:</p>\n<ol>\n<li>先执行函数1</li>\n<li>进入test函数并输出开始</li>\n<li>在test函数中遇到await，立即返回Promise对象</li>\n<li>执行函数2</li>\n<li>执行test函数中的testAsync方法</li>\n<li>等到test函数中的testAsync方法执行完后，继续执行testAsync2方法</li>\n<li>test函数结束</li>\n</ol>\n<p>&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<h5 id=\"2-4、async、await异常处理\"><a href=\"#2-4、async、await异常处理\" class=\"headerlink\" title=\"2.4、async、await异常处理\"></a>2.4、async、await异常处理</h5><p>&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try…catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> something();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> somethingPromise()</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、总结\"><a href=\"#3、总结\" class=\"headerlink\" title=\"3、总结\"></a>3、总结</h4><p>&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<p>&emsp;&emsp;可以使用try…catch或.catch对async函数进行异常处理。</p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h4 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h4><p>&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。</p>\n<h4 id=\"2、详解\"><a href=\"#2、详解\" class=\"headerlink\" title=\"2、详解\"></a>2、详解</h4><p>&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。</p>\n<h5 id=\"2-1、async\"><a href=\"#2-1、async\" class=\"headerlink\" title=\"2.1、async\"></a>2.1、async</h5><p>&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。</p>\n<ul>\n<li>函数返回非Promise对象</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg\"></p>\n<p>&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。</p>\n<ul>\n<li><h6 id=\"函数返回Promise对象\"><a href=\"#函数返回Promise对象\" class=\"headerlink\" title=\"函数返回Promise对象\"></a>函数返回Promise对象</h6></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg\"></p>\n<p>&emsp;&emsp;可以看出返回的也是Promise对象。</p>\n<h5 id=\"2-2、await\"><a href=\"#2-2、await\" class=\"headerlink\" title=\"2.2、await\"></a>2.2、await</h5><p>&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png\"></p>\n<p>&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。</p>\n<h5 id=\"2-3、async、await结合使用\"><a href=\"#2-3、async、await结合使用\" class=\"headerlink\" title=\"2.3、async、await结合使用\"></a>2.3、async、await结合使用</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> XXX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAsync</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请求中...&#x27;</span>)</span><br><span class=\"line\">\t\t\t\tresolve(<span class=\"string\">&#x27;resolve return&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\treject(<span class=\"string\">&#x27;reject return&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAsync2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请求中2...&#x27;</span>)</span><br><span class=\"line\">\t\t\t\tresolve(<span class=\"string\">&#x27;resolve return2&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\treject(<span class=\"string\">&#x27;reject return2&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test开始...&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value1 = <span class=\"keyword\">await</span> testAsync();</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value1);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value2 = <span class=\"keyword\">await</span> testAsync2();</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value2);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> value3 = <span class=\"keyword\">await</span> <span class=\"string\">&#x27;test结束...&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\">\n\n<p>&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。</p>\n<p>&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;函数1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;函数2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(fun1());</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(test()); <span class=\"comment\">// async/await函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(fun2());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(fun3());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\">\n\n<p>梳理一下函数的执行过程:</p>\n<ol>\n<li>先执行函数1</li>\n<li>进入test函数并输出开始</li>\n<li>在test函数中遇到await，立即返回Promise对象</li>\n<li>执行函数2</li>\n<li>执行test函数中的testAsync方法</li>\n<li>等到test函数中的testAsync方法执行完后，继续执行testAsync2方法</li>\n<li>test函数结束</li>\n</ol>\n<p>&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<h5 id=\"2-4、async、await异常处理\"><a href=\"#2-4、async、await异常处理\" class=\"headerlink\" title=\"2.4、async、await异常处理\"></a>2.4、async、await异常处理</h5><p>&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try…catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种写法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> something();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种写法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> somethingPromise()</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、总结\"><a href=\"#3、总结\" class=\"headerlink\" title=\"3、总结\"></a>3、总结</h4><p>&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<p>&emsp;&emsp;可以使用try…catch或.catch对async函数进行异常处理。</p>\n"},{"title":"git版本回退","date":"2021-10-07T09:55:22.000Z","_content":"\n对于git版本的回退，我们一般会用到如下两个命令：\n\n- git reset\n- git revert\n\n这两个命令有什么区别呢？\n\n##### 1、git reset\n\n假设有如下几个提交:\n\n![](https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png)\n\n执行如下命令\n\n```js\ngit reset --hard a0fvf8\n```\n\n命令执行之后，HEAD指针就会移动到B提交下\n\n![](https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png)\n\n此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：\n\n```js\ngit push -f\n```\n\n这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。\n\n##### 2、git revert\n\n通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。\n\n用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）\n\n```js\ngit revert 5lk4er\ngit revert 76sdeb\n```\n\n![](https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png)\n\n如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退\n\n```js\ngit revert OLDER_COMMIT^..NEWER_COMMIT\n```\n\n这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循","source":"_posts/git版本回退.md","raw":"---\ntitle: git版本回退\ndate: 2021-10-07 17:55:22\ntags:\ncategories: git\n---\n\n对于git版本的回退，我们一般会用到如下两个命令：\n\n- git reset\n- git revert\n\n这两个命令有什么区别呢？\n\n##### 1、git reset\n\n假设有如下几个提交:\n\n![](https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png)\n\n执行如下命令\n\n```js\ngit reset --hard a0fvf8\n```\n\n命令执行之后，HEAD指针就会移动到B提交下\n\n![](https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png)\n\n此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：\n\n```js\ngit push -f\n```\n\n这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。\n\n##### 2、git revert\n\n通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。\n\n用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）\n\n```js\ngit revert 5lk4er\ngit revert 76sdeb\n```\n\n![](https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png)\n\n如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退\n\n```js\ngit revert OLDER_COMMIT^..NEWER_COMMIT\n```\n\n这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循","slug":"git版本回退","published":1,"updated":"2022-01-14T12:45:05.964Z","_id":"ckxnaa6ew00060gfz0bupa2sk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对于git版本的回退，我们一般会用到如下两个命令：</p>\n<ul>\n<li>git reset</li>\n<li>git revert</li>\n</ul>\n<p>这两个命令有什么区别呢？</p>\n<h5 id=\"1、git-reset\"><a href=\"#1、git-reset\" class=\"headerlink\" title=\"1、git reset\"></a>1、git reset</h5><p>假设有如下几个提交:</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png\"></p>\n<p>执行如下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard a0fvf8</span><br></pre></td></tr></table></figure>\n\n<p>命令执行之后，HEAD指针就会移动到B提交下</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png\"></p>\n<p>此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。</p>\n<h5 id=\"2、git-revert\"><a href=\"#2、git-revert\" class=\"headerlink\" title=\"2、git revert\"></a>2、git revert</h5><p>通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。</p>\n<p>用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert 5lk4er</span><br><span class=\"line\">git revert 76sdeb</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png\"></p>\n<p>如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert OLDER_COMMIT^..NEWER_COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循</p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<p>对于git版本的回退，我们一般会用到如下两个命令：</p>\n<ul>\n<li>git reset</li>\n<li>git revert</li>\n</ul>\n<p>这两个命令有什么区别呢？</p>\n<h5 id=\"1、git-reset\"><a href=\"#1、git-reset\" class=\"headerlink\" title=\"1、git reset\"></a>1、git reset</h5><p>假设有如下几个提交:</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png\"></p>\n<p>执行如下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard a0fvf8</span><br></pre></td></tr></table></figure>\n\n<p>命令执行之后，HEAD指针就会移动到B提交下</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png\"></p>\n<p>此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。</p>\n<h5 id=\"2、git-revert\"><a href=\"#2、git-revert\" class=\"headerlink\" title=\"2、git revert\"></a>2、git revert</h5><p>通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。</p>\n<p>用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert 5lk4er</span><br><span class=\"line\">git revert 76sdeb</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png\"></p>\n<p>如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert OLDER_COMMIT^..NEWER_COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循</p>\n"},{"title":"js中一些好用的数组方法","date":"2021-10-04T10:30:25.000Z","_content":"\n##### 1、some()\n\n**语法：**\n\n```js\narray.some(function(currentValue,index,arr),thisValue)\n```\n\n```js\n//把10修改成20\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some(function (currentValue, index) {\n  if (currentValue === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n\n//把10修改成20 箭头函数\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some((item, index) => {\n  if (item === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n```\n\n##### 2、every()\n\n**语法：**\n\n```js\narray.every(function(currentValue,index,arr), thisValue)\n```\n\n```js\n//判断每个元素的值是否都大于4\nvar ages = [5, 32, 7, 10, 33, 12, 40];\n\nvar res = ages.some(function (currentValue) {\n  return currentValue > 4\n})\nconsole.log(res);\n//输出：true\n\n//箭头函数\nvar res = ages.some(item => item > 4)\nconsole.log(res);\n//-------------------------\nvar arr = [ 1, 2, 3, 4, 5, 6 ]; \n\nvar every = arr.every( function( val, index, arr){\n    console.log( 'val：' + val); //打印1，不会打印2、3、4、5、6\n\n    return val > 4; \n}); \n\nconsole.log(every); //返回false\n```\n\n##### 3、reduce()\n\n**语法：**\n\n```js\narray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\ntotal：必需。初始值, 或者计算结束后的返回值。\ncurrentValue：\t必需。当前元素\ncurrentIndex：可选。当前元素的索引\narr：可选。当前元素所属的数组对象。\ninitialValue：可选。传递给函数的初始值\n```\n\n```js\n//计算所有元素的和\nvar numbers = [15.5, 2.3, 1.1, 4.7];\nvar res = numbers.reduce(function (total, currentValue) {\n  return total += currentValue\n}, 0)\n\nconsole.log(res);\n//23.6\n\n//计算大于4的元素的和\nvar result = numbers.filter(item => item > 4).reduce((total, item) => total += item, 0)\nconsole.log(result);\n//20.2\n```\n\n##### 4、includes()\n\n**语法：**\n\n```js\narr.includes(searchElement)\narr.includes(searchElement, fromIndex)\n```\n\n```js\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n","source":"_posts/js中一些好用的数组方法.md","raw":"---\ntitle: js中一些好用的数组方法\ndate: 2021-10-04 18:30:25\ntags: 数组方法\ncategories: javaScript\n---\n\n##### 1、some()\n\n**语法：**\n\n```js\narray.some(function(currentValue,index,arr),thisValue)\n```\n\n```js\n//把10修改成20\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some(function (currentValue, index) {\n  if (currentValue === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n\n//把10修改成20 箭头函数\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some((item, index) => {\n  if (item === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n```\n\n##### 2、every()\n\n**语法：**\n\n```js\narray.every(function(currentValue,index,arr), thisValue)\n```\n\n```js\n//判断每个元素的值是否都大于4\nvar ages = [5, 32, 7, 10, 33, 12, 40];\n\nvar res = ages.some(function (currentValue) {\n  return currentValue > 4\n})\nconsole.log(res);\n//输出：true\n\n//箭头函数\nvar res = ages.some(item => item > 4)\nconsole.log(res);\n//-------------------------\nvar arr = [ 1, 2, 3, 4, 5, 6 ]; \n\nvar every = arr.every( function( val, index, arr){\n    console.log( 'val：' + val); //打印1，不会打印2、3、4、5、6\n\n    return val > 4; \n}); \n\nconsole.log(every); //返回false\n```\n\n##### 3、reduce()\n\n**语法：**\n\n```js\narray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\ntotal：必需。初始值, 或者计算结束后的返回值。\ncurrentValue：\t必需。当前元素\ncurrentIndex：可选。当前元素的索引\narr：可选。当前元素所属的数组对象。\ninitialValue：可选。传递给函数的初始值\n```\n\n```js\n//计算所有元素的和\nvar numbers = [15.5, 2.3, 1.1, 4.7];\nvar res = numbers.reduce(function (total, currentValue) {\n  return total += currentValue\n}, 0)\n\nconsole.log(res);\n//23.6\n\n//计算大于4的元素的和\nvar result = numbers.filter(item => item > 4).reduce((total, item) => total += item, 0)\nconsole.log(result);\n//20.2\n```\n\n##### 4、includes()\n\n**语法：**\n\n```js\narr.includes(searchElement)\narr.includes(searchElement, fromIndex)\n```\n\n```js\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n","slug":"js中一些好用的数组方法","published":1,"updated":"2022-01-14T12:45:42.581Z","_id":"ckxnaa6ex00080gfz71zhekym","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"1、some\"><a href=\"#1、some\" class=\"headerlink\" title=\"1、some()\"></a>1、some()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>),<span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把10修改成20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\">ages.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">currentValue, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentValue === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    ages[index] = <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把10修改成20 箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\">ages.some(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    ages[index] = <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、every\"><a href=\"#2、every\" class=\"headerlink\" title=\"2、every()\"></a>2、every()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断每个元素的值是否都大于4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = ages.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">currentValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">4</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = ages.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"><span class=\"comment\">//-------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ]; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> every = arr.every( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> val, index, arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;val：&#x27;</span> + val); <span class=\"comment\">//打印1，不会打印2、3、4、5、6</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> val &gt; <span class=\"number\">4</span>; </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(every); <span class=\"comment\">//返回false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、reduce\"><a href=\"#3、reduce\" class=\"headerlink\" title=\"3、reduce()\"></a>3、reduce()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total, currentValue, currentIndex, arr</span>), <span class=\"title\">initialValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">total</span>：必需。初始值, 或者计算结束后的返回值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentValue</span>：\t必需。当前元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentIndex</span>：可选。当前元素的索引</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">arr</span>：可选。当前元素所属的数组对象。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">initialValue</span>：可选。传递给函数的初始值</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//计算所有元素的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">15.5</span>, <span class=\"number\">2.3</span>, <span class=\"number\">1.1</span>, <span class=\"number\">4.7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">total, currentValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total += currentValue</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"><span class=\"comment\">//23.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//计算大于4的元素的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = numbers.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">4</span>).reduce(<span class=\"function\">(<span class=\"params\">total, item</span>) =&gt;</span> total += item, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//20.2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、includes\"><a href=\"#4、includes\" class=\"headerlink\" title=\"4、includes()\"></a>4、includes()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.includes(searchElement)</span><br><span class=\"line\">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"1、some\"><a href=\"#1、some\" class=\"headerlink\" title=\"1、some()\"></a>1、some()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>),<span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把10修改成20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\">ages.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">currentValue, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentValue === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    ages[index] = <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把10修改成20 箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\">ages.some(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    ages[index] = <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ages);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、every\"><a href=\"#2、every\" class=\"headerlink\" title=\"2、every()\"></a>2、every()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断每个元素的值是否都大于4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ages = [<span class=\"number\">5</span>, <span class=\"number\">32</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">33</span>, <span class=\"number\">12</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = ages.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">currentValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">4</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = ages.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"><span class=\"comment\">//-------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ]; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> every = arr.every( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> val, index, arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">&#x27;val：&#x27;</span> + val); <span class=\"comment\">//打印1，不会打印2、3、4、5、6</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> val &gt; <span class=\"number\">4</span>; </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(every); <span class=\"comment\">//返回false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、reduce\"><a href=\"#3、reduce\" class=\"headerlink\" title=\"3、reduce()\"></a>3、reduce()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total, currentValue, currentIndex, arr</span>), <span class=\"title\">initialValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">total</span>：必需。初始值, 或者计算结束后的返回值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentValue</span>：\t必需。当前元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentIndex</span>：可选。当前元素的索引</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">arr</span>：可选。当前元素所属的数组对象。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">initialValue</span>：可选。传递给函数的初始值</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//计算所有元素的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">15.5</span>, <span class=\"number\">2.3</span>, <span class=\"number\">1.1</span>, <span class=\"number\">4.7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">total, currentValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total += currentValue</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"><span class=\"comment\">//23.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//计算大于4的元素的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = numbers.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">4</span>).reduce(<span class=\"function\">(<span class=\"params\">total, item</span>) =&gt;</span> total += item, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//20.2</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、includes\"><a href=\"#4、includes\" class=\"headerlink\" title=\"4、includes()\"></a>4、includes()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.includes(searchElement)</span><br><span class=\"line\">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"js函数柯里化","date":"2021-10-12T14:05:48.000Z","_content":"\n&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。\n\n&emsp;&emsp;如何实现add(1)(2)(3)(4)=10\n\n```js\nfunction add(){\n\t// 将传入的不定参数转为数组对象\n\tvar _args = Array.prototype.slice.call(arguments);\n\tvar _adder = function(){\n\t\t_args.push(...arguments)\n\t\treturn _adder\n\t}\n\t// toString隐形转换的特性\n\t_adder.toString = function(){\n\t\treturn _args.reduce((a,b) => {\n\t\t\treturn a + b\n\t\t}, 0)\n\t}\n\treturn _adder\n}\nconsole.log(add(1,2,3)) // 6\nconsole.log(add(1)(2)(3)) // 6\n```\n\n","source":"_posts/js函数柯里化.md","raw":"---\ntitle: js函数柯里化\ndate: 2021-10-12 22:05:48\ntags: js函数柯里化\ncategories: javaScript\n---\n\n&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。\n\n&emsp;&emsp;如何实现add(1)(2)(3)(4)=10\n\n```js\nfunction add(){\n\t// 将传入的不定参数转为数组对象\n\tvar _args = Array.prototype.slice.call(arguments);\n\tvar _adder = function(){\n\t\t_args.push(...arguments)\n\t\treturn _adder\n\t}\n\t// toString隐形转换的特性\n\t_adder.toString = function(){\n\t\treturn _args.reduce((a,b) => {\n\t\t\treturn a + b\n\t\t}, 0)\n\t}\n\treturn _adder\n}\nconsole.log(add(1,2,3)) // 6\nconsole.log(add(1)(2)(3)) // 6\n```\n\n","slug":"js函数柯里化","published":1,"updated":"2022-01-14T12:44:41.701Z","_id":"ckxnaa6ex00090gfzcnl82hgk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。</p>\n<p>&emsp;&emsp;如何实现add(1)(2)(3)(4)=10</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将传入的不定参数转为数组对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _adder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t_args.push(...arguments)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _adder</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// toString隐形转换的特性</span></span><br><span class=\"line\">\t_adder.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _args.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _adder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)) <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<p>&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。</p>\n<p>&emsp;&emsp;如何实现add(1)(2)(3)(4)=10</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将传入的不定参数转为数组对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _adder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t_args.push(...arguments)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _adder</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// toString隐形转换的特性</span></span><br><span class=\"line\">\t_adder.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _args.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _adder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)) <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue3对比vue2","date":"2021-11-02T08:55:26.000Z","_content":"\n##### 使用vue-cli4.0创建项目\n\n先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0\n\n**安装**vue-cli npm install -g @vue/cli\n\n**更新**vue-cli npm update -g @vue/cli\n\n**创建项目：**\n\nvue create vue3-demo\n\ncd vue3-demo\n\nyarn serve\n\n**升级vue2项目**\n\nyarn add vue-next\n\n##### 创建vue3项目-vite方式\n\nnpm init vite-app <project-name>\n\ncd <project-name>\n\nyarn\n\nyarn dev\n\n\n\n**vite**是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动\n\n- 快速的冷启动，不需要等待打包操作\n- 即时的热模块更新，替换性能和模块数量的解耦让更新飞起\n- 真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变\n\n##### 生命周期的变化\n\n| vue2.x          | vue3.x            |\n| --------------- | ----------------- |\n| beforeCreate    | 移除(setup)       |\n| created         | 移除(setup)       |\n| beforeMount     | onBeforeMount     |\n| mounted         | onMounted         |\n| beforeUpdate    | onBeforeUpdate    |\n| updated         | onUpdated         |\n| beforeUnmounte  | onBeforeUnmounte  |\n| unmounted       | onUnmounted       |\n| errorCaptured   | onErrorCaptured   |\n| renderTracked   | onRenderTracked   |\n| renderTriggered | onRenderTriggered |\n\n```javascript\nimpor { onMounted } from 'vue';\nexport default {\n\tsetup(){\n\t\tonMounted(() => {\n\t\t\tconsole.log('component is mounted')\n\t\t})\n\t}\n}\n```\n\n##### main.js中变化 新增全局API: createApp()\n\nvue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例\n\n```javascript\nimport { createApp } from 'vue';\nconst app = createApp({});\n```\n\n##### router.js\n\nvue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。\n\n```javascript\nimport { createRouter, createWebHashHistory } from 'vue-router';\n\nconst routes = [\n\t{\n\t\tname: 'homepage',\n\t\tpath: '/homepage',\n\t\tcomponent: () => import('../views/homepage/index.vue')\n\t}\n];\n\nconst router = createRouter({\n\thistory: createWebHashHistory(),\n\troutes\n})\n\nexport default router;\n```\n\n##### vuex\n\nvue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。\n\n```javascript\nimport { createStore } from 'vuex';\n\nexport default createStore({\n\tstate: {\n\t\n\t},\n\tgetters: {\n\t\n\t},\n\tmutations: {\n\t\n\t},\n\tactions: {\n\t\n\t}\n})\n```\n\n##### 应用配置\n\n```javascript\nVue.config\t\t\t\t\t->\tapp.config\n\nVue.config.ignoredElements\t->\tapp.config.ignoredElements\t\n\nVue.component\t\t\t\t->\tapp.component\t\n\nVue.directive\t\t\t\t->\tapp.directive\t\n\nVue.mixin\t\t\t\t\t->\tapp.mixin\t\n\nVue.use\t\t\t\t\t\t->\tapp.use\t\n```\n\nconfig: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。\n\n```javascript\nconst app = Vue.createApp({});\napp.config = {...}\n```\n\n1. devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true\n\n2. errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) => {}\n\n3. warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) => {};\n\n4. globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.\n\n   ```javascript\n   // Vue2.x\n   Vue.prototype.name = 'zhang_san'\n   // Vue3.x\n   app.config.globalProperties.name = 'zhang_san'\n   app.component('child-component', {\n   \tmounted(){\n   \t\tconsole.log(this.name)\n   \t}\n   })\n   ```\n\n5. isCustomElement (类型: (tag: string) => boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag => tag.startsWith('ion');\n\n##### 挂载应用程序\n\n```javascript\nimport { createApp } from 'vue';\nimport App from './App.vue'; \nconst app = createApp(App);\napp.mount( #app'); \n```\n\n##### 注册全局组件\n\n```javascript\nimport { createApp } from 'vue';\nconst app = createApp({});\n// myComponent为组件实例\napp.component('my-component, myComponent);\n//重置组件\nconst MyComponent = app.component('my-component', {});\n```\n\n##### 新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\n\n参数: Object | () => Object.\n\n概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。\n\n用例：\n\n```javascript\nimport { createApp } from 'vue' ;\n//全局注入数据\nconst app = createApp({\n\tprocide: {\n\t\tuser: 'zhang_san'\n\t}\n});\n// 获取数据\napp.component(‘my-component', {\n\tinject: [ 'user'],\n\tdata() {...}\n});\n```\n\n##### 全局方法\n\n```javascript\n// Vue2.x\nimport Vue from 'vue';\nVue.nextTick(()=>{ ... })\n// 或者\nexport default {\n\t...\n\tthis.$nextTick(()=>{ ... })\n\t...\n}\n\n// Vue3.x\nimport { nextTick } from 'vue';\nexport default {\n\t...\n\tnextTick(()=>{ ... })\n\t...\n}\n```\n\n##### 自定义指令：directive\n\nVue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）\n\n1. bind\t\t\t\t\t\t\t->\tbeforeMount（挂载前）\n2. inserted\t\t\t\t\t\t->\tmounted（挂载后）\n3. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUpdate（新增，更新前）\n4. update\t\t\t\t\t\t\t->\t删除\n5. componentUpdate\t\t->\tupdate（更新后）\n6. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUnmounted（新增，卸载前）\n7. unbind\t\t\t\t\t\t\t->\tunmounted（卸载后）\n\n##### 跨组件通讯\n\nvue2.x eventBus\n\nVue3.x 中全局事件总成将使用mitt来实现跨组件通讯。\n\n使用**mitt**之前先安装mitt模块**npm install --save mitt**\n\n```javascript\nimport mitt from 'mitt'\nconst VueEvent = mitt()\n\nexport default VueEvent;\n```\n\n\n\n```javascript\n<template>\n\t<div>\n\t\t<button @click=\"doLogin\">父子组件传值</button>\n\t</div>\n</template>\n\n<script>\nimport VueEvent from '../model/event'\n\nexport default {\n\tdata(){\n\t\treturn {}\n\t},\n\tmethods:{\n\t\tdoLogin(){\n\t\t\tVueEvent.emit('login')\n\t\t}\n\t}\n}\n</script>\n```\n\n```javascript\n<template>\n用户登录组件\n</template>\n\n<script>\nimport VueEvent from '../model/event'\nexport default {\n\tmounted(){\n\t\tVueEvent.on('login',() => {\n\t\t\talert('doLogin')\n\t\t})\n\t}\n}\n</script>\n```\n\n##### Vue3.x组件自定义事件验证\n\n父组件\n\n```javascript\n<template>\n\t<div>\n\t\t<login @submit=\"getChild\"></login>\n\t</div>\n</template>\n\n<script>\nimport Login from \"./Login\"\nexport default {\n\tdata(){\n\t\treturn {\n\t\t\ttitle: 'hello vue'\n\t\t}\n\t},\n\tcomponents:{\n\t\tLogin\n\t},\n\tmethods:{\n\t\tgetChild(data){\n\t\t\talert(data)\n\t\t}\n\t}\n}\n</script>\n```\n\n子组件\n\n```javascript\n<template>\n\t<input type=\"text\" v-model=\"username\" />\n\t<br>\n\t<input type=\"text\" v-model=\"password\" />\n\t<br>\n\n\t<button @click=\"run\">通过广播方式实现子组件给父组件传值</button>\n</template>\n\n<script>\nexport default {\n\t// 建议定义所有发出的事件，以便更好地记录组件应该如何工作\n\temits: {\n\t\tsubmit :({\n\t\t\tusername,\n\t\t\tpassword\n\t\t}) => {\n\t\t\tif (username && password) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"传入的参数不能为空\")\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\tdata(){\n\t\treturn {\n\t\t\tusername: '张三',\n\t\t\tpassword: ''\n\t\t}\n\t},\n\tmethods:{\n\t\trun(){\n\t\t\tthis.$emit('submit',{\n\t\t\t\tusername: this.username,\n\t\t\t\tpassword: this.password\n\t\t\t})\n\t\t}\n\t}\n}\n</script>\n```\n\n##### Vue3.x过滤器\n\n在3.x中，过滤器被删除，不再受支持。建议用方法调用或计算属性替换它们。\n\n```javascript\n<template>\n  <div>\n    <h1>Bank Account Balance</h1>\n    <p>{{ accountBalance | currencyUSD }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    accountBalance: {\n      type: Number,\n      require: true\n    }\n  },\n  filters: {\n    currencyUSD(value) {\n      return '$' + value\n    }\n  }\n}\n</script>\n```\n\n```javascript\n<template>\n  <div>\n    <h1>Bank Account Balance</h1>\n    <p>{{ currencyUSD }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    accountBalance: {\n      type: Number,\n      require: true\n    }\n  },\n  computed: {\n    currencyUSD() {\n      return '$' + this.accountBalance\n    }\n  }\n}\n</script>\n```\n\n##### 多根节点组件\n\nVue2.x\n\n```javascript\n<template>\n  <div>\n    <header></header>\n    <main></main>\n    <footer></footer>\n  </div>\n</template>\n```\n\nVue3.x中可以使用多个根节点\n\n```javascript\n<template>\n  <header>...</header>\n  <main v-bind=\"$attrs\">...</main>\n  <footer>...</footer>\n</template>\n```\n\n##### 按键修饰符\n\nVue2.x\n\n```javascript\n<input v-on:keyup.13=\"submit\">\n<input v-on:keyup.enter=\"submit\">\nVue.config.keyCode= { f1: 112 }\n```\n\nVue3.x 别名支持任意键\n\n```javascript\n<input v-on:keyup.delete=\"cancel\">\n<input v-on:keyup.f1=\"cancel\">\n```\n\n##### 渲染功能render函数\n\nVue2.x\n\n```javascript\nexport default {\n  render(h){\n    return h('div')\n  }\n}\n```\n\nVue3.x\n\n```javascript\nimport { h } from 'vue'\nexport default {\n  render(){\n    return h('div', {class: 'red'}, 'hello, Vue3.x!')\n  }\n}\n```\n\n##### Vue3更好用的v-model指令\n\n1、概述：数据双向绑定\n\n2、回顾：在Vue2.x中，v-model进行数据双向绑定（语法糖）的原理\n\n```javascript\n<my-component v-model=\"msg\"></my-components>\n<!-- 等价于 -->\n<my-component :value=\"msg\" @input=\"msg=$event\"></my-components>\n\n// 组件中接收绑定数据和触发数据改变\nprops:{ msg: String } // 获取数据\nthis.$emit('input', 'newValue') // 触发事件并传值\n```\n\n用于自定义组件时，v-model的prop和事件默认名称已更改：\n\nprop: value -> modelValue\n\nevent: input -> update:modelValue\n\n即\n\n```javascript\n<xxComponent v-model=\"varA\" />\n```\n\n等价于\n\n```javascript\n<xxComponent :modelValue=\"varA\" @update:modelValue=\"varA = $event\" />\n```\n\n且在Vue2.x中不能绑定多个v-model\n\n3、用例：Vue3.x重写了v-model的实现方式以适用绑定多个v-model\n\n①：单个数据实现数据双向绑定\n\n```javascript\n<my-component v-model=\"msg\"></my-components>\n<!-- 等价于 -->\n<myComponent :modelValue=\"msg\" @update:modelValue=\"msg = $event\" />\n\n// 组件中接收绑定数据和触发数据改变\nprops:{ modelValue: String } // 获取数据\nsetup(props, {emit}){\n  emit('update:modelValue', 'newValue') // 触发事件并传值\n}\n```\n\n②：多个数据实现数据双向绑定\n\n```javascript\n<my-component v-model:msg=\"msg\" v-model:name=\"name\"></my-components>\n<!-- 等价于 -->\n<myComponent :msg=\"msg\" @update:msg=\"msg = $event\" :name=\"name\" @update:name=\"name = $event\"/>\n\n// 组件中接收绑定数据和触发数据改变\nprops:{ msg: String, name: String } // 获取数据\nsetup(props, {emit}){\n  emit('update:msg', 'newValue') // 触发事件并传值\n  emit('update:name', 'newValue') // 触发事件并传值\n}\n```\n\n###### 修饰符\n\n支持vue2.x的所有修饰符\n\n- .lazy 取代input监听change事件\n- .number 输入字符串转为有效的数字\n- .trim 输入首尾空格过滤\n\n###### 支持自定义修饰符\n\n例子：自定义prop名+自定义修饰符\n\n**父组件：**\n\n```\n<zi v-model:content.camelCase=\"word\" />\n```\n\n子组件较复杂，用组合式API来演示。\n\ndefineProps函数的写法就是这样，先写content，然后写contentModifiers，这是Vue的规定，必须是prop名跟Modefiers字串。contentModifiers必须是这样一个函数。\n\nuseContext和getCurrentInstance在开发中会经常用到。useContext()能拿到几个变量，包括props变量。getCurrentInstance()能拿到组件实例this，用来执行.emit()\n\ncontent必须是计算变量，否则传入prop新值之后，子组件无法感知\n\nemitCamelCase方法里，if语句是为了确认修饰符正确\n\n```javascript\n<template>\n  <div>\n    <input type=\"text\" :value=\"content\" @input=\"emitCamelCase\">\n  </div>\n</template>\n\n<script setup>\nimport { useContext, getCurrentInstance, defineProps, computed } from 'vue'\ndefineProps({\n  content: String,\n  contentModifiers: {\n    default: () => ({})\n  }\n})\nconst ctx = useContext()\nconst instance = getCurrentInstance()\nlet content = computed(() => { ctx.props.content })\nfunction emitCamelCase(e){\n  if (ctx.props.contentModifiers.camelCase) {\n    instance.emit(\"update:content\", e.target.value.replace(/_./g, (a) => {\n      return a[1].toUpperCase()\n    }))\n  }\n}\n</script>\n```\n\n##### vue3 v-is指令\n\n```javascript\n// vue的动态组件中使用is\n<component is=\"foo\"></component>\n// vue2.x --> is的值指的是要渲染的组件的名称；渲染foo组件 \n// vue3.x --> is的值指的是要渲染的组件的名称；渲染foo组件 \n\n// 一般组件中使用is\n<user-edit is=\"foo\"></user-edit>\n// vue2.x --> is的值指的是要江染的组件的名称;渲染foo组件\n// vue3.x --> 渲染user- edit组件; is将作为组件的prop进行值的传递\n\n// 一般元素中使用is\n<tr is=\"val\"></tr>\n// vue2.x ---> is的值会被编译为boolean; 且元素会被动态加载或销毁(会触发transition效果)\n// vue3.x ---> is的值为any; 值的变化不会造成元素任何变化(丢失了vue2中元素上使用的s的功能，因此vue3中引入了新的指令v-is)\n\n// vue3.x的新指令 v-is\n<tr v-is=\"val\"></tr>\n// 与vue2. x中-般元素上使用is的效果-致\n```\n\n##### v-for中使用ref\n\n```javascript\n// vue2.x \n<p v-for=”item in renderData\" :key=\"item.name\" ref=”nodes\">{{item.name}}</p>\nconsole.log(this.$refs.nodes) // 返回所有循环的p元素节点\n```\n\n```javascript\n// vue3.x\n//如果还是按照Vue2.x的方式\n<p v-for=\"item in renderData\" :key= \"item.name\" ref=\"nodes\"></p>\n\nconsole.log(this.$refs.nodes) //此时只能得到循环后最后一个P元素节点\n\n// Vue3.x中，使用函数处理v-for中的ref;且用变量单独存储。\n<p v-for=\"item in renderData\" :key=\" item.name\" ref=\"handleNodes\"></p>\n\nsetup(){\n  const data = reactive({\n    nodes: []\n  })\n  const handleNodes = nodeItem => {\n    data.nodes.push(nodeItem)\n  }\n  return {\n    ...toRefs(data)\n  }\n}\n```\n\n##### mixin 的合并行为更改\n\n```javascript\n// mixin\nexport default {\n  data(){\n    return {\n      name: 'zhangsan',\n      age: 20\n    }\n  }\n}\n\n// vue2.x\nexport default {\n  data(){\n    return {\n      age: 30\n    }\n  },\n  mounted(){\n    console.log(this.$data); // {name: 'zhangsan', age: 30}\n    console.log(this.name); // 'zhangsan\n    console.log(this.age); // 30\n  }\n}\n\n// vue3.x\nexport default {\n  data(){\n    return {\n      age: 30\n    }\n  },\n  mounted(){\n    console.log(this.$data); // {age: 30}\n    console.log(this.name); // 'zhangsan\n    console.log(this.age); // 30\n  }\n}\n```\n\n**得出结论：**\n\n1、与vue2.x一样会覆盖掉mixin中相同的响应属性。\n\n2、vue3.x中当前实例的$data是不会包含mixin中定义的响应属性\n\n##### v-if和v-for优先级\n\n当v-if和v-for同时作用于一个元素上时：\n\nVue2.x中v-for的优先级会高于v-if;\n\nVue3.x中v-if的优先级会高于v-for;\n\n使用禁忌: Vue3.x中不能将v -for和v-if放在同-个元素上。只能使用v-for嵌套v -if使用\n\n使用建议:官方建议使用计算属性来处理,即提高性能，又能兼容Vue3.x。\n\n##### $attrs和$listener的融合\n\n我们知道，在vue2中我们使用v-bind=\"$attrs\", v-on=\"$listenner\"来将数据和事件做一个承 上启下的作用,但是在vue3中,首先是删除了v-on指令，其次是发现这两个组件的属性过于累赘，所以在当前版本中将$attrs 和$listenner他们的功能进行了融合, $listenner 现在已作为$attrs 的其中一部分进行传递,所以只需要在组建上指定v-bind=\"$attrs\"，那么将同时拥有传值和传递事件的功能。\n\n##### setup说明\n\n- setup\n\nsetup有两个参数props和context\n\n- props：接收父组件传的值\n\n- context：vue3.x里面没有this，提供了一个context上下文属性，你可以通过这个属性去获取进行一些vue2.x用this实现的操作\n\n  ```javascript\n  export default {\n    name: '',\n    props: {\n      title: {\n        type: String,\n        default: \"\"\n      }\n    },\n    setup(props, context){\n      console.log(props.title);\n      \n      context.attrs\n      context.slots\n      context.parent\n      context.root\n      context.emit\n      context.refs\n    }\n  }\n  ```\n\n在setup中定义的变量或方法，都必须通过**return** {xxx,xxx} 暴露出去，外界才能使用\n\n**注意：**props为响应式代理，如果使用es6的数据解构操作，将使得结构后的数据失去响应式（即不能实时获取到父组件传来的值）\n\n**扩展：**父组件通过属性传的值在子组件中的各个部分的获取：\n\n1. props：通过父传子的方式直接获取到值\n2. setup(props, context){}方法中的props只能拿到选项props中已经定义的属性\n3. setup(props, {attrs, emit, slots}){}方法中的attrs只能拿到未在选项props中定义的属性\n4. 通过{proxy} = getCurrentInstance(); proxy.attrs; 组件实例中的attrs也只能拿到未在选项props中定义的属性\n\n**context：**非响应式的对象，包含了组件暴露的三个property\n\n1. context.attrs：传入组件中但是未被props接收的对象\n2. context.emit：用于触发当前组件实例上的传值事件\n3. context.slots：用来访问被插槽分发的内容（一般用于使用渲染函数来书写一个组件时）\n\n**return()**：若需要在当前组件视图中或其它组件中使用当前组件创建的响应式变量及方法，则需要导出相应的响应式变量及方法\n\n```javascript\n<template>\n  <p>{{name}}</p>\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, context){\n    const name = ref(\"zhang_san\")\n    return { name }\n  }\n}\n</script>\n```\n\nreturn 也有渲染功能\n\n```javascript\n<script>\nimport { ref, h } from 'vue'\nexport default {\n  setup(props, context){\n    return () => h('div', {class: 'red'}, '内容');\n    // <template><div class=\"red\">内容</div></template>\n  }\n}\n</script>\n```\n\n##### 响应式数据对象 reactive\n\n1、概述：函数，创建一个响应式数据对象，响应式会影响到所有的子集嵌套\n\n2、用例：由vue提供，按需引入：import { reactive } from 'vue'\n\n```javascript\n<template>\n  <p>{{user.name}}</p>\n</template>\n\n<script>\nimport { reactive } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    return { user }\n  }\n}\n</script>\n```\n\n##### 延伸方法--readonly只读对象\n\n**readonly()**\n\n1、概述：创建一个只读代理且原对象的任何嵌套属性也将是只读的\n\n2、用例：由vue提供，按需引入：import { readonly } from 'vue'\n\n3、对普通变量创建只读\n\n```javascript\n<script>\nimport { readonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = { name: 'lisi', age: 20}\n    const copy = readonly(user)\n    return { copy }\n  }\n}\n</script>\n\ncopy.age++ // warning! target is readonly\n```\n\n4、对reactive创建只读\n\n```js\n<script>\nimport { reactive, readonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    const copy = readonly(user)\n    return { copy }\n  }\n}\n</script>\n\nuser.age++\t21\ncopy.age++ // warning! target is readonly\n```\n\n##### 延伸方法--isProxy()\n\n1、概述判断对象是否由reactive创建或者是readonly创建的代理\n\n2、用例：由vue提供，按需引入：import { isproxy } from 'vue'\n\n```js\nimport {ref, reactive, readonly, isproxy} from 'vue'\n\n//ref创建\nconst refVal = ref(123)\nisProxy(refVal) // false\n\n//reactive创建\nconst reactiveVal = reactive({age: 20})\nisProxy(reactiveVal) // true\n\n//reactive创建\nconst readonlyVal = readonly(reactiveVal)\nisProxy(readonlyVal) // true\n\n//普通变量\nconst defaultVal = 'default'\nisProxy(defaultVal) // false\n```\n\n##### isReactive()\n\n1、检查对象是否由reactive创建\n\n2、用例：由vue提供，按需引入：import { isReactive } from 'vue'\n\n```js\nimport { reactive, isReactive } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    console.log(isReactive(user)); // true\n  }\n}\n```\n\n还能判断readonly代理的对象是否由reactive创建\n\n```js\nimport { reactive, isReactive, readonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n\n    // 创建普通只读代理\n    const plain = readonly({name: 'lisi'})\n    console.log(isReactive(plain)); // false\n\n    // 创建reactive制度代理\n    const copy = readonly(user)\n    console.log(isReactive(copy)); // true\n  }\n}\n```\n\n##### 延伸方法-- isReadonly()\n\n1、概述：检查代理是否由readonly创建\n\n2、用例：由vue提供，按需引入：import { isReadonly } from 'vue'\n\n```js\nimport { reactive, readonly, isReadonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    const copy = readonly(user)\n    console.log(isReadonly(copy)); // true\n  }\n}\n```\n\n##### 延伸方法--toRaw()\n\n1、概述：返回由reactive或者是readonly代理的原始对象\n\n2、用例：由vue提供，按需引入：import { toRaw } from 'vue'\n\n```js\nimport { reactive, readonly, isProxy, toRaw } from 'vue'\nexport default {\n  setup(props, context){\n    const user = {}\n    const reactiveUser = reactive(user)\n    const readonlyUser = readonly(readonlyUser)\n\n    console.log(toRaw(reactiveUser) === user); // true\n    console.log(toRaw(readonlyUser) === user); // true\n    console.log(isProxy(toRaw(reactiveUser))); // false\n    console.log(isProxy(toRaw(readonlyUser))); // false\n  }\n}\n```\n\n##### 延伸方法--markRaw()\n\n1、概述：标记一个对象，被标记后，该对象永远不会被转换为代理\n\n2、用例：由vue提供，按需引入：import { markRaw } from 'vue'\n\n```js\nimport { markRaw, reactive, isReactive, isProxy } from 'vue'\nexport default {\n  setup(props, context){\n    const user = markRaw({})\n    const reactiveUser = reactive(user)\n    console.log(isReactive(reactiveUser)); // false\n\n    const reactiveUser1 = reactive({ user })\n    console.log(isProxy(toRaw(reactiveUser1))); // true\n    console.log(isProxy(toRaw(reactiveUser1.user))); // false\n  }\n}\n```\n\n##### 延伸方法--shallowReactive()\n\n1、概述：创建一个反应式代理，但只是浅度创建\n\n2、用例：由vue提供，按需引入：import { shallowReactive } from 'vue'\n\n```js\nimport { isReactive, shallowReactive } from 'vue'\nexport default {\n  setup(props, context){\n    const data = shallowReactive({\n      count: 10,\n      content: {\n        age: 20\n      }\n    })\n    data.count++ // 11 逻辑层数据已发生变化,视图重新渲染\n    isReactive(data.content) // 因为data.content属于深度嵌套，未被代理\n    data.content.age++ // 21 逻辑层数据发生变化，但是视图层不会被更新渲染\n  }\n}\n```\n\n##### 延伸方法--shallowReadonly()\n\n1、概述：创建一个只读代理，但只是浅度创建\n\n2、用例：由vue提供，按需引入：import { shallowReadonly } from 'vue'\n\n```js\nimport { isReadonly, shallowReadonly } from 'vue'\nexport default {\n  setup(props, context){\n    const data = shallowReadonly({\n      count: 10,\n      content: {\n        age: 20\n      }\n    })\n    data.count++ // warning! target is readonly.\n    isReadonly(data.content) // 因为data.content属于深度嵌套，未被代理\n    data.content.age++ // 21 深度嵌套未被代理，所以操作成功\n  }\n}\n```\n\n##### 响应式数据-- ref\n\n1、概述：函数，创建并返回一个响应式数据对象，并在此对象上只包含一个.value属性指向该数据值\n\n2、用例：由vue提供，按需引入：import { ref } from 'vue'\n\n```js\n<template>\n  <p>{{name}}</p> \n  <!-- 视图中直接使用即可，不需要.value -->\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, context){\n    const name = ref('zhang_san')\n    console.log(name.value); // 'zhang_san'\n    // 同样需要return返回\n    return { name }\n  }\n}\n</script>\n```\n\n如果使用ref将一个对象创建为响应式代理的话，则该对象会被进行深度响应式创建\n\n```js\n<template>\n  <p>{{data.count}}</p>   <!-- 0 -->\n  <p>{{data.content.age}}</p>   <!-- 10 -->\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, context){\n    const defaultVal = {\n      count: 0,\n      content: {\n        age: 10\n      }\n    }\n    const data = ref(defaultVal)\n    console.log(data.value.count); // 0\n    console.log(data.value.content.age); // 10\n    return { data }\n  }\n}\n</script>\ndata.value.count++ // 1 视图重新渲染\ndata.value.content.age++ // 11 视图重新渲染\n```\n\n##### ref数据能访问到的部分常用方法及延伸方法\n\n###### unref()\n\n1、概述：返回代理原始值，如果参数为ref则返回代理原始值，如果不是ref则返回参数本身\n\n2、用例：由vue提供，按需引入：import { unref } from 'vue'\n\n```js\nimport { unref } from 'vue'\nconst a = ref(1)\nconst b = 'zhang_san'\nconsole.log(unref(a)); // 1\nconsole.log(unref(b)); // 'zhang_san'\n```\n\n###### toRef()\n\n1、概述：可以将reactive创建的代理的某个属性传递出来用ref进行代理\n\n2、用例：由vue提供，按需引入：import { toRef } from 'vue'\n\n```js\nimport { reactive, toRef } from 'vue'\nconst data = reactive({ name: 'zhang_san', age: 20 })\nconst toRefValue = toRef(data, 'age')\n\ntoRefValue.value++ // toRefValue.value 21\nconsole.log(data.age); // 21\n\ndata.age++ // data.age 22\nconsole.log(toRefValue.value); // 22\n```\n\n3、**注意：使用toRef将reactive的属性代理后，属性的值的变化会同时影响toRef后的值和原本的reactive的属性值**\n\n4、实例：在将prop的引用传递给复合函数的时候，toRef将非常有用\n\n```js\nsetup(props){\n\tuserHandler(toRef(props, 'name'))\n\t// 这将使得userHandler拿到的name为响应式代理\n}\n```\n\n###### toRefs()\n\n1、概述：可以将reactive创建的代理的所有属性传递出来用ref进行代理\n\n2、用例：由vue提供，按需引入：import { toRefs } from 'vue'\n\n```js\nimport { reactive, toRefs } from 'vue'\nconst data = reactive({ name: 'zhang_san', age: 20 })\nconst toRefValue = toRefs(data)\n\ntoRefValue.age.value++ // toRefValue.age.value 21\nconsole.log(data.age); // 21\n\ndata.age++ // data.age 22\nconsole.log(toRefValue.age.value); // 22\n```\n\n3、**注意：使用toRefs将reactive的属性代理后，属性的值的变化会同时影响toRef后的对应属性值和原本的reactive的属性值**\n\n4、实例：从组合函数返回响应式对象时，这将很有用，**而不是使用es6数据结构的方式，这样会使reactive的属性失去响应式代理**\n\n```js\nfunction userHandler() {\n  const state = reactive({ name: 'zhang_san', age: 20 })\n  return toRefs(state)\n}\nexport default {\n  setup() {\n    const { name, age } = userHandler()\n    return { name, age }\n  }\n}\n```\n\n###### isRef()\n\n1、概述：判断响应式代理是否为ref所创建\n\n2、用例：由vue提供，按需引入：import { isRef } from 'vue'\n\n```js\nimport { ref, reactive, isRef } from 'vue'\nconst name = ref('zhang_san')\nconst user = reactive({ sex: '男', age: 20 })\n\nconsole.log(isRef(name)); // true\nconsole.log(isRef(user)); // false\n// 应用场景，在获取一个未知的数据对象的值时，如：\nconst newV = isRef(name) ? name.value : name\n```\n\n##### toRefs -- 解构响应式对象数据\n\n```js\n<template>\n  <div>\n    <h1>解构响应式对象数据</h1>\n    <p>UserName: {{username}}</p>\n    <p>Age: {{age}}</p>\n  </div>\n</template>\n\n<script>\nimport { reactive, toRefs } from 'vue'\nexport default {\n  setup(){\n    const user = reactive({\n      username: 'zhang_san',\n      age: 20\n    })\n    return { ...toRefs(user) }\n  }\n}\n</script>\n```\n\n##### reactive和ref的相互作用\n\n1、将ref的数据对象挂载到reactive上时，会把原始的响应数据对象展开为原始值，这样就不需要.value而被直接访问到\n\n```js\nexport default {\n  setup(){\n    const ref1 = ref(0)\n    const reactive1 = reactive({ref1})\n    console.log(reactive1.ref1); // 0\n    reactive1.ref1++\n    console.log(reactive1.ref1); // 1\n    console.log(ref1.value); // 1\n  }\n}\n```\n\n2、新的ref会覆盖旧的ref\n\n```js\nexport default {\n  setup(){\n    const ref1 = ref(0)\n    const reactive1 = reactive({ref1})\n    \n    const ref2 = ref(100)\n    reactive.ref1 = ref2\n    reactive.ref1++\n    \n    console.log(reactive1.ref1); // 101\n    console.log(ref2.value); // 101\n    console.log(ref1.value); // 0\n  }\n}\n```\n\n##### reactive和ref的区别\n\n```js\nimport { reactive, ref } from 'vue'\nexport default {\n  setup(){\n    let num1 = 10\n    let num2 = ref(10)\n    let num3 = reactive(100)\n    console.log(num1); // 定义的纯数字10, 打印结果是一个数字类型的10\n    console.log(num2); // 使用vue3中提供的ref方法定义的值 打印的时候是一个对象\n    console.log(num3); // 使用reactive定义的num3 结果是一个数值类型100\n    return { num1, num2, num3 }\n  }\n}\n```\n\n我们发现使用ref定义的数据，打印结果是一个被对象包裹的响应的数据，使用reactive的方式和纯变量声明的方式打印结果是一样的，这是什么原因呢\n\n我们发现在控制台输出一个警告信息，提示100这个值不能被reactive创建，官方也推荐我们在定义数据的时候，reactive定义复杂的数据类型的数据，ref推荐定义基本数据类型，所以如果要使用reactive第一基本数据类型的话，我们需要在reactive中将数据包裹一下\n\n```js\nlet num3 = reactive({val: 100})\n```\n\n我们在使用reactive定义数据的时候用对象做一层包裹，这样控制台就不会报警告信息了\n\n但是使用reactive定义的数据和ref定义的数据打印结果有一些差异\n\n```js\nlet num2 = ref(10)\nlet num3 = reactive({val: 100})\nconsole.log(num2); // 使用vue3中提供的ref方法定义的值 打印的时候是一个对象\nconsole.log(num3); // 使用reactive定义的num3 结果是一个数值类型100\n```\n\n我们发现ref定义的数据打印结果需要.value才能获取到结果，而reactive则不需要\n\n```js\nlet num2 = ref(10)\nlet num3 = reactive({val:100})\nconsole.log(num2.value) // 10 \nconsole.log(num) // {val:100}\n```\n\n总结：\n\nreactive和ref都是用来定义响应式数据的，reactive更推荐去定义复杂的数据类型，ref更推荐定义基本数据类型\n\nref和reactive本质我们可以简单的理解为ref是对reactive的二次包装，ref定义的数据访问的时候要多一个.value\n\n使用ref定义一本数据类型，ref也可以定义数组和对象\n\n**ref函数仅能监听基本类型的变化，不能监听复杂类型的变化(比如数组，对象)**\n\n##### 计算属性-- computed\n\n1、概述：vue2.x中的计算属性，在vue3.x中以方法的形式使用\n\n2、用例：用例：由vue提供，按需引入：import { computed } from 'vue'\n\n```js\nimport { computed, ref } from 'vue'\nexport default {\n  setup(){\n    const age = ref(20)\n    const userAge = computed(() => `今年${age.value}岁了`)\n    return { userAge }\n  }\n}\n```\n\n带有get和set功能的用法\n\n```js\nimport { computed, ref } from 'vue'\nexport default {\n  setup(){\n    const age = ref(20)\n    const userAge = computed({\n      get: () => `今年${age.value}岁了`,\n      set: val => age.value = age + 1\n    })\n    return { userAge }\n  }\n}\n```\n\n##### 观察者-- watch\n\n1、概述：vue2.x中的响应式变量监听，在vue3.x中以方法的形式使用\n\n2、用例：用例：由vue提供，按需引入：import { watch} from 'vue'\n\n3、监听单一数据\n\n```js\nimport { ref, reactive, computed, watch } from 'vue'\nexport default {\n  setup(props){\n    //ref\n    const age = ref(20)\n    watch(() => age.value, (nv, ov) => { ... })\n\n    // reactive\n    const product = reactive({ name: 'pig', conut: 1})\n    watch(() => product.count, (nv, ov) => { ... })\n\n    // props\n    watch(() => props.msg, (nv, ov) => { ... })\n\n    //computed\n    const userAge = computed(() => `今年${age.value}岁了`)\n    watch(() => userAge.value, (nv, ov) => { ... })\n  }\n}\n```\n\n4、监听对象\n\n```js\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(){\n    //ref\n    const user = ref({ name: 'zhang_san', age: 20 })\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => user.value, (nv, ov) => { ... })\n    // 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)\n    watch(() => user.value, (nv, ov) => { ... }, { deep: true })\n    // 如果我们只需要监听name的值，那么\n    watch(() => user.value.name, (nv, ov) => { ... })\n\n    // reactive\n    const reactiveData = reactive({ user: { name: 'zhang_san', age: 20 }})\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => reactiveData.user, (nv, ov) => { ... })\n    // 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)\n    watch(() => reactiveData.user, (nv, ov) => { ... }, { deep: true })\n    // 如果我们只需要监听name的值，那么\n    watch(() => reactiveData.user.name, (nv, ov) => { ... })\n  }\n}\n```\n\n5、监听数组\n\n```js\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(){\n    //ref\n    const user = ref([\n      { name: 'zhang_san', age: 20 },\n      { name: 'li_si', age: 10 },\n    ])\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => user.value, (nv, ov) => { ... })\n    // 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听\n    watch(() => user.value, (nv, ov) => { ... }, { deep: true })\n    \n    // reactive\n    const reactiveData = reactive({ user: [\n      { name: 'zhang_san', age: 20 },\n      { name: 'li_si', age: 20 },\n    ]})\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => reactiveData.user, (nv, ov) => { ... })\n    // 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听\n    watch(() => reactiveData.user, (nv, ov) => { ... }, { deep: true })\n  }\n}\n```\n\n6、监听多个数组\n\n```JS\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(props){\n    const age = ref(20)\n    const user = ref({ name: 'zhang_san', age: 20 })\n\n    watch([() => age.value, () => user.name], ([newAge, newName], [oldAge, newName]) => { ... })\n  }\n}\n```\n\n7、终止监听\n\n```js\nimport { ref, watch } from 'vue'\nconst age = ref(20)\n// watch监听会返回一个方法\nconst stop = watch(age, (nv, ov) => { ... })\n// 当调用此方法后，该监听就会被移除\nstop()\n```\n\n8、清除watch中无效的异步任务\n\n```js\n<template>\n  <div>\n    <input type=\"text\" v-model=\"keywords\">\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(){\n    const keywords = ref(\"\")\n    //异步任务：打印用户输入的关键词\n    const asyncPrint = val => {\n      return setTimeout(() => {\n        console.log(val);\n      }, 1000)\n    }\n\n    watch(\n      keywords,\n      (keywords, prevKeywords, onCleanup) => {\n        // 执行异步任务，并得到关闭异步任务的 timerId\n        const timerId = asyncPrint(keywords)\n        // 如果 watch 监听被重复了，则会先清除上次未完成的异步任务\n        onCleanup(() => clearTimeout(timerId))\n      },\n      { lazy: true }\n    )\n\n    return { keywords }\n  }\n}\n</script>\n```\n\n##### provide和inject\n\n1、概述：实现嵌套组件树形数据传递与接收\n\n2、使用：由vue提供，按需引入：import { provide, inject } from 'vue'\n\n3、用例\n\n```js\nimport { provide, inject } from 'vue'\n//父组件注入\nconst component = {\n  setup(){\n    provide('name', 'zhang_san')\n    // 如果是需要注入多个值则重复使用provide即可\n  }\n}\n// 子组件接收\nconst children = {\n  setup(){\n    // inject的第二个参数为没有接收到注入的数据时的默认返回值，如果没有，则返回undefined\n    const user = inject('name', 'li_si')\n    // 需要接收多个注入的值也是重复使用inject\n    return { user }\n  }\n}\n```\n\n4、实例：在实际使用过程中，往往我们需要将注入的值实现响应式变化，则需要注入响应式\n\n```js\n//父组件注入\nconst component = {\n  setup(){\n    const user = reactive({ name: 'zhang_san', age: 20 })\n    provide('user', user)\n  }\n}\n// 子组件接收后，如果父组件中的user发生了改变，则子组件中也会发生响应式变化\nconst children = {\n  setup(){\n    const user = inject('user', {})\n    return { user }\n  }\n}\n```\n\n5、注意：**不建议在注入时对响应式变量进行改变(在子组件中改变注入的值)，因为此操作会改变vue的单向数据流，建议采用注入改变其值的方法来对响应式变量进行改变**\n\n```js\nimport { reactive, provide, inject } from 'vue'\n//父组件注入\nconst component = {\n  setup(){\n    const user = reactive({ name: 'zhang_san', age: 20 })\n    function changeHandler(){\n      user.age = 30\n    }\n    provide('user', user)\n    provide('changeHandler', changeHandler)\n  }\n}\n// 子组件接收后，通过调用注入的方法来对响应式变量进行改变\nconst children = {\n  setup(){\n    const user = inject('user', {})\n    const changeHandler = inject('changeHandler')\n    return { user, changeHandler }\n  }\n}\n```\n\n##### template和ref获取元素或组件实例\n\n1、概述：通过ref获取模板元素节点\n\n2：使用：由vue提供，按需引入：import { ref } from 'vue'\n\n3、回顾：options API中是：this.refs.refAdd(获取某个组件)或者this.refs.refDiv(获取某个元素节点)\n\n4、用例：\n\n- 在组件或节点中定义ref属性：add(ref=\"refAdd\")或div(ref=\"refDiv\")\n- 在setup中定义对应ref属性相同的变量名，赋值为任意值即可\n- 访问方式为：refAdd.value或refDiv.value\n\n```js\n<template>\n  <div ref=\"divBox\">content</div>\n</template>\n \n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(){\n    const divBox = ref(null); // <div ref=\"divBox\">content</div>\n    const user = ref(null); // user.value -> null\n    return { divBox }\n  }\n}\n</script>\n```\n\n4、注意：\n\n**①：元素节点对应ref的分配只会在render时进行对比赋值，因此若在setup中未将对应的响应式变量return出来，则不会获取到组件实例或元素节点**\n\n**②：在满足①的前提下，只要在定义变量时变量名称与当前组件中ref属性值相同，则该变量会被统一赋值为组件实例或元素节点，与定义变量时的赋值无关**\n\nsetup的context中访问到refs对象，所以获取组件实例或者元素节点的方式还可以\n\n```js\n<template>\n  <div ref=\"divBox\">content</div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, { refs }){\n    const divBox = refs.divBox;\n    return { divBox }\n  }\n}\n</script>\n```\n\n##### vue3.x中的emits选项\n\nvue3.x组件自定义事件实现子组件给父组件传值\n\n注意：vue官方推荐你始终使用**kebab-case**的事件名\n\n子组件\n\n```js\n<template>\n  <button @click=\"run\">通过广播方式实现子组件给父组件传值</button>\n</template>\n\n<script>\nexport default {\n  // 建议定义所有发出的事件，以便更好地记录组件应该如何工作、\n  emit: ['run-parent'],\n  data(){\n    return {}\n  },\n  methods: {\n    run(){\n      this.$emit(\"run-parent\", \"传给爸爸\")\n    }\n  },\n}\n</script>\n```\n\n1、概述：当前组件的通过emit的事件列表\n\n2：类型：Array|Object\n\n3、作用：vue3.0中使用emit发起事件时会要求当前组件记录emit事件(没有则控制台会抛出警告)\n\n4、用途：用于记录当前组件emit的事件，当为对象时，则可以验证传入的值是否有效\n\n```js\nsetup(prop, { emit }){\n  const changeOne = val => {\n    emit('on-changeOne', val)\n  }\n  const changeTwo = val => {\n    emit('on-changeTwo', val)\n  }\n}\n```\n\n用法一：数组用法\n\n```js\nexport default {\n  emits: ['on-changeOne', 'on-changeTwo'],\n  setup(){ ... }\n}\n```\n\n用法二：对象用法，当emits为对象时，可以验证事件中的参数是否有效\n\n```js\nexport default {\n  emits: {\n    click: null,\n    'on-changeOne': payload => {\n      if (...) {\n        return true; // 验证通过\n      }\n      console.warn('验证失败！')\n      return false; // 验证失败，控制台打印警告信息“验证失败”\n    },\n    'on-changeTwo': payload => { ... }\n  },\n  setup(){ ... }\n}\n```\n\n##### vue3.x核心值getCurrentInstance\n\n1、概述：一个很重要的方法，获取当前组件的实例、上下文来操作router和vuex等\n\n2、使用：由vue提供，按需引入：import { getCurrentInstance } from 'vue'\n\n```js\nimport { getCurrentInstance } from 'vue'\n// 获取当前组件实例\nconst instance = getCurrentInstance();\n\n// 获取当前组件的上下文，下面两种方式都能获取到组件的上下文\nconst { ctx } = getCurrentInstance(); // 方式一，这种方式只能在开发环境下使用，生产环境下的ctx将访问不到\nconst { proxy } = getCurrentInstance(); // 方式二，此方法在开发环境及生产环境都能放到组件上下文对象(推荐)\n// ctx 中包含了组件中由ref和reactive创建的响应式数据对象，以及以下对象及方法\nproxy.$attrs\nproxy.$data\nproxy.$el\nproxy.$emit\nproxy.$forceUpdate\nproxy.$nextTick\nproxy.$options\nproxy.$parent\nproxy.$props\nproxy.$refs\nproxy.$root\nproxy.$slots\nproxy.$watch\n```\n\n##### vue3.x中我们采用mitt实现全局事件总成\n\n1、前言：由于vue3.x中删除了on和off，因此不能借助于一个单独的vue实例来实现全局事件的发布和订阅与取消订阅(也就是组件通讯)\n\n2、概述：mitt是一个三方库，npm安装：npm install -D mitt\n\n3、使用：我们同样使用插件的方式将mitt集成到vue中\n\n4、mitt对象：\n\n- all (map对象)：包含了所有订阅的事件名称，及对应的处理方法数组\n- emit (方法)：触发事件，参数为（事件名(方法名), 携带的参数），当前携带的参数只能为一个，不能为多个\n- on (方法)：创建事件订阅，参数为(事件名，处理方法)\n- off (方法)：取消事件订阅，参数为(事件名，处理方法)\n\n5、全局事件总成搭建\n\n```js\nimport _ from 'lodash'\nimport mitt from 'mitt'\nexport default {\n  install(Vue, options){\n    const _emitter = mitt()\n\n    // 全局发布(在vue全局方法中自定义$pub发布方法)\n    // 这里做了$pub方法能够携带多个参数的处理，方便我们在业务中触发事件时带多个参数\n    Vue.config.globalProperties.$pub = (...args) => {\n      _emitter.emit(_.head(args), args.slice(1))\n    }\n\n    // 全局订阅(在vue全局方法中自定义$sub订阅方法)\n    Vue.config.globalProperties.$sub = function(event, callback){\n      Reflect.apply(_emitter.on, _emitter, _.toArray(arguments))\n    }\n\n    // 取消订阅\n    Vue.config.globalProperties.$unsub = function(event, callback){\n      Reflect.apply(_emitter.off, _emitter, _.toArray(arguments))\n    }\n  }\n}\n```\n\n6、组件实例中使用：\n\n**全局事件发布**\n\n```js\n<template>\n  <div class=\"child\">\n    <button @click=\"pubHandler\">发起事件</button>\n  </div>\n</template>\n\n<script>\nimport { onMounted, getCurrentInstance } from 'vue'\nexport default {\n  setup(props, context){\n    const { proxy } = getCurrentInstance()\n    const pubHandler = () => {\n      proxy.$pub('foo', 1, 2, 3)\n    }\n    return { pubHandler }\n  }\n}\n</script>\n```\n\n**全局事件订阅/取消订阅**\n\n```js\n<template>\n  <div class=\"child\">\n    <button @click=\"unsubHandler\">注销事件</button>\n  </div>\n</template>\n\n<script>\nimport { onMounted, getCurrentInstance } from 'vue'\nexport default {\n  setup(props, context){\n    const { proxy } = getCurrentInstance()\n    const watchHandler = ([a, b, c] = args) => {\n      console.log('组件监听触发！');\n    }\n    onMounted(() => {\n      proxy.$sub('foo', watchHandler)\n    })\n    const unsubHandler = () => {\n      proxy.$unsub('foo', watchHandler)\n    }\n    return { unsubHandler }\n  }\n}\n</script>\n```\n\n##### Vue-Router在vue3.x中的使用方式及特性\n\n1、描述：区别于vue2，在vue3中vue-router将使用新的方法来创建路由，其中重要的是：createRouter, createWebHashHistory, createWebHistory这三个方法\n\n2、创建：\n\n```js\n// router.js\nimport { createRouter, createWebHashHistory, createWebHistory } from 'vue-router'\nconst routes = [...]\nconst router = createRouter({\n  // 区别于vue2的mode,vue3中将使用history属性来决定采用哪种路由模式\n  history: createWebHashHistory(), // 默认为hash模式，可设置createWebHistory模式\n  // 区别于vue2的base，vue3中的基础路由路径将作为createWebHashHistory或者createWebHistory的唯一参数配置到路由中\n  routes\n})\nexport default router;\n```\n\n```js\n// main.js\nimport router from './routes'\nconst app = createApp(App);\n// 注册路由\napp.use(router)\n```\n\n3、扩展：在组件中使用路由，查看路由\n\n```js\n// index.vue\n// vue-router库当中暴露了useRouter和useRoute两个方法供组件使用，还暴露有其他方法\nimport { useRouter, useRoute } from 'vue-router'\nimport { onMounted, getCurrentInstance } from 'vue'\nexport default {\n  setup(props, context){\n    const { proxy } = getCurrentInstance()\n    const router = useRouter()\n    const route = useRoute()\n    onMounted(() => {\n      console.log(proxy.$router === router); // true\n      console.log(route); {path, params, query ...}\n    })\n  }\n}\n```\n\n##### hooks\n\nVue3的hook函数相当于vue2的mixin，不同在于hooks是函数\n\nVue3的hook函数可以帮助我们提高代码的复用性，让我们能在不同的组件中都利用hooks函数\n\n```js\nimport { onBeforeUnmounted, onMounted, ref } from 'vue'\nexport default function () {\n  const x = ref(-1); // x绑定为响应式数据\n  const y = ref(-1);\n  const clickHandler = (event: MouseEvent) => {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n  onMounted(() => {\n    window.addEventListener('click', clickHandler)\n  })\n  onBeforeUnmounted(() => {\n    window.removeEventListener('click', clickHandler)\n  })\n  return {\n    x, y\n  }\n}\n```\n\n##### 新组件-- Teleport\n\nTeleport是一种能够将我们的模板移动到DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”\n\n场景：像modals,toast等这样的元素，很多情况下，我们将它完全的和我们的vue应用的DOM完全剥离，管理起来反而会方便容易很多\n\n原因在于如果我们嵌套在vue的某个组件内部，那么处理前套组件的定位、z-index和样式就会变得很困难\n\n另外，像modals,toast等这样的元素需要使用到vue组件的状态(data或者props)的值\n\n这就是Teleport派上用场的地方，我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的data或props，然后在vue应用的范围之外渲染它\n\n```js\n  <button @click=\"showToast\" class=\"btn\">打开toast</button>\n  <!-- to 属性就是目标位置 -->\n  <teleport to=\"#teleport-target\">\n    <div v-if=\"visiable\" class=\"toast-warp\">\n      <div class=\"toast-msg\">我是一个toast文案</div>\n    </div>\n  </teleport>\n```\n\n##### vue3中css使用js变量\n\n```js\n<template>\n  <div>\n    <h1>Hello Vue 3.0 + Vite</h1>\n  </div>\n</template>\n\n<script>\n  export default {\n    data(){\n      return {\n        color: \"red\",\n        backg: \"blue\"\n      }\n    }\n  }\n</script>\n\n<style vars=\"{ color, backg}\">\n  h1{\n    color: var(--color);\n    background-color: var(--backg);\n    text-align: center;\n  }\n</style>\n```\n\n","source":"_posts/vue3对比vue2.md","raw":"---\ntitle: vue3对比vue2\ndate: 2021-11-02 16:55:26\ntags: vue3对比vue2\ncategories: vue\n---\n\n##### 使用vue-cli4.0创建项目\n\n先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0\n\n**安装**vue-cli npm install -g @vue/cli\n\n**更新**vue-cli npm update -g @vue/cli\n\n**创建项目：**\n\nvue create vue3-demo\n\ncd vue3-demo\n\nyarn serve\n\n**升级vue2项目**\n\nyarn add vue-next\n\n##### 创建vue3项目-vite方式\n\nnpm init vite-app <project-name>\n\ncd <project-name>\n\nyarn\n\nyarn dev\n\n\n\n**vite**是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动\n\n- 快速的冷启动，不需要等待打包操作\n- 即时的热模块更新，替换性能和模块数量的解耦让更新飞起\n- 真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变\n\n##### 生命周期的变化\n\n| vue2.x          | vue3.x            |\n| --------------- | ----------------- |\n| beforeCreate    | 移除(setup)       |\n| created         | 移除(setup)       |\n| beforeMount     | onBeforeMount     |\n| mounted         | onMounted         |\n| beforeUpdate    | onBeforeUpdate    |\n| updated         | onUpdated         |\n| beforeUnmounte  | onBeforeUnmounte  |\n| unmounted       | onUnmounted       |\n| errorCaptured   | onErrorCaptured   |\n| renderTracked   | onRenderTracked   |\n| renderTriggered | onRenderTriggered |\n\n```javascript\nimpor { onMounted } from 'vue';\nexport default {\n\tsetup(){\n\t\tonMounted(() => {\n\t\t\tconsole.log('component is mounted')\n\t\t})\n\t}\n}\n```\n\n##### main.js中变化 新增全局API: createApp()\n\nvue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例\n\n```javascript\nimport { createApp } from 'vue';\nconst app = createApp({});\n```\n\n##### router.js\n\nvue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。\n\n```javascript\nimport { createRouter, createWebHashHistory } from 'vue-router';\n\nconst routes = [\n\t{\n\t\tname: 'homepage',\n\t\tpath: '/homepage',\n\t\tcomponent: () => import('../views/homepage/index.vue')\n\t}\n];\n\nconst router = createRouter({\n\thistory: createWebHashHistory(),\n\troutes\n})\n\nexport default router;\n```\n\n##### vuex\n\nvue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。\n\n```javascript\nimport { createStore } from 'vuex';\n\nexport default createStore({\n\tstate: {\n\t\n\t},\n\tgetters: {\n\t\n\t},\n\tmutations: {\n\t\n\t},\n\tactions: {\n\t\n\t}\n})\n```\n\n##### 应用配置\n\n```javascript\nVue.config\t\t\t\t\t->\tapp.config\n\nVue.config.ignoredElements\t->\tapp.config.ignoredElements\t\n\nVue.component\t\t\t\t->\tapp.component\t\n\nVue.directive\t\t\t\t->\tapp.directive\t\n\nVue.mixin\t\t\t\t\t->\tapp.mixin\t\n\nVue.use\t\t\t\t\t\t->\tapp.use\t\n```\n\nconfig: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。\n\n```javascript\nconst app = Vue.createApp({});\napp.config = {...}\n```\n\n1. devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true\n\n2. errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) => {}\n\n3. warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) => {};\n\n4. globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.\n\n   ```javascript\n   // Vue2.x\n   Vue.prototype.name = 'zhang_san'\n   // Vue3.x\n   app.config.globalProperties.name = 'zhang_san'\n   app.component('child-component', {\n   \tmounted(){\n   \t\tconsole.log(this.name)\n   \t}\n   })\n   ```\n\n5. isCustomElement (类型: (tag: string) => boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag => tag.startsWith('ion');\n\n##### 挂载应用程序\n\n```javascript\nimport { createApp } from 'vue';\nimport App from './App.vue'; \nconst app = createApp(App);\napp.mount( #app'); \n```\n\n##### 注册全局组件\n\n```javascript\nimport { createApp } from 'vue';\nconst app = createApp({});\n// myComponent为组件实例\napp.component('my-component, myComponent);\n//重置组件\nconst MyComponent = app.component('my-component', {});\n```\n\n##### 新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\n\n参数: Object | () => Object.\n\n概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。\n\n用例：\n\n```javascript\nimport { createApp } from 'vue' ;\n//全局注入数据\nconst app = createApp({\n\tprocide: {\n\t\tuser: 'zhang_san'\n\t}\n});\n// 获取数据\napp.component(‘my-component', {\n\tinject: [ 'user'],\n\tdata() {...}\n});\n```\n\n##### 全局方法\n\n```javascript\n// Vue2.x\nimport Vue from 'vue';\nVue.nextTick(()=>{ ... })\n// 或者\nexport default {\n\t...\n\tthis.$nextTick(()=>{ ... })\n\t...\n}\n\n// Vue3.x\nimport { nextTick } from 'vue';\nexport default {\n\t...\n\tnextTick(()=>{ ... })\n\t...\n}\n```\n\n##### 自定义指令：directive\n\nVue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）\n\n1. bind\t\t\t\t\t\t\t->\tbeforeMount（挂载前）\n2. inserted\t\t\t\t\t\t->\tmounted（挂载后）\n3. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUpdate（新增，更新前）\n4. update\t\t\t\t\t\t\t->\t删除\n5. componentUpdate\t\t->\tupdate（更新后）\n6. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUnmounted（新增，卸载前）\n7. unbind\t\t\t\t\t\t\t->\tunmounted（卸载后）\n\n##### 跨组件通讯\n\nvue2.x eventBus\n\nVue3.x 中全局事件总成将使用mitt来实现跨组件通讯。\n\n使用**mitt**之前先安装mitt模块**npm install --save mitt**\n\n```javascript\nimport mitt from 'mitt'\nconst VueEvent = mitt()\n\nexport default VueEvent;\n```\n\n\n\n```javascript\n<template>\n\t<div>\n\t\t<button @click=\"doLogin\">父子组件传值</button>\n\t</div>\n</template>\n\n<script>\nimport VueEvent from '../model/event'\n\nexport default {\n\tdata(){\n\t\treturn {}\n\t},\n\tmethods:{\n\t\tdoLogin(){\n\t\t\tVueEvent.emit('login')\n\t\t}\n\t}\n}\n</script>\n```\n\n```javascript\n<template>\n用户登录组件\n</template>\n\n<script>\nimport VueEvent from '../model/event'\nexport default {\n\tmounted(){\n\t\tVueEvent.on('login',() => {\n\t\t\talert('doLogin')\n\t\t})\n\t}\n}\n</script>\n```\n\n##### Vue3.x组件自定义事件验证\n\n父组件\n\n```javascript\n<template>\n\t<div>\n\t\t<login @submit=\"getChild\"></login>\n\t</div>\n</template>\n\n<script>\nimport Login from \"./Login\"\nexport default {\n\tdata(){\n\t\treturn {\n\t\t\ttitle: 'hello vue'\n\t\t}\n\t},\n\tcomponents:{\n\t\tLogin\n\t},\n\tmethods:{\n\t\tgetChild(data){\n\t\t\talert(data)\n\t\t}\n\t}\n}\n</script>\n```\n\n子组件\n\n```javascript\n<template>\n\t<input type=\"text\" v-model=\"username\" />\n\t<br>\n\t<input type=\"text\" v-model=\"password\" />\n\t<br>\n\n\t<button @click=\"run\">通过广播方式实现子组件给父组件传值</button>\n</template>\n\n<script>\nexport default {\n\t// 建议定义所有发出的事件，以便更好地记录组件应该如何工作\n\temits: {\n\t\tsubmit :({\n\t\t\tusername,\n\t\t\tpassword\n\t\t}) => {\n\t\t\tif (username && password) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"传入的参数不能为空\")\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\tdata(){\n\t\treturn {\n\t\t\tusername: '张三',\n\t\t\tpassword: ''\n\t\t}\n\t},\n\tmethods:{\n\t\trun(){\n\t\t\tthis.$emit('submit',{\n\t\t\t\tusername: this.username,\n\t\t\t\tpassword: this.password\n\t\t\t})\n\t\t}\n\t}\n}\n</script>\n```\n\n##### Vue3.x过滤器\n\n在3.x中，过滤器被删除，不再受支持。建议用方法调用或计算属性替换它们。\n\n```javascript\n<template>\n  <div>\n    <h1>Bank Account Balance</h1>\n    <p>{{ accountBalance | currencyUSD }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    accountBalance: {\n      type: Number,\n      require: true\n    }\n  },\n  filters: {\n    currencyUSD(value) {\n      return '$' + value\n    }\n  }\n}\n</script>\n```\n\n```javascript\n<template>\n  <div>\n    <h1>Bank Account Balance</h1>\n    <p>{{ currencyUSD }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    accountBalance: {\n      type: Number,\n      require: true\n    }\n  },\n  computed: {\n    currencyUSD() {\n      return '$' + this.accountBalance\n    }\n  }\n}\n</script>\n```\n\n##### 多根节点组件\n\nVue2.x\n\n```javascript\n<template>\n  <div>\n    <header></header>\n    <main></main>\n    <footer></footer>\n  </div>\n</template>\n```\n\nVue3.x中可以使用多个根节点\n\n```javascript\n<template>\n  <header>...</header>\n  <main v-bind=\"$attrs\">...</main>\n  <footer>...</footer>\n</template>\n```\n\n##### 按键修饰符\n\nVue2.x\n\n```javascript\n<input v-on:keyup.13=\"submit\">\n<input v-on:keyup.enter=\"submit\">\nVue.config.keyCode= { f1: 112 }\n```\n\nVue3.x 别名支持任意键\n\n```javascript\n<input v-on:keyup.delete=\"cancel\">\n<input v-on:keyup.f1=\"cancel\">\n```\n\n##### 渲染功能render函数\n\nVue2.x\n\n```javascript\nexport default {\n  render(h){\n    return h('div')\n  }\n}\n```\n\nVue3.x\n\n```javascript\nimport { h } from 'vue'\nexport default {\n  render(){\n    return h('div', {class: 'red'}, 'hello, Vue3.x!')\n  }\n}\n```\n\n##### Vue3更好用的v-model指令\n\n1、概述：数据双向绑定\n\n2、回顾：在Vue2.x中，v-model进行数据双向绑定（语法糖）的原理\n\n```javascript\n<my-component v-model=\"msg\"></my-components>\n<!-- 等价于 -->\n<my-component :value=\"msg\" @input=\"msg=$event\"></my-components>\n\n// 组件中接收绑定数据和触发数据改变\nprops:{ msg: String } // 获取数据\nthis.$emit('input', 'newValue') // 触发事件并传值\n```\n\n用于自定义组件时，v-model的prop和事件默认名称已更改：\n\nprop: value -> modelValue\n\nevent: input -> update:modelValue\n\n即\n\n```javascript\n<xxComponent v-model=\"varA\" />\n```\n\n等价于\n\n```javascript\n<xxComponent :modelValue=\"varA\" @update:modelValue=\"varA = $event\" />\n```\n\n且在Vue2.x中不能绑定多个v-model\n\n3、用例：Vue3.x重写了v-model的实现方式以适用绑定多个v-model\n\n①：单个数据实现数据双向绑定\n\n```javascript\n<my-component v-model=\"msg\"></my-components>\n<!-- 等价于 -->\n<myComponent :modelValue=\"msg\" @update:modelValue=\"msg = $event\" />\n\n// 组件中接收绑定数据和触发数据改变\nprops:{ modelValue: String } // 获取数据\nsetup(props, {emit}){\n  emit('update:modelValue', 'newValue') // 触发事件并传值\n}\n```\n\n②：多个数据实现数据双向绑定\n\n```javascript\n<my-component v-model:msg=\"msg\" v-model:name=\"name\"></my-components>\n<!-- 等价于 -->\n<myComponent :msg=\"msg\" @update:msg=\"msg = $event\" :name=\"name\" @update:name=\"name = $event\"/>\n\n// 组件中接收绑定数据和触发数据改变\nprops:{ msg: String, name: String } // 获取数据\nsetup(props, {emit}){\n  emit('update:msg', 'newValue') // 触发事件并传值\n  emit('update:name', 'newValue') // 触发事件并传值\n}\n```\n\n###### 修饰符\n\n支持vue2.x的所有修饰符\n\n- .lazy 取代input监听change事件\n- .number 输入字符串转为有效的数字\n- .trim 输入首尾空格过滤\n\n###### 支持自定义修饰符\n\n例子：自定义prop名+自定义修饰符\n\n**父组件：**\n\n```\n<zi v-model:content.camelCase=\"word\" />\n```\n\n子组件较复杂，用组合式API来演示。\n\ndefineProps函数的写法就是这样，先写content，然后写contentModifiers，这是Vue的规定，必须是prop名跟Modefiers字串。contentModifiers必须是这样一个函数。\n\nuseContext和getCurrentInstance在开发中会经常用到。useContext()能拿到几个变量，包括props变量。getCurrentInstance()能拿到组件实例this，用来执行.emit()\n\ncontent必须是计算变量，否则传入prop新值之后，子组件无法感知\n\nemitCamelCase方法里，if语句是为了确认修饰符正确\n\n```javascript\n<template>\n  <div>\n    <input type=\"text\" :value=\"content\" @input=\"emitCamelCase\">\n  </div>\n</template>\n\n<script setup>\nimport { useContext, getCurrentInstance, defineProps, computed } from 'vue'\ndefineProps({\n  content: String,\n  contentModifiers: {\n    default: () => ({})\n  }\n})\nconst ctx = useContext()\nconst instance = getCurrentInstance()\nlet content = computed(() => { ctx.props.content })\nfunction emitCamelCase(e){\n  if (ctx.props.contentModifiers.camelCase) {\n    instance.emit(\"update:content\", e.target.value.replace(/_./g, (a) => {\n      return a[1].toUpperCase()\n    }))\n  }\n}\n</script>\n```\n\n##### vue3 v-is指令\n\n```javascript\n// vue的动态组件中使用is\n<component is=\"foo\"></component>\n// vue2.x --> is的值指的是要渲染的组件的名称；渲染foo组件 \n// vue3.x --> is的值指的是要渲染的组件的名称；渲染foo组件 \n\n// 一般组件中使用is\n<user-edit is=\"foo\"></user-edit>\n// vue2.x --> is的值指的是要江染的组件的名称;渲染foo组件\n// vue3.x --> 渲染user- edit组件; is将作为组件的prop进行值的传递\n\n// 一般元素中使用is\n<tr is=\"val\"></tr>\n// vue2.x ---> is的值会被编译为boolean; 且元素会被动态加载或销毁(会触发transition效果)\n// vue3.x ---> is的值为any; 值的变化不会造成元素任何变化(丢失了vue2中元素上使用的s的功能，因此vue3中引入了新的指令v-is)\n\n// vue3.x的新指令 v-is\n<tr v-is=\"val\"></tr>\n// 与vue2. x中-般元素上使用is的效果-致\n```\n\n##### v-for中使用ref\n\n```javascript\n// vue2.x \n<p v-for=”item in renderData\" :key=\"item.name\" ref=”nodes\">{{item.name}}</p>\nconsole.log(this.$refs.nodes) // 返回所有循环的p元素节点\n```\n\n```javascript\n// vue3.x\n//如果还是按照Vue2.x的方式\n<p v-for=\"item in renderData\" :key= \"item.name\" ref=\"nodes\"></p>\n\nconsole.log(this.$refs.nodes) //此时只能得到循环后最后一个P元素节点\n\n// Vue3.x中，使用函数处理v-for中的ref;且用变量单独存储。\n<p v-for=\"item in renderData\" :key=\" item.name\" ref=\"handleNodes\"></p>\n\nsetup(){\n  const data = reactive({\n    nodes: []\n  })\n  const handleNodes = nodeItem => {\n    data.nodes.push(nodeItem)\n  }\n  return {\n    ...toRefs(data)\n  }\n}\n```\n\n##### mixin 的合并行为更改\n\n```javascript\n// mixin\nexport default {\n  data(){\n    return {\n      name: 'zhangsan',\n      age: 20\n    }\n  }\n}\n\n// vue2.x\nexport default {\n  data(){\n    return {\n      age: 30\n    }\n  },\n  mounted(){\n    console.log(this.$data); // {name: 'zhangsan', age: 30}\n    console.log(this.name); // 'zhangsan\n    console.log(this.age); // 30\n  }\n}\n\n// vue3.x\nexport default {\n  data(){\n    return {\n      age: 30\n    }\n  },\n  mounted(){\n    console.log(this.$data); // {age: 30}\n    console.log(this.name); // 'zhangsan\n    console.log(this.age); // 30\n  }\n}\n```\n\n**得出结论：**\n\n1、与vue2.x一样会覆盖掉mixin中相同的响应属性。\n\n2、vue3.x中当前实例的$data是不会包含mixin中定义的响应属性\n\n##### v-if和v-for优先级\n\n当v-if和v-for同时作用于一个元素上时：\n\nVue2.x中v-for的优先级会高于v-if;\n\nVue3.x中v-if的优先级会高于v-for;\n\n使用禁忌: Vue3.x中不能将v -for和v-if放在同-个元素上。只能使用v-for嵌套v -if使用\n\n使用建议:官方建议使用计算属性来处理,即提高性能，又能兼容Vue3.x。\n\n##### $attrs和$listener的融合\n\n我们知道，在vue2中我们使用v-bind=\"$attrs\", v-on=\"$listenner\"来将数据和事件做一个承 上启下的作用,但是在vue3中,首先是删除了v-on指令，其次是发现这两个组件的属性过于累赘，所以在当前版本中将$attrs 和$listenner他们的功能进行了融合, $listenner 现在已作为$attrs 的其中一部分进行传递,所以只需要在组建上指定v-bind=\"$attrs\"，那么将同时拥有传值和传递事件的功能。\n\n##### setup说明\n\n- setup\n\nsetup有两个参数props和context\n\n- props：接收父组件传的值\n\n- context：vue3.x里面没有this，提供了一个context上下文属性，你可以通过这个属性去获取进行一些vue2.x用this实现的操作\n\n  ```javascript\n  export default {\n    name: '',\n    props: {\n      title: {\n        type: String,\n        default: \"\"\n      }\n    },\n    setup(props, context){\n      console.log(props.title);\n      \n      context.attrs\n      context.slots\n      context.parent\n      context.root\n      context.emit\n      context.refs\n    }\n  }\n  ```\n\n在setup中定义的变量或方法，都必须通过**return** {xxx,xxx} 暴露出去，外界才能使用\n\n**注意：**props为响应式代理，如果使用es6的数据解构操作，将使得结构后的数据失去响应式（即不能实时获取到父组件传来的值）\n\n**扩展：**父组件通过属性传的值在子组件中的各个部分的获取：\n\n1. props：通过父传子的方式直接获取到值\n2. setup(props, context){}方法中的props只能拿到选项props中已经定义的属性\n3. setup(props, {attrs, emit, slots}){}方法中的attrs只能拿到未在选项props中定义的属性\n4. 通过{proxy} = getCurrentInstance(); proxy.attrs; 组件实例中的attrs也只能拿到未在选项props中定义的属性\n\n**context：**非响应式的对象，包含了组件暴露的三个property\n\n1. context.attrs：传入组件中但是未被props接收的对象\n2. context.emit：用于触发当前组件实例上的传值事件\n3. context.slots：用来访问被插槽分发的内容（一般用于使用渲染函数来书写一个组件时）\n\n**return()**：若需要在当前组件视图中或其它组件中使用当前组件创建的响应式变量及方法，则需要导出相应的响应式变量及方法\n\n```javascript\n<template>\n  <p>{{name}}</p>\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, context){\n    const name = ref(\"zhang_san\")\n    return { name }\n  }\n}\n</script>\n```\n\nreturn 也有渲染功能\n\n```javascript\n<script>\nimport { ref, h } from 'vue'\nexport default {\n  setup(props, context){\n    return () => h('div', {class: 'red'}, '内容');\n    // <template><div class=\"red\">内容</div></template>\n  }\n}\n</script>\n```\n\n##### 响应式数据对象 reactive\n\n1、概述：函数，创建一个响应式数据对象，响应式会影响到所有的子集嵌套\n\n2、用例：由vue提供，按需引入：import { reactive } from 'vue'\n\n```javascript\n<template>\n  <p>{{user.name}}</p>\n</template>\n\n<script>\nimport { reactive } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    return { user }\n  }\n}\n</script>\n```\n\n##### 延伸方法--readonly只读对象\n\n**readonly()**\n\n1、概述：创建一个只读代理且原对象的任何嵌套属性也将是只读的\n\n2、用例：由vue提供，按需引入：import { readonly } from 'vue'\n\n3、对普通变量创建只读\n\n```javascript\n<script>\nimport { readonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = { name: 'lisi', age: 20}\n    const copy = readonly(user)\n    return { copy }\n  }\n}\n</script>\n\ncopy.age++ // warning! target is readonly\n```\n\n4、对reactive创建只读\n\n```js\n<script>\nimport { reactive, readonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    const copy = readonly(user)\n    return { copy }\n  }\n}\n</script>\n\nuser.age++\t21\ncopy.age++ // warning! target is readonly\n```\n\n##### 延伸方法--isProxy()\n\n1、概述判断对象是否由reactive创建或者是readonly创建的代理\n\n2、用例：由vue提供，按需引入：import { isproxy } from 'vue'\n\n```js\nimport {ref, reactive, readonly, isproxy} from 'vue'\n\n//ref创建\nconst refVal = ref(123)\nisProxy(refVal) // false\n\n//reactive创建\nconst reactiveVal = reactive({age: 20})\nisProxy(reactiveVal) // true\n\n//reactive创建\nconst readonlyVal = readonly(reactiveVal)\nisProxy(readonlyVal) // true\n\n//普通变量\nconst defaultVal = 'default'\nisProxy(defaultVal) // false\n```\n\n##### isReactive()\n\n1、检查对象是否由reactive创建\n\n2、用例：由vue提供，按需引入：import { isReactive } from 'vue'\n\n```js\nimport { reactive, isReactive } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    console.log(isReactive(user)); // true\n  }\n}\n```\n\n还能判断readonly代理的对象是否由reactive创建\n\n```js\nimport { reactive, isReactive, readonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n\n    // 创建普通只读代理\n    const plain = readonly({name: 'lisi'})\n    console.log(isReactive(plain)); // false\n\n    // 创建reactive制度代理\n    const copy = readonly(user)\n    console.log(isReactive(copy)); // true\n  }\n}\n```\n\n##### 延伸方法-- isReadonly()\n\n1、概述：检查代理是否由readonly创建\n\n2、用例：由vue提供，按需引入：import { isReadonly } from 'vue'\n\n```js\nimport { reactive, readonly, isReadonly } from 'vue'\nexport default {\n  setup(props, context){\n    const user = reactive({ name: 'lisi', age: 20})\n    const copy = readonly(user)\n    console.log(isReadonly(copy)); // true\n  }\n}\n```\n\n##### 延伸方法--toRaw()\n\n1、概述：返回由reactive或者是readonly代理的原始对象\n\n2、用例：由vue提供，按需引入：import { toRaw } from 'vue'\n\n```js\nimport { reactive, readonly, isProxy, toRaw } from 'vue'\nexport default {\n  setup(props, context){\n    const user = {}\n    const reactiveUser = reactive(user)\n    const readonlyUser = readonly(readonlyUser)\n\n    console.log(toRaw(reactiveUser) === user); // true\n    console.log(toRaw(readonlyUser) === user); // true\n    console.log(isProxy(toRaw(reactiveUser))); // false\n    console.log(isProxy(toRaw(readonlyUser))); // false\n  }\n}\n```\n\n##### 延伸方法--markRaw()\n\n1、概述：标记一个对象，被标记后，该对象永远不会被转换为代理\n\n2、用例：由vue提供，按需引入：import { markRaw } from 'vue'\n\n```js\nimport { markRaw, reactive, isReactive, isProxy } from 'vue'\nexport default {\n  setup(props, context){\n    const user = markRaw({})\n    const reactiveUser = reactive(user)\n    console.log(isReactive(reactiveUser)); // false\n\n    const reactiveUser1 = reactive({ user })\n    console.log(isProxy(toRaw(reactiveUser1))); // true\n    console.log(isProxy(toRaw(reactiveUser1.user))); // false\n  }\n}\n```\n\n##### 延伸方法--shallowReactive()\n\n1、概述：创建一个反应式代理，但只是浅度创建\n\n2、用例：由vue提供，按需引入：import { shallowReactive } from 'vue'\n\n```js\nimport { isReactive, shallowReactive } from 'vue'\nexport default {\n  setup(props, context){\n    const data = shallowReactive({\n      count: 10,\n      content: {\n        age: 20\n      }\n    })\n    data.count++ // 11 逻辑层数据已发生变化,视图重新渲染\n    isReactive(data.content) // 因为data.content属于深度嵌套，未被代理\n    data.content.age++ // 21 逻辑层数据发生变化，但是视图层不会被更新渲染\n  }\n}\n```\n\n##### 延伸方法--shallowReadonly()\n\n1、概述：创建一个只读代理，但只是浅度创建\n\n2、用例：由vue提供，按需引入：import { shallowReadonly } from 'vue'\n\n```js\nimport { isReadonly, shallowReadonly } from 'vue'\nexport default {\n  setup(props, context){\n    const data = shallowReadonly({\n      count: 10,\n      content: {\n        age: 20\n      }\n    })\n    data.count++ // warning! target is readonly.\n    isReadonly(data.content) // 因为data.content属于深度嵌套，未被代理\n    data.content.age++ // 21 深度嵌套未被代理，所以操作成功\n  }\n}\n```\n\n##### 响应式数据-- ref\n\n1、概述：函数，创建并返回一个响应式数据对象，并在此对象上只包含一个.value属性指向该数据值\n\n2、用例：由vue提供，按需引入：import { ref } from 'vue'\n\n```js\n<template>\n  <p>{{name}}</p> \n  <!-- 视图中直接使用即可，不需要.value -->\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, context){\n    const name = ref('zhang_san')\n    console.log(name.value); // 'zhang_san'\n    // 同样需要return返回\n    return { name }\n  }\n}\n</script>\n```\n\n如果使用ref将一个对象创建为响应式代理的话，则该对象会被进行深度响应式创建\n\n```js\n<template>\n  <p>{{data.count}}</p>   <!-- 0 -->\n  <p>{{data.content.age}}</p>   <!-- 10 -->\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, context){\n    const defaultVal = {\n      count: 0,\n      content: {\n        age: 10\n      }\n    }\n    const data = ref(defaultVal)\n    console.log(data.value.count); // 0\n    console.log(data.value.content.age); // 10\n    return { data }\n  }\n}\n</script>\ndata.value.count++ // 1 视图重新渲染\ndata.value.content.age++ // 11 视图重新渲染\n```\n\n##### ref数据能访问到的部分常用方法及延伸方法\n\n###### unref()\n\n1、概述：返回代理原始值，如果参数为ref则返回代理原始值，如果不是ref则返回参数本身\n\n2、用例：由vue提供，按需引入：import { unref } from 'vue'\n\n```js\nimport { unref } from 'vue'\nconst a = ref(1)\nconst b = 'zhang_san'\nconsole.log(unref(a)); // 1\nconsole.log(unref(b)); // 'zhang_san'\n```\n\n###### toRef()\n\n1、概述：可以将reactive创建的代理的某个属性传递出来用ref进行代理\n\n2、用例：由vue提供，按需引入：import { toRef } from 'vue'\n\n```js\nimport { reactive, toRef } from 'vue'\nconst data = reactive({ name: 'zhang_san', age: 20 })\nconst toRefValue = toRef(data, 'age')\n\ntoRefValue.value++ // toRefValue.value 21\nconsole.log(data.age); // 21\n\ndata.age++ // data.age 22\nconsole.log(toRefValue.value); // 22\n```\n\n3、**注意：使用toRef将reactive的属性代理后，属性的值的变化会同时影响toRef后的值和原本的reactive的属性值**\n\n4、实例：在将prop的引用传递给复合函数的时候，toRef将非常有用\n\n```js\nsetup(props){\n\tuserHandler(toRef(props, 'name'))\n\t// 这将使得userHandler拿到的name为响应式代理\n}\n```\n\n###### toRefs()\n\n1、概述：可以将reactive创建的代理的所有属性传递出来用ref进行代理\n\n2、用例：由vue提供，按需引入：import { toRefs } from 'vue'\n\n```js\nimport { reactive, toRefs } from 'vue'\nconst data = reactive({ name: 'zhang_san', age: 20 })\nconst toRefValue = toRefs(data)\n\ntoRefValue.age.value++ // toRefValue.age.value 21\nconsole.log(data.age); // 21\n\ndata.age++ // data.age 22\nconsole.log(toRefValue.age.value); // 22\n```\n\n3、**注意：使用toRefs将reactive的属性代理后，属性的值的变化会同时影响toRef后的对应属性值和原本的reactive的属性值**\n\n4、实例：从组合函数返回响应式对象时，这将很有用，**而不是使用es6数据结构的方式，这样会使reactive的属性失去响应式代理**\n\n```js\nfunction userHandler() {\n  const state = reactive({ name: 'zhang_san', age: 20 })\n  return toRefs(state)\n}\nexport default {\n  setup() {\n    const { name, age } = userHandler()\n    return { name, age }\n  }\n}\n```\n\n###### isRef()\n\n1、概述：判断响应式代理是否为ref所创建\n\n2、用例：由vue提供，按需引入：import { isRef } from 'vue'\n\n```js\nimport { ref, reactive, isRef } from 'vue'\nconst name = ref('zhang_san')\nconst user = reactive({ sex: '男', age: 20 })\n\nconsole.log(isRef(name)); // true\nconsole.log(isRef(user)); // false\n// 应用场景，在获取一个未知的数据对象的值时，如：\nconst newV = isRef(name) ? name.value : name\n```\n\n##### toRefs -- 解构响应式对象数据\n\n```js\n<template>\n  <div>\n    <h1>解构响应式对象数据</h1>\n    <p>UserName: {{username}}</p>\n    <p>Age: {{age}}</p>\n  </div>\n</template>\n\n<script>\nimport { reactive, toRefs } from 'vue'\nexport default {\n  setup(){\n    const user = reactive({\n      username: 'zhang_san',\n      age: 20\n    })\n    return { ...toRefs(user) }\n  }\n}\n</script>\n```\n\n##### reactive和ref的相互作用\n\n1、将ref的数据对象挂载到reactive上时，会把原始的响应数据对象展开为原始值，这样就不需要.value而被直接访问到\n\n```js\nexport default {\n  setup(){\n    const ref1 = ref(0)\n    const reactive1 = reactive({ref1})\n    console.log(reactive1.ref1); // 0\n    reactive1.ref1++\n    console.log(reactive1.ref1); // 1\n    console.log(ref1.value); // 1\n  }\n}\n```\n\n2、新的ref会覆盖旧的ref\n\n```js\nexport default {\n  setup(){\n    const ref1 = ref(0)\n    const reactive1 = reactive({ref1})\n    \n    const ref2 = ref(100)\n    reactive.ref1 = ref2\n    reactive.ref1++\n    \n    console.log(reactive1.ref1); // 101\n    console.log(ref2.value); // 101\n    console.log(ref1.value); // 0\n  }\n}\n```\n\n##### reactive和ref的区别\n\n```js\nimport { reactive, ref } from 'vue'\nexport default {\n  setup(){\n    let num1 = 10\n    let num2 = ref(10)\n    let num3 = reactive(100)\n    console.log(num1); // 定义的纯数字10, 打印结果是一个数字类型的10\n    console.log(num2); // 使用vue3中提供的ref方法定义的值 打印的时候是一个对象\n    console.log(num3); // 使用reactive定义的num3 结果是一个数值类型100\n    return { num1, num2, num3 }\n  }\n}\n```\n\n我们发现使用ref定义的数据，打印结果是一个被对象包裹的响应的数据，使用reactive的方式和纯变量声明的方式打印结果是一样的，这是什么原因呢\n\n我们发现在控制台输出一个警告信息，提示100这个值不能被reactive创建，官方也推荐我们在定义数据的时候，reactive定义复杂的数据类型的数据，ref推荐定义基本数据类型，所以如果要使用reactive第一基本数据类型的话，我们需要在reactive中将数据包裹一下\n\n```js\nlet num3 = reactive({val: 100})\n```\n\n我们在使用reactive定义数据的时候用对象做一层包裹，这样控制台就不会报警告信息了\n\n但是使用reactive定义的数据和ref定义的数据打印结果有一些差异\n\n```js\nlet num2 = ref(10)\nlet num3 = reactive({val: 100})\nconsole.log(num2); // 使用vue3中提供的ref方法定义的值 打印的时候是一个对象\nconsole.log(num3); // 使用reactive定义的num3 结果是一个数值类型100\n```\n\n我们发现ref定义的数据打印结果需要.value才能获取到结果，而reactive则不需要\n\n```js\nlet num2 = ref(10)\nlet num3 = reactive({val:100})\nconsole.log(num2.value) // 10 \nconsole.log(num) // {val:100}\n```\n\n总结：\n\nreactive和ref都是用来定义响应式数据的，reactive更推荐去定义复杂的数据类型，ref更推荐定义基本数据类型\n\nref和reactive本质我们可以简单的理解为ref是对reactive的二次包装，ref定义的数据访问的时候要多一个.value\n\n使用ref定义一本数据类型，ref也可以定义数组和对象\n\n**ref函数仅能监听基本类型的变化，不能监听复杂类型的变化(比如数组，对象)**\n\n##### 计算属性-- computed\n\n1、概述：vue2.x中的计算属性，在vue3.x中以方法的形式使用\n\n2、用例：用例：由vue提供，按需引入：import { computed } from 'vue'\n\n```js\nimport { computed, ref } from 'vue'\nexport default {\n  setup(){\n    const age = ref(20)\n    const userAge = computed(() => `今年${age.value}岁了`)\n    return { userAge }\n  }\n}\n```\n\n带有get和set功能的用法\n\n```js\nimport { computed, ref } from 'vue'\nexport default {\n  setup(){\n    const age = ref(20)\n    const userAge = computed({\n      get: () => `今年${age.value}岁了`,\n      set: val => age.value = age + 1\n    })\n    return { userAge }\n  }\n}\n```\n\n##### 观察者-- watch\n\n1、概述：vue2.x中的响应式变量监听，在vue3.x中以方法的形式使用\n\n2、用例：用例：由vue提供，按需引入：import { watch} from 'vue'\n\n3、监听单一数据\n\n```js\nimport { ref, reactive, computed, watch } from 'vue'\nexport default {\n  setup(props){\n    //ref\n    const age = ref(20)\n    watch(() => age.value, (nv, ov) => { ... })\n\n    // reactive\n    const product = reactive({ name: 'pig', conut: 1})\n    watch(() => product.count, (nv, ov) => { ... })\n\n    // props\n    watch(() => props.msg, (nv, ov) => { ... })\n\n    //computed\n    const userAge = computed(() => `今年${age.value}岁了`)\n    watch(() => userAge.value, (nv, ov) => { ... })\n  }\n}\n```\n\n4、监听对象\n\n```js\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(){\n    //ref\n    const user = ref({ name: 'zhang_san', age: 20 })\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => user.value, (nv, ov) => { ... })\n    // 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)\n    watch(() => user.value, (nv, ov) => { ... }, { deep: true })\n    // 如果我们只需要监听name的值，那么\n    watch(() => user.value.name, (nv, ov) => { ... })\n\n    // reactive\n    const reactiveData = reactive({ user: { name: 'zhang_san', age: 20 }})\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => reactiveData.user, (nv, ov) => { ... })\n    // 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)\n    watch(() => reactiveData.user, (nv, ov) => { ... }, { deep: true })\n    // 如果我们只需要监听name的值，那么\n    watch(() => reactiveData.user.name, (nv, ov) => { ... })\n  }\n}\n```\n\n5、监听数组\n\n```js\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(){\n    //ref\n    const user = ref([\n      { name: 'zhang_san', age: 20 },\n      { name: 'li_si', age: 10 },\n    ])\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => user.value, (nv, ov) => { ... })\n    // 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听\n    watch(() => user.value, (nv, ov) => { ... }, { deep: true })\n    \n    // reactive\n    const reactiveData = reactive({ user: [\n      { name: 'zhang_san', age: 20 },\n      { name: 'li_si', age: 20 },\n    ]})\n    // 字面量引发的监听触发： user.value = { ... }\n    watch(() => reactiveData.user, (nv, ov) => { ... })\n    // 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听\n    watch(() => reactiveData.user, (nv, ov) => { ... }, { deep: true })\n  }\n}\n```\n\n6、监听多个数组\n\n```JS\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(props){\n    const age = ref(20)\n    const user = ref({ name: 'zhang_san', age: 20 })\n\n    watch([() => age.value, () => user.name], ([newAge, newName], [oldAge, newName]) => { ... })\n  }\n}\n```\n\n7、终止监听\n\n```js\nimport { ref, watch } from 'vue'\nconst age = ref(20)\n// watch监听会返回一个方法\nconst stop = watch(age, (nv, ov) => { ... })\n// 当调用此方法后，该监听就会被移除\nstop()\n```\n\n8、清除watch中无效的异步任务\n\n```js\n<template>\n  <div>\n    <input type=\"text\" v-model=\"keywords\">\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, watch } from 'vue'\nexport default {\n  setup(){\n    const keywords = ref(\"\")\n    //异步任务：打印用户输入的关键词\n    const asyncPrint = val => {\n      return setTimeout(() => {\n        console.log(val);\n      }, 1000)\n    }\n\n    watch(\n      keywords,\n      (keywords, prevKeywords, onCleanup) => {\n        // 执行异步任务，并得到关闭异步任务的 timerId\n        const timerId = asyncPrint(keywords)\n        // 如果 watch 监听被重复了，则会先清除上次未完成的异步任务\n        onCleanup(() => clearTimeout(timerId))\n      },\n      { lazy: true }\n    )\n\n    return { keywords }\n  }\n}\n</script>\n```\n\n##### provide和inject\n\n1、概述：实现嵌套组件树形数据传递与接收\n\n2、使用：由vue提供，按需引入：import { provide, inject } from 'vue'\n\n3、用例\n\n```js\nimport { provide, inject } from 'vue'\n//父组件注入\nconst component = {\n  setup(){\n    provide('name', 'zhang_san')\n    // 如果是需要注入多个值则重复使用provide即可\n  }\n}\n// 子组件接收\nconst children = {\n  setup(){\n    // inject的第二个参数为没有接收到注入的数据时的默认返回值，如果没有，则返回undefined\n    const user = inject('name', 'li_si')\n    // 需要接收多个注入的值也是重复使用inject\n    return { user }\n  }\n}\n```\n\n4、实例：在实际使用过程中，往往我们需要将注入的值实现响应式变化，则需要注入响应式\n\n```js\n//父组件注入\nconst component = {\n  setup(){\n    const user = reactive({ name: 'zhang_san', age: 20 })\n    provide('user', user)\n  }\n}\n// 子组件接收后，如果父组件中的user发生了改变，则子组件中也会发生响应式变化\nconst children = {\n  setup(){\n    const user = inject('user', {})\n    return { user }\n  }\n}\n```\n\n5、注意：**不建议在注入时对响应式变量进行改变(在子组件中改变注入的值)，因为此操作会改变vue的单向数据流，建议采用注入改变其值的方法来对响应式变量进行改变**\n\n```js\nimport { reactive, provide, inject } from 'vue'\n//父组件注入\nconst component = {\n  setup(){\n    const user = reactive({ name: 'zhang_san', age: 20 })\n    function changeHandler(){\n      user.age = 30\n    }\n    provide('user', user)\n    provide('changeHandler', changeHandler)\n  }\n}\n// 子组件接收后，通过调用注入的方法来对响应式变量进行改变\nconst children = {\n  setup(){\n    const user = inject('user', {})\n    const changeHandler = inject('changeHandler')\n    return { user, changeHandler }\n  }\n}\n```\n\n##### template和ref获取元素或组件实例\n\n1、概述：通过ref获取模板元素节点\n\n2：使用：由vue提供，按需引入：import { ref } from 'vue'\n\n3、回顾：options API中是：this.refs.refAdd(获取某个组件)或者this.refs.refDiv(获取某个元素节点)\n\n4、用例：\n\n- 在组件或节点中定义ref属性：add(ref=\"refAdd\")或div(ref=\"refDiv\")\n- 在setup中定义对应ref属性相同的变量名，赋值为任意值即可\n- 访问方式为：refAdd.value或refDiv.value\n\n```js\n<template>\n  <div ref=\"divBox\">content</div>\n</template>\n \n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(){\n    const divBox = ref(null); // <div ref=\"divBox\">content</div>\n    const user = ref(null); // user.value -> null\n    return { divBox }\n  }\n}\n</script>\n```\n\n4、注意：\n\n**①：元素节点对应ref的分配只会在render时进行对比赋值，因此若在setup中未将对应的响应式变量return出来，则不会获取到组件实例或元素节点**\n\n**②：在满足①的前提下，只要在定义变量时变量名称与当前组件中ref属性值相同，则该变量会被统一赋值为组件实例或元素节点，与定义变量时的赋值无关**\n\nsetup的context中访问到refs对象，所以获取组件实例或者元素节点的方式还可以\n\n```js\n<template>\n  <div ref=\"divBox\">content</div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nexport default {\n  setup(props, { refs }){\n    const divBox = refs.divBox;\n    return { divBox }\n  }\n}\n</script>\n```\n\n##### vue3.x中的emits选项\n\nvue3.x组件自定义事件实现子组件给父组件传值\n\n注意：vue官方推荐你始终使用**kebab-case**的事件名\n\n子组件\n\n```js\n<template>\n  <button @click=\"run\">通过广播方式实现子组件给父组件传值</button>\n</template>\n\n<script>\nexport default {\n  // 建议定义所有发出的事件，以便更好地记录组件应该如何工作、\n  emit: ['run-parent'],\n  data(){\n    return {}\n  },\n  methods: {\n    run(){\n      this.$emit(\"run-parent\", \"传给爸爸\")\n    }\n  },\n}\n</script>\n```\n\n1、概述：当前组件的通过emit的事件列表\n\n2：类型：Array|Object\n\n3、作用：vue3.0中使用emit发起事件时会要求当前组件记录emit事件(没有则控制台会抛出警告)\n\n4、用途：用于记录当前组件emit的事件，当为对象时，则可以验证传入的值是否有效\n\n```js\nsetup(prop, { emit }){\n  const changeOne = val => {\n    emit('on-changeOne', val)\n  }\n  const changeTwo = val => {\n    emit('on-changeTwo', val)\n  }\n}\n```\n\n用法一：数组用法\n\n```js\nexport default {\n  emits: ['on-changeOne', 'on-changeTwo'],\n  setup(){ ... }\n}\n```\n\n用法二：对象用法，当emits为对象时，可以验证事件中的参数是否有效\n\n```js\nexport default {\n  emits: {\n    click: null,\n    'on-changeOne': payload => {\n      if (...) {\n        return true; // 验证通过\n      }\n      console.warn('验证失败！')\n      return false; // 验证失败，控制台打印警告信息“验证失败”\n    },\n    'on-changeTwo': payload => { ... }\n  },\n  setup(){ ... }\n}\n```\n\n##### vue3.x核心值getCurrentInstance\n\n1、概述：一个很重要的方法，获取当前组件的实例、上下文来操作router和vuex等\n\n2、使用：由vue提供，按需引入：import { getCurrentInstance } from 'vue'\n\n```js\nimport { getCurrentInstance } from 'vue'\n// 获取当前组件实例\nconst instance = getCurrentInstance();\n\n// 获取当前组件的上下文，下面两种方式都能获取到组件的上下文\nconst { ctx } = getCurrentInstance(); // 方式一，这种方式只能在开发环境下使用，生产环境下的ctx将访问不到\nconst { proxy } = getCurrentInstance(); // 方式二，此方法在开发环境及生产环境都能放到组件上下文对象(推荐)\n// ctx 中包含了组件中由ref和reactive创建的响应式数据对象，以及以下对象及方法\nproxy.$attrs\nproxy.$data\nproxy.$el\nproxy.$emit\nproxy.$forceUpdate\nproxy.$nextTick\nproxy.$options\nproxy.$parent\nproxy.$props\nproxy.$refs\nproxy.$root\nproxy.$slots\nproxy.$watch\n```\n\n##### vue3.x中我们采用mitt实现全局事件总成\n\n1、前言：由于vue3.x中删除了on和off，因此不能借助于一个单独的vue实例来实现全局事件的发布和订阅与取消订阅(也就是组件通讯)\n\n2、概述：mitt是一个三方库，npm安装：npm install -D mitt\n\n3、使用：我们同样使用插件的方式将mitt集成到vue中\n\n4、mitt对象：\n\n- all (map对象)：包含了所有订阅的事件名称，及对应的处理方法数组\n- emit (方法)：触发事件，参数为（事件名(方法名), 携带的参数），当前携带的参数只能为一个，不能为多个\n- on (方法)：创建事件订阅，参数为(事件名，处理方法)\n- off (方法)：取消事件订阅，参数为(事件名，处理方法)\n\n5、全局事件总成搭建\n\n```js\nimport _ from 'lodash'\nimport mitt from 'mitt'\nexport default {\n  install(Vue, options){\n    const _emitter = mitt()\n\n    // 全局发布(在vue全局方法中自定义$pub发布方法)\n    // 这里做了$pub方法能够携带多个参数的处理，方便我们在业务中触发事件时带多个参数\n    Vue.config.globalProperties.$pub = (...args) => {\n      _emitter.emit(_.head(args), args.slice(1))\n    }\n\n    // 全局订阅(在vue全局方法中自定义$sub订阅方法)\n    Vue.config.globalProperties.$sub = function(event, callback){\n      Reflect.apply(_emitter.on, _emitter, _.toArray(arguments))\n    }\n\n    // 取消订阅\n    Vue.config.globalProperties.$unsub = function(event, callback){\n      Reflect.apply(_emitter.off, _emitter, _.toArray(arguments))\n    }\n  }\n}\n```\n\n6、组件实例中使用：\n\n**全局事件发布**\n\n```js\n<template>\n  <div class=\"child\">\n    <button @click=\"pubHandler\">发起事件</button>\n  </div>\n</template>\n\n<script>\nimport { onMounted, getCurrentInstance } from 'vue'\nexport default {\n  setup(props, context){\n    const { proxy } = getCurrentInstance()\n    const pubHandler = () => {\n      proxy.$pub('foo', 1, 2, 3)\n    }\n    return { pubHandler }\n  }\n}\n</script>\n```\n\n**全局事件订阅/取消订阅**\n\n```js\n<template>\n  <div class=\"child\">\n    <button @click=\"unsubHandler\">注销事件</button>\n  </div>\n</template>\n\n<script>\nimport { onMounted, getCurrentInstance } from 'vue'\nexport default {\n  setup(props, context){\n    const { proxy } = getCurrentInstance()\n    const watchHandler = ([a, b, c] = args) => {\n      console.log('组件监听触发！');\n    }\n    onMounted(() => {\n      proxy.$sub('foo', watchHandler)\n    })\n    const unsubHandler = () => {\n      proxy.$unsub('foo', watchHandler)\n    }\n    return { unsubHandler }\n  }\n}\n</script>\n```\n\n##### Vue-Router在vue3.x中的使用方式及特性\n\n1、描述：区别于vue2，在vue3中vue-router将使用新的方法来创建路由，其中重要的是：createRouter, createWebHashHistory, createWebHistory这三个方法\n\n2、创建：\n\n```js\n// router.js\nimport { createRouter, createWebHashHistory, createWebHistory } from 'vue-router'\nconst routes = [...]\nconst router = createRouter({\n  // 区别于vue2的mode,vue3中将使用history属性来决定采用哪种路由模式\n  history: createWebHashHistory(), // 默认为hash模式，可设置createWebHistory模式\n  // 区别于vue2的base，vue3中的基础路由路径将作为createWebHashHistory或者createWebHistory的唯一参数配置到路由中\n  routes\n})\nexport default router;\n```\n\n```js\n// main.js\nimport router from './routes'\nconst app = createApp(App);\n// 注册路由\napp.use(router)\n```\n\n3、扩展：在组件中使用路由，查看路由\n\n```js\n// index.vue\n// vue-router库当中暴露了useRouter和useRoute两个方法供组件使用，还暴露有其他方法\nimport { useRouter, useRoute } from 'vue-router'\nimport { onMounted, getCurrentInstance } from 'vue'\nexport default {\n  setup(props, context){\n    const { proxy } = getCurrentInstance()\n    const router = useRouter()\n    const route = useRoute()\n    onMounted(() => {\n      console.log(proxy.$router === router); // true\n      console.log(route); {path, params, query ...}\n    })\n  }\n}\n```\n\n##### hooks\n\nVue3的hook函数相当于vue2的mixin，不同在于hooks是函数\n\nVue3的hook函数可以帮助我们提高代码的复用性，让我们能在不同的组件中都利用hooks函数\n\n```js\nimport { onBeforeUnmounted, onMounted, ref } from 'vue'\nexport default function () {\n  const x = ref(-1); // x绑定为响应式数据\n  const y = ref(-1);\n  const clickHandler = (event: MouseEvent) => {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n  onMounted(() => {\n    window.addEventListener('click', clickHandler)\n  })\n  onBeforeUnmounted(() => {\n    window.removeEventListener('click', clickHandler)\n  })\n  return {\n    x, y\n  }\n}\n```\n\n##### 新组件-- Teleport\n\nTeleport是一种能够将我们的模板移动到DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”\n\n场景：像modals,toast等这样的元素，很多情况下，我们将它完全的和我们的vue应用的DOM完全剥离，管理起来反而会方便容易很多\n\n原因在于如果我们嵌套在vue的某个组件内部，那么处理前套组件的定位、z-index和样式就会变得很困难\n\n另外，像modals,toast等这样的元素需要使用到vue组件的状态(data或者props)的值\n\n这就是Teleport派上用场的地方，我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的data或props，然后在vue应用的范围之外渲染它\n\n```js\n  <button @click=\"showToast\" class=\"btn\">打开toast</button>\n  <!-- to 属性就是目标位置 -->\n  <teleport to=\"#teleport-target\">\n    <div v-if=\"visiable\" class=\"toast-warp\">\n      <div class=\"toast-msg\">我是一个toast文案</div>\n    </div>\n  </teleport>\n```\n\n##### vue3中css使用js变量\n\n```js\n<template>\n  <div>\n    <h1>Hello Vue 3.0 + Vite</h1>\n  </div>\n</template>\n\n<script>\n  export default {\n    data(){\n      return {\n        color: \"red\",\n        backg: \"blue\"\n      }\n    }\n  }\n</script>\n\n<style vars=\"{ color, backg}\">\n  h1{\n    color: var(--color);\n    background-color: var(--backg);\n    text-align: center;\n  }\n</style>\n```\n\n","slug":"vue3对比vue2","published":1,"updated":"2022-01-13T13:05:55.956Z","_id":"ckxnaa6ey000b0gfz86hfhjei","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"使用vue-cli4-0创建项目\"><a href=\"#使用vue-cli4-0创建项目\" class=\"headerlink\" title=\"使用vue-cli4.0创建项目\"></a>使用vue-cli4.0创建项目</h5><p>先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0</p>\n<p><strong>安装</strong>vue-cli npm install -g @vue/cli</p>\n<p><strong>更新</strong>vue-cli npm update -g @vue/cli</p>\n<p><strong>创建项目：</strong></p>\n<p>vue create vue3-demo</p>\n<p>cd vue3-demo</p>\n<p>yarn serve</p>\n<p><strong>升级vue2项目</strong></p>\n<p>yarn add vue-next</p>\n<h5 id=\"创建vue3项目-vite方式\"><a href=\"#创建vue3项目-vite方式\" class=\"headerlink\" title=\"创建vue3项目-vite方式\"></a>创建vue3项目-vite方式</h5><p>npm init vite-app <project-name></project-name></p>\n<p>cd <project-name></project-name></p>\n<p>yarn</p>\n<p>yarn dev</p>\n<p><strong>vite</strong>是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动</p>\n<ul>\n<li>快速的冷启动，不需要等待打包操作</li>\n<li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li>\n<li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变</li>\n</ul>\n<h5 id=\"生命周期的变化\"><a href=\"#生命周期的变化\" class=\"headerlink\" title=\"生命周期的变化\"></a>生命周期的变化</h5><table>\n<thead>\n<tr>\n<th>vue2.x</th>\n<th>vue3.x</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beforeCreate</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>created</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n</tr>\n<tr>\n<td>beforeUnmounte</td>\n<td>onBeforeUnmounte</td>\n</tr>\n<tr>\n<td>unmounted</td>\n<td>onUnmounted</td>\n</tr>\n<tr>\n<td>errorCaptured</td>\n<td>onErrorCaptured</td>\n</tr>\n<tr>\n<td>renderTracked</td>\n<td>onRenderTracked</td>\n</tr>\n<tr>\n<td>renderTriggered</td>\n<td>onRenderTriggered</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impor &#123; onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\tonMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;component is mounted&#x27;</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"main-js中变化-新增全局API-createApp\"><a href=\"#main-js中变化-新增全局API-createApp\" class=\"headerlink\" title=\"main.js中变化 新增全局API: createApp()\"></a>main.js中变化 新增全局API: createApp()</h5><p>vue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a>router.js</h5><p>vue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;homepage&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">path</span>: <span class=\"string\">&#x27;/homepage&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../views/homepage/index.vue&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">history</span>: createWebHashHistory(),</span><br><span class=\"line\">\troutes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h5><p>vue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"应用配置\"><a href=\"#应用配置\" class=\"headerlink\" title=\"应用配置\"></a>应用配置</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config\t\t\t\t\t-&gt;\tapp.config</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.ignoredElements\t-&gt;\tapp.config.ignoredElements\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component\t\t\t\t-&gt;\tapp.component\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive\t\t\t\t-&gt;\tapp.directive\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.mixin\t\t\t\t\t-&gt;\tapp.mixin\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use\t\t\t\t\t\t-&gt;\tapp.use\t</span><br></pre></td></tr></table></figure>\n\n<p>config: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = Vue.createApp(&#123;&#125;);</span><br><span class=\"line\">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true</p>\n</li>\n<li><p>errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) =&gt; {}</p>\n</li>\n<li><p>warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) =&gt; {};</p>\n</li>\n<li><p>globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vue2.x</span></span><br><span class=\"line\">Vue.prototype.name = <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// Vue3.x</span></span><br><span class=\"line\">app.config.globalProperties.name = <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\">app.component(<span class=\"string\">&#x27;child-component&#x27;</span>, &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>isCustomElement (类型: (tag: string) =&gt; boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag =&gt; tag.startsWith(‘ion’);</p>\n</li>\n</ol>\n<h5 id=\"挂载应用程序\"><a href=\"#挂载应用程序\" class=\"headerlink\" title=\"挂载应用程序\"></a>挂载应用程序</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App);</span><br><span class=\"line\">app.mount( #app<span class=\"string\">&#x27;); </span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// myComponent为组件实例</span></span><br><span class=\"line\">app.component(<span class=\"string\">&#x27;my-component, myComponent);</span></span><br><span class=\"line\"><span class=\"string\">//重置组件</span></span><br><span class=\"line\"><span class=\"string\">const MyComponent = app.component(&#x27;</span>my-component<span class=\"string\">&#x27;, &#123;&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\"><a href=\"#新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\" class=\"headerlink\" title=\"新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\"></a>新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)</h5><p>参数: Object | () =&gt; Object.</p>\n<p>概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。</p>\n<p>用例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">//全局注入数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">procide</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">user</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">app.component(‘my-component<span class=\"string\">&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tinject: [ &#x27;</span>user<span class=\"string\">&#x27;],</span></span><br><span class=\"line\"><span class=\"string\">\tdata() &#123;...&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"全局方法\"><a href=\"#全局方法\" class=\"headerlink\" title=\"全局方法\"></a>全局方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vue2.x</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\">Vue.nextTick(<span class=\"function\">()=&gt;</span>&#123; ... &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.$nextTick(<span class=\"function\">()=&gt;</span>&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue3.x</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tnextTick(<span class=\"function\">()=&gt;</span>&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"自定义指令：directive\"><a href=\"#自定义指令：directive\" class=\"headerlink\" title=\"自定义指令：directive\"></a>自定义指令：directive</h5><p>Vue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）</p>\n<ol>\n<li>bind                            -&gt;    beforeMount（挂载前）</li>\n<li>inserted                        -&gt;    mounted（挂载后）</li>\n<li>​                                        -&gt;    beforeUpdate（新增，更新前）</li>\n<li>update                            -&gt;    删除</li>\n<li>componentUpdate        -&gt;    update（更新后）</li>\n<li>​                                        -&gt;    beforeUnmounted（新增，卸载前）</li>\n<li>unbind                            -&gt;    unmounted（卸载后）</li>\n</ol>\n<h5 id=\"跨组件通讯\"><a href=\"#跨组件通讯\" class=\"headerlink\" title=\"跨组件通讯\"></a>跨组件通讯</h5><p>vue2.x eventBus</p>\n<p>Vue3.x 中全局事件总成将使用mitt来实现跨组件通讯。</p>\n<p>使用<strong>mitt</strong>之前先安装mitt模块<strong>npm install –save mitt</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mitt&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueEvent = mitt()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> VueEvent;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doLogin&quot;</span>&gt;</span>父子组件传值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> VueEvent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../model/event&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"keyword\">return</span> &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">methods</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"function\"><span class=\"title\">doLogin</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\tVueEvent.emit(<span class=\"string\">&#x27;login&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">用户登录组件</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> VueEvent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../model/event&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\tVueEvent.on(<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\talert(<span class=\"string\">&#x27;doLogin&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3-x组件自定义事件验证\"><a href=\"#Vue3-x组件自定义事件验证\" class=\"headerlink\" title=\"Vue3.x组件自定义事件验证\"></a>Vue3.x组件自定义事件验证</h5><p>父组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">login</span> @<span class=\"attr\">submit</span>=<span class=\"string\">&quot;getChild&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Login&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&#x27;hello vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">components</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\tLogin</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">methods</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"function\"><span class=\"title\">getChild</span>(<span class=\"params\">data</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\talert(data)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;username&quot;</span> /&gt;</span></span></span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span></span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"comment\">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">emits</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"attr\">submit</span> :<span class=\"function\">(<span class=\"params\">&#123;</span></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"javascript\"><span class=\"xml\">\t\t\tusername,</span></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"javascript\"><span class=\"xml\">\t\t\tpassword</span></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"keyword\">if</span> (username &amp;&amp; password) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"built_in\">console</span>.warn(<span class=\"string\">&quot;传入的参数不能为空&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"attr\">username</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">methods</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;submit&#x27;</span>,&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"attr\">username</span>: <span class=\"built_in\">this</span>.username,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"attr\">password</span>: <span class=\"built_in\">this</span>.password</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3-x过滤器\"><a href=\"#Vue3-x过滤器\" class=\"headerlink\" title=\"Vue3.x过滤器\"></a>Vue3.x过滤器</h5><p>在3.x中，过滤器被删除，不再受支持。建议用方法调用或计算属性替换它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bank Account Balance<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; accountBalance | currencyUSD &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">accountBalance</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">require</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">filters</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">currencyUSD</span>(<span class=\"params\">value</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;$&#x27;</span> + value</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bank Account Balance<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; currencyUSD &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">accountBalance</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">require</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">computed</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">currencyUSD</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;$&#x27;</span> + <span class=\"built_in\">this</span>.accountBalance</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多根节点组件\"><a href=\"#多根节点组件\" class=\"headerlink\" title=\"多根节点组件\"></a>多根节点组件</h5><p>Vue2.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Vue3.x中可以使用多个根节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h5><p>Vue2.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup<span class=\"number\">.13</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">Vue.config.keyCode= &#123; f1: 112 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vue3.x 别名支持任意键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup.delete=<span class=\"string\">&quot;cancel&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.f1</span>=<span class=\"string\">&quot;cancel&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"渲染功能render函数\"><a href=\"#渲染功能render函数\" class=\"headerlink\" title=\"渲染功能render函数\"></a>渲染功能render函数</h5><p>Vue2.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">h</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Vue3.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">&#x27;div&#x27;</span>, &#123;<span class=\"attr\">class</span>: <span class=\"string\">&#x27;red&#x27;</span>&#125;, <span class=\"string\">&#x27;hello, Vue3.x!&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3更好用的v-model指令\"><a href=\"#Vue3更好用的v-model指令\" class=\"headerlink\" title=\"Vue3更好用的v-model指令\"></a>Vue3更好用的v-model指令</h5><p>1、概述：数据双向绑定</p>\n<p>2、回顾：在Vue2.x中，v-model进行数据双向绑定（语法糖）的原理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;my-component v-model=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class=\"line\">&lt;!-- 等价于 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;msg&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;msg=$event&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-components</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中接收绑定数据和触发数据改变</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span> &#125; <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br></pre></td></tr></table></figure>\n\n<p>用于自定义组件时，v-model的prop和事件默认名称已更改：</p>\n<p>prop: value -&gt; modelValue</p>\n<p>event: input -&gt; update:modelValue</p>\n<p>即</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xxComponent v-model=<span class=\"string\">&quot;varA&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xxComponent :modelValue=<span class=\"string\">&quot;varA&quot;</span> @update:modelValue=<span class=\"string\">&quot;varA = $event&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>且在Vue2.x中不能绑定多个v-model</p>\n<p>3、用例：Vue3.x重写了v-model的实现方式以适用绑定多个v-model</p>\n<p>①：单个数据实现数据双向绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;my-component v-model=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class=\"line\">&lt;!-- 等价于 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span> <span class=\"attr\">:modelValue</span>=<span class=\"string\">&quot;msg&quot;</span> @<span class=\"attr\">update:modelValue</span>=<span class=\"string\">&quot;msg = $event&quot;</span> /&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中接收绑定数据和触发数据改变</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">modelValue</span>: <span class=\"built_in\">String</span> &#125; <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class=\"line\">  emit(<span class=\"string\">&#x27;update:modelValue&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>②：多个数据实现数据双向绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;my-component v-model:msg=<span class=\"string\">&quot;msg&quot;</span> v-model:name=<span class=\"string\">&quot;name&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class=\"line\">&lt;!-- 等价于 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;msg&quot;</span> @<span class=\"attr\">update:msg</span>=<span class=\"string\">&quot;msg = $event&quot;</span> <span class=\"attr\">:name</span>=<span class=\"string\">&quot;name&quot;</span> @<span class=\"attr\">update:name</span>=<span class=\"string\">&quot;name = $event&quot;</span>/&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中接收绑定数据和触发数据改变</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">name</span>: <span class=\"built_in\">String</span> &#125; <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class=\"line\">  emit(<span class=\"string\">&#x27;update:msg&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br><span class=\"line\">  emit(<span class=\"string\">&#x27;update:name&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h6><p>支持vue2.x的所有修饰符</p>\n<ul>\n<li>.lazy 取代input监听change事件</li>\n<li>.number 输入字符串转为有效的数字</li>\n<li>.trim 输入首尾空格过滤</li>\n</ul>\n<h6 id=\"支持自定义修饰符\"><a href=\"#支持自定义修饰符\" class=\"headerlink\" title=\"支持自定义修饰符\"></a>支持自定义修饰符</h6><p>例子：自定义prop名+自定义修饰符</p>\n<p><strong>父组件：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zi v-model:content.camelCase=&quot;word&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件较复杂，用组合式API来演示。</p>\n<p>defineProps函数的写法就是这样，先写content，然后写contentModifiers，这是Vue的规定，必须是prop名跟Modefiers字串。contentModifiers必须是这样一个函数。</p>\n<p>useContext和getCurrentInstance在开发中会经常用到。useContext()能拿到几个变量，包括props变量。getCurrentInstance()能拿到组件实例this，用来执行.emit()</p>\n<p>content必须是计算变量，否则传入prop新值之后，子组件无法感知</p>\n<p>emitCamelCase方法里，if语句是为了确认修饰符正确</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;content&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;emitCamelCase&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; useContext, getCurrentInstance, defineProps, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">defineProps(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">content</span>: <span class=\"built_in\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">contentModifiers</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">const</span> ctx = useContext()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">const</span> instance = getCurrentInstance()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">let</span> content = computed(<span class=\"function\">() =&gt;</span> &#123; ctx.props.content &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emitCamelCase</span>(<span class=\"params\">e</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">if</span> (ctx.props.contentModifiers.camelCase) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    instance.emit(<span class=\"string\">&quot;update:content&quot;</span>, e.target.value.replace(<span class=\"regexp\">/_./g</span>, <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>].toUpperCase()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-v-is指令\"><a href=\"#vue3-v-is指令\" class=\"headerlink\" title=\"vue3 v-is指令\"></a>vue3 v-is指令</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue的动态组件中使用is</span></span><br><span class=\"line\">&lt;component is=<span class=\"string\">&quot;foo&quot;</span>&gt;&lt;/component&gt;</span><br><span class=\"line\"><span class=\"comment\">// vue2.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class=\"line\"><span class=\"comment\">// vue3.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一般组件中使用is</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">user-edit</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;foo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user-edit</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// vue2.x --&gt; is的值指的是要江染的组件的名称;渲染foo组件</span></span><br><span class=\"line\"><span class=\"comment\">// vue3.x --&gt; 渲染user- edit组件; is将作为组件的prop进行值的传递</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一般元素中使用is</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;val&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// vue2.x ---&gt; is的值会被编译为boolean; 且元素会被动态加载或销毁(会触发transition效果)</span></span><br><span class=\"line\"><span class=\"comment\">// vue3.x ---&gt; is的值为any; 值的变化不会造成元素任何变化(丢失了vue2中元素上使用的s的功能，因此vue3中引入了新的指令v-is)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3.x的新指令 v-is</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-is</span>=<span class=\"string\">&quot;val&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 与vue2. x中-般元素上使用is的效果-致</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"v-for中使用ref\"><a href=\"#v-for中使用ref\" class=\"headerlink\" title=\"v-for中使用ref\"></a>v-for中使用ref</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue2.x </span></span><br><span class=\"line\">&lt;p v-<span class=\"keyword\">for</span>=”item <span class=\"keyword\">in</span> renderData<span class=\"string\">&quot; :key=&quot;</span>item.name<span class=\"string\">&quot; ref=”nodes&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.nodes) <span class=\"comment\">// 返回所有循环的p元素节点</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue3.x</span></span><br><span class=\"line\"><span class=\"comment\">//如果还是按照Vue2.x的方式</span></span><br><span class=\"line\">&lt;p v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;item in renderData&quot;</span> :key= <span class=\"string\">&quot;item.name&quot;</span> ref=<span class=\"string\">&quot;nodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.nodes) <span class=\"comment\">//此时只能得到循环后最后一个P元素节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue3.x中，使用函数处理v-for中的ref;且用变量单独存储。</span></span><br><span class=\"line\">&lt;p v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;item in renderData&quot;</span> :key=<span class=\"string\">&quot; item.name&quot;</span> ref=<span class=\"string\">&quot;handleNodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = reactive(&#123;</span><br><span class=\"line\">    <span class=\"attr\">nodes</span>: []</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleNodes = <span class=\"function\"><span class=\"params\">nodeItem</span> =&gt;</span> &#123;</span><br><span class=\"line\">    data.nodes.push(nodeItem)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...toRefs(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"mixin-的合并行为更改\"><a href=\"#mixin-的合并行为更改\" class=\"headerlink\" title=\"mixin 的合并行为更改\"></a>mixin 的合并行为更改</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mixin</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$data); <span class=\"comment\">// &#123;name: &#x27;zhangsan&#x27;, age: 30&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// &#x27;zhangsan</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age); <span class=\"comment\">// 30</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$data); <span class=\"comment\">// &#123;age: 30&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// &#x27;zhangsan</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age); <span class=\"comment\">// 30</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>得出结论：</strong></p>\n<p>1、与vue2.x一样会覆盖掉mixin中相同的响应属性。</p>\n<p>2、vue3.x中当前实例的$data是不会包含mixin中定义的响应属性</p>\n<h5 id=\"v-if和v-for优先级\"><a href=\"#v-if和v-for优先级\" class=\"headerlink\" title=\"v-if和v-for优先级\"></a>v-if和v-for优先级</h5><p>当v-if和v-for同时作用于一个元素上时：</p>\n<p>Vue2.x中v-for的优先级会高于v-if;</p>\n<p>Vue3.x中v-if的优先级会高于v-for;</p>\n<p>使用禁忌: Vue3.x中不能将v -for和v-if放在同-个元素上。只能使用v-for嵌套v -if使用</p>\n<p>使用建议:官方建议使用计算属性来处理,即提高性能，又能兼容Vue3.x。</p>\n<h5 id=\"attrs和-listener的融合\"><a href=\"#attrs和-listener的融合\" class=\"headerlink\" title=\"$attrs和$listener的融合\"></a>$attrs和$listener的融合</h5><p>我们知道，在vue2中我们使用v-bind=”$attrs”, v-on=”$listenner”来将数据和事件做一个承 上启下的作用,但是在vue3中,首先是删除了v-on指令，其次是发现这两个组件的属性过于累赘，所以在当前版本中将$attrs 和$listenner他们的功能进行了融合, $listenner 现在已作为$attrs 的其中一部分进行传递,所以只需要在组建上指定v-bind=”$attrs”，那么将同时拥有传值和传递事件的功能。</p>\n<h5 id=\"setup说明\"><a href=\"#setup说明\" class=\"headerlink\" title=\"setup说明\"></a>setup说明</h5><ul>\n<li>setup</li>\n</ul>\n<p>setup有两个参数props和context</p>\n<ul>\n<li><p>props：接收父组件传的值</p>\n</li>\n<li><p>context：vue3.x里面没有this，提供了一个context上下文属性，你可以通过这个属性去获取进行一些vue2.x用this实现的操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(props.title);</span><br><span class=\"line\">    </span><br><span class=\"line\">    context.attrs</span><br><span class=\"line\">    context.slots</span><br><span class=\"line\">    context.parent</span><br><span class=\"line\">    context.root</span><br><span class=\"line\">    context.emit</span><br><span class=\"line\">    context.refs</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>在setup中定义的变量或方法，都必须通过<strong>return</strong> {xxx,xxx} 暴露出去，外界才能使用</p>\n<p><strong>注意：</strong>props为响应式代理，如果使用es6的数据解构操作，将使得结构后的数据失去响应式（即不能实时获取到父组件传来的值）</p>\n<p><strong>扩展：</strong>父组件通过属性传的值在子组件中的各个部分的获取：</p>\n<ol>\n<li>props：通过父传子的方式直接获取到值</li>\n<li>setup(props, context){}方法中的props只能拿到选项props中已经定义的属性</li>\n<li>setup(props, {attrs, emit, slots}){}方法中的attrs只能拿到未在选项props中定义的属性</li>\n<li>通过{proxy} = getCurrentInstance(); proxy.attrs; 组件实例中的attrs也只能拿到未在选项props中定义的属性</li>\n</ol>\n<p><strong>context：</strong>非响应式的对象，包含了组件暴露的三个property</p>\n<ol>\n<li>context.attrs：传入组件中但是未被props接收的对象</li>\n<li>context.emit：用于触发当前组件实例上的传值事件</li>\n<li>context.slots：用来访问被插槽分发的内容（一般用于使用渲染函数来书写一个组件时）</li>\n</ol>\n<p>**return()**：若需要在当前组件视图中或其它组件中使用当前组件创建的响应式变量及方法，则需要导出相应的响应式变量及方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> name = ref(<span class=\"string\">&quot;zhang_san&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; name &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>return 也有渲染功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> h(<span class=\"string\">&#x27;div&#x27;</span>, &#123;<span class=\"attr\">class</span>: <span class=\"string\">&#x27;red&#x27;</span>&#125;, <span class=\"string\">&#x27;内容&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// &lt;template&gt;&lt;div class=&quot;red&quot;&gt;内容&lt;/div&gt;&lt;/template&gt;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"响应式数据对象-reactive\"><a href=\"#响应式数据对象-reactive\" class=\"headerlink\" title=\"响应式数据对象 reactive\"></a>响应式数据对象 reactive</h5><p>1、概述：函数，创建一个响应式数据对象，响应式会影响到所有的子集嵌套</p>\n<p>2、用例：由vue提供，按需引入：import { reactive } from ‘vue’</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; user &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–readonly只读对象\"><a href=\"#延伸方法–readonly只读对象\" class=\"headerlink\" title=\"延伸方法–readonly只读对象\"></a>延伸方法–readonly只读对象</h5><p><strong>readonly()</strong></p>\n<p>1、概述：创建一个只读代理且原对象的任何嵌套属性也将是只读的</p>\n<p>2、用例：由vue提供，按需引入：import { readonly } from ‘vue’</p>\n<p>3、对普通变量创建只读</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; copy &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">copy.age++ <span class=\"comment\">// warning! target is readonly</span></span><br></pre></td></tr></table></figure>\n\n<p>4、对reactive创建只读</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; copy &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">user.age++\t<span class=\"number\">21</span></span><br><span class=\"line\">copy.age++ <span class=\"comment\">// warning! target is readonly</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–isProxy\"><a href=\"#延伸方法–isProxy\" class=\"headerlink\" title=\"延伸方法–isProxy()\"></a>延伸方法–isProxy()</h5><p>1、概述判断对象是否由reactive创建或者是readonly创建的代理</p>\n<p>2、用例：由vue提供，按需引入：import { isproxy } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;ref, reactive, readonly, isproxy&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ref创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> refVal = ref(<span class=\"number\">123</span>)</span><br><span class=\"line\">isProxy(refVal) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactive创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reactiveVal = reactive(&#123;<span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">isProxy(reactiveVal) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactive创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> readonlyVal = readonly(reactiveVal)</span><br><span class=\"line\">isProxy(readonlyVal) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultVal = <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">isProxy(defaultVal) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"isReactive\"><a href=\"#isReactive\" class=\"headerlink\" title=\"isReactive()\"></a>isReactive()</h5><p>1、检查对象是否由reactive创建</p>\n<p>2、用例：由vue提供，按需引入：import { isReactive } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, isReactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(user)); <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还能判断readonly代理的对象是否由reactive创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, isReactive, readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建普通只读代理</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> plain = readonly(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(plain)); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建reactive制度代理</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(copy)); <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–-isReadonly\"><a href=\"#延伸方法–-isReadonly\" class=\"headerlink\" title=\"延伸方法– isReadonly()\"></a>延伸方法– isReadonly()</h5><p>1、概述：检查代理是否由readonly创建</p>\n<p>2、用例：由vue提供，按需引入：import { isReadonly } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, readonly, isReadonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReadonly(copy)); <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–toRaw\"><a href=\"#延伸方法–toRaw\" class=\"headerlink\" title=\"延伸方法–toRaw()\"></a>延伸方法–toRaw()</h5><p>1、概述：返回由reactive或者是readonly代理的原始对象</p>\n<p>2、用例：由vue提供，按需引入：import { toRaw } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, readonly, isProxy, toRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveUser = reactive(user)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> readonlyUser = readonly(readonlyUser)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(toRaw(reactiveUser) === user); <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(toRaw(readonlyUser) === user); <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(reactiveUser))); <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(readonlyUser))); <span class=\"comment\">// false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–markRaw\"><a href=\"#延伸方法–markRaw\" class=\"headerlink\" title=\"延伸方法–markRaw()\"></a>延伸方法–markRaw()</h5><p>1、概述：标记一个对象，被标记后，该对象永远不会被转换为代理</p>\n<p>2、用例：由vue提供，按需引入：import { markRaw } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markRaw, reactive, isReactive, isProxy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = markRaw(&#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveUser = reactive(user)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(reactiveUser)); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveUser1 = reactive(&#123; user &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(reactiveUser1))); <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(reactiveUser1.user))); <span class=\"comment\">// false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–shallowReactive\"><a href=\"#延伸方法–shallowReactive\" class=\"headerlink\" title=\"延伸方法–shallowReactive()\"></a>延伸方法–shallowReactive()</h5><p>1、概述：创建一个反应式代理，但只是浅度创建</p>\n<p>2、用例：由vue提供，按需引入：import { shallowReactive } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isReactive, shallowReactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = shallowReactive(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">content</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    data.count++ <span class=\"comment\">// 11 逻辑层数据已发生变化,视图重新渲染</span></span><br><span class=\"line\">    isReactive(data.content) <span class=\"comment\">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class=\"line\">    data.content.age++ <span class=\"comment\">// 21 逻辑层数据发生变化，但是视图层不会被更新渲染</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–shallowReadonly\"><a href=\"#延伸方法–shallowReadonly\" class=\"headerlink\" title=\"延伸方法–shallowReadonly()\"></a>延伸方法–shallowReadonly()</h5><p>1、概述：创建一个只读代理，但只是浅度创建</p>\n<p>2、用例：由vue提供，按需引入：import { shallowReadonly } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isReadonly, shallowReadonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = shallowReadonly(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">content</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    data.count++ <span class=\"comment\">// warning! target is readonly.</span></span><br><span class=\"line\">    isReadonly(data.content) <span class=\"comment\">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class=\"line\">    data.content.age++ <span class=\"comment\">// 21 深度嵌套未被代理，所以操作成功</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"响应式数据–-ref\"><a href=\"#响应式数据–-ref\" class=\"headerlink\" title=\"响应式数据– ref\"></a>响应式数据– ref</h5><p>1、概述：函数，创建并返回一个响应式数据对象，并在此对象上只包含一个.value属性指向该数据值</p>\n<p>2、用例：由vue提供，按需引入：import { ref } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span> </span><br><span class=\"line\">  &lt;!-- 视图中直接使用即可，不需要.value --&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> name = ref(<span class=\"string\">&#x27;zhang_san&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(name.value); <span class=\"comment\">// &#x27;zhang_san&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 同样需要return返回</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; name &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用ref将一个对象创建为响应式代理的话，则该对象会被进行深度响应式创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;data.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>   &lt;!-- <span class=\"number\">0</span> --&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;data.content.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>   &lt;!-- <span class=\"number\">10</span> --&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> defaultVal = &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">content</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">age</span>: <span class=\"number\">10</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> data = ref(defaultVal)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(data.value.count); <span class=\"comment\">// 0</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(data.value.content.age); <span class=\"comment\">// 10</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; data &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">data.value.count++ <span class=\"comment\">// 1 视图重新渲染</span></span><br><span class=\"line\">data.value.content.age++ <span class=\"comment\">// 11 视图重新渲染</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ref数据能访问到的部分常用方法及延伸方法\"><a href=\"#ref数据能访问到的部分常用方法及延伸方法\" class=\"headerlink\" title=\"ref数据能访问到的部分常用方法及延伸方法\"></a>ref数据能访问到的部分常用方法及延伸方法</h5><h6 id=\"unref\"><a href=\"#unref\" class=\"headerlink\" title=\"unref()\"></a>unref()</h6><p>1、概述：返回代理原始值，如果参数为ref则返回代理原始值，如果不是ref则返回参数本身</p>\n<p>2、用例：由vue提供，按需引入：import { unref } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; unref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = ref(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unref(a)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unref(b)); <span class=\"comment\">// &#x27;zhang_san&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef()\"></a>toRef()</h6><p>1、概述：可以将reactive创建的代理的某个属性传递出来用ref进行代理</p>\n<p>2、用例：由vue提供，按需引入：import { toRef } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, toRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> toRefValue = toRef(data, <span class=\"string\">&#x27;age&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">toRefValue.value++ <span class=\"comment\">// toRefValue.value 21</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.age); <span class=\"comment\">// 21</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.age++ <span class=\"comment\">// data.age 22</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toRefValue.value); <span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n<p>3、<strong>注意：使用toRef将reactive的属性代理后，属性的值的变化会同时影响toRef后的值和原本的reactive的属性值</strong></p>\n<p>4、实例：在将prop的引用传递给复合函数的时候，toRef将非常有用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">\tuserHandler(toRef(props, <span class=\"string\">&#x27;name&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 这将使得userHandler拿到的name为响应式代理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs()\"></a>toRefs()</h6><p>1、概述：可以将reactive创建的代理的所有属性传递出来用ref进行代理</p>\n<p>2、用例：由vue提供，按需引入：import { toRefs } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, toRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> toRefValue = toRefs(data)</span><br><span class=\"line\"></span><br><span class=\"line\">toRefValue.age.value++ <span class=\"comment\">// toRefValue.age.value 21</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.age); <span class=\"comment\">// 21</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.age++ <span class=\"comment\">// data.age 22</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toRefValue.age.value); <span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n<p>3、<strong>注意：使用toRefs将reactive的属性代理后，属性的值的变化会同时影响toRef后的对应属性值和原本的reactive的属性值</strong></p>\n<p>4、实例：从组合函数返回响应式对象时，这将很有用，<strong>而不是使用es6数据结构的方式，这样会使reactive的属性失去响应式代理</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> toRefs(state)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name, age &#125; = userHandler()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; name, age &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"isRef\"><a href=\"#isRef\" class=\"headerlink\" title=\"isRef()\"></a>isRef()</h6><p>1、概述：判断响应式代理是否为ref所创建</p>\n<p>2、用例：由vue提供，按需引入：import { isRef } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, isRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = ref(<span class=\"string\">&#x27;zhang_san&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRef(name)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRef(user)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 应用场景，在获取一个未知的数据对象的值时，如：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newV = isRef(name) ? name.value : name</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"toRefs-–-解构响应式对象数据\"><a href=\"#toRefs-–-解构响应式对象数据\" class=\"headerlink\" title=\"toRefs – 解构响应式对象数据\"></a>toRefs – 解构响应式对象数据</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>解构响应式对象数据<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>UserName: &#123;&#123;username&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Age: &#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; reactive, toRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> user = reactive(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">age</span>: <span class=\"number\">20</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; ...toRefs(user) &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"reactive和ref的相互作用\"><a href=\"#reactive和ref的相互作用\" class=\"headerlink\" title=\"reactive和ref的相互作用\"></a>reactive和ref的相互作用</h5><p>1、将ref的数据对象挂载到reactive上时，会把原始的响应数据对象展开为原始值，这样就不需要.value而被直接访问到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref1 = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reactive1.ref1); <span class=\"comment\">// 0</span></span><br><span class=\"line\">    reactive1.ref1++</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reactive1.ref1); <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref1.value); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、新的ref会覆盖旧的ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref1 = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref2 = ref(<span class=\"number\">100</span>)</span><br><span class=\"line\">    reactive.ref1 = ref2</span><br><span class=\"line\">    reactive.ref1++</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reactive1.ref1); <span class=\"comment\">// 101</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref2.value); <span class=\"comment\">// 101</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref1.value); <span class=\"comment\">// 0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"reactive和ref的区别\"><a href=\"#reactive和ref的区别\" class=\"headerlink\" title=\"reactive和ref的区别\"></a>reactive和ref的区别</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num1 = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num2 = ref(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num3 = reactive(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num1); <span class=\"comment\">// 定义的纯数字10, 打印结果是一个数字类型的10</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num3); <span class=\"comment\">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; num1, num2, num3 &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们发现使用ref定义的数据，打印结果是一个被对象包裹的响应的数据，使用reactive的方式和纯变量声明的方式打印结果是一样的，这是什么原因呢</p>\n<p>我们发现在控制台输出一个警告信息，提示100这个值不能被reactive创建，官方也推荐我们在定义数据的时候，reactive定义复杂的数据类型的数据，ref推荐定义基本数据类型，所以如果要使用reactive第一基本数据类型的话，我们需要在reactive中将数据包裹一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num3 = reactive(&#123;<span class=\"attr\">val</span>: <span class=\"number\">100</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们在使用reactive定义数据的时候用对象做一层包裹，这样控制台就不会报警告信息了</p>\n<p>但是使用reactive定义的数据和ref定义的数据打印结果有一些差异</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num2 = ref(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> num3 = reactive(&#123;<span class=\"attr\">val</span>: <span class=\"number\">100</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num3); <span class=\"comment\">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br></pre></td></tr></table></figure>\n\n<p>我们发现ref定义的数据打印结果需要.value才能获取到结果，而reactive则不需要</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num2 = ref(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> num3 = reactive(&#123;<span class=\"attr\">val</span>:<span class=\"number\">100</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2.value) <span class=\"comment\">// 10 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">// &#123;val:100&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>reactive和ref都是用来定义响应式数据的，reactive更推荐去定义复杂的数据类型，ref更推荐定义基本数据类型</p>\n<p>ref和reactive本质我们可以简单的理解为ref是对reactive的二次包装，ref定义的数据访问的时候要多一个.value</p>\n<p>使用ref定义一本数据类型，ref也可以定义数组和对象</p>\n<p><strong>ref函数仅能监听基本类型的变化，不能监听复杂类型的变化(比如数组，对象)</strong></p>\n<h5 id=\"计算属性–-computed\"><a href=\"#计算属性–-computed\" class=\"headerlink\" title=\"计算属性– computed\"></a>计算属性– computed</h5><p>1、概述：vue2.x中的计算属性，在vue3.x中以方法的形式使用</p>\n<p>2、用例：用例：由vue提供，按需引入：import { computed } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAge = computed(<span class=\"function\">() =&gt;</span> <span class=\"string\">`今年<span class=\"subst\">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; userAge &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>带有get和set功能的用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAge = computed(&#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">`今年<span class=\"subst\">$&#123;age.value&#125;</span>岁了`</span>,</span><br><span class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> age.value = age + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; userAge &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"观察者–-watch\"><a href=\"#观察者–-watch\" class=\"headerlink\" title=\"观察者– watch\"></a>观察者– watch</h5><p>1、概述：vue2.x中的响应式变量监听，在vue3.x中以方法的形式使用</p>\n<p>2、用例：用例：由vue提供，按需引入：import { watch} from ‘vue’</p>\n<p>3、监听单一数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, computed, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ref</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> age.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reactive</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> product = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;pig&#x27;</span>, <span class=\"attr\">conut</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> product.count, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// props</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> props.msg, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//computed</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAge = computed(<span class=\"function\">() =&gt;</span> <span class=\"string\">`今年<span class=\"subst\">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> userAge.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、监听对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ref</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = ref(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们只需要监听name的值，那么</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value.name, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reactive</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveData = reactive(&#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;&#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们只需要监听name的值，那么</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user.name, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、监听数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ref</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = ref([</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;li_si&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// reactive</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveData = reactive(&#123; <span class=\"attr\">user</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;li_si&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">    ]&#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、监听多个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = ref(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    watch([<span class=\"function\">() =&gt;</span> age.value, <span class=\"function\">() =&gt;</span> user.name], <span class=\"function\">(<span class=\"params\">[newAge, newName], [oldAge, newName]</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、终止监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\">// watch监听会返回一个方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stop = watch(age, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 当调用此方法后，该监听就会被移除</span></span><br><span class=\"line\">stop()</span><br></pre></td></tr></table></figure>\n\n<p>8、清除watch中无效的异步任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;keywords&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> keywords = ref(<span class=\"string\">&quot;&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">//异步任务：打印用户输入的关键词</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> asyncPrint = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(val);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;, <span class=\"number\">1000</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    watch(</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      keywords,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"function\">(<span class=\"params\">keywords, prevKeywords, onCleanup</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">// 执行异步任务，并得到关闭异步任务的 timerId</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">const</span> timerId = asyncPrint(keywords)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">// 如果 watch 监听被重复了，则会先清除上次未完成的异步任务</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        onCleanup(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearTimeout</span>(timerId))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#123; <span class=\"attr\">lazy</span>: <span class=\"literal\">true</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    )</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; keywords &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"provide和inject\"><a href=\"#provide和inject\" class=\"headerlink\" title=\"provide和inject\"></a>provide和inject</h5><p>1、概述：实现嵌套组件树形数据传递与接收</p>\n<p>2、使用：由vue提供，按需引入：import { provide, inject } from ‘vue’</p>\n<p>3、用例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; provide, inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//父组件注入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;zhang_san&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 如果是需要注入多个值则重复使用provide即可</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件接收</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// inject的第二个参数为没有接收到注入的数据时的默认返回值，如果没有，则返回undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = inject(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;li_si&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 需要接收多个注入的值也是重复使用inject</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; user &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、实例：在实际使用过程中，往往我们需要将注入的值实现响应式变化，则需要注入响应式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件注入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;user&#x27;</span>, user)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件接收后，如果父组件中的user发生了改变，则子组件中也会发生响应式变化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = inject(<span class=\"string\">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; user &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、注意：<strong>不建议在注入时对响应式变量进行改变(在子组件中改变注入的值)，因为此操作会改变vue的单向数据流，建议采用注入改变其值的方法来对响应式变量进行改变</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, provide, inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//父组件注入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHandler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      user.age = <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;user&#x27;</span>, user)</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;changeHandler&#x27;</span>, changeHandler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件接收后，通过调用注入的方法来对响应式变量进行改变</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = inject(<span class=\"string\">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHandler = inject(<span class=\"string\">&#x27;changeHandler&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; user, changeHandler &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"template和ref获取元素或组件实例\"><a href=\"#template和ref获取元素或组件实例\" class=\"headerlink\" title=\"template和ref获取元素或组件实例\"></a>template和ref获取元素或组件实例</h5><p>1、概述：通过ref获取模板元素节点</p>\n<p>2：使用：由vue提供，按需引入：import { ref } from ‘vue’</p>\n<p>3、回顾：options API中是：this.refs.refAdd(获取某个组件)或者this.refs.refDiv(获取某个元素节点)</p>\n<p>4、用例：</p>\n<ul>\n<li>在组件或节点中定义ref属性：add(ref=”refAdd”)或div(ref=”refDiv”)</li>\n<li>在setup中定义对应ref属性相同的变量名，赋值为任意值即可</li>\n<li>访问方式为：refAdd.value或refDiv.value</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;divBox&quot;</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> divBox = ref(<span class=\"literal\">null</span>); <span class=\"comment\">// &lt;div ref=&quot;divBox&quot;&gt;content&lt;/div&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> user = ref(<span class=\"literal\">null</span>); <span class=\"comment\">// user.value -&gt; null</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; divBox &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>4、注意：</p>\n<p><strong>①：元素节点对应ref的分配只会在render时进行对比赋值，因此若在setup中未将对应的响应式变量return出来，则不会获取到组件实例或元素节点</strong></p>\n<p><strong>②：在满足①的前提下，只要在定义变量时变量名称与当前组件中ref属性值相同，则该变量会被统一赋值为组件实例或元素节点，与定义变量时的赋值无关</strong></p>\n<p>setup的context中访问到refs对象，所以获取组件实例或者元素节点的方式还可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;divBox&quot;</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, &#123; refs &#125;</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> divBox = refs.divBox;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; divBox &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-x中的emits选项\"><a href=\"#vue3-x中的emits选项\" class=\"headerlink\" title=\"vue3.x中的emits选项\"></a>vue3.x中的emits选项</h5><p>vue3.x组件自定义事件实现子组件给父组件传值</p>\n<p>注意：vue官方推荐你始终使用<strong>kebab-case</strong>的事件名</p>\n<p>子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"comment\">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作、</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">emit</span>: [<span class=\"string\">&#x27;run-parent&#x27;</span>],</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;run-parent&quot;</span>, <span class=\"string\">&quot;传给爸爸&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>1、概述：当前组件的通过emit的事件列表</p>\n<p>2：类型：Array|Object</p>\n<p>3、作用：vue3.0中使用emit发起事件时会要求当前组件记录emit事件(没有则控制台会抛出警告)</p>\n<p>4、用途：用于记录当前组件emit的事件，当为对象时，则可以验证传入的值是否有效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">prop, &#123; emit &#125;</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeOne = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;on-changeOne&#x27;</span>, val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeTwo = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;on-changeTwo&#x27;</span>, val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法一：数组用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">emits</span>: [<span class=\"string\">&#x27;on-changeOne&#x27;</span>, <span class=\"string\">&#x27;on-changeTwo&#x27;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法二：对象用法，当emits为对象时，可以验证事件中的参数是否有效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">emits</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;on-changeOne&#x27;</span>: <span class=\"function\"><span class=\"params\">payload</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 验证通过</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.warn(<span class=\"string\">&#x27;验证失败！&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 验证失败，控制台打印警告信息“验证失败”</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;on-changeTwo&#x27;</span>: <span class=\"function\"><span class=\"params\">payload</span> =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-x核心值getCurrentInstance\"><a href=\"#vue3-x核心值getCurrentInstance\" class=\"headerlink\" title=\"vue3.x核心值getCurrentInstance\"></a>vue3.x核心值getCurrentInstance</h5><p>1、概述：一个很重要的方法，获取当前组件的实例、上下文来操作router和vuex等</p>\n<p>2、使用：由vue提供，按需引入：import { getCurrentInstance } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 获取当前组件实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = getCurrentInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取当前组件的上下文，下面两种方式都能获取到组件的上下文</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ctx &#125; = getCurrentInstance(); <span class=\"comment\">// 方式一，这种方式只能在开发环境下使用，生产环境下的ctx将访问不到</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance(); <span class=\"comment\">// 方式二，此方法在开发环境及生产环境都能放到组件上下文对象(推荐)</span></span><br><span class=\"line\"><span class=\"comment\">// ctx 中包含了组件中由ref和reactive创建的响应式数据对象，以及以下对象及方法</span></span><br><span class=\"line\">proxy.$attrs</span><br><span class=\"line\">proxy.$data</span><br><span class=\"line\">proxy.$el</span><br><span class=\"line\">proxy.$emit</span><br><span class=\"line\">proxy.$forceUpdate</span><br><span class=\"line\">proxy.$nextTick</span><br><span class=\"line\">proxy.$options</span><br><span class=\"line\">proxy.$parent</span><br><span class=\"line\">proxy.$props</span><br><span class=\"line\">proxy.$refs</span><br><span class=\"line\">proxy.$root</span><br><span class=\"line\">proxy.$slots</span><br><span class=\"line\">proxy.$watch</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-x中我们采用mitt实现全局事件总成\"><a href=\"#vue3-x中我们采用mitt实现全局事件总成\" class=\"headerlink\" title=\"vue3.x中我们采用mitt实现全局事件总成\"></a>vue3.x中我们采用mitt实现全局事件总成</h5><p>1、前言：由于vue3.x中删除了on和off，因此不能借助于一个单独的vue实例来实现全局事件的发布和订阅与取消订阅(也就是组件通讯)</p>\n<p>2、概述：mitt是一个三方库，npm安装：npm install -D mitt</p>\n<p>3、使用：我们同样使用插件的方式将mitt集成到vue中</p>\n<p>4、mitt对象：</p>\n<ul>\n<li>all (map对象)：包含了所有订阅的事件名称，及对应的处理方法数组</li>\n<li>emit (方法)：触发事件，参数为（事件名(方法名), 携带的参数），当前携带的参数只能为一个，不能为多个</li>\n<li>on (方法)：创建事件订阅，参数为(事件名，处理方法)</li>\n<li>off (方法)：取消事件订阅，参数为(事件名，处理方法)</li>\n</ul>\n<p>5、全局事件总成搭建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mitt&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">install</span>(<span class=\"params\">Vue, options</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _emitter = mitt()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全局发布(在vue全局方法中自定义$pub发布方法)</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里做了$pub方法能够携带多个参数的处理，方便我们在业务中触发事件时带多个参数</span></span><br><span class=\"line\">    Vue.config.globalProperties.$pub = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      _emitter.emit(_.head(args), args.slice(<span class=\"number\">1</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全局订阅(在vue全局方法中自定义$sub订阅方法)</span></span><br><span class=\"line\">    Vue.config.globalProperties.$sub = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, callback</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Reflect</span>.apply(_emitter.on, _emitter, _.toArray(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">    Vue.config.globalProperties.$unsub = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, callback</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Reflect</span>.apply(_emitter.off, _emitter, _.toArray(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、组件实例中使用：</p>\n<p><strong>全局事件发布</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pubHandler&quot;</span>&gt;</span>发起事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> pubHandler = <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      proxy.$pub(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; pubHandler &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>全局事件订阅/取消订阅</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;unsubHandler&quot;</span>&gt;</span>注销事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> watchHandler = <span class=\"function\">(<span class=\"params\">[a, b, c] = args</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;组件监听触发！&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    onMounted(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      proxy.$sub(<span class=\"string\">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> unsubHandler = <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      proxy.$unsub(<span class=\"string\">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; unsubHandler &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue-Router在vue3-x中的使用方式及特性\"><a href=\"#Vue-Router在vue3-x中的使用方式及特性\" class=\"headerlink\" title=\"Vue-Router在vue3.x中的使用方式及特性\"></a>Vue-Router在vue3.x中的使用方式及特性</h5><p>1、描述：区别于vue2，在vue3中vue-router将使用新的方法来创建路由，其中重要的是：createRouter, createWebHashHistory, createWebHistory这三个方法</p>\n<p>2、创建：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHashHistory, createWebHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [...]</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 区别于vue2的mode,vue3中将使用history属性来决定采用哪种路由模式</span></span><br><span class=\"line\">  <span class=\"attr\">history</span>: createWebHashHistory(), <span class=\"comment\">// 默认为hash模式，可设置createWebHistory模式</span></span><br><span class=\"line\">  <span class=\"comment\">// 区别于vue2的base，vue3中的基础路由路径将作为createWebHashHistory或者createWebHistory的唯一参数配置到路由中</span></span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./routes&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App);</span><br><span class=\"line\"><span class=\"comment\">// 注册路由</span></span><br><span class=\"line\">app.use(router)</span><br></pre></td></tr></table></figure>\n\n<p>3、扩展：在组件中使用路由，查看路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.vue</span></span><br><span class=\"line\"><span class=\"comment\">// vue-router库当中暴露了useRouter和useRoute两个方法供组件使用，还暴露有其他方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter, useRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = useRouter()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = useRoute()</span><br><span class=\"line\">    onMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(proxy.$router === router); <span class=\"comment\">// true</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(route); &#123;path, params, query ...&#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"hooks\"><a href=\"#hooks\" class=\"headerlink\" title=\"hooks\"></a>hooks</h5><p>Vue3的hook函数相当于vue2的mixin，不同在于hooks是函数</p>\n<p>Vue3的hook函数可以帮助我们提高代码的复用性，让我们能在不同的组件中都利用hooks函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; onBeforeUnmounted, onMounted, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = ref(-<span class=\"number\">1</span>); <span class=\"comment\">// x绑定为响应式数据</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = ref(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clickHandler = <span class=\"function\">(<span class=\"params\">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    x.value = event.pageX</span><br><span class=\"line\">    y.value = event.pageY</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, clickHandler)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  onBeforeUnmounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">&#x27;click&#x27;</span>, clickHandler)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    x, y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新组件–-Teleport\"><a href=\"#新组件–-Teleport\" class=\"headerlink\" title=\"新组件– Teleport\"></a>新组件– Teleport</h5><p>Teleport是一种能够将我们的模板移动到DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”</p>\n<p>场景：像modals,toast等这样的元素，很多情况下，我们将它完全的和我们的vue应用的DOM完全剥离，管理起来反而会方便容易很多</p>\n<p>原因在于如果我们嵌套在vue的某个组件内部，那么处理前套组件的定位、z-index和样式就会变得很困难</p>\n<p>另外，像modals,toast等这样的元素需要使用到vue组件的状态(data或者props)的值</p>\n<p>这就是Teleport派上用场的地方，我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的data或props，然后在vue应用的范围之外渲染它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;showToast&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;btn&quot;</span>&gt;打开toast&lt;/button&gt;</span><br><span class=\"line\">&lt;!-- to 属性就是目标位置 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;#teleport-target&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;visiable&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-warp&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-msg&quot;</span>&gt;</span>我是一个toast文案<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">teleport</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3中css使用js变量\"><a href=\"#vue3中css使用js变量\" class=\"headerlink\" title=\"vue3中css使用js变量\"></a>vue3中css使用js变量</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Vue 3.0 + Vite<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">backg</span>: <span class=\"string\">&quot;blue&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">vars</span>=<span class=\"string\">&quot;&#123; color, backg&#125;&quot;</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">  <span class=\"selector-tag\">h1</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--backg);</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    <span class=\"attribute\">text-align</span>: center;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"使用vue-cli4-0创建项目\"><a href=\"#使用vue-cli4-0创建项目\" class=\"headerlink\" title=\"使用vue-cli4.0创建项目\"></a>使用vue-cli4.0创建项目</h5><p>先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0</p>\n<p><strong>安装</strong>vue-cli npm install -g @vue/cli</p>\n<p><strong>更新</strong>vue-cli npm update -g @vue/cli</p>\n<p><strong>创建项目：</strong></p>\n<p>vue create vue3-demo</p>\n<p>cd vue3-demo</p>\n<p>yarn serve</p>\n<p><strong>升级vue2项目</strong></p>\n<p>yarn add vue-next</p>\n<h5 id=\"创建vue3项目-vite方式\"><a href=\"#创建vue3项目-vite方式\" class=\"headerlink\" title=\"创建vue3项目-vite方式\"></a>创建vue3项目-vite方式</h5><p>npm init vite-app <project-name></project-name></p>\n<p>cd <project-name></project-name></p>\n<p>yarn</p>\n<p>yarn dev</p>\n<p><strong>vite</strong>是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动</p>\n<ul>\n<li>快速的冷启动，不需要等待打包操作</li>\n<li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li>\n<li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变</li>\n</ul>\n<h5 id=\"生命周期的变化\"><a href=\"#生命周期的变化\" class=\"headerlink\" title=\"生命周期的变化\"></a>生命周期的变化</h5><table>\n<thead>\n<tr>\n<th>vue2.x</th>\n<th>vue3.x</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beforeCreate</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>created</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n</tr>\n<tr>\n<td>beforeUnmounte</td>\n<td>onBeforeUnmounte</td>\n</tr>\n<tr>\n<td>unmounted</td>\n<td>onUnmounted</td>\n</tr>\n<tr>\n<td>errorCaptured</td>\n<td>onErrorCaptured</td>\n</tr>\n<tr>\n<td>renderTracked</td>\n<td>onRenderTracked</td>\n</tr>\n<tr>\n<td>renderTriggered</td>\n<td>onRenderTriggered</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impor &#123; onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\tonMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;component is mounted&#x27;</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"main-js中变化-新增全局API-createApp\"><a href=\"#main-js中变化-新增全局API-createApp\" class=\"headerlink\" title=\"main.js中变化 新增全局API: createApp()\"></a>main.js中变化 新增全局API: createApp()</h5><p>vue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a>router.js</h5><p>vue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;homepage&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">path</span>: <span class=\"string\">&#x27;/homepage&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../views/homepage/index.vue&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">history</span>: createWebHashHistory(),</span><br><span class=\"line\">\troutes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h5><p>vue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"应用配置\"><a href=\"#应用配置\" class=\"headerlink\" title=\"应用配置\"></a>应用配置</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config\t\t\t\t\t-&gt;\tapp.config</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.ignoredElements\t-&gt;\tapp.config.ignoredElements\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component\t\t\t\t-&gt;\tapp.component\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive\t\t\t\t-&gt;\tapp.directive\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.mixin\t\t\t\t\t-&gt;\tapp.mixin\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use\t\t\t\t\t\t-&gt;\tapp.use\t</span><br></pre></td></tr></table></figure>\n\n<p>config: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = Vue.createApp(&#123;&#125;);</span><br><span class=\"line\">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true</p>\n</li>\n<li><p>errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) =&gt; {}</p>\n</li>\n<li><p>warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) =&gt; {};</p>\n</li>\n<li><p>globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vue2.x</span></span><br><span class=\"line\">Vue.prototype.name = <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// Vue3.x</span></span><br><span class=\"line\">app.config.globalProperties.name = <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\">app.component(<span class=\"string\">&#x27;child-component&#x27;</span>, &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>isCustomElement (类型: (tag: string) =&gt; boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag =&gt; tag.startsWith(‘ion’);</p>\n</li>\n</ol>\n<h5 id=\"挂载应用程序\"><a href=\"#挂载应用程序\" class=\"headerlink\" title=\"挂载应用程序\"></a>挂载应用程序</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App);</span><br><span class=\"line\">app.mount( #app<span class=\"string\">&#x27;); </span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// myComponent为组件实例</span></span><br><span class=\"line\">app.component(<span class=\"string\">&#x27;my-component, myComponent);</span></span><br><span class=\"line\"><span class=\"string\">//重置组件</span></span><br><span class=\"line\"><span class=\"string\">const MyComponent = app.component(&#x27;</span>my-component<span class=\"string\">&#x27;, &#123;&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\"><a href=\"#新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\" class=\"headerlink\" title=\"新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\"></a>新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)</h5><p>参数: Object | () =&gt; Object.</p>\n<p>概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。</p>\n<p>用例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">//全局注入数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">procide</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">user</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\">app.component(‘my-component<span class=\"string\">&#x27;, &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tinject: [ &#x27;</span>user<span class=\"string\">&#x27;],</span></span><br><span class=\"line\"><span class=\"string\">\tdata() &#123;...&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"全局方法\"><a href=\"#全局方法\" class=\"headerlink\" title=\"全局方法\"></a>全局方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vue2.x</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\">Vue.nextTick(<span class=\"function\">()=&gt;</span>&#123; ... &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.$nextTick(<span class=\"function\">()=&gt;</span>&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue3.x</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tnextTick(<span class=\"function\">()=&gt;</span>&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"自定义指令：directive\"><a href=\"#自定义指令：directive\" class=\"headerlink\" title=\"自定义指令：directive\"></a>自定义指令：directive</h5><p>Vue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）</p>\n<ol>\n<li>bind                            -&gt;    beforeMount（挂载前）</li>\n<li>inserted                        -&gt;    mounted（挂载后）</li>\n<li>​                                        -&gt;    beforeUpdate（新增，更新前）</li>\n<li>update                            -&gt;    删除</li>\n<li>componentUpdate        -&gt;    update（更新后）</li>\n<li>​                                        -&gt;    beforeUnmounted（新增，卸载前）</li>\n<li>unbind                            -&gt;    unmounted（卸载后）</li>\n</ol>\n<h5 id=\"跨组件通讯\"><a href=\"#跨组件通讯\" class=\"headerlink\" title=\"跨组件通讯\"></a>跨组件通讯</h5><p>vue2.x eventBus</p>\n<p>Vue3.x 中全局事件总成将使用mitt来实现跨组件通讯。</p>\n<p>使用<strong>mitt</strong>之前先安装mitt模块<strong>npm install –save mitt</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mitt&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> VueEvent = mitt()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> VueEvent;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doLogin&quot;</span>&gt;</span>父子组件传值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> VueEvent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../model/event&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"keyword\">return</span> &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">methods</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"function\"><span class=\"title\">doLogin</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\tVueEvent.emit(<span class=\"string\">&#x27;login&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">用户登录组件</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> VueEvent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../model/event&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\tVueEvent.on(<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\talert(<span class=\"string\">&#x27;doLogin&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3-x组件自定义事件验证\"><a href=\"#Vue3-x组件自定义事件验证\" class=\"headerlink\" title=\"Vue3.x组件自定义事件验证\"></a>Vue3.x组件自定义事件验证</h5><p>父组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;<span class=\"name\">login</span> @<span class=\"attr\">submit</span>=<span class=\"string\">&quot;getChild&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Login&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&#x27;hello vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">components</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\tLogin</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">methods</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"function\"><span class=\"title\">getChild</span>(<span class=\"params\">data</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\talert(data)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;username&quot;</span> /&gt;</span></span></span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;password&quot;</span> /&gt;</span></span></span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"comment\">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">emits</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"attr\">submit</span> :<span class=\"function\">(<span class=\"params\">&#123;</span></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"javascript\"><span class=\"xml\">\t\t\tusername,</span></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"javascript\"><span class=\"xml\">\t\t\tpassword</span></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"keyword\">if</span> (username &amp;&amp; password) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"built_in\">console</span>.warn(<span class=\"string\">&quot;传入的参数不能为空&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"attr\">username</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t<span class=\"attr\">methods</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t<span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t<span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;submit&#x27;</span>,&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"attr\">username</span>: <span class=\"built_in\">this</span>.username,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t\t<span class=\"attr\">password</span>: <span class=\"built_in\">this</span>.password</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t\t&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3-x过滤器\"><a href=\"#Vue3-x过滤器\" class=\"headerlink\" title=\"Vue3.x过滤器\"></a>Vue3.x过滤器</h5><p>在3.x中，过滤器被删除，不再受支持。建议用方法调用或计算属性替换它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bank Account Balance<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; accountBalance | currencyUSD &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">accountBalance</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">require</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">filters</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">currencyUSD</span>(<span class=\"params\">value</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;$&#x27;</span> + value</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Bank Account Balance<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; currencyUSD &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">accountBalance</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">require</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">computed</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">currencyUSD</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;$&#x27;</span> + <span class=\"built_in\">this</span>.accountBalance</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多根节点组件\"><a href=\"#多根节点组件\" class=\"headerlink\" title=\"多根节点组件\"></a>多根节点组件</h5><p>Vue2.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Vue3.x中可以使用多个根节点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h5><p>Vue2.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup<span class=\"number\">.13</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">Vue.config.keyCode= &#123; f1: 112 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Vue3.x 别名支持任意键</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-on:keyup.delete=<span class=\"string\">&quot;cancel&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.f1</span>=<span class=\"string\">&quot;cancel&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"渲染功能render函数\"><a href=\"#渲染功能render函数\" class=\"headerlink\" title=\"渲染功能render函数\"></a>渲染功能render函数</h5><p>Vue2.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">h</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Vue3.x</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">&#x27;div&#x27;</span>, &#123;<span class=\"attr\">class</span>: <span class=\"string\">&#x27;red&#x27;</span>&#125;, <span class=\"string\">&#x27;hello, Vue3.x!&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3更好用的v-model指令\"><a href=\"#Vue3更好用的v-model指令\" class=\"headerlink\" title=\"Vue3更好用的v-model指令\"></a>Vue3更好用的v-model指令</h5><p>1、概述：数据双向绑定</p>\n<p>2、回顾：在Vue2.x中，v-model进行数据双向绑定（语法糖）的原理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;my-component v-model=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class=\"line\">&lt;!-- 等价于 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;msg&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;msg=$event&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-components</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中接收绑定数据和触发数据改变</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span> &#125; <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br></pre></td></tr></table></figure>\n\n<p>用于自定义组件时，v-model的prop和事件默认名称已更改：</p>\n<p>prop: value -&gt; modelValue</p>\n<p>event: input -&gt; update:modelValue</p>\n<p>即</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xxComponent v-model=<span class=\"string\">&quot;varA&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xxComponent :modelValue=<span class=\"string\">&quot;varA&quot;</span> @update:modelValue=<span class=\"string\">&quot;varA = $event&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>且在Vue2.x中不能绑定多个v-model</p>\n<p>3、用例：Vue3.x重写了v-model的实现方式以适用绑定多个v-model</p>\n<p>①：单个数据实现数据双向绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;my-component v-model=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class=\"line\">&lt;!-- 等价于 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span> <span class=\"attr\">:modelValue</span>=<span class=\"string\">&quot;msg&quot;</span> @<span class=\"attr\">update:modelValue</span>=<span class=\"string\">&quot;msg = $event&quot;</span> /&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中接收绑定数据和触发数据改变</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">modelValue</span>: <span class=\"built_in\">String</span> &#125; <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class=\"line\">  emit(<span class=\"string\">&#x27;update:modelValue&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>②：多个数据实现数据双向绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;my-component v-model:msg=<span class=\"string\">&quot;msg&quot;</span> v-model:name=<span class=\"string\">&quot;name&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class=\"line\">&lt;!-- 等价于 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;msg&quot;</span> @<span class=\"attr\">update:msg</span>=<span class=\"string\">&quot;msg = $event&quot;</span> <span class=\"attr\">:name</span>=<span class=\"string\">&quot;name&quot;</span> @<span class=\"attr\">update:name</span>=<span class=\"string\">&quot;name = $event&quot;</span>/&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件中接收绑定数据和触发数据改变</span></span><br><span class=\"line\">props:&#123; <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">name</span>: <span class=\"built_in\">String</span> &#125; <span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class=\"line\">  emit(<span class=\"string\">&#x27;update:msg&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br><span class=\"line\">  emit(<span class=\"string\">&#x27;update:name&#x27;</span>, <span class=\"string\">&#x27;newValue&#x27;</span>) <span class=\"comment\">// 触发事件并传值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h6><p>支持vue2.x的所有修饰符</p>\n<ul>\n<li>.lazy 取代input监听change事件</li>\n<li>.number 输入字符串转为有效的数字</li>\n<li>.trim 输入首尾空格过滤</li>\n</ul>\n<h6 id=\"支持自定义修饰符\"><a href=\"#支持自定义修饰符\" class=\"headerlink\" title=\"支持自定义修饰符\"></a>支持自定义修饰符</h6><p>例子：自定义prop名+自定义修饰符</p>\n<p><strong>父组件：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zi v-model:content.camelCase=&quot;word&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件较复杂，用组合式API来演示。</p>\n<p>defineProps函数的写法就是这样，先写content，然后写contentModifiers，这是Vue的规定，必须是prop名跟Modefiers字串。contentModifiers必须是这样一个函数。</p>\n<p>useContext和getCurrentInstance在开发中会经常用到。useContext()能拿到几个变量，包括props变量。getCurrentInstance()能拿到组件实例this，用来执行.emit()</p>\n<p>content必须是计算变量，否则传入prop新值之后，子组件无法感知</p>\n<p>emitCamelCase方法里，if语句是为了确认修饰符正确</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;content&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;emitCamelCase&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; useContext, getCurrentInstance, defineProps, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">defineProps(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">content</span>: <span class=\"built_in\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">contentModifiers</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">const</span> ctx = useContext()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">const</span> instance = getCurrentInstance()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">let</span> content = computed(<span class=\"function\">() =&gt;</span> &#123; ctx.props.content &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emitCamelCase</span>(<span class=\"params\">e</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">if</span> (ctx.props.contentModifiers.camelCase) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    instance.emit(<span class=\"string\">&quot;update:content&quot;</span>, e.target.value.replace(<span class=\"regexp\">/_./g</span>, <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>].toUpperCase()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-v-is指令\"><a href=\"#vue3-v-is指令\" class=\"headerlink\" title=\"vue3 v-is指令\"></a>vue3 v-is指令</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue的动态组件中使用is</span></span><br><span class=\"line\">&lt;component is=<span class=\"string\">&quot;foo&quot;</span>&gt;&lt;/component&gt;</span><br><span class=\"line\"><span class=\"comment\">// vue2.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class=\"line\"><span class=\"comment\">// vue3.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一般组件中使用is</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">user-edit</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;foo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user-edit</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// vue2.x --&gt; is的值指的是要江染的组件的名称;渲染foo组件</span></span><br><span class=\"line\"><span class=\"comment\">// vue3.x --&gt; 渲染user- edit组件; is将作为组件的prop进行值的传递</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一般元素中使用is</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;val&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// vue2.x ---&gt; is的值会被编译为boolean; 且元素会被动态加载或销毁(会触发transition效果)</span></span><br><span class=\"line\"><span class=\"comment\">// vue3.x ---&gt; is的值为any; 值的变化不会造成元素任何变化(丢失了vue2中元素上使用的s的功能，因此vue3中引入了新的指令v-is)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3.x的新指令 v-is</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-is</span>=<span class=\"string\">&quot;val&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 与vue2. x中-般元素上使用is的效果-致</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"v-for中使用ref\"><a href=\"#v-for中使用ref\" class=\"headerlink\" title=\"v-for中使用ref\"></a>v-for中使用ref</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue2.x </span></span><br><span class=\"line\">&lt;p v-<span class=\"keyword\">for</span>=”item <span class=\"keyword\">in</span> renderData<span class=\"string\">&quot; :key=&quot;</span>item.name<span class=\"string\">&quot; ref=”nodes&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.nodes) <span class=\"comment\">// 返回所有循环的p元素节点</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue3.x</span></span><br><span class=\"line\"><span class=\"comment\">//如果还是按照Vue2.x的方式</span></span><br><span class=\"line\">&lt;p v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;item in renderData&quot;</span> :key= <span class=\"string\">&quot;item.name&quot;</span> ref=<span class=\"string\">&quot;nodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.nodes) <span class=\"comment\">//此时只能得到循环后最后一个P元素节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vue3.x中，使用函数处理v-for中的ref;且用变量单独存储。</span></span><br><span class=\"line\">&lt;p v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;item in renderData&quot;</span> :key=<span class=\"string\">&quot; item.name&quot;</span> ref=<span class=\"string\">&quot;handleNodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = reactive(&#123;</span><br><span class=\"line\">    <span class=\"attr\">nodes</span>: []</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleNodes = <span class=\"function\"><span class=\"params\">nodeItem</span> =&gt;</span> &#123;</span><br><span class=\"line\">    data.nodes.push(nodeItem)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...toRefs(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"mixin-的合并行为更改\"><a href=\"#mixin-的合并行为更改\" class=\"headerlink\" title=\"mixin 的合并行为更改\"></a>mixin 的合并行为更改</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mixin</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhangsan&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$data); <span class=\"comment\">// &#123;name: &#x27;zhangsan&#x27;, age: 30&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// &#x27;zhangsan</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age); <span class=\"comment\">// 30</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3.x</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">age</span>: <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$data); <span class=\"comment\">// &#123;age: 30&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// &#x27;zhangsan</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age); <span class=\"comment\">// 30</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>得出结论：</strong></p>\n<p>1、与vue2.x一样会覆盖掉mixin中相同的响应属性。</p>\n<p>2、vue3.x中当前实例的$data是不会包含mixin中定义的响应属性</p>\n<h5 id=\"v-if和v-for优先级\"><a href=\"#v-if和v-for优先级\" class=\"headerlink\" title=\"v-if和v-for优先级\"></a>v-if和v-for优先级</h5><p>当v-if和v-for同时作用于一个元素上时：</p>\n<p>Vue2.x中v-for的优先级会高于v-if;</p>\n<p>Vue3.x中v-if的优先级会高于v-for;</p>\n<p>使用禁忌: Vue3.x中不能将v -for和v-if放在同-个元素上。只能使用v-for嵌套v -if使用</p>\n<p>使用建议:官方建议使用计算属性来处理,即提高性能，又能兼容Vue3.x。</p>\n<h5 id=\"attrs和-listener的融合\"><a href=\"#attrs和-listener的融合\" class=\"headerlink\" title=\"$attrs和$listener的融合\"></a>$attrs和$listener的融合</h5><p>我们知道，在vue2中我们使用v-bind=”$attrs”, v-on=”$listenner”来将数据和事件做一个承 上启下的作用,但是在vue3中,首先是删除了v-on指令，其次是发现这两个组件的属性过于累赘，所以在当前版本中将$attrs 和$listenner他们的功能进行了融合, $listenner 现在已作为$attrs 的其中一部分进行传递,所以只需要在组建上指定v-bind=”$attrs”，那么将同时拥有传值和传递事件的功能。</p>\n<h5 id=\"setup说明\"><a href=\"#setup说明\" class=\"headerlink\" title=\"setup说明\"></a>setup说明</h5><ul>\n<li>setup</li>\n</ul>\n<p>setup有两个参数props和context</p>\n<ul>\n<li><p>props：接收父组件传的值</p>\n</li>\n<li><p>context：vue3.x里面没有this，提供了一个context上下文属性，你可以通过这个属性去获取进行一些vue2.x用this实现的操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(props.title);</span><br><span class=\"line\">    </span><br><span class=\"line\">    context.attrs</span><br><span class=\"line\">    context.slots</span><br><span class=\"line\">    context.parent</span><br><span class=\"line\">    context.root</span><br><span class=\"line\">    context.emit</span><br><span class=\"line\">    context.refs</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>在setup中定义的变量或方法，都必须通过<strong>return</strong> {xxx,xxx} 暴露出去，外界才能使用</p>\n<p><strong>注意：</strong>props为响应式代理，如果使用es6的数据解构操作，将使得结构后的数据失去响应式（即不能实时获取到父组件传来的值）</p>\n<p><strong>扩展：</strong>父组件通过属性传的值在子组件中的各个部分的获取：</p>\n<ol>\n<li>props：通过父传子的方式直接获取到值</li>\n<li>setup(props, context){}方法中的props只能拿到选项props中已经定义的属性</li>\n<li>setup(props, {attrs, emit, slots}){}方法中的attrs只能拿到未在选项props中定义的属性</li>\n<li>通过{proxy} = getCurrentInstance(); proxy.attrs; 组件实例中的attrs也只能拿到未在选项props中定义的属性</li>\n</ol>\n<p><strong>context：</strong>非响应式的对象，包含了组件暴露的三个property</p>\n<ol>\n<li>context.attrs：传入组件中但是未被props接收的对象</li>\n<li>context.emit：用于触发当前组件实例上的传值事件</li>\n<li>context.slots：用来访问被插槽分发的内容（一般用于使用渲染函数来书写一个组件时）</li>\n</ol>\n<p>**return()**：若需要在当前组件视图中或其它组件中使用当前组件创建的响应式变量及方法，则需要导出相应的响应式变量及方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> name = ref(<span class=\"string\">&quot;zhang_san&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; name &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>return 也有渲染功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> h(<span class=\"string\">&#x27;div&#x27;</span>, &#123;<span class=\"attr\">class</span>: <span class=\"string\">&#x27;red&#x27;</span>&#125;, <span class=\"string\">&#x27;内容&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// &lt;template&gt;&lt;div class=&quot;red&quot;&gt;内容&lt;/div&gt;&lt;/template&gt;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"响应式数据对象-reactive\"><a href=\"#响应式数据对象-reactive\" class=\"headerlink\" title=\"响应式数据对象 reactive\"></a>响应式数据对象 reactive</h5><p>1、概述：函数，创建一个响应式数据对象，响应式会影响到所有的子集嵌套</p>\n<p>2、用例：由vue提供，按需引入：import { reactive } from ‘vue’</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; user &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–readonly只读对象\"><a href=\"#延伸方法–readonly只读对象\" class=\"headerlink\" title=\"延伸方法–readonly只读对象\"></a>延伸方法–readonly只读对象</h5><p><strong>readonly()</strong></p>\n<p>1、概述：创建一个只读代理且原对象的任何嵌套属性也将是只读的</p>\n<p>2、用例：由vue提供，按需引入：import { readonly } from ‘vue’</p>\n<p>3、对普通变量创建只读</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; copy &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">copy.age++ <span class=\"comment\">// warning! target is readonly</span></span><br></pre></td></tr></table></figure>\n\n<p>4、对reactive创建只读</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; copy &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">user.age++\t<span class=\"number\">21</span></span><br><span class=\"line\">copy.age++ <span class=\"comment\">// warning! target is readonly</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–isProxy\"><a href=\"#延伸方法–isProxy\" class=\"headerlink\" title=\"延伸方法–isProxy()\"></a>延伸方法–isProxy()</h5><p>1、概述判断对象是否由reactive创建或者是readonly创建的代理</p>\n<p>2、用例：由vue提供，按需引入：import { isproxy } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;ref, reactive, readonly, isproxy&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ref创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> refVal = ref(<span class=\"number\">123</span>)</span><br><span class=\"line\">isProxy(refVal) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactive创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reactiveVal = reactive(&#123;<span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">isProxy(reactiveVal) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactive创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> readonlyVal = readonly(reactiveVal)</span><br><span class=\"line\">isProxy(readonlyVal) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultVal = <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">isProxy(defaultVal) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"isReactive\"><a href=\"#isReactive\" class=\"headerlink\" title=\"isReactive()\"></a>isReactive()</h5><p>1、检查对象是否由reactive创建</p>\n<p>2、用例：由vue提供，按需引入：import { isReactive } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, isReactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(user)); <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还能判断readonly代理的对象是否由reactive创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, isReactive, readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建普通只读代理</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> plain = readonly(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(plain)); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建reactive制度代理</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(copy)); <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–-isReadonly\"><a href=\"#延伸方法–-isReadonly\" class=\"headerlink\" title=\"延伸方法– isReadonly()\"></a>延伸方法– isReadonly()</h5><p>1、概述：检查代理是否由readonly创建</p>\n<p>2、用例：由vue提供，按需引入：import { isReadonly } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, readonly, isReadonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> copy = readonly(user)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReadonly(copy)); <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–toRaw\"><a href=\"#延伸方法–toRaw\" class=\"headerlink\" title=\"延伸方法–toRaw()\"></a>延伸方法–toRaw()</h5><p>1、概述：返回由reactive或者是readonly代理的原始对象</p>\n<p>2、用例：由vue提供，按需引入：import { toRaw } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, readonly, isProxy, toRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveUser = reactive(user)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> readonlyUser = readonly(readonlyUser)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(toRaw(reactiveUser) === user); <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(toRaw(readonlyUser) === user); <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(reactiveUser))); <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(readonlyUser))); <span class=\"comment\">// false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–markRaw\"><a href=\"#延伸方法–markRaw\" class=\"headerlink\" title=\"延伸方法–markRaw()\"></a>延伸方法–markRaw()</h5><p>1、概述：标记一个对象，被标记后，该对象永远不会被转换为代理</p>\n<p>2、用例：由vue提供，按需引入：import { markRaw } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markRaw, reactive, isReactive, isProxy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = markRaw(&#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveUser = reactive(user)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isReactive(reactiveUser)); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveUser1 = reactive(&#123; user &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(reactiveUser1))); <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isProxy(toRaw(reactiveUser1.user))); <span class=\"comment\">// false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–shallowReactive\"><a href=\"#延伸方法–shallowReactive\" class=\"headerlink\" title=\"延伸方法–shallowReactive()\"></a>延伸方法–shallowReactive()</h5><p>1、概述：创建一个反应式代理，但只是浅度创建</p>\n<p>2、用例：由vue提供，按需引入：import { shallowReactive } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isReactive, shallowReactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = shallowReactive(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">content</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    data.count++ <span class=\"comment\">// 11 逻辑层数据已发生变化,视图重新渲染</span></span><br><span class=\"line\">    isReactive(data.content) <span class=\"comment\">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class=\"line\">    data.content.age++ <span class=\"comment\">// 21 逻辑层数据发生变化，但是视图层不会被更新渲染</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"延伸方法–shallowReadonly\"><a href=\"#延伸方法–shallowReadonly\" class=\"headerlink\" title=\"延伸方法–shallowReadonly()\"></a>延伸方法–shallowReadonly()</h5><p>1、概述：创建一个只读代理，但只是浅度创建</p>\n<p>2、用例：由vue提供，按需引入：import { shallowReadonly } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isReadonly, shallowReadonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = shallowReadonly(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">content</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    data.count++ <span class=\"comment\">// warning! target is readonly.</span></span><br><span class=\"line\">    isReadonly(data.content) <span class=\"comment\">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class=\"line\">    data.content.age++ <span class=\"comment\">// 21 深度嵌套未被代理，所以操作成功</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"响应式数据–-ref\"><a href=\"#响应式数据–-ref\" class=\"headerlink\" title=\"响应式数据– ref\"></a>响应式数据– ref</h5><p>1、概述：函数，创建并返回一个响应式数据对象，并在此对象上只包含一个.value属性指向该数据值</p>\n<p>2、用例：由vue提供，按需引入：import { ref } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span> </span><br><span class=\"line\">  &lt;!-- 视图中直接使用即可，不需要.value --&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> name = ref(<span class=\"string\">&#x27;zhang_san&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(name.value); <span class=\"comment\">// &#x27;zhang_san&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 同样需要return返回</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; name &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用ref将一个对象创建为响应式代理的话，则该对象会被进行深度响应式创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;data.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>   &lt;!-- <span class=\"number\">0</span> --&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;data.content.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span>   &lt;!-- <span class=\"number\">10</span> --&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> defaultVal = &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">content</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">age</span>: <span class=\"number\">10</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> data = ref(defaultVal)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(data.value.count); <span class=\"comment\">// 0</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">console</span>.log(data.value.content.age); <span class=\"comment\">// 10</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; data &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">data.value.count++ <span class=\"comment\">// 1 视图重新渲染</span></span><br><span class=\"line\">data.value.content.age++ <span class=\"comment\">// 11 视图重新渲染</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ref数据能访问到的部分常用方法及延伸方法\"><a href=\"#ref数据能访问到的部分常用方法及延伸方法\" class=\"headerlink\" title=\"ref数据能访问到的部分常用方法及延伸方法\"></a>ref数据能访问到的部分常用方法及延伸方法</h5><h6 id=\"unref\"><a href=\"#unref\" class=\"headerlink\" title=\"unref()\"></a>unref()</h6><p>1、概述：返回代理原始值，如果参数为ref则返回代理原始值，如果不是ref则返回参数本身</p>\n<p>2、用例：由vue提供，按需引入：import { unref } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; unref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = ref(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;zhang_san&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unref(a)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(unref(b)); <span class=\"comment\">// &#x27;zhang_san&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef()\"></a>toRef()</h6><p>1、概述：可以将reactive创建的代理的某个属性传递出来用ref进行代理</p>\n<p>2、用例：由vue提供，按需引入：import { toRef } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, toRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> toRefValue = toRef(data, <span class=\"string\">&#x27;age&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">toRefValue.value++ <span class=\"comment\">// toRefValue.value 21</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.age); <span class=\"comment\">// 21</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.age++ <span class=\"comment\">// data.age 22</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toRefValue.value); <span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n<p>3、<strong>注意：使用toRef将reactive的属性代理后，属性的值的变化会同时影响toRef后的值和原本的reactive的属性值</strong></p>\n<p>4、实例：在将prop的引用传递给复合函数的时候，toRef将非常有用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">\tuserHandler(toRef(props, <span class=\"string\">&#x27;name&#x27;</span>))</span><br><span class=\"line\">\t<span class=\"comment\">// 这将使得userHandler拿到的name为响应式代理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs()\"></a>toRefs()</h6><p>1、概述：可以将reactive创建的代理的所有属性传递出来用ref进行代理</p>\n<p>2、用例：由vue提供，按需引入：import { toRefs } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, toRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> toRefValue = toRefs(data)</span><br><span class=\"line\"></span><br><span class=\"line\">toRefValue.age.value++ <span class=\"comment\">// toRefValue.age.value 21</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.age); <span class=\"comment\">// 21</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.age++ <span class=\"comment\">// data.age 22</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toRefValue.age.value); <span class=\"comment\">// 22</span></span><br></pre></td></tr></table></figure>\n\n<p>3、<strong>注意：使用toRefs将reactive的属性代理后，属性的值的变化会同时影响toRef后的对应属性值和原本的reactive的属性值</strong></p>\n<p>4、实例：从组合函数返回响应式对象时，这将很有用，<strong>而不是使用es6数据结构的方式，这样会使reactive的属性失去响应式代理</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> toRefs(state)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name, age &#125; = userHandler()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; name, age &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"isRef\"><a href=\"#isRef\" class=\"headerlink\" title=\"isRef()\"></a>isRef()</h6><p>1、概述：判断响应式代理是否为ref所创建</p>\n<p>2、用例：由vue提供，按需引入：import { isRef } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, isRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = ref(<span class=\"string\">&#x27;zhang_san&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRef(name)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRef(user)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 应用场景，在获取一个未知的数据对象的值时，如：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newV = isRef(name) ? name.value : name</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"toRefs-–-解构响应式对象数据\"><a href=\"#toRefs-–-解构响应式对象数据\" class=\"headerlink\" title=\"toRefs – 解构响应式对象数据\"></a>toRefs – 解构响应式对象数据</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>解构响应式对象数据<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>UserName: &#123;&#123;username&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Age: &#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; reactive, toRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> user = reactive(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">age</span>: <span class=\"number\">20</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; ...toRefs(user) &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"reactive和ref的相互作用\"><a href=\"#reactive和ref的相互作用\" class=\"headerlink\" title=\"reactive和ref的相互作用\"></a>reactive和ref的相互作用</h5><p>1、将ref的数据对象挂载到reactive上时，会把原始的响应数据对象展开为原始值，这样就不需要.value而被直接访问到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref1 = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reactive1.ref1); <span class=\"comment\">// 0</span></span><br><span class=\"line\">    reactive1.ref1++</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reactive1.ref1); <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref1.value); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、新的ref会覆盖旧的ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref1 = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref2 = ref(<span class=\"number\">100</span>)</span><br><span class=\"line\">    reactive.ref1 = ref2</span><br><span class=\"line\">    reactive.ref1++</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reactive1.ref1); <span class=\"comment\">// 101</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref2.value); <span class=\"comment\">// 101</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref1.value); <span class=\"comment\">// 0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"reactive和ref的区别\"><a href=\"#reactive和ref的区别\" class=\"headerlink\" title=\"reactive和ref的区别\"></a>reactive和ref的区别</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num1 = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num2 = ref(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num3 = reactive(<span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num1); <span class=\"comment\">// 定义的纯数字10, 打印结果是一个数字类型的10</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num3); <span class=\"comment\">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; num1, num2, num3 &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们发现使用ref定义的数据，打印结果是一个被对象包裹的响应的数据，使用reactive的方式和纯变量声明的方式打印结果是一样的，这是什么原因呢</p>\n<p>我们发现在控制台输出一个警告信息，提示100这个值不能被reactive创建，官方也推荐我们在定义数据的时候，reactive定义复杂的数据类型的数据，ref推荐定义基本数据类型，所以如果要使用reactive第一基本数据类型的话，我们需要在reactive中将数据包裹一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num3 = reactive(&#123;<span class=\"attr\">val</span>: <span class=\"number\">100</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们在使用reactive定义数据的时候用对象做一层包裹，这样控制台就不会报警告信息了</p>\n<p>但是使用reactive定义的数据和ref定义的数据打印结果有一些差异</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num2 = ref(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> num3 = reactive(&#123;<span class=\"attr\">val</span>: <span class=\"number\">100</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num3); <span class=\"comment\">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br></pre></td></tr></table></figure>\n\n<p>我们发现ref定义的数据打印结果需要.value才能获取到结果，而reactive则不需要</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num2 = ref(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> num3 = reactive(&#123;<span class=\"attr\">val</span>:<span class=\"number\">100</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2.value) <span class=\"comment\">// 10 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num) <span class=\"comment\">// &#123;val:100&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>reactive和ref都是用来定义响应式数据的，reactive更推荐去定义复杂的数据类型，ref更推荐定义基本数据类型</p>\n<p>ref和reactive本质我们可以简单的理解为ref是对reactive的二次包装，ref定义的数据访问的时候要多一个.value</p>\n<p>使用ref定义一本数据类型，ref也可以定义数组和对象</p>\n<p><strong>ref函数仅能监听基本类型的变化，不能监听复杂类型的变化(比如数组，对象)</strong></p>\n<h5 id=\"计算属性–-computed\"><a href=\"#计算属性–-computed\" class=\"headerlink\" title=\"计算属性– computed\"></a>计算属性– computed</h5><p>1、概述：vue2.x中的计算属性，在vue3.x中以方法的形式使用</p>\n<p>2、用例：用例：由vue提供，按需引入：import { computed } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAge = computed(<span class=\"function\">() =&gt;</span> <span class=\"string\">`今年<span class=\"subst\">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; userAge &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>带有get和set功能的用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAge = computed(&#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> <span class=\"string\">`今年<span class=\"subst\">$&#123;age.value&#125;</span>岁了`</span>,</span><br><span class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> age.value = age + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; userAge &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"观察者–-watch\"><a href=\"#观察者–-watch\" class=\"headerlink\" title=\"观察者– watch\"></a>观察者– watch</h5><p>1、概述：vue2.x中的响应式变量监听，在vue3.x中以方法的形式使用</p>\n<p>2、用例：用例：由vue提供，按需引入：import { watch} from ‘vue’</p>\n<p>3、监听单一数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, computed, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ref</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> age.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reactive</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> product = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;pig&#x27;</span>, <span class=\"attr\">conut</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> product.count, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// props</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> props.msg, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//computed</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAge = computed(<span class=\"function\">() =&gt;</span> <span class=\"string\">`今年<span class=\"subst\">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> userAge.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、监听对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ref</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = ref(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们只需要监听name的值，那么</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value.name, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reactive</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveData = reactive(&#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;&#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们只需要监听name的值，那么</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user.name, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、监听数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ref</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = ref([</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;li_si&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> user.value, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// reactive</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reactiveData = reactive(&#123; <span class=\"attr\">user</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;li_si&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">    ]&#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class=\"line\">    watch(<span class=\"function\">() =&gt;</span> reactiveData.user, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、监听多个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = ref(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    watch([<span class=\"function\">() =&gt;</span> age.value, <span class=\"function\">() =&gt;</span> user.name], <span class=\"function\">(<span class=\"params\">[newAge, newName], [oldAge, newName]</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、终止监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> age = ref(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\">// watch监听会返回一个方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stop = watch(age, <span class=\"function\">(<span class=\"params\">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 当调用此方法后，该监听就会被移除</span></span><br><span class=\"line\">stop()</span><br></pre></td></tr></table></figure>\n\n<p>8、清除watch中无效的异步任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;keywords&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref, reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> keywords = ref(<span class=\"string\">&quot;&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">//异步任务：打印用户输入的关键词</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> asyncPrint = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">console</span>.log(val);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;, <span class=\"number\">1000</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    watch(</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      keywords,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"function\">(<span class=\"params\">keywords, prevKeywords, onCleanup</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">// 执行异步任务，并得到关闭异步任务的 timerId</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"keyword\">const</span> timerId = asyncPrint(keywords)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">// 如果 watch 监听被重复了，则会先清除上次未完成的异步任务</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        onCleanup(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearTimeout</span>(timerId))</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#123; <span class=\"attr\">lazy</span>: <span class=\"literal\">true</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    )</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; keywords &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"provide和inject\"><a href=\"#provide和inject\" class=\"headerlink\" title=\"provide和inject\"></a>provide和inject</h5><p>1、概述：实现嵌套组件树形数据传递与接收</p>\n<p>2、使用：由vue提供，按需引入：import { provide, inject } from ‘vue’</p>\n<p>3、用例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; provide, inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//父组件注入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;zhang_san&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 如果是需要注入多个值则重复使用provide即可</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件接收</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// inject的第二个参数为没有接收到注入的数据时的默认返回值，如果没有，则返回undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = inject(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;li_si&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 需要接收多个注入的值也是重复使用inject</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; user &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、实例：在实际使用过程中，往往我们需要将注入的值实现响应式变化，则需要注入响应式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件注入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;user&#x27;</span>, user)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件接收后，如果父组件中的user发生了改变，则子组件中也会发生响应式变化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = inject(<span class=\"string\">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; user &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、注意：<strong>不建议在注入时对响应式变量进行改变(在子组件中改变注入的值)，因为此操作会改变vue的单向数据流，建议采用注入改变其值的方法来对响应式变量进行改变</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive, provide, inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//父组件注入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = reactive(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang_san&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHandler</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      user.age = <span class=\"number\">30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;user&#x27;</span>, user)</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;changeHandler&#x27;</span>, changeHandler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件接收后，通过调用注入的方法来对响应式变量进行改变</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> children = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = inject(<span class=\"string\">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeHandler = inject(<span class=\"string\">&#x27;changeHandler&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; user, changeHandler &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"template和ref获取元素或组件实例\"><a href=\"#template和ref获取元素或组件实例\" class=\"headerlink\" title=\"template和ref获取元素或组件实例\"></a>template和ref获取元素或组件实例</h5><p>1、概述：通过ref获取模板元素节点</p>\n<p>2：使用：由vue提供，按需引入：import { ref } from ‘vue’</p>\n<p>3、回顾：options API中是：this.refs.refAdd(获取某个组件)或者this.refs.refDiv(获取某个元素节点)</p>\n<p>4、用例：</p>\n<ul>\n<li>在组件或节点中定义ref属性：add(ref=”refAdd”)或div(ref=”refDiv”)</li>\n<li>在setup中定义对应ref属性相同的变量名，赋值为任意值即可</li>\n<li>访问方式为：refAdd.value或refDiv.value</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;divBox&quot;</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> divBox = ref(<span class=\"literal\">null</span>); <span class=\"comment\">// &lt;div ref=&quot;divBox&quot;&gt;content&lt;/div&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> user = ref(<span class=\"literal\">null</span>); <span class=\"comment\">// user.value -&gt; null</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; divBox &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>4、注意：</p>\n<p><strong>①：元素节点对应ref的分配只会在render时进行对比赋值，因此若在setup中未将对应的响应式变量return出来，则不会获取到组件实例或元素节点</strong></p>\n<p><strong>②：在满足①的前提下，只要在定义变量时变量名称与当前组件中ref属性值相同，则该变量会被统一赋值为组件实例或元素节点，与定义变量时的赋值无关</strong></p>\n<p>setup的context中访问到refs对象，所以获取组件实例或者元素节点的方式还可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;divBox&quot;</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, &#123; refs &#125;</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> divBox = refs.divBox;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; divBox &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-x中的emits选项\"><a href=\"#vue3-x中的emits选项\" class=\"headerlink\" title=\"vue3.x中的emits选项\"></a>vue3.x中的emits选项</h5><p>vue3.x组件自定义事件实现子组件给父组件传值</p>\n<p>注意：vue官方推荐你始终使用<strong>kebab-case</strong>的事件名</p>\n<p>子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"comment\">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作、</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">emit</span>: [<span class=\"string\">&#x27;run-parent&#x27;</span>],</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;run-parent&quot;</span>, <span class=\"string\">&quot;传给爸爸&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>1、概述：当前组件的通过emit的事件列表</p>\n<p>2：类型：Array|Object</p>\n<p>3、作用：vue3.0中使用emit发起事件时会要求当前组件记录emit事件(没有则控制台会抛出警告)</p>\n<p>4、用途：用于记录当前组件emit的事件，当为对象时，则可以验证传入的值是否有效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">prop, &#123; emit &#125;</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeOne = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;on-changeOne&#x27;</span>, val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeTwo = <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;on-changeTwo&#x27;</span>, val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法一：数组用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">emits</span>: [<span class=\"string\">&#x27;on-changeOne&#x27;</span>, <span class=\"string\">&#x27;on-changeTwo&#x27;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用法二：对象用法，当emits为对象时，可以验证事件中的参数是否有效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">emits</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">click</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;on-changeOne&#x27;</span>: <span class=\"function\"><span class=\"params\">payload</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 验证通过</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.warn(<span class=\"string\">&#x27;验证失败！&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 验证失败，控制台打印警告信息“验证失败”</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;on-changeTwo&#x27;</span>: <span class=\"function\"><span class=\"params\">payload</span> =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-x核心值getCurrentInstance\"><a href=\"#vue3-x核心值getCurrentInstance\" class=\"headerlink\" title=\"vue3.x核心值getCurrentInstance\"></a>vue3.x核心值getCurrentInstance</h5><p>1、概述：一个很重要的方法，获取当前组件的实例、上下文来操作router和vuex等</p>\n<p>2、使用：由vue提供，按需引入：import { getCurrentInstance } from ‘vue’</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 获取当前组件实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = getCurrentInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取当前组件的上下文，下面两种方式都能获取到组件的上下文</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ctx &#125; = getCurrentInstance(); <span class=\"comment\">// 方式一，这种方式只能在开发环境下使用，生产环境下的ctx将访问不到</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance(); <span class=\"comment\">// 方式二，此方法在开发环境及生产环境都能放到组件上下文对象(推荐)</span></span><br><span class=\"line\"><span class=\"comment\">// ctx 中包含了组件中由ref和reactive创建的响应式数据对象，以及以下对象及方法</span></span><br><span class=\"line\">proxy.$attrs</span><br><span class=\"line\">proxy.$data</span><br><span class=\"line\">proxy.$el</span><br><span class=\"line\">proxy.$emit</span><br><span class=\"line\">proxy.$forceUpdate</span><br><span class=\"line\">proxy.$nextTick</span><br><span class=\"line\">proxy.$options</span><br><span class=\"line\">proxy.$parent</span><br><span class=\"line\">proxy.$props</span><br><span class=\"line\">proxy.$refs</span><br><span class=\"line\">proxy.$root</span><br><span class=\"line\">proxy.$slots</span><br><span class=\"line\">proxy.$watch</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3-x中我们采用mitt实现全局事件总成\"><a href=\"#vue3-x中我们采用mitt实现全局事件总成\" class=\"headerlink\" title=\"vue3.x中我们采用mitt实现全局事件总成\"></a>vue3.x中我们采用mitt实现全局事件总成</h5><p>1、前言：由于vue3.x中删除了on和off，因此不能借助于一个单独的vue实例来实现全局事件的发布和订阅与取消订阅(也就是组件通讯)</p>\n<p>2、概述：mitt是一个三方库，npm安装：npm install -D mitt</p>\n<p>3、使用：我们同样使用插件的方式将mitt集成到vue中</p>\n<p>4、mitt对象：</p>\n<ul>\n<li>all (map对象)：包含了所有订阅的事件名称，及对应的处理方法数组</li>\n<li>emit (方法)：触发事件，参数为（事件名(方法名), 携带的参数），当前携带的参数只能为一个，不能为多个</li>\n<li>on (方法)：创建事件订阅，参数为(事件名，处理方法)</li>\n<li>off (方法)：取消事件订阅，参数为(事件名，处理方法)</li>\n</ul>\n<p>5、全局事件总成搭建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mitt&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">install</span>(<span class=\"params\">Vue, options</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _emitter = mitt()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全局发布(在vue全局方法中自定义$pub发布方法)</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里做了$pub方法能够携带多个参数的处理，方便我们在业务中触发事件时带多个参数</span></span><br><span class=\"line\">    Vue.config.globalProperties.$pub = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      _emitter.emit(_.head(args), args.slice(<span class=\"number\">1</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全局订阅(在vue全局方法中自定义$sub订阅方法)</span></span><br><span class=\"line\">    Vue.config.globalProperties.$sub = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, callback</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Reflect</span>.apply(_emitter.on, _emitter, _.toArray(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">    Vue.config.globalProperties.$unsub = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, callback</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Reflect</span>.apply(_emitter.off, _emitter, _.toArray(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6、组件实例中使用：</p>\n<p><strong>全局事件发布</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pubHandler&quot;</span>&gt;</span>发起事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> pubHandler = <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      proxy.$pub(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; pubHandler &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>全局事件订阅/取消订阅</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;unsubHandler&quot;</span>&gt;</span>注销事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> watchHandler = <span class=\"function\">(<span class=\"params\">[a, b, c] = args</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;组件监听触发！&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    onMounted(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      proxy.$sub(<span class=\"string\">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> unsubHandler = <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      proxy.$unsub(<span class=\"string\">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123; unsubHandler &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue-Router在vue3-x中的使用方式及特性\"><a href=\"#Vue-Router在vue3-x中的使用方式及特性\" class=\"headerlink\" title=\"Vue-Router在vue3.x中的使用方式及特性\"></a>Vue-Router在vue3.x中的使用方式及特性</h5><p>1、描述：区别于vue2，在vue3中vue-router将使用新的方法来创建路由，其中重要的是：createRouter, createWebHashHistory, createWebHistory这三个方法</p>\n<p>2、创建：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHashHistory, createWebHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [...]</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 区别于vue2的mode,vue3中将使用history属性来决定采用哪种路由模式</span></span><br><span class=\"line\">  <span class=\"attr\">history</span>: createWebHashHistory(), <span class=\"comment\">// 默认为hash模式，可设置createWebHistory模式</span></span><br><span class=\"line\">  <span class=\"comment\">// 区别于vue2的base，vue3中的基础路由路径将作为createWebHashHistory或者createWebHistory的唯一参数配置到路由中</span></span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./routes&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App);</span><br><span class=\"line\"><span class=\"comment\">// 注册路由</span></span><br><span class=\"line\">app.use(router)</span><br></pre></td></tr></table></figure>\n\n<p>3、扩展：在组件中使用路由，查看路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.vue</span></span><br><span class=\"line\"><span class=\"comment\">// vue-router库当中暴露了useRouter和useRoute两个方法供组件使用，还暴露有其他方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter, useRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props, context</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; proxy &#125; = getCurrentInstance()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = useRouter()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = useRoute()</span><br><span class=\"line\">    onMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(proxy.$router === router); <span class=\"comment\">// true</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(route); &#123;path, params, query ...&#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"hooks\"><a href=\"#hooks\" class=\"headerlink\" title=\"hooks\"></a>hooks</h5><p>Vue3的hook函数相当于vue2的mixin，不同在于hooks是函数</p>\n<p>Vue3的hook函数可以帮助我们提高代码的复用性，让我们能在不同的组件中都利用hooks函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; onBeforeUnmounted, onMounted, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = ref(-<span class=\"number\">1</span>); <span class=\"comment\">// x绑定为响应式数据</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> y = ref(-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clickHandler = <span class=\"function\">(<span class=\"params\">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    x.value = event.pageX</span><br><span class=\"line\">    y.value = event.pageY</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, clickHandler)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  onBeforeUnmounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">&#x27;click&#x27;</span>, clickHandler)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    x, y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新组件–-Teleport\"><a href=\"#新组件–-Teleport\" class=\"headerlink\" title=\"新组件– Teleport\"></a>新组件– Teleport</h5><p>Teleport是一种能够将我们的模板移动到DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”</p>\n<p>场景：像modals,toast等这样的元素，很多情况下，我们将它完全的和我们的vue应用的DOM完全剥离，管理起来反而会方便容易很多</p>\n<p>原因在于如果我们嵌套在vue的某个组件内部，那么处理前套组件的定位、z-index和样式就会变得很困难</p>\n<p>另外，像modals,toast等这样的元素需要使用到vue组件的状态(data或者props)的值</p>\n<p>这就是Teleport派上用场的地方，我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的data或props，然后在vue应用的范围之外渲染它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;showToast&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;btn&quot;</span>&gt;打开toast&lt;/button&gt;</span><br><span class=\"line\">&lt;!-- to 属性就是目标位置 --&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;#teleport-target&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;visiable&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-warp&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-msg&quot;</span>&gt;</span>我是一个toast文案<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">teleport</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vue3中css使用js变量\"><a href=\"#vue3中css使用js变量\" class=\"headerlink\" title=\"vue3中css使用js变量\"></a>vue3中css使用js变量</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Vue 3.0 + Vite<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">backg</span>: <span class=\"string\">&quot;blue&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">vars</span>=<span class=\"string\">&quot;&#123; color, backg&#125;&quot;</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">  <span class=\"selector-tag\">h1</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--backg);</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    <span class=\"attribute\">text-align</span>: center;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue基础","date":"2021-10-08T14:26:02.000Z","_content":"\n##### Setter\n\n```js\nvar vm = new Vue({\n el: '#el',\n data: {\n  num: 100,\n }\n computed: {\n  price: {\n   set: function(newValue){\n    this.num = newValue * 100;\n   },\n   get: function() {\n    return (this.num/100).toFixed(2);\n   }\n  }\n }\n});\n```\n\n##### 绑定value\n\n表单控件的值可以绑定在vue实例的动态属性上\n\n```html\n<input type=\"checkbox\" v-model=\"checked\" v-bind:true-value=\"a\" v-bind:false-value=\"b\">\n\n// 选中：vm.checked==vm.a\n\n// 未选中：vm.hchecked==vm.b\n```\n\n##### 内联样式绑定\n\n```html\n<div v-bind:style=\"dada\"></div>\n\ndata: {\n dada: {\n  color: 'green',\n  fontSize: '10px'\n }\n}\n```\n\n数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。\n\n```html\n<div v-bind:style=\"[ styleObjectA, styleObjectB ]\"></div>\n```\n\n##### 列表渲染\n\nv-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。\n\n```html\n<li v-for=\"(index,item) in items\">{{index}} – {{$index}} – {{item.title}}</li>\n```\n\n在vue.js中提供了$set方法，修改数据的同时进行试图更新。\n\n```js\nthis.$set('item[0]', {title: 'da'})\n\nthis.$set( target, key, value )\n```\n\n##### 内置指令\n\n```js\nv-pre指令，表示跳过编译这个元素和子元素，显示原始的{{}}Mustache标签，用来减少编译时间\n```\n\n##### v-for 中使用 key\n\n​\t\t使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；\n\n​\t\t使用key的注意事项：\n\n- 不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）\n- 不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。\n- 如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。\n\n##### v-if/v-else-if/v-else 中使用 key\n\n> 可能很多人都会忽略这个点\n\n​\t\t原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。\n\n> 如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了\n\n​\t\t相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可\n\n```html\n  <transition>\n    <button \n      v-if=\"isEditing\"\n      v-on:click=\"isEditing = false\"\n    >\n      Save\n    </button>\n    <button \n      v-else \n      v-on:click=\"isEditing = true\"\n    >\n      Edit\n    </button>\n  </transition>\n```\n\n```css\n.v-enter-active, .v-leave-active {\n  transition: all 1s;\n}\n.v-enter, .v-leave-to {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.v-leave-active {\n  position: absolute;\n}\n```\n\n​\t\t例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的\n\n##### v-for 和 v-if 不要一起使用\n\n> 此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整\n>\n> **永远不要把 v-if 和 v-for 同时用在同一个元素上。**\n\n​\t\t原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断\n\n```html\n<ul>\n  <li v-for=\"user in users\" v-if=\"user.active\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据\n\n```html\n<ul v-if=\"active\">\n  <li v-for=\"user in users\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点\n\n​\t\t如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤\n\n```vue\n// js\nlet usersActive = computed(()=>users.filter(user => user.active))\n\n// template\n<ul>\n    <li v-for=\"user in usersActive\">\n      {{ user.name }}\n    </li>\n</ul>\n```\n\n##### 使用简单的 计算属性\n\n​\t\tcomputed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算\n\n```js\nlet price = computed(()=>{\n  let basePrice = manufactureCost / (1 - profitMargin)\n  return (\n      basePrice -\n      basePrice * (discountPercent || 0)\n  )\n})\n```\n\n​\t\t当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。\n\n```js\nlet basePrice = computed(() => manufactureCost / (1 - profitMargin))\nlet discount = computed(() => basePrice * (discountPercent || 0))\nlet finalPrice = computed(() => basePrice - discount)\n```\n\n​\t\t如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice\n\n##### functional 函数式组件**（Vue2）**\n\n优化前\n\n```vue\n<template> \n    <div class=\"cell\"> \n        <div v-if=\"value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n优化后\n\n```vue\n<template functional> \n    <div class=\"cell\"> \n        <div v-if=\"props.value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n- 没有this（没有实例）\n- 没有响应式数据\n\n##### 采用合理的数据处理算法\n\n```js\n/**\n * 数组转树形结构,时间复杂度O(n)\n * @param list 数组\n * @param idKey 元素id键\n * @param parIdKey 元素父id键\n * @param parId 第一级根节点的父id值\n * @return {[]}\n */\n function listToTree (list,idKey,parIdKey,parId) {\n    let map = {};\n    let result = [];\n    let len = list.length;\n\n    // 构建map\n    for (let i = 0; i < len; i++) {\n        //将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)\n        map[list[i][idKey]] = list[i];\n    }\n\n    // 构建树形数组\n    for(let i=0; i < len; i++) {\n        let itemParId = list[i][parIdKey];\n        // 顶级节点\n        if(itemParId === parId) {\n            result.push(list[i]);\n            continue;\n        }\n        // 孤儿节点，舍弃(不存在其父节点)\n        if(!map[itemParId]){\n            continue;\n        }\n        // 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）\n        if(map[itemParId].children) {\n            map[itemParId].children.push(list[i]);\n        } else {\n            map[itemParId].children = [list[i]];\n        }\n    }\n    return result;\n}\n```\n\n","source":"_posts/vue基础.md","raw":"---\ntitle: vue基础\ndate: 2021-10-08 22:26:02\ntags: vue基础\ncategories: vue\n---\n\n##### Setter\n\n```js\nvar vm = new Vue({\n el: '#el',\n data: {\n  num: 100,\n }\n computed: {\n  price: {\n   set: function(newValue){\n    this.num = newValue * 100;\n   },\n   get: function() {\n    return (this.num/100).toFixed(2);\n   }\n  }\n }\n});\n```\n\n##### 绑定value\n\n表单控件的值可以绑定在vue实例的动态属性上\n\n```html\n<input type=\"checkbox\" v-model=\"checked\" v-bind:true-value=\"a\" v-bind:false-value=\"b\">\n\n// 选中：vm.checked==vm.a\n\n// 未选中：vm.hchecked==vm.b\n```\n\n##### 内联样式绑定\n\n```html\n<div v-bind:style=\"dada\"></div>\n\ndata: {\n dada: {\n  color: 'green',\n  fontSize: '10px'\n }\n}\n```\n\n数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。\n\n```html\n<div v-bind:style=\"[ styleObjectA, styleObjectB ]\"></div>\n```\n\n##### 列表渲染\n\nv-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。\n\n```html\n<li v-for=\"(index,item) in items\">{{index}} – {{$index}} – {{item.title}}</li>\n```\n\n在vue.js中提供了$set方法，修改数据的同时进行试图更新。\n\n```js\nthis.$set('item[0]', {title: 'da'})\n\nthis.$set( target, key, value )\n```\n\n##### 内置指令\n\n```js\nv-pre指令，表示跳过编译这个元素和子元素，显示原始的{{}}Mustache标签，用来减少编译时间\n```\n\n##### v-for 中使用 key\n\n​\t\t使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；\n\n​\t\t使用key的注意事项：\n\n- 不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）\n- 不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。\n- 如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。\n\n##### v-if/v-else-if/v-else 中使用 key\n\n> 可能很多人都会忽略这个点\n\n​\t\t原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。\n\n> 如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了\n\n​\t\t相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可\n\n```html\n  <transition>\n    <button \n      v-if=\"isEditing\"\n      v-on:click=\"isEditing = false\"\n    >\n      Save\n    </button>\n    <button \n      v-else \n      v-on:click=\"isEditing = true\"\n    >\n      Edit\n    </button>\n  </transition>\n```\n\n```css\n.v-enter-active, .v-leave-active {\n  transition: all 1s;\n}\n.v-enter, .v-leave-to {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.v-leave-active {\n  position: absolute;\n}\n```\n\n​\t\t例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的\n\n##### v-for 和 v-if 不要一起使用\n\n> 此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整\n>\n> **永远不要把 v-if 和 v-for 同时用在同一个元素上。**\n\n​\t\t原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断\n\n```html\n<ul>\n  <li v-for=\"user in users\" v-if=\"user.active\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据\n\n```html\n<ul v-if=\"active\">\n  <li v-for=\"user in users\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点\n\n​\t\t如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤\n\n```vue\n// js\nlet usersActive = computed(()=>users.filter(user => user.active))\n\n// template\n<ul>\n    <li v-for=\"user in usersActive\">\n      {{ user.name }}\n    </li>\n</ul>\n```\n\n##### 使用简单的 计算属性\n\n​\t\tcomputed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算\n\n```js\nlet price = computed(()=>{\n  let basePrice = manufactureCost / (1 - profitMargin)\n  return (\n      basePrice -\n      basePrice * (discountPercent || 0)\n  )\n})\n```\n\n​\t\t当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。\n\n```js\nlet basePrice = computed(() => manufactureCost / (1 - profitMargin))\nlet discount = computed(() => basePrice * (discountPercent || 0))\nlet finalPrice = computed(() => basePrice - discount)\n```\n\n​\t\t如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice\n\n##### functional 函数式组件**（Vue2）**\n\n优化前\n\n```vue\n<template> \n    <div class=\"cell\"> \n        <div v-if=\"value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n优化后\n\n```vue\n<template functional> \n    <div class=\"cell\"> \n        <div v-if=\"props.value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n- 没有this（没有实例）\n- 没有响应式数据\n\n##### 采用合理的数据处理算法\n\n```js\n/**\n * 数组转树形结构,时间复杂度O(n)\n * @param list 数组\n * @param idKey 元素id键\n * @param parIdKey 元素父id键\n * @param parId 第一级根节点的父id值\n * @return {[]}\n */\n function listToTree (list,idKey,parIdKey,parId) {\n    let map = {};\n    let result = [];\n    let len = list.length;\n\n    // 构建map\n    for (let i = 0; i < len; i++) {\n        //将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)\n        map[list[i][idKey]] = list[i];\n    }\n\n    // 构建树形数组\n    for(let i=0; i < len; i++) {\n        let itemParId = list[i][parIdKey];\n        // 顶级节点\n        if(itemParId === parId) {\n            result.push(list[i]);\n            continue;\n        }\n        // 孤儿节点，舍弃(不存在其父节点)\n        if(!map[itemParId]){\n            continue;\n        }\n        // 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）\n        if(map[itemParId].children) {\n            map[itemParId].children.push(list[i]);\n        } else {\n            map[itemParId].children = [list[i]];\n        }\n    }\n    return result;\n}\n```\n\n","slug":"vue基础","published":1,"updated":"2022-01-14T12:48:17.673Z","_id":"ckxnaa6ez000e0gfz72btgcc4","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"Setter\"><a href=\"#Setter\" class=\"headerlink\" title=\"Setter\"></a>Setter</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\"> <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#el&#x27;</span>,</span><br><span class=\"line\"> <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">num</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">price</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = newValue * <span class=\"number\">100</span>;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.num/<span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"绑定value\"><a href=\"#绑定value\" class=\"headerlink\" title=\"绑定value\"></a>绑定value</h5><p>表单控件的值可以绑定在vue实例的动态属性上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checked&quot;</span> <span class=\"attr\">v-bind:true-value</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">v-bind:false-value</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 选中：vm.checked==vm.a</span><br><span class=\"line\"></span><br><span class=\"line\">// 未选中：vm.hchecked==vm.b</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内联样式绑定\"><a href=\"#内联样式绑定\" class=\"headerlink\" title=\"内联样式绑定\"></a>内联样式绑定</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;dada&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\"> dada: &#123;</span><br><span class=\"line\">  color: &#x27;green&#x27;,</span><br><span class=\"line\">  fontSize: &#x27;10px&#x27;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;[ styleObjectA, styleObjectB ]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h5><p>v-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(index,item) in items&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; – &#123;&#123;$index&#125;&#125; – &#123;&#123;item.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在vue.js中提供了$set方法，修改数据的同时进行试图更新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$set(<span class=\"string\">&#x27;item[0]&#x27;</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;da&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$set( target, key, value )</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-pre指令，表示跳过编译这个元素和子元素，显示原始的&#123;&#123;&#125;&#125;Mustache标签，用来减少编译时间</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"v-for-中使用-key\"><a href=\"#v-for-中使用-key\" class=\"headerlink\" title=\"v-for 中使用 key\"></a>v-for 中使用 key</h5><p>​        使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；</p>\n<p>​        使用key的注意事项：</p>\n<ul>\n<li>不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）</li>\n<li>不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。</li>\n<li>如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。</li>\n</ul>\n<h5 id=\"v-if-v-else-if-v-else-中使用-key\"><a href=\"#v-if-v-else-if-v-else-中使用-key\" class=\"headerlink\" title=\"v-if/v-else-if/v-else 中使用 key\"></a>v-if/v-else-if/v-else 中使用 key</h5><blockquote>\n<p>可能很多人都会忽略这个点</p>\n</blockquote>\n<p>​        原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。</p>\n<blockquote>\n<p>如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了</p>\n</blockquote>\n<p>​        相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isEditing&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;isEditing = false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    Save</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-else</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;isEditing = true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    Edit</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter-active</span>, <span class=\"selector-class\">.v-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter</span>, <span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(<span class=\"number\">30px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的</p>\n<h5 id=\"v-for-和-v-if-不要一起使用\"><a href=\"#v-for-和-v-if-不要一起使用\" class=\"headerlink\" title=\"v-for 和 v-if 不要一起使用\"></a>v-for 和 v-if 不要一起使用</h5><blockquote>\n<p>此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整</p>\n<p><strong>永远不要把 v-if 和 v-for 同时用在同一个元素上。</strong></p>\n</blockquote>\n<p>​        原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;user in users&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;user.active&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;user in users&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点</p>\n<p>​        如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js</span><br><span class=\"line\">let usersActive = computed(()=&gt;users.filter(user =&gt; user.active))</span><br><span class=\"line\"></span><br><span class=\"line\">// template</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for=&quot;user in usersActive&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用简单的-计算属性\"><a href=\"#使用简单的-计算属性\" class=\"headerlink\" title=\"使用简单的 计算属性\"></a>使用简单的 计算属性</h5><p>​        computed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> price = computed(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> basePrice = manufactureCost / (<span class=\"number\">1</span> - profitMargin)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      basePrice -</span><br><span class=\"line\">      basePrice * (discountPercent || <span class=\"number\">0</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>​        当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> basePrice = computed(<span class=\"function\">() =&gt;</span> manufactureCost / (<span class=\"number\">1</span> - profitMargin))</span><br><span class=\"line\"><span class=\"keyword\">let</span> discount = computed(<span class=\"function\">() =&gt;</span> basePrice * (discountPercent || <span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> finalPrice = computed(<span class=\"function\">() =&gt;</span> basePrice - discount)</span><br></pre></td></tr></table></figure>\n\n<p>​        如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice</p>\n<h5 id=\"functional-函数式组件（Vue2）\"><a href=\"#functional-函数式组件（Vue2）\" class=\"headerlink\" title=\"functional 函数式组件（Vue2）\"></a>functional 函数式组件<strong>（Vue2）</strong></h5><p>优化前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优化后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template functional&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;props.value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有this（没有实例）</li>\n<li>没有响应式数据</li>\n</ul>\n<h5 id=\"采用合理的数据处理算法\"><a href=\"#采用合理的数据处理算法\" class=\"headerlink\" title=\"采用合理的数据处理算法\"></a>采用合理的数据处理算法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组转树形结构,时间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>list 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>idKey 元素id键</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>parIdKey 元素父id键</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>parId 第一级根节点的父id值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listToTree</span> (<span class=\"params\">list,idKey,parIdKey,parId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = list.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建map</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)</span></span><br><span class=\"line\">        map[list[i][idKey]] = list[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建树形数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> itemParId = list[i][parIdKey];</span><br><span class=\"line\">        <span class=\"comment\">// 顶级节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(itemParId === parId) &#123;</span><br><span class=\"line\">            result.push(list[i]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 孤儿节点，舍弃(不存在其父节点)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!map[itemParId])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map[itemParId].children) &#123;</span><br><span class=\"line\">            map[itemParId].children.push(list[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            map[itemParId].children = [list[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"Setter\"><a href=\"#Setter\" class=\"headerlink\" title=\"Setter\"></a>Setter</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\"> <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#el&#x27;</span>,</span><br><span class=\"line\"> <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">num</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">price</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = newValue * <span class=\"number\">100</span>;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.num/<span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"绑定value\"><a href=\"#绑定value\" class=\"headerlink\" title=\"绑定value\"></a>绑定value</h5><p>表单控件的值可以绑定在vue实例的动态属性上</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checked&quot;</span> <span class=\"attr\">v-bind:true-value</span>=<span class=\"string\">&quot;a&quot;</span> <span class=\"attr\">v-bind:false-value</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 选中：vm.checked==vm.a</span><br><span class=\"line\"></span><br><span class=\"line\">// 未选中：vm.hchecked==vm.b</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内联样式绑定\"><a href=\"#内联样式绑定\" class=\"headerlink\" title=\"内联样式绑定\"></a>内联样式绑定</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;dada&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\"> dada: &#123;</span><br><span class=\"line\">  color: &#x27;green&#x27;,</span><br><span class=\"line\">  fontSize: &#x27;10px&#x27;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;[ styleObjectA, styleObjectB ]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h5><p>v-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(index,item) in items&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; – &#123;&#123;$index&#125;&#125; – &#123;&#123;item.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在vue.js中提供了$set方法，修改数据的同时进行试图更新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$set(<span class=\"string\">&#x27;item[0]&#x27;</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">&#x27;da&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$set( target, key, value )</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-pre指令，表示跳过编译这个元素和子元素，显示原始的&#123;&#123;&#125;&#125;Mustache标签，用来减少编译时间</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"v-for-中使用-key\"><a href=\"#v-for-中使用-key\" class=\"headerlink\" title=\"v-for 中使用 key\"></a>v-for 中使用 key</h5><p>​        使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；</p>\n<p>​        使用key的注意事项：</p>\n<ul>\n<li>不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）</li>\n<li>不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。</li>\n<li>如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。</li>\n</ul>\n<h5 id=\"v-if-v-else-if-v-else-中使用-key\"><a href=\"#v-if-v-else-if-v-else-中使用-key\" class=\"headerlink\" title=\"v-if/v-else-if/v-else 中使用 key\"></a>v-if/v-else-if/v-else 中使用 key</h5><blockquote>\n<p>可能很多人都会忽略这个点</p>\n</blockquote>\n<p>​        原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。</p>\n<blockquote>\n<p>如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了</p>\n</blockquote>\n<p>​        相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isEditing&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;isEditing = false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    Save</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-else</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;isEditing = true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    Edit</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter-active</span>, <span class=\"selector-class\">.v-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter</span>, <span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(<span class=\"number\">30px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的</p>\n<h5 id=\"v-for-和-v-if-不要一起使用\"><a href=\"#v-for-和-v-if-不要一起使用\" class=\"headerlink\" title=\"v-for 和 v-if 不要一起使用\"></a>v-for 和 v-if 不要一起使用</h5><blockquote>\n<p>此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整</p>\n<p><strong>永远不要把 v-if 和 v-for 同时用在同一个元素上。</strong></p>\n</blockquote>\n<p>​        原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;user in users&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;user.active&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;user in users&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>​        如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点</p>\n<p>​        如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js</span><br><span class=\"line\">let usersActive = computed(()=&gt;users.filter(user =&gt; user.active))</span><br><span class=\"line\"></span><br><span class=\"line\">// template</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for=&quot;user in usersActive&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用简单的-计算属性\"><a href=\"#使用简单的-计算属性\" class=\"headerlink\" title=\"使用简单的 计算属性\"></a>使用简单的 计算属性</h5><p>​        computed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> price = computed(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> basePrice = manufactureCost / (<span class=\"number\">1</span> - profitMargin)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      basePrice -</span><br><span class=\"line\">      basePrice * (discountPercent || <span class=\"number\">0</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>​        当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> basePrice = computed(<span class=\"function\">() =&gt;</span> manufactureCost / (<span class=\"number\">1</span> - profitMargin))</span><br><span class=\"line\"><span class=\"keyword\">let</span> discount = computed(<span class=\"function\">() =&gt;</span> basePrice * (discountPercent || <span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> finalPrice = computed(<span class=\"function\">() =&gt;</span> basePrice - discount)</span><br></pre></td></tr></table></figure>\n\n<p>​        如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice</p>\n<h5 id=\"functional-函数式组件（Vue2）\"><a href=\"#functional-函数式组件（Vue2）\" class=\"headerlink\" title=\"functional 函数式组件（Vue2）\"></a>functional 函数式组件<strong>（Vue2）</strong></h5><p>优化前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优化后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template functional&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;props.value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有this（没有实例）</li>\n<li>没有响应式数据</li>\n</ul>\n<h5 id=\"采用合理的数据处理算法\"><a href=\"#采用合理的数据处理算法\" class=\"headerlink\" title=\"采用合理的数据处理算法\"></a>采用合理的数据处理算法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组转树形结构,时间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>list 数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>idKey 元素id键</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>parIdKey 元素父id键</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>parId 第一级根节点的父id值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listToTree</span> (<span class=\"params\">list,idKey,parIdKey,parId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = list.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建map</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)</span></span><br><span class=\"line\">        map[list[i][idKey]] = list[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建树形数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> itemParId = list[i][parIdKey];</span><br><span class=\"line\">        <span class=\"comment\">// 顶级节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(itemParId === parId) &#123;</span><br><span class=\"line\">            result.push(list[i]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 孤儿节点，舍弃(不存在其父节点)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!map[itemParId])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map[itemParId].children) &#123;</span><br><span class=\"line\">            map[itemParId].children.push(list[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            map[itemParId].children = [list[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"CSS white-space 属性","date":"2021-10-11T12:51:48.000Z","_content":"\n##### 兼容性：\n\n&emsp;&emsp;所有浏览器都支持 white-space 属性。\n\n&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 \"inherit\"。\n\n##### 官方定义和用法：\n\n&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。\n\n| 值       | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| normal   | 默认。空白会被浏览器忽略。                                   |\n| pre      | 空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。    |\n| nowrap   | 文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。 |\n| pre-wrap | 保留空白符序列，但是正常地进行换行。                         |\n| pre-line | 合并空白符序列，但是保留换行符。                             |\n| inherit  | 规定应该从父元素继承 white-space 属性的值。                  |\n\n###### pre-line\n\n&emsp;&emsp;合并空格，保留换行符，允许自动换行\n\n###### normal\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行\n\n###### nowrap\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行\n\n###### pre\n\n&emsp;&emsp;保留空格，保留换行符，不允许自动换行\n\n###### pre-wrap\n\n&emsp;&emsp;保留空格，保留换行符，允许自动换行。\n\n| **值**   | **空白符** | **换行符** | **自动换行** |\n| -------- | ---------- | ---------- | ------------ |\n| pre-line | 合并       | 保留       | 允许         |\n| normal   | 合并       | 忽略       | 允许         |\n| nowrap   | 合并       | 忽略       | 不允许       |\n| pre      | 保留       | 保留       | 不允许       |\n| pre-wrap | 保留       | 保留       | 允许         |","source":"_posts/white-space.md","raw":"---\ntitle: CSS white-space 属性\ndate: 2021-10-11 20:51:48\ntags: white-space\ncategories: css\n---\n\n##### 兼容性：\n\n&emsp;&emsp;所有浏览器都支持 white-space 属性。\n\n&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 \"inherit\"。\n\n##### 官方定义和用法：\n\n&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。\n\n| 值       | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| normal   | 默认。空白会被浏览器忽略。                                   |\n| pre      | 空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。    |\n| nowrap   | 文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。 |\n| pre-wrap | 保留空白符序列，但是正常地进行换行。                         |\n| pre-line | 合并空白符序列，但是保留换行符。                             |\n| inherit  | 规定应该从父元素继承 white-space 属性的值。                  |\n\n###### pre-line\n\n&emsp;&emsp;合并空格，保留换行符，允许自动换行\n\n###### normal\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行\n\n###### nowrap\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行\n\n###### pre\n\n&emsp;&emsp;保留空格，保留换行符，不允许自动换行\n\n###### pre-wrap\n\n&emsp;&emsp;保留空格，保留换行符，允许自动换行。\n\n| **值**   | **空白符** | **换行符** | **自动换行** |\n| -------- | ---------- | ---------- | ------------ |\n| pre-line | 合并       | 保留       | 允许         |\n| normal   | 合并       | 忽略       | 允许         |\n| nowrap   | 合并       | 忽略       | 不允许       |\n| pre      | 保留       | 保留       | 不允许       |\n| pre-wrap | 保留       | 保留       | 允许         |","slug":"white-space","published":1,"updated":"2021-10-11T15:14:14.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6f0000h0gfzfihr0fhf","content":"<h5 id=\"兼容性：\"><a href=\"#兼容性：\" class=\"headerlink\" title=\"兼容性：\"></a>兼容性：</h5><p>&emsp;&emsp;所有浏览器都支持 white-space 属性。</p>\n<p>&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。</p>\n<h5 id=\"官方定义和用法：\"><a href=\"#官方定义和用法：\" class=\"headerlink\" title=\"官方定义和用法：\"></a>官方定义和用法：</h5><p>&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认。空白会被浏览器忽略。</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留空白符序列，但是正常地进行换行。</td>\n</tr>\n<tr>\n<td>pre-line</td>\n<td>合并空白符序列，但是保留换行符。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 white-space 属性的值。</td>\n</tr>\n</tbody></table>\n<h6 id=\"pre-line\"><a href=\"#pre-line\" class=\"headerlink\" title=\"pre-line\"></a>pre-line</h6><p>&emsp;&emsp;合并空格，保留换行符，允许自动换行</p>\n<h6 id=\"normal\"><a href=\"#normal\" class=\"headerlink\" title=\"normal\"></a>normal</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行</p>\n<h6 id=\"nowrap\"><a href=\"#nowrap\" class=\"headerlink\" title=\"nowrap\"></a>nowrap</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行</p>\n<h6 id=\"pre\"><a href=\"#pre\" class=\"headerlink\" title=\"pre\"></a>pre</h6><p>&emsp;&emsp;保留空格，保留换行符，不允许自动换行</p>\n<h6 id=\"pre-wrap\"><a href=\"#pre-wrap\" class=\"headerlink\" title=\"pre-wrap\"></a>pre-wrap</h6><p>&emsp;&emsp;保留空格，保留换行符，允许自动换行。</p>\n<table>\n<thead>\n<tr>\n<th><strong>值</strong></th>\n<th><strong>空白符</strong></th>\n<th><strong>换行符</strong></th>\n<th><strong>自动换行</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pre-line</td>\n<td>合并</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>normal</td>\n<td>合并</td>\n<td>忽略</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>合并</td>\n<td>忽略</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>保留</td>\n<td>保留</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n</tbody></table>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"兼容性：\"><a href=\"#兼容性：\" class=\"headerlink\" title=\"兼容性：\"></a>兼容性：</h5><p>&emsp;&emsp;所有浏览器都支持 white-space 属性。</p>\n<p>&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。</p>\n<h5 id=\"官方定义和用法：\"><a href=\"#官方定义和用法：\" class=\"headerlink\" title=\"官方定义和用法：\"></a>官方定义和用法：</h5><p>&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认。空白会被浏览器忽略。</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留空白符序列，但是正常地进行换行。</td>\n</tr>\n<tr>\n<td>pre-line</td>\n<td>合并空白符序列，但是保留换行符。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 white-space 属性的值。</td>\n</tr>\n</tbody></table>\n<h6 id=\"pre-line\"><a href=\"#pre-line\" class=\"headerlink\" title=\"pre-line\"></a>pre-line</h6><p>&emsp;&emsp;合并空格，保留换行符，允许自动换行</p>\n<h6 id=\"normal\"><a href=\"#normal\" class=\"headerlink\" title=\"normal\"></a>normal</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行</p>\n<h6 id=\"nowrap\"><a href=\"#nowrap\" class=\"headerlink\" title=\"nowrap\"></a>nowrap</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行</p>\n<h6 id=\"pre\"><a href=\"#pre\" class=\"headerlink\" title=\"pre\"></a>pre</h6><p>&emsp;&emsp;保留空格，保留换行符，不允许自动换行</p>\n<h6 id=\"pre-wrap\"><a href=\"#pre-wrap\" class=\"headerlink\" title=\"pre-wrap\"></a>pre-wrap</h6><p>&emsp;&emsp;保留空格，保留换行符，允许自动换行。</p>\n<table>\n<thead>\n<tr>\n<th><strong>值</strong></th>\n<th><strong>空白符</strong></th>\n<th><strong>换行符</strong></th>\n<th><strong>自动换行</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pre-line</td>\n<td>合并</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>normal</td>\n<td>合并</td>\n<td>忽略</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>合并</td>\n<td>忽略</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>保留</td>\n<td>保留</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n</tbody></table>\n"},{"title":"常用的表单验证","date":"2021-10-02T14:22:16.000Z","_content":"\n##### 1、判断字符串是否是 https?:|mailto:|tal:  开头的\n\n```js\nexport function isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path)\n}\n```\n\n##### 2、检验字符串是否是 admin  editor\n\n```js\nexport function validUsername(str) {\n  const valid_map = ['admin', 'editor']\n  return valid_map.indexOf(str.trim()) >= 0\n}\n```\n\n##### 3、判断网址\n\n```js\nexport function validURL(url) {\n  const reg = /^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/\n  return reg.test(url)\n}\n```\n\n##### 4、判断都是小写字母\n\n```js\nexport function validLowerCase(str) {\n  const reg = /^[a-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 5、判断都是大写字母\n\n```js\nexport function validUpperCase(str) {\n  const reg = /^[A-Z]+$/\n  return reg.test(str)\n}\n```\n\n##### 6、判断是只能是数字和字母\n\n```js\nexport function validAlphabets(str) {\n  const reg = /^[0-9A-Za-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 7、用户密码格式\n\n```js\nexport function isEvolPass(str) {\n  return /^(?=.*[0-9])(?=.*[a-zA-Z]).{8,30}$/.test(str) // 用户密码格式正则\n}\n```\n\n##### 8、邮箱校验\n\n```js\nexport function isEmail(email) {\n  const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  return reg.test(email)\n}\n```\n\n##### 9、验证字符串\n\n```js\nexport function isString(str) {\n  if (typeof str === 'string' || str instanceof String) {\n    return true\n  }\n  return false\n}\n```\n\n##### 10、手机号码校验\n\n```js\nexport function isPhone(str) {\n  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d{8}$/.test(str) //  手机号码正则\n}\n```\n\n##### 11、验证是数组\n\n```js\nexport function isArray(arg) {\n  if (typeof Array.isArray === 'undefined') {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n  return Array.isArray(arg)\n}\n```\n\n##### 12、判断只能是汉字\n\n```js\nexport function isChinese(str){\n\tconst reg=/^[\\u0391-\\uFFE5]+$/;\n    return reg.test(str)\n}\n```\n\n##### 13、校验时间大小\n\n```js\nexport function checkDate(obj){\n    const obj_value=obj.replace(/-/g,\"/\");//替换字符，变成标准格式(检验格式为：'2009-12-10')\n    // var obj_value=obj.replace(\"-\",\"/\");//替换字符，变成标准格式(检验格式为：'2010-12-10 11:12')\n    const date1=new Date(Date.parse(obj_value));\n    const date2=new Date();//取今天的日期\n    if(date1>date2){\n    \treturn false; //不能大于当前时间\n    }\n    return true\n}\n```\n\n##### 14、判断ip\n\n```js\nexport function isIP(strIP) {\n    if (isNull(strIP)) return false;\n    \tconst re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式\n    if(re.test(strIP)){\n    \tif( RegExp.$1 <256 && RegExp.$2<256 && RegExp.$3<256 && RegExp.$4<256) return true;\n    }\n\treturn false;\n}\n```\n\n##### 15、检查输入字符串是否为空或者全部都是空格\n\n```js\nexport function isNull( str ){\n    if ( str == \"\" ) return true;\n    const regu = \"^[ ]+$\";\n    var const = new RegExp(regu);\n    return re.test(str);\n}\n```\n\n##### 16、判断是否是日期  (输入：date：日期；fmt：日期格式)\n\n```js\nexport function isDate( date, fmt ) {\n    if (fmt==null) fmt=\"yyyyMMdd\";\n    const yIndex = fmt.indexOf(\"yyyy\");\n    if(yIndex==-1) return false;\n    const year = date.substring(yIndex,yIndex+4);\n    const mIndex = fmt.indexOf(\"MM\");\n    if(mIndex==-1) return false;\n    const month = date.substring(mIndex,mIndex+2);\n    const dIndex = fmt.indexOf(\"dd\");\n    if(dIndex==-1) return false;\n    const day = date.substring(dIndex,dIndex+2);\n    if(!isNumber(year)||year>\"2100\" || year< \"1900\") return false;\n    if(!isNumber(month)||month>\"12\" || month< \"01\") return false;\n    if(day>getMaxDay(year,month) || day< \"01\") return false;\n    return true;\n}\n```\n\n##### 17、字符1是否以字符串2开始和结束\n\n```js\nfunction isFirstMatch(str1,str2){\n    const index = str1.indexOf(str2);\n    if(index==0) return true;\n    return false;\n}\nexport function isLastMatch(str1,str2){\n    const index = str1.lastIndexOf(str2);\n    if(str1.length==index+str2.length) return true;\n    return false;\n}\n```\n\n","source":"_posts/常用的表单验证.md","raw":"---\ntitle: 常用的表单验证\ndate: 2021-10-02 22:22:16\ntags: 表单验证\ncategories: javaScript\n---\n\n##### 1、判断字符串是否是 https?:|mailto:|tal:  开头的\n\n```js\nexport function isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path)\n}\n```\n\n##### 2、检验字符串是否是 admin  editor\n\n```js\nexport function validUsername(str) {\n  const valid_map = ['admin', 'editor']\n  return valid_map.indexOf(str.trim()) >= 0\n}\n```\n\n##### 3、判断网址\n\n```js\nexport function validURL(url) {\n  const reg = /^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/\n  return reg.test(url)\n}\n```\n\n##### 4、判断都是小写字母\n\n```js\nexport function validLowerCase(str) {\n  const reg = /^[a-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 5、判断都是大写字母\n\n```js\nexport function validUpperCase(str) {\n  const reg = /^[A-Z]+$/\n  return reg.test(str)\n}\n```\n\n##### 6、判断是只能是数字和字母\n\n```js\nexport function validAlphabets(str) {\n  const reg = /^[0-9A-Za-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 7、用户密码格式\n\n```js\nexport function isEvolPass(str) {\n  return /^(?=.*[0-9])(?=.*[a-zA-Z]).{8,30}$/.test(str) // 用户密码格式正则\n}\n```\n\n##### 8、邮箱校验\n\n```js\nexport function isEmail(email) {\n  const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  return reg.test(email)\n}\n```\n\n##### 9、验证字符串\n\n```js\nexport function isString(str) {\n  if (typeof str === 'string' || str instanceof String) {\n    return true\n  }\n  return false\n}\n```\n\n##### 10、手机号码校验\n\n```js\nexport function isPhone(str) {\n  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d{8}$/.test(str) //  手机号码正则\n}\n```\n\n##### 11、验证是数组\n\n```js\nexport function isArray(arg) {\n  if (typeof Array.isArray === 'undefined') {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n  return Array.isArray(arg)\n}\n```\n\n##### 12、判断只能是汉字\n\n```js\nexport function isChinese(str){\n\tconst reg=/^[\\u0391-\\uFFE5]+$/;\n    return reg.test(str)\n}\n```\n\n##### 13、校验时间大小\n\n```js\nexport function checkDate(obj){\n    const obj_value=obj.replace(/-/g,\"/\");//替换字符，变成标准格式(检验格式为：'2009-12-10')\n    // var obj_value=obj.replace(\"-\",\"/\");//替换字符，变成标准格式(检验格式为：'2010-12-10 11:12')\n    const date1=new Date(Date.parse(obj_value));\n    const date2=new Date();//取今天的日期\n    if(date1>date2){\n    \treturn false; //不能大于当前时间\n    }\n    return true\n}\n```\n\n##### 14、判断ip\n\n```js\nexport function isIP(strIP) {\n    if (isNull(strIP)) return false;\n    \tconst re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式\n    if(re.test(strIP)){\n    \tif( RegExp.$1 <256 && RegExp.$2<256 && RegExp.$3<256 && RegExp.$4<256) return true;\n    }\n\treturn false;\n}\n```\n\n##### 15、检查输入字符串是否为空或者全部都是空格\n\n```js\nexport function isNull( str ){\n    if ( str == \"\" ) return true;\n    const regu = \"^[ ]+$\";\n    var const = new RegExp(regu);\n    return re.test(str);\n}\n```\n\n##### 16、判断是否是日期  (输入：date：日期；fmt：日期格式)\n\n```js\nexport function isDate( date, fmt ) {\n    if (fmt==null) fmt=\"yyyyMMdd\";\n    const yIndex = fmt.indexOf(\"yyyy\");\n    if(yIndex==-1) return false;\n    const year = date.substring(yIndex,yIndex+4);\n    const mIndex = fmt.indexOf(\"MM\");\n    if(mIndex==-1) return false;\n    const month = date.substring(mIndex,mIndex+2);\n    const dIndex = fmt.indexOf(\"dd\");\n    if(dIndex==-1) return false;\n    const day = date.substring(dIndex,dIndex+2);\n    if(!isNumber(year)||year>\"2100\" || year< \"1900\") return false;\n    if(!isNumber(month)||month>\"12\" || month< \"01\") return false;\n    if(day>getMaxDay(year,month) || day< \"01\") return false;\n    return true;\n}\n```\n\n##### 17、字符1是否以字符串2开始和结束\n\n```js\nfunction isFirstMatch(str1,str2){\n    const index = str1.indexOf(str2);\n    if(index==0) return true;\n    return false;\n}\nexport function isLastMatch(str1,str2){\n    const index = str1.lastIndexOf(str2);\n    if(str1.length==index+str2.length) return true;\n    return false;\n}\n```\n\n","slug":"常用的表单验证","published":1,"updated":"2022-01-14T12:49:32.748Z","_id":"ckxnaa6f1000j0gfz9gc72ikr","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"1、判断字符串是否是-https-mailto-tal-开头的\"><a href=\"#1、判断字符串是否是-https-mailto-tal-开头的\" class=\"headerlink\" title=\"1、判断字符串是否是 https?:|mailto:|tal:  开头的\"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isExternal</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(https?:|mailto:|tel:)/</span>.test(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、检验字符串是否是-admin-editor\"><a href=\"#2、检验字符串是否是-admin-editor\" class=\"headerlink\" title=\"2、检验字符串是否是 admin  editor\"></a>2、检验字符串是否是 admin  editor</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validUsername</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> valid_map = [<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;editor&#x27;</span>]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> valid_map.indexOf(str.trim()) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、判断网址\"><a href=\"#3、判断网址\" class=\"headerlink\" title=\"3、判断网址\"></a>3、判断网址</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validURL</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?&#x27;\\\\+&amp;%$#=~_-]+))*$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、判断都是小写字母\"><a href=\"#4、判断都是小写字母\" class=\"headerlink\" title=\"4、判断都是小写字母\"></a>4、判断都是小写字母</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validLowerCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^[a-z]+$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5、判断都是大写字母\"><a href=\"#5、判断都是大写字母\" class=\"headerlink\" title=\"5、判断都是大写字母\"></a>5、判断都是大写字母</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validUpperCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^[A-Z]+$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6、判断是只能是数字和字母\"><a href=\"#6、判断是只能是数字和字母\" class=\"headerlink\" title=\"6、判断是只能是数字和字母\"></a>6、判断是只能是数字和字母</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validAlphabets</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^[0-9A-Za-z]+$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7、用户密码格式\"><a href=\"#7、用户密码格式\" class=\"headerlink\" title=\"7、用户密码格式\"></a>7、用户密码格式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEvolPass</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/</span>.test(str) <span class=\"comment\">// 用户密码格式正则</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"8、邮箱校验\"><a href=\"#8、邮箱校验\" class=\"headerlink\" title=\"8、邮箱校验\"></a>8、邮箱校验</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmail</span>(<span class=\"params\">email</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(email)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9、验证字符串\"><a href=\"#9、验证字符串\" class=\"headerlink\" title=\"9、验证字符串\"></a>9、验证字符串</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> str === <span class=\"string\">&#x27;string&#x27;</span> || str <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10、手机号码校验\"><a href=\"#10、手机号码校验\" class=\"headerlink\" title=\"10、手机号码校验\"></a>10、手机号码校验</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPhone</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d&#123;8&#125;$/</span>.test(str) <span class=\"comment\">//  手机号码正则</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"11、验证是数组\"><a href=\"#11、验证是数组\" class=\"headerlink\" title=\"11、验证是数组\"></a>11、验证是数组</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.isArray === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arg) === <span class=\"string\">&#x27;[object Array]&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(arg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"12、判断只能是汉字\"><a href=\"#12、判断只能是汉字\" class=\"headerlink\" title=\"12、判断只能是汉字\"></a>12、判断只能是汉字</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isChinese</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> reg=<span class=\"regexp\">/^[\\u0391-\\uFFE5]+$/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"13、校验时间大小\"><a href=\"#13、校验时间大小\" class=\"headerlink\" title=\"13、校验时间大小\"></a>13、校验时间大小</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkDate</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj_value=obj.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&quot;/&quot;</span>);<span class=\"comment\">//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> date1=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(obj_value));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date2=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();<span class=\"comment\">//取今天的日期</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(date1&gt;date2)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//不能大于当前时间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"14、判断ip\"><a href=\"#14、判断ip\" class=\"headerlink\" title=\"14、判断ip\"></a>14、判断ip</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIP</span>(<span class=\"params\">strIP</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNull(strIP)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">const</span> re=<span class=\"regexp\">/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g</span> <span class=\"comment\">//匹配IP地址的正则表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(re.test(strIP))&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>( <span class=\"built_in\">RegExp</span>.$1 &lt;<span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">RegExp</span>.$2&lt;<span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">RegExp</span>.$3&lt;<span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">RegExp</span>.$4&lt;<span class=\"number\">256</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"15、检查输入字符串是否为空或者全部都是空格\"><a href=\"#15、检查输入字符串是否为空或者全部都是空格\" class=\"headerlink\" title=\"15、检查输入字符串是否为空或者全部都是空格\"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNull</span>(<span class=\"params\"> str </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( str == <span class=\"string\">&quot;&quot;</span> ) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> regu = <span class=\"string\">&quot;^[ ]+$&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">const</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(regu);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re.test(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"16、判断是否是日期-输入：date：日期；fmt：日期格式\"><a href=\"#16、判断是否是日期-输入：date：日期；fmt：日期格式\" class=\"headerlink\" title=\"16、判断是否是日期  (输入：date：日期；fmt：日期格式)\"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDate</span>(<span class=\"params\"> date, fmt </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fmt==<span class=\"literal\">null</span>) fmt=<span class=\"string\">&quot;yyyyMMdd&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> yIndex = fmt.indexOf(<span class=\"string\">&quot;yyyy&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(yIndex==-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> year = date.substring(yIndex,yIndex+<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mIndex = fmt.indexOf(<span class=\"string\">&quot;MM&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mIndex==-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> month = date.substring(mIndex,mIndex+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dIndex = fmt.indexOf(<span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dIndex==-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> day = date.substring(dIndex,dIndex+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isNumber(year)||year&gt;<span class=\"string\">&quot;2100&quot;</span> || year&lt; <span class=\"string\">&quot;1900&quot;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isNumber(month)||month&gt;<span class=\"string\">&quot;12&quot;</span> || month&lt; <span class=\"string\">&quot;01&quot;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(day&gt;getMaxDay(year,month) || day&lt; <span class=\"string\">&quot;01&quot;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"17、字符1是否以字符串2开始和结束\"><a href=\"#17、字符1是否以字符串2开始和结束\" class=\"headerlink\" title=\"17、字符1是否以字符串2开始和结束\"></a>17、字符1是否以字符串2开始和结束</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFirstMatch</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = str1.indexOf(str2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLastMatch</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = str1.lastIndexOf(str2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str1.length==index+str2.length) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"1、判断字符串是否是-https-mailto-tal-开头的\"><a href=\"#1、判断字符串是否是-https-mailto-tal-开头的\" class=\"headerlink\" title=\"1、判断字符串是否是 https?:|mailto:|tal:  开头的\"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isExternal</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(https?:|mailto:|tel:)/</span>.test(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、检验字符串是否是-admin-editor\"><a href=\"#2、检验字符串是否是-admin-editor\" class=\"headerlink\" title=\"2、检验字符串是否是 admin  editor\"></a>2、检验字符串是否是 admin  editor</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validUsername</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> valid_map = [<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;editor&#x27;</span>]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> valid_map.indexOf(str.trim()) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、判断网址\"><a href=\"#3、判断网址\" class=\"headerlink\" title=\"3、判断网址\"></a>3、判断网址</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validURL</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?&#x27;\\\\+&amp;%$#=~_-]+))*$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、判断都是小写字母\"><a href=\"#4、判断都是小写字母\" class=\"headerlink\" title=\"4、判断都是小写字母\"></a>4、判断都是小写字母</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validLowerCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^[a-z]+$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5、判断都是大写字母\"><a href=\"#5、判断都是大写字母\" class=\"headerlink\" title=\"5、判断都是大写字母\"></a>5、判断都是大写字母</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validUpperCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^[A-Z]+$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6、判断是只能是数字和字母\"><a href=\"#6、判断是只能是数字和字母\" class=\"headerlink\" title=\"6、判断是只能是数字和字母\"></a>6、判断是只能是数字和字母</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validAlphabets</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^[0-9A-Za-z]+$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7、用户密码格式\"><a href=\"#7、用户密码格式\" class=\"headerlink\" title=\"7、用户密码格式\"></a>7、用户密码格式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEvolPass</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/</span>.test(str) <span class=\"comment\">// 用户密码格式正则</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"8、邮箱校验\"><a href=\"#8、邮箱校验\" class=\"headerlink\" title=\"8、邮箱校验\"></a>8、邮箱校验</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmail</span>(<span class=\"params\">email</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.test(email)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9、验证字符串\"><a href=\"#9、验证字符串\" class=\"headerlink\" title=\"9、验证字符串\"></a>9、验证字符串</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> str === <span class=\"string\">&#x27;string&#x27;</span> || str <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10、手机号码校验\"><a href=\"#10、手机号码校验\" class=\"headerlink\" title=\"10、手机号码校验\"></a>10、手机号码校验</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPhone</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d&#123;8&#125;$/</span>.test(str) <span class=\"comment\">//  手机号码正则</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"11、验证是数组\"><a href=\"#11、验证是数组\" class=\"headerlink\" title=\"11、验证是数组\"></a>11、验证是数组</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.isArray === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arg) === <span class=\"string\">&#x27;[object Array]&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(arg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"12、判断只能是汉字\"><a href=\"#12、判断只能是汉字\" class=\"headerlink\" title=\"12、判断只能是汉字\"></a>12、判断只能是汉字</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isChinese</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> reg=<span class=\"regexp\">/^[\\u0391-\\uFFE5]+$/</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"13、校验时间大小\"><a href=\"#13、校验时间大小\" class=\"headerlink\" title=\"13、校验时间大小\"></a>13、校验时间大小</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkDate</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj_value=obj.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&quot;/&quot;</span>);<span class=\"comment\">//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> date1=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(obj_value));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date2=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();<span class=\"comment\">//取今天的日期</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(date1&gt;date2)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//不能大于当前时间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"14、判断ip\"><a href=\"#14、判断ip\" class=\"headerlink\" title=\"14、判断ip\"></a>14、判断ip</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIP</span>(<span class=\"params\">strIP</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNull(strIP)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">const</span> re=<span class=\"regexp\">/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g</span> <span class=\"comment\">//匹配IP地址的正则表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(re.test(strIP))&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>( <span class=\"built_in\">RegExp</span>.$1 &lt;<span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">RegExp</span>.$2&lt;<span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">RegExp</span>.$3&lt;<span class=\"number\">256</span> &amp;&amp; <span class=\"built_in\">RegExp</span>.$4&lt;<span class=\"number\">256</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"15、检查输入字符串是否为空或者全部都是空格\"><a href=\"#15、检查输入字符串是否为空或者全部都是空格\" class=\"headerlink\" title=\"15、检查输入字符串是否为空或者全部都是空格\"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNull</span>(<span class=\"params\"> str </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( str == <span class=\"string\">&quot;&quot;</span> ) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> regu = <span class=\"string\">&quot;^[ ]+$&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">const</span> = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(regu);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re.test(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"16、判断是否是日期-输入：date：日期；fmt：日期格式\"><a href=\"#16、判断是否是日期-输入：date：日期；fmt：日期格式\" class=\"headerlink\" title=\"16、判断是否是日期  (输入：date：日期；fmt：日期格式)\"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDate</span>(<span class=\"params\"> date, fmt </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fmt==<span class=\"literal\">null</span>) fmt=<span class=\"string\">&quot;yyyyMMdd&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> yIndex = fmt.indexOf(<span class=\"string\">&quot;yyyy&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(yIndex==-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> year = date.substring(yIndex,yIndex+<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mIndex = fmt.indexOf(<span class=\"string\">&quot;MM&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mIndex==-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> month = date.substring(mIndex,mIndex+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dIndex = fmt.indexOf(<span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dIndex==-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> day = date.substring(dIndex,dIndex+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isNumber(year)||year&gt;<span class=\"string\">&quot;2100&quot;</span> || year&lt; <span class=\"string\">&quot;1900&quot;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isNumber(month)||month&gt;<span class=\"string\">&quot;12&quot;</span> || month&lt; <span class=\"string\">&quot;01&quot;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(day&gt;getMaxDay(year,month) || day&lt; <span class=\"string\">&quot;01&quot;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"17、字符1是否以字符串2开始和结束\"><a href=\"#17、字符1是否以字符串2开始和结束\" class=\"headerlink\" title=\"17、字符1是否以字符串2开始和结束\"></a>17、字符1是否以字符串2开始和结束</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFirstMatch</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = str1.indexOf(str2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLastMatch</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = str1.lastIndexOf(str2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str1.length==index+str2.length) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"webSocket","date":"2021-10-04T07:37:44.000Z","_content":"\n##### websocket是什么\n\n&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。\n\n&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。\n\n##### 工作方式\n\n&emsp;&emsp;广播和收听\n\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\" />\n\n##### 为什么需要websocket协议\n\n　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。\n　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。\n\n##### 什么场景下用websocket\n\n1. websocket社交订阅\n2. websocket多玩家游戏\n3. websocket协同编辑/编程\n4. websocket收集点击流数据\n5. 股票基金报价\n6. 体育实况更新\n7. 多媒体聊天\n8. 基于位置的应用\n9. 在线教育\n10. 论坛的消息广播\n11. 弹幕、客服等等\n\n##### 怎么使用websocket\n\n服务器端：略\n\n客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io\n\n1. 启动服务器\n2. 启动客户端程序连接服务器（**永久**连接）\n3. 服务器为每个客户创建专用对象（负责当前客户消息的收发）\n4. 客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）\n\n**客户端**\n\n```js\n<div class=\"btn\">\n    <input type=\"button\" value=\"清空\" onclick=\"reset()\"/>\n    <input type=\"button\" value=\"发送\" onclick=\"send()\">\n</div>\n\nvar socket = new WebSocket('ws://127.0.0.1:80/websocket/ws'); \n\n//创建Socket \nsocket.onopen = function(event) { \n\n    //向服务器发送数据\n    //socket.send('哈哈哈哈'); \n\n    //接收数据事件\n    socket.onmessage = function(event) {\n    body.innerHTML+=\"<br/>对方：\"+event.data;\n    }; \n\n    // socket关闭事件\n    socket.onclose = function(event) {\n    body.innerHTML+=\"<br/>系统：已和服务器断开连接！！！\";\n    }; \n\n    //关闭socket\n    //socket.close()\n};\n\n//-----------\nvar body=document.getElementById(\"body\");\nfunction send(){\n    var msg=document.getElementById(\"content\").value;//获取输入框内容\n    socket.send(msg);//发送消息\n    reset();//清空输入框\n    body.innerHTML+=\"<br/>我：\"+msg;\n}\n\nfunction reset(){\n    document.getElementById(\"content\").value=\"\";\n}\n```\n\n**服务器端**\n\n```java\npackage action;\n\nimport java.io.IOException;\n\nimport javax.websocket.CloseReason;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\n\n//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,\n//结构形式为“ws：//ip:端口/项目名/指定的url”\n@ServerEndpoint(\"/ws\")\npublic class WSServer {\n    private Session session;\n    //连接打开时执行\n    @OnOpen\n    public void onOpen(Session session) {\n    \tthis.session=session;\n        System.out.println(\"一个客户端连接进来了 ... 它的sessionid是：\" + session.getId());\n    }\n\n    //收到消息时执行\n    @OnMessage\n    public void onMessage(String message, Session session) {\n    \tSystem.out.println(session.getId()+\"客户端发送的消息是：\"+message);\n        try{\n        \tthis.sendMessage(message);//消息发回给客户端\n        }catch(Exception e){\n        \te.printStackTrace();\n        }\n        //return currentUser + \"：\" + message;如果有返回值，则客户端发送消息后会收到这个返回值\n    }\n\n    //连接关闭时执行\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        System.out.println(\"一个客户端关闭了，它的sessionid是：\" + session.getId());\n    }\n\n    //连接错误时执行\n    @OnError\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n    //自定义的方法，用于发送消息\n    public void sendMessage(String message) throws IOException{\n    \tthis.session.getBasicRemote().sendText(message);\n        //this.session.getAsyncRemote().sendText(message);\n    }\n}\n```\n\n","source":"_posts/webSocket.md","raw":"---\ntitle: webSocket\ndate: 2021-10-04 15:37:44\ntags: webSocket\ncategories: javaScript\n---\n\n##### websocket是什么\n\n&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。\n\n&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。\n\n##### 工作方式\n\n&emsp;&emsp;广播和收听\n\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\" />\n\n##### 为什么需要websocket协议\n\n　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。\n　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。\n\n##### 什么场景下用websocket\n\n1. websocket社交订阅\n2. websocket多玩家游戏\n3. websocket协同编辑/编程\n4. websocket收集点击流数据\n5. 股票基金报价\n6. 体育实况更新\n7. 多媒体聊天\n8. 基于位置的应用\n9. 在线教育\n10. 论坛的消息广播\n11. 弹幕、客服等等\n\n##### 怎么使用websocket\n\n服务器端：略\n\n客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io\n\n1. 启动服务器\n2. 启动客户端程序连接服务器（**永久**连接）\n3. 服务器为每个客户创建专用对象（负责当前客户消息的收发）\n4. 客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）\n\n**客户端**\n\n```js\n<div class=\"btn\">\n    <input type=\"button\" value=\"清空\" onclick=\"reset()\"/>\n    <input type=\"button\" value=\"发送\" onclick=\"send()\">\n</div>\n\nvar socket = new WebSocket('ws://127.0.0.1:80/websocket/ws'); \n\n//创建Socket \nsocket.onopen = function(event) { \n\n    //向服务器发送数据\n    //socket.send('哈哈哈哈'); \n\n    //接收数据事件\n    socket.onmessage = function(event) {\n    body.innerHTML+=\"<br/>对方：\"+event.data;\n    }; \n\n    // socket关闭事件\n    socket.onclose = function(event) {\n    body.innerHTML+=\"<br/>系统：已和服务器断开连接！！！\";\n    }; \n\n    //关闭socket\n    //socket.close()\n};\n\n//-----------\nvar body=document.getElementById(\"body\");\nfunction send(){\n    var msg=document.getElementById(\"content\").value;//获取输入框内容\n    socket.send(msg);//发送消息\n    reset();//清空输入框\n    body.innerHTML+=\"<br/>我：\"+msg;\n}\n\nfunction reset(){\n    document.getElementById(\"content\").value=\"\";\n}\n```\n\n**服务器端**\n\n```java\npackage action;\n\nimport java.io.IOException;\n\nimport javax.websocket.CloseReason;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\n\n//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,\n//结构形式为“ws：//ip:端口/项目名/指定的url”\n@ServerEndpoint(\"/ws\")\npublic class WSServer {\n    private Session session;\n    //连接打开时执行\n    @OnOpen\n    public void onOpen(Session session) {\n    \tthis.session=session;\n        System.out.println(\"一个客户端连接进来了 ... 它的sessionid是：\" + session.getId());\n    }\n\n    //收到消息时执行\n    @OnMessage\n    public void onMessage(String message, Session session) {\n    \tSystem.out.println(session.getId()+\"客户端发送的消息是：\"+message);\n        try{\n        \tthis.sendMessage(message);//消息发回给客户端\n        }catch(Exception e){\n        \te.printStackTrace();\n        }\n        //return currentUser + \"：\" + message;如果有返回值，则客户端发送消息后会收到这个返回值\n    }\n\n    //连接关闭时执行\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        System.out.println(\"一个客户端关闭了，它的sessionid是：\" + session.getId());\n    }\n\n    //连接错误时执行\n    @OnError\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n    //自定义的方法，用于发送消息\n    public void sendMessage(String message) throws IOException{\n    \tthis.session.getBasicRemote().sendText(message);\n        //this.session.getAsyncRemote().sendText(message);\n    }\n}\n```\n\n","slug":"webSocket","published":1,"updated":"2022-01-14T12:48:40.442Z","_id":"ckxnaa6f2000n0gfz1dak76rp","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"websocket是什么\"><a href=\"#websocket是什么\" class=\"headerlink\" title=\"websocket是什么\"></a>websocket是什么</h5><p>&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。</p>\n<p>&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。</p>\n<h5 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h5><p>&emsp;&emsp;广播和收听</p>\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\">\n\n<h5 id=\"为什么需要websocket协议\"><a href=\"#为什么需要websocket协议\" class=\"headerlink\" title=\"为什么需要websocket协议\"></a>为什么需要websocket协议</h5><p>　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。<br>　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p>\n<h5 id=\"什么场景下用websocket\"><a href=\"#什么场景下用websocket\" class=\"headerlink\" title=\"什么场景下用websocket\"></a>什么场景下用websocket</h5><ol>\n<li>websocket社交订阅</li>\n<li>websocket多玩家游戏</li>\n<li>websocket协同编辑/编程</li>\n<li>websocket收集点击流数据</li>\n<li>股票基金报价</li>\n<li>体育实况更新</li>\n<li>多媒体聊天</li>\n<li>基于位置的应用</li>\n<li>在线教育</li>\n<li>论坛的消息广播</li>\n<li>弹幕、客服等等</li>\n</ol>\n<h5 id=\"怎么使用websocket\"><a href=\"#怎么使用websocket\" class=\"headerlink\" title=\"怎么使用websocket\"></a>怎么使用websocket</h5><p>服务器端：略</p>\n<p>客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io</p>\n<ol>\n<li>启动服务器</li>\n<li>启动客户端程序连接服务器（<strong>永久</strong>连接）</li>\n<li>服务器为每个客户创建专用对象（负责当前客户消息的收发）</li>\n<li>客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）</li>\n</ol>\n<p><strong>客户端</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;清空&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;reset()&quot;</span>/&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;send()&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&#x27;ws://127.0.0.1:80/websocket/ws&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Socket </span></span><br><span class=\"line\">socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向服务器发送数据</span></span><br><span class=\"line\">    <span class=\"comment\">//socket.send(&#x27;哈哈哈哈&#x27;); </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//接收数据事件</span></span><br><span class=\"line\">    socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    body.innerHTML+=<span class=\"string\">&quot;&lt;br/&gt;对方：&quot;</span>+event.data;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// socket关闭事件</span></span><br><span class=\"line\">    socket.onclose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    body.innerHTML+=<span class=\"string\">&quot;&lt;br/&gt;系统：已和服务器断开连接！！！&quot;</span>;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭socket</span></span><br><span class=\"line\">    <span class=\"comment\">//socket.close()</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> body=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;body&quot;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;content&quot;</span>).value;<span class=\"comment\">//获取输入框内容</span></span><br><span class=\"line\">    socket.send(msg);<span class=\"comment\">//发送消息</span></span><br><span class=\"line\">    reset();<span class=\"comment\">//清空输入框</span></span><br><span class=\"line\">    body.innerHTML+=<span class=\"string\">&quot;&lt;br/&gt;我：&quot;</span>+msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reset</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;content&quot;</span>).value=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>服务器端</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> action;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.CloseReason;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnClose;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnOpen;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.PathParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,</span></span><br><span class=\"line\"><span class=\"comment\">//结构形式为“ws：//ip:端口/项目名/指定的url”</span></span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint(&quot;/ws&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">    <span class=\"comment\">//连接打开时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.session=session;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;一个客户端连接进来了 ... 它的sessionid是：&quot;</span> + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//收到消息时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message, Session session)</span> </span>&#123;</span><br><span class=\"line\">    \tSystem.out.println(session.getId()+<span class=\"string\">&quot;客户端发送的消息是：&quot;</span>+message);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.sendMessage(message);<span class=\"comment\">//消息发回给客户端</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">        \te.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//return currentUser + &quot;：&quot; + message;如果有返回值，则客户端发送消息后会收到这个返回值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接关闭时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnClose</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(Session session, CloseReason closeReason)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;一个客户端关闭了，它的sessionid是：&quot;</span> + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接错误时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnError</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//自定义的方法，用于发送消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.session.getBasicRemote().sendText(message);</span><br><span class=\"line\">        <span class=\"comment\">//this.session.getAsyncRemote().sendText(message);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"websocket是什么\"><a href=\"#websocket是什么\" class=\"headerlink\" title=\"websocket是什么\"></a>websocket是什么</h5><p>&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。</p>\n<p>&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。</p>\n<h5 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h5><p>&emsp;&emsp;广播和收听</p>\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\">\n\n<h5 id=\"为什么需要websocket协议\"><a href=\"#为什么需要websocket协议\" class=\"headerlink\" title=\"为什么需要websocket协议\"></a>为什么需要websocket协议</h5><p>　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。<br>　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p>\n<h5 id=\"什么场景下用websocket\"><a href=\"#什么场景下用websocket\" class=\"headerlink\" title=\"什么场景下用websocket\"></a>什么场景下用websocket</h5><ol>\n<li>websocket社交订阅</li>\n<li>websocket多玩家游戏</li>\n<li>websocket协同编辑/编程</li>\n<li>websocket收集点击流数据</li>\n<li>股票基金报价</li>\n<li>体育实况更新</li>\n<li>多媒体聊天</li>\n<li>基于位置的应用</li>\n<li>在线教育</li>\n<li>论坛的消息广播</li>\n<li>弹幕、客服等等</li>\n</ol>\n<h5 id=\"怎么使用websocket\"><a href=\"#怎么使用websocket\" class=\"headerlink\" title=\"怎么使用websocket\"></a>怎么使用websocket</h5><p>服务器端：略</p>\n<p>客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io</p>\n<ol>\n<li>启动服务器</li>\n<li>启动客户端程序连接服务器（<strong>永久</strong>连接）</li>\n<li>服务器为每个客户创建专用对象（负责当前客户消息的收发）</li>\n<li>客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）</li>\n</ol>\n<p><strong>客户端</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;清空&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;reset()&quot;</span>/&gt;</span></span></span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;send()&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&#x27;ws://127.0.0.1:80/websocket/ws&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Socket </span></span><br><span class=\"line\">socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向服务器发送数据</span></span><br><span class=\"line\">    <span class=\"comment\">//socket.send(&#x27;哈哈哈哈&#x27;); </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//接收数据事件</span></span><br><span class=\"line\">    socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    body.innerHTML+=<span class=\"string\">&quot;&lt;br/&gt;对方：&quot;</span>+event.data;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// socket关闭事件</span></span><br><span class=\"line\">    socket.onclose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    body.innerHTML+=<span class=\"string\">&quot;&lt;br/&gt;系统：已和服务器断开连接！！！&quot;</span>;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭socket</span></span><br><span class=\"line\">    <span class=\"comment\">//socket.close()</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> body=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;body&quot;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;content&quot;</span>).value;<span class=\"comment\">//获取输入框内容</span></span><br><span class=\"line\">    socket.send(msg);<span class=\"comment\">//发送消息</span></span><br><span class=\"line\">    reset();<span class=\"comment\">//清空输入框</span></span><br><span class=\"line\">    body.innerHTML+=<span class=\"string\">&quot;&lt;br/&gt;我：&quot;</span>+msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reset</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;content&quot;</span>).value=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>服务器端</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> action;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.CloseReason;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnClose;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnOpen;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.PathParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,</span></span><br><span class=\"line\"><span class=\"comment\">//结构形式为“ws：//ip:端口/项目名/指定的url”</span></span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint(&quot;/ws&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">    <span class=\"comment\">//连接打开时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.session=session;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;一个客户端连接进来了 ... 它的sessionid是：&quot;</span> + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//收到消息时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message, Session session)</span> </span>&#123;</span><br><span class=\"line\">    \tSystem.out.println(session.getId()+<span class=\"string\">&quot;客户端发送的消息是：&quot;</span>+message);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.sendMessage(message);<span class=\"comment\">//消息发回给客户端</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">        \te.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//return currentUser + &quot;：&quot; + message;如果有返回值，则客户端发送消息后会收到这个返回值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接关闭时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnClose</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(Session session, CloseReason closeReason)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;一个客户端关闭了，它的sessionid是：&quot;</span> + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接错误时执行</span></span><br><span class=\"line\">    <span class=\"meta\">@OnError</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//自定义的方法，用于发送消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.session.getBasicRemote().sendText(message);</span><br><span class=\"line\">        <span class=\"comment\">//this.session.getAsyncRemote().sendText(message);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"用CSS代码让你的列表网页提升渲染性能","date":"2021-10-03T12:47:58.000Z","_content":"\n&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。\n\n##### content-visibility属性有三个可选值:\n\n- visible: 默认值。对布局和呈现不会产生什么影响。\n- hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。\n- auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。\n\n##### 代码：\n\n```html\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <!-- ... -->\n    <!-- 此处省略n个<div class=\"card\"></div> -->\n    <!-- ... -->\n    <div class=\"card\"></div>\n```\n\n\n\n```css\n .card {\n    position: relative;\n    overflow: hidden;\n    transition-duration: 0.3s;\n    margin-bottom: 10px;\n    width: 200px;\n    height: 100px;\n    background-color: #ffaa00;\n    content-visibility: auto;\n  }\n```\n\n##### 问题：\n\n&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题\n\n##### 解决方法：\n\n&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。\n\n##### 总结：\n\n&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。","source":"_posts/用CSS代码让你的列表网页提升渲染性能.md","raw":"---\ntitle: 用CSS代码让你的列表网页提升渲染性能\ndate: 2021-10-03 20:47:58\ntags:\ncategories: css\n---\n\n&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。\n\n##### content-visibility属性有三个可选值:\n\n- visible: 默认值。对布局和呈现不会产生什么影响。\n- hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。\n- auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。\n\n##### 代码：\n\n```html\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <!-- ... -->\n    <!-- 此处省略n个<div class=\"card\"></div> -->\n    <!-- ... -->\n    <div class=\"card\"></div>\n```\n\n\n\n```css\n .card {\n    position: relative;\n    overflow: hidden;\n    transition-duration: 0.3s;\n    margin-bottom: 10px;\n    width: 200px;\n    height: 100px;\n    background-color: #ffaa00;\n    content-visibility: auto;\n  }\n```\n\n##### 问题：\n\n&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题\n\n##### 解决方法：\n\n&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。\n\n##### 总结：\n\n&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。","slug":"用CSS代码让你的列表网页提升渲染性能","published":1,"updated":"2022-01-14T12:49:51.106Z","_id":"ckxnaa6f8001a0gfz6ab6044y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。</p>\n<h5 id=\"content-visibility属性有三个可选值\"><a href=\"#content-visibility属性有三个可选值\" class=\"headerlink\" title=\"content-visibility属性有三个可选值:\"></a>content-visibility属性有三个可选值:</h5><ul>\n<li>visible: 默认值。对布局和呈现不会产生什么影响。</li>\n<li>hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。</li>\n<li>auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。</li>\n</ul>\n<h5 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 此处省略n个&lt;div class=&quot;card&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">   <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">   <span class=\"attribute\">transition-duration</span>: <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">   <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffaa00</span>;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>-<span class=\"attribute\">visibility</span>: auto;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题</p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><p>&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。</p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<p>&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。</p>\n<h5 id=\"content-visibility属性有三个可选值\"><a href=\"#content-visibility属性有三个可选值\" class=\"headerlink\" title=\"content-visibility属性有三个可选值:\"></a>content-visibility属性有三个可选值:</h5><ul>\n<li>visible: 默认值。对布局和呈现不会产生什么影响。</li>\n<li>hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。</li>\n<li>auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。</li>\n</ul>\n<h5 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 此处省略n个&lt;div class=&quot;card&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">   <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">   <span class=\"attribute\">transition-duration</span>: <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">   <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">   <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffaa00</span>;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>-<span class=\"attribute\">visibility</span>: auto;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题</p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><p>&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。</p>\n"},{"title":"Vite构建工具的使用","date":"2022-01-14T11:28:29.000Z","_content":"\n##### 特点\n\n- 极速的服务启动，使用原生 ESM 文件，无需打包!\n- 轻量快速的热重载，无论应用程序大小如何，都始终极快的模块热重载（HMR）\n- 丰富的功能，对 TypeScript、JSX、CSS 等支持开箱即用。\n- 优化的构建，可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建\n- 通用的插件，在开发和构建之间共享 Rollup-superset 插件接口。\n- 完全类型化的API，灵活的 API 和完整 TypeScript 类型。\n\n##### 为什么选 Vite\n\n直接点说，现市面上的构建工具太慢了（webpack、Rollup 和、Parcel等），Vite直接利用浏览器原生的ES模块使构建速度更快\n\n##### 搭建第一个 Vite 项目\n\n使用 npm:\n\n```js\nnpm init vite@latest\n```\n\n使用 yarn:\n\n```js\nyarn create vite\n```\n\n然后按照提示操作即可！\n\n你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:\n\n```js\n# npm 6.x\nnpm init vite@latest my-vue-app --template vue\n\n# npm 7+, 需要额外的双横线：\nnpm init vite@latest my-vue-app -- --template vue\n\n# yarn\nyarn create vite my-vue-app --template vue\n```\n\n##### 命令行界面\n\n在安装了 Vite 的项目中，可以在 npm scripts 中使用 vite 可执行文件，或者直接使用 npx vite 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：\n\n```js\n{\n  \"scripts\": {\n    \"dev\": \"vite\", // 启动开发服务器，别名：`vite dev`，`vite serve`\n    \"build\": \"vite build\", // 为生产环境构建产物\n    \"preview\": \"vite preview\" // 本地预览生产构建产物\n  }\n}\n```\n\n可以指定额外的命令行选项，如 --port 或 --https。运行 npx vite --help 获得完整的命令行选项列表。\n\n##### 配置文件解析（常用配置）\n\n当以命令行方式运行 vite 时，Vite 会自动解析 项目根目录 下名为 vite.config.js 的文件。\n\n最基础的配置文件是这样的：\n\n```js\n// vite.config.js\nexport default {\n  // 配置选项\n}\n```\n\n注意：即使项目没有在 package.json 中开启 type: \"module\"，Vite 也支持在配置文件中使用 ESM 语法。这种情况下，配置文件会在被加载前自动进行预处理。\n\n你可以显式地通过 --config 命令行选项指定一个配置文件（相对于 cwd 路径进行解析）\n\n```\nvite --config my-config.js\n```\n\n##### 配置智能提示\n\n因为 Vite 本身附带 Typescript 类型，所以你可以通过 IDE 和 jsdoc 的配合来实现智能提示：\n\n```js\n/**\n * @type {import('vite').UserConfig}\n */\nconst config = {\n  // ...\n}\n\nexport default config\n```\n\n另外你可以使用 defineConfig 工具函数，这样不用 jsdoc 注解也可以获取类型提示：\n\n```js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n})\n```\n\nVite 也直接支持 TS 配置文件。你可以在 vite.config.ts 中使用 defineConfig 工具函数。\n\n##### 情景配置\n\n如果配置文件需要基于（dev/serve 或 build）命令或者不同的 模式 来决定选项，则可以选择导出这样一个函数：\n\n```js\nexport default defineConfig(({ command, mode }) => {\n  if (command === 'serve') {\n    return {\n      // dev 独有配置\n    }\n  } else {\n    // command === 'build'\n    return {\n      // build 独有配置\n    }\n  }\n})\n```\n\n需要注意的是，在 Vite 的 API 中，在开发环境下 command 的值为 serve（在 CLI 中， vite dev 和 vite serve 是 vite 的别名），而在生产环境下为 build（vite build）。\n\n##### 异步配置\n\n如果配置需要调用一个异步函数，也可以转而导出一个异步函数\n\n```js\nexport default defineConfig(async ({ command, mode }) => {\n  const data = await asyncFunction()\n  return {\n    // 构建模式所需的特有配置\n  }\n})\n```\n\n##### 共享配置\n\n###### root\n\n- **类型：** string\n- **默认：** process.cwd()项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。\n\n###### base\n\n- **类型：** string\n- **默认：** /开发或生产环境服务的公共基础路径。合法的值包括以下几种：绝对 URL 路径名，例如 /foo/完整的 URL，例如 https://foo.com/空字符串或 ./（用于开发环境）\n\n###### mode\n\n- **类型：** string\n- **默认：** 'development'（开发模式），'production'（生产模式）在配置中指明将会把 **serve 和 build** 时的模式 **都** 覆盖掉。也可以通过命令行 --mode 选项来重写。\n\n###### plugins\n\n- **类型：** (Plugin | Plugin[])[]需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。\n\n###### publicDir\n\n- **类型：** string | false\n- **默认：** \"public\"作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目的根目录的相对路径。将 publicDir 设定为 false 可以关闭此项功能。\n\n##### 开发服务器选项\n\n###### server.host\n\n- **类型：** string | boolean\n- **默认：** '127.0.0.1'指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。也可以通过 CLI 使用 --host 0.0.0.0 或 --host 来设置。\n\n###### server.port\n\n- **类型：** number\n- **默认值：** 3000指定开发服务器端口。注意：如果端口已经被使用，Vite 会自动尝试下一个可用的端口，所以这可能不是开发服务器最终监听的实际端口\n\n###### server.https\n\n- **类型：** boolean | https.ServerOptions启用 TLS + HTTP/2。注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS。这个值也可以是一个传递给 https.createServer() 的 选项对象。\n\n###### server.open\n\n- **类型：** boolean | string在开发服务器启动时自动在浏览器中打开应用程序。当此值为字符串时，会被用作 URL 的路径名。若你想指定喜欢的浏览器打开服务器，你可以设置环境变量 process.env.BROWSER（例如：firefox）。示例：**export default defineConfig({ server: { open: '/docs/index.html' } })\n\n###### server.proxy\n\n- **类型：** Record<string, string | ProxyOptions>为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。如果 key 值以 ^ 开头，将会被解释为 RegExp。configure 可用于访问 proxy 实例。使用 http-proxy。\n\n```js\nexport default defineConfig({\n  server: {\n    proxy: {\n      // 字符串简写写法\n      '/foo': 'http://localhost:4567',\n      // 选项写法\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, '')\n      },\n      // 正则表达式写法\n      '^/fallback/.*': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/fallback/, '')\n      },\n      // 使用 proxy 实例\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        configure: (proxy, options) => {\n          // proxy 是 'http-proxy' 的实例\n        }\n      }\n    }\n  }\n})\n```\n\n##### 构建选项\n\n###### build.target#\n\n- **类型：** string | string[]\n- **默认：** 'modules'\n- **相关内容：:** 浏览器兼容性设置最终构建的浏览器兼容目标。默认值是一个 Vite 特有的值——'modules'，这是指 支持原生 ES 模块的浏览器。另一个特殊值是 “esnext” —— 即假设有原生动态导入支持，并且将会转译得尽可能小：如果 build.minify 选项为 'terser'， 'esnext' 将会强制降级为 'es2019'。其他情况下将完全不会执行转译。转换过程将会由 esbuild 执行，并且此值应该是一个合法的 esbuild 目标选项。自定义目标也可以是一个 ES 版本（例如：es2015）、一个浏览器版本（例如：chrome58）或是多个目标组成的一个数组。注意：如果代码包含不能被 esbuild 安全地编译的特性，那么构建将会失败。查看 esbuild 文档 获取更多细节。\n\n###### build.outDir\n\n- **类型：** string\n- **默认：** dist指定输出路径（相对于 项目根目录).\n\n###### build.assetsDir\n\n- **类型：** string\n- **默认：** assets指定生成静态资源的存放路径（相对于 build.outDir）\n\n```\n官方地址：https://vitejs.cn/\n```","source":"_posts/Vite.md","raw":"---\ntitle: Vite构建工具的使用\ndate: 2022-01-14 19:28:29\ntags: vite\ncategories: vue\n---\n\n##### 特点\n\n- 极速的服务启动，使用原生 ESM 文件，无需打包!\n- 轻量快速的热重载，无论应用程序大小如何，都始终极快的模块热重载（HMR）\n- 丰富的功能，对 TypeScript、JSX、CSS 等支持开箱即用。\n- 优化的构建，可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建\n- 通用的插件，在开发和构建之间共享 Rollup-superset 插件接口。\n- 完全类型化的API，灵活的 API 和完整 TypeScript 类型。\n\n##### 为什么选 Vite\n\n直接点说，现市面上的构建工具太慢了（webpack、Rollup 和、Parcel等），Vite直接利用浏览器原生的ES模块使构建速度更快\n\n##### 搭建第一个 Vite 项目\n\n使用 npm:\n\n```js\nnpm init vite@latest\n```\n\n使用 yarn:\n\n```js\nyarn create vite\n```\n\n然后按照提示操作即可！\n\n你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:\n\n```js\n# npm 6.x\nnpm init vite@latest my-vue-app --template vue\n\n# npm 7+, 需要额外的双横线：\nnpm init vite@latest my-vue-app -- --template vue\n\n# yarn\nyarn create vite my-vue-app --template vue\n```\n\n##### 命令行界面\n\n在安装了 Vite 的项目中，可以在 npm scripts 中使用 vite 可执行文件，或者直接使用 npx vite 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：\n\n```js\n{\n  \"scripts\": {\n    \"dev\": \"vite\", // 启动开发服务器，别名：`vite dev`，`vite serve`\n    \"build\": \"vite build\", // 为生产环境构建产物\n    \"preview\": \"vite preview\" // 本地预览生产构建产物\n  }\n}\n```\n\n可以指定额外的命令行选项，如 --port 或 --https。运行 npx vite --help 获得完整的命令行选项列表。\n\n##### 配置文件解析（常用配置）\n\n当以命令行方式运行 vite 时，Vite 会自动解析 项目根目录 下名为 vite.config.js 的文件。\n\n最基础的配置文件是这样的：\n\n```js\n// vite.config.js\nexport default {\n  // 配置选项\n}\n```\n\n注意：即使项目没有在 package.json 中开启 type: \"module\"，Vite 也支持在配置文件中使用 ESM 语法。这种情况下，配置文件会在被加载前自动进行预处理。\n\n你可以显式地通过 --config 命令行选项指定一个配置文件（相对于 cwd 路径进行解析）\n\n```\nvite --config my-config.js\n```\n\n##### 配置智能提示\n\n因为 Vite 本身附带 Typescript 类型，所以你可以通过 IDE 和 jsdoc 的配合来实现智能提示：\n\n```js\n/**\n * @type {import('vite').UserConfig}\n */\nconst config = {\n  // ...\n}\n\nexport default config\n```\n\n另外你可以使用 defineConfig 工具函数，这样不用 jsdoc 注解也可以获取类型提示：\n\n```js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n})\n```\n\nVite 也直接支持 TS 配置文件。你可以在 vite.config.ts 中使用 defineConfig 工具函数。\n\n##### 情景配置\n\n如果配置文件需要基于（dev/serve 或 build）命令或者不同的 模式 来决定选项，则可以选择导出这样一个函数：\n\n```js\nexport default defineConfig(({ command, mode }) => {\n  if (command === 'serve') {\n    return {\n      // dev 独有配置\n    }\n  } else {\n    // command === 'build'\n    return {\n      // build 独有配置\n    }\n  }\n})\n```\n\n需要注意的是，在 Vite 的 API 中，在开发环境下 command 的值为 serve（在 CLI 中， vite dev 和 vite serve 是 vite 的别名），而在生产环境下为 build（vite build）。\n\n##### 异步配置\n\n如果配置需要调用一个异步函数，也可以转而导出一个异步函数\n\n```js\nexport default defineConfig(async ({ command, mode }) => {\n  const data = await asyncFunction()\n  return {\n    // 构建模式所需的特有配置\n  }\n})\n```\n\n##### 共享配置\n\n###### root\n\n- **类型：** string\n- **默认：** process.cwd()项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。\n\n###### base\n\n- **类型：** string\n- **默认：** /开发或生产环境服务的公共基础路径。合法的值包括以下几种：绝对 URL 路径名，例如 /foo/完整的 URL，例如 https://foo.com/空字符串或 ./（用于开发环境）\n\n###### mode\n\n- **类型：** string\n- **默认：** 'development'（开发模式），'production'（生产模式）在配置中指明将会把 **serve 和 build** 时的模式 **都** 覆盖掉。也可以通过命令行 --mode 选项来重写。\n\n###### plugins\n\n- **类型：** (Plugin | Plugin[])[]需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。\n\n###### publicDir\n\n- **类型：** string | false\n- **默认：** \"public\"作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目的根目录的相对路径。将 publicDir 设定为 false 可以关闭此项功能。\n\n##### 开发服务器选项\n\n###### server.host\n\n- **类型：** string | boolean\n- **默认：** '127.0.0.1'指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。也可以通过 CLI 使用 --host 0.0.0.0 或 --host 来设置。\n\n###### server.port\n\n- **类型：** number\n- **默认值：** 3000指定开发服务器端口。注意：如果端口已经被使用，Vite 会自动尝试下一个可用的端口，所以这可能不是开发服务器最终监听的实际端口\n\n###### server.https\n\n- **类型：** boolean | https.ServerOptions启用 TLS + HTTP/2。注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS。这个值也可以是一个传递给 https.createServer() 的 选项对象。\n\n###### server.open\n\n- **类型：** boolean | string在开发服务器启动时自动在浏览器中打开应用程序。当此值为字符串时，会被用作 URL 的路径名。若你想指定喜欢的浏览器打开服务器，你可以设置环境变量 process.env.BROWSER（例如：firefox）。示例：**export default defineConfig({ server: { open: '/docs/index.html' } })\n\n###### server.proxy\n\n- **类型：** Record<string, string | ProxyOptions>为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。如果 key 值以 ^ 开头，将会被解释为 RegExp。configure 可用于访问 proxy 实例。使用 http-proxy。\n\n```js\nexport default defineConfig({\n  server: {\n    proxy: {\n      // 字符串简写写法\n      '/foo': 'http://localhost:4567',\n      // 选项写法\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, '')\n      },\n      // 正则表达式写法\n      '^/fallback/.*': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/fallback/, '')\n      },\n      // 使用 proxy 实例\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        configure: (proxy, options) => {\n          // proxy 是 'http-proxy' 的实例\n        }\n      }\n    }\n  }\n})\n```\n\n##### 构建选项\n\n###### build.target#\n\n- **类型：** string | string[]\n- **默认：** 'modules'\n- **相关内容：:** 浏览器兼容性设置最终构建的浏览器兼容目标。默认值是一个 Vite 特有的值——'modules'，这是指 支持原生 ES 模块的浏览器。另一个特殊值是 “esnext” —— 即假设有原生动态导入支持，并且将会转译得尽可能小：如果 build.minify 选项为 'terser'， 'esnext' 将会强制降级为 'es2019'。其他情况下将完全不会执行转译。转换过程将会由 esbuild 执行，并且此值应该是一个合法的 esbuild 目标选项。自定义目标也可以是一个 ES 版本（例如：es2015）、一个浏览器版本（例如：chrome58）或是多个目标组成的一个数组。注意：如果代码包含不能被 esbuild 安全地编译的特性，那么构建将会失败。查看 esbuild 文档 获取更多细节。\n\n###### build.outDir\n\n- **类型：** string\n- **默认：** dist指定输出路径（相对于 项目根目录).\n\n###### build.assetsDir\n\n- **类型：** string\n- **默认：** assets指定生成静态资源的存放路径（相对于 build.outDir）\n\n```\n官方地址：https://vitejs.cn/\n```","slug":"Vite","published":1,"updated":"2022-01-14T12:13:59.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyeeekyi0000i0fz8hcjestd","content":"<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>极速的服务启动，使用原生 ESM 文件，无需打包!</li>\n<li>轻量快速的热重载，无论应用程序大小如何，都始终极快的模块热重载（HMR）</li>\n<li>丰富的功能，对 TypeScript、JSX、CSS 等支持开箱即用。</li>\n<li>优化的构建，可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建</li>\n<li>通用的插件，在开发和构建之间共享 Rollup-superset 插件接口。</li>\n<li>完全类型化的API，灵活的 API 和完整 TypeScript 类型。</li>\n</ul>\n<h5 id=\"为什么选-Vite\"><a href=\"#为什么选-Vite\" class=\"headerlink\" title=\"为什么选 Vite\"></a>为什么选 Vite</h5><p>直接点说，现市面上的构建工具太慢了（webpack、Rollup 和、Parcel等），Vite直接利用浏览器原生的ES模块使构建速度更快</p>\n<h5 id=\"搭建第一个-Vite-项目\"><a href=\"#搭建第一个-Vite-项目\" class=\"headerlink\" title=\"搭建第一个 Vite 项目\"></a>搭建第一个 Vite 项目</h5><p>使用 npm:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite@latest</span><br></pre></td></tr></table></figure>\n\n<p>使用 yarn:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn create vite</span><br></pre></td></tr></table></figure>\n\n<p>然后按照提示操作即可！</p>\n<p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># npm <span class=\"number\">6.</span>x</span><br><span class=\"line\">npm init vite@latest my-vue-app --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># npm <span class=\"number\">7</span>+, 需要额外的双横线：</span><br><span class=\"line\">npm init vite@latest my-vue-app -- --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># yarn</span><br><span class=\"line\">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命令行界面\"><a href=\"#命令行界面\" class=\"headerlink\" title=\"命令行界面\"></a>命令行界面</h5><p>在安装了 Vite 的项目中，可以在 npm scripts 中使用 vite 可执行文件，或者直接使用 npx vite 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;vite&quot;</span>, <span class=\"comment\">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;vite build&quot;</span>, <span class=\"comment\">// 为生产环境构建产物</span></span><br><span class=\"line\">    <span class=\"string\">&quot;preview&quot;</span>: <span class=\"string\">&quot;vite preview&quot;</span> <span class=\"comment\">// 本地预览生产构建产物</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以指定额外的命令行选项，如 –port 或 –https。运行 npx vite –help 获得完整的命令行选项列表。</p>\n<h5 id=\"配置文件解析（常用配置）\"><a href=\"#配置文件解析（常用配置）\" class=\"headerlink\" title=\"配置文件解析（常用配置）\"></a>配置文件解析（常用配置）</h5><p>当以命令行方式运行 vite 时，Vite 会自动解析 项目根目录 下名为 vite.config.js 的文件。</p>\n<p>最基础的配置文件是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vite.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置选项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：即使项目没有在 package.json 中开启 type: “module”，Vite 也支持在配置文件中使用 ESM 语法。这种情况下，配置文件会在被加载前自动进行预处理。</p>\n<p>你可以显式地通过 –config 命令行选项指定一个配置文件（相对于 cwd 路径进行解析）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vite --config my-config.js</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置智能提示\"><a href=\"#配置智能提示\" class=\"headerlink\" title=\"配置智能提示\"></a>配置智能提示</h5><p>因为 Vite 本身附带 Typescript 类型，所以你可以通过 IDE 和 jsdoc 的配合来实现智能提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@type <span class=\"type\">&#123;import(&#x27;vite&#x27;).UserConfig&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> config</span><br></pre></td></tr></table></figure>\n\n<p>另外你可以使用 defineConfig 工具函数，这样不用 jsdoc 注解也可以获取类型提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Vite 也直接支持 TS 配置文件。你可以在 vite.config.ts 中使用 defineConfig 工具函数。</p>\n<h5 id=\"情景配置\"><a href=\"#情景配置\" class=\"headerlink\" title=\"情景配置\"></a>情景配置</h5><p>如果配置文件需要基于（dev/serve 或 build）命令或者不同的 模式 来决定选项，则可以选择导出这样一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(<span class=\"function\">(<span class=\"params\">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (command === <span class=\"string\">&#x27;serve&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// dev 独有配置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// command === &#x27;build&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// build 独有配置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在 Vite 的 API 中，在开发环境下 command 的值为 serve（在 CLI 中， vite dev 和 vite serve 是 vite 的别名），而在生产环境下为 build（vite build）。</p>\n<h5 id=\"异步配置\"><a href=\"#异步配置\" class=\"headerlink\" title=\"异步配置\"></a>异步配置</h5><p>如果配置需要调用一个异步函数，也可以转而导出一个异步函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(<span class=\"keyword\">async</span> (&#123; command, mode &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> asyncFunction()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建模式所需的特有配置</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"共享配置\"><a href=\"#共享配置\" class=\"headerlink\" title=\"共享配置\"></a>共享配置</h5><h6 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> process.cwd()项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。</li>\n</ul>\n<h6 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> /开发或生产环境服务的公共基础路径。合法的值包括以下几种：绝对 URL 路径名，例如 /foo/完整的 URL，例如 <a href=\"https://foo.com/%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%96\">https://foo.com/空字符串或</a> ./（用于开发环境）</li>\n</ul>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> ‘development’（开发模式），’production’（生产模式）在配置中指明将会把 <strong>serve 和 build</strong> 时的模式 <strong>都</strong> 覆盖掉。也可以通过命令行 –mode 选项来重写。</li>\n</ul>\n<h6 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h6><ul>\n<li><strong>类型：</strong> (Plugin | Plugin[])[]需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。</li>\n</ul>\n<h6 id=\"publicDir\"><a href=\"#publicDir\" class=\"headerlink\" title=\"publicDir\"></a>publicDir</h6><ul>\n<li><strong>类型：</strong> string | false</li>\n<li><strong>默认：</strong> “public”作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目的根目录的相对路径。将 publicDir 设定为 false 可以关闭此项功能。</li>\n</ul>\n<h5 id=\"开发服务器选项\"><a href=\"#开发服务器选项\" class=\"headerlink\" title=\"开发服务器选项\"></a>开发服务器选项</h5><h6 id=\"server-host\"><a href=\"#server-host\" class=\"headerlink\" title=\"server.host\"></a>server.host</h6><ul>\n<li><strong>类型：</strong> string | boolean</li>\n<li><strong>默认：</strong> ‘127.0.0.1’指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。也可以通过 CLI 使用 –host 0.0.0.0 或 –host 来设置。</li>\n</ul>\n<h6 id=\"server-port\"><a href=\"#server-port\" class=\"headerlink\" title=\"server.port\"></a>server.port</h6><ul>\n<li><strong>类型：</strong> number</li>\n<li><strong>默认值：</strong> 3000指定开发服务器端口。注意：如果端口已经被使用，Vite 会自动尝试下一个可用的端口，所以这可能不是开发服务器最终监听的实际端口</li>\n</ul>\n<h6 id=\"server-https\"><a href=\"#server-https\" class=\"headerlink\" title=\"server.https\"></a>server.https</h6><ul>\n<li><strong>类型：</strong> boolean | https.ServerOptions启用 TLS + HTTP/2。注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS。这个值也可以是一个传递给 https.createServer() 的 选项对象。</li>\n</ul>\n<h6 id=\"server-open\"><a href=\"#server-open\" class=\"headerlink\" title=\"server.open\"></a>server.open</h6><ul>\n<li><strong>类型：</strong> boolean | string在开发服务器启动时自动在浏览器中打开应用程序。当此值为字符串时，会被用作 URL 的路径名。若你想指定喜欢的浏览器打开服务器，你可以设置环境变量 process.env.BROWSER（例如：firefox）。示例：**export default defineConfig({ server: { open: ‘/docs/index.html’ } })</li>\n</ul>\n<h6 id=\"server-proxy\"><a href=\"#server-proxy\" class=\"headerlink\" title=\"server.proxy\"></a>server.proxy</h6><ul>\n<li><strong>类型：</strong> Record&lt;string, string | ProxyOptions&gt;为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。如果 key 值以 ^ 开头，将会被解释为 RegExp。configure 可用于访问 proxy 实例。使用 http-proxy。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  <span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 字符串简写写法</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/foo&#x27;</span>: <span class=\"string\">&#x27;http://localhost:4567&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 选项写法</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">rewrite</span>: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> path.replace(<span class=\"regexp\">/^\\/api/</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 正则表达式写法</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;^/fallback/.*&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">rewrite</span>: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> path.replace(<span class=\"regexp\">/^\\/fallback/</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 proxy 实例</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">configure</span>: <span class=\"function\">(<span class=\"params\">proxy, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// proxy 是 &#x27;http-proxy&#x27; 的实例</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"构建选项\"><a href=\"#构建选项\" class=\"headerlink\" title=\"构建选项\"></a>构建选项</h5><h6 id=\"build-target\"><a href=\"#build-target\" class=\"headerlink\" title=\"build.target#\"></a>build.target#</h6><ul>\n<li><strong>类型：</strong> string | string[]</li>\n<li><strong>默认：</strong> ‘modules’</li>\n<li><strong>相关内容：:</strong> 浏览器兼容性设置最终构建的浏览器兼容目标。默认值是一个 Vite 特有的值——‘modules’，这是指 支持原生 ES 模块的浏览器。另一个特殊值是 “esnext” —— 即假设有原生动态导入支持，并且将会转译得尽可能小：如果 build.minify 选项为 ‘terser’， ‘esnext’ 将会强制降级为 ‘es2019’。其他情况下将完全不会执行转译。转换过程将会由 esbuild 执行，并且此值应该是一个合法的 esbuild 目标选项。自定义目标也可以是一个 ES 版本（例如：es2015）、一个浏览器版本（例如：chrome58）或是多个目标组成的一个数组。注意：如果代码包含不能被 esbuild 安全地编译的特性，那么构建将会失败。查看 esbuild 文档 获取更多细节。</li>\n</ul>\n<h6 id=\"build-outDir\"><a href=\"#build-outDir\" class=\"headerlink\" title=\"build.outDir\"></a>build.outDir</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> dist指定输出路径（相对于 项目根目录).</li>\n</ul>\n<h6 id=\"build-assetsDir\"><a href=\"#build-assetsDir\" class=\"headerlink\" title=\"build.assetsDir\"></a>build.assetsDir</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> assets指定生成静态资源的存放路径（相对于 build.outDir）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方地址：https://vitejs.cn/</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>极速的服务启动，使用原生 ESM 文件，无需打包!</li>\n<li>轻量快速的热重载，无论应用程序大小如何，都始终极快的模块热重载（HMR）</li>\n<li>丰富的功能，对 TypeScript、JSX、CSS 等支持开箱即用。</li>\n<li>优化的构建，可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建</li>\n<li>通用的插件，在开发和构建之间共享 Rollup-superset 插件接口。</li>\n<li>完全类型化的API，灵活的 API 和完整 TypeScript 类型。</li>\n</ul>\n<h5 id=\"为什么选-Vite\"><a href=\"#为什么选-Vite\" class=\"headerlink\" title=\"为什么选 Vite\"></a>为什么选 Vite</h5><p>直接点说，现市面上的构建工具太慢了（webpack、Rollup 和、Parcel等），Vite直接利用浏览器原生的ES模块使构建速度更快</p>\n<h5 id=\"搭建第一个-Vite-项目\"><a href=\"#搭建第一个-Vite-项目\" class=\"headerlink\" title=\"搭建第一个 Vite 项目\"></a>搭建第一个 Vite 项目</h5><p>使用 npm:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite@latest</span><br></pre></td></tr></table></figure>\n\n<p>使用 yarn:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn create vite</span><br></pre></td></tr></table></figure>\n\n<p>然后按照提示操作即可！</p>\n<p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># npm <span class=\"number\">6.</span>x</span><br><span class=\"line\">npm init vite@latest my-vue-app --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># npm <span class=\"number\">7</span>+, 需要额外的双横线：</span><br><span class=\"line\">npm init vite@latest my-vue-app -- --template vue</span><br><span class=\"line\"></span><br><span class=\"line\"># yarn</span><br><span class=\"line\">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命令行界面\"><a href=\"#命令行界面\" class=\"headerlink\" title=\"命令行界面\"></a>命令行界面</h5><p>在安装了 Vite 的项目中，可以在 npm scripts 中使用 vite 可执行文件，或者直接使用 npx vite 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;vite&quot;</span>, <span class=\"comment\">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;vite build&quot;</span>, <span class=\"comment\">// 为生产环境构建产物</span></span><br><span class=\"line\">    <span class=\"string\">&quot;preview&quot;</span>: <span class=\"string\">&quot;vite preview&quot;</span> <span class=\"comment\">// 本地预览生产构建产物</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以指定额外的命令行选项，如 –port 或 –https。运行 npx vite –help 获得完整的命令行选项列表。</p>\n<h5 id=\"配置文件解析（常用配置）\"><a href=\"#配置文件解析（常用配置）\" class=\"headerlink\" title=\"配置文件解析（常用配置）\"></a>配置文件解析（常用配置）</h5><p>当以命令行方式运行 vite 时，Vite 会自动解析 项目根目录 下名为 vite.config.js 的文件。</p>\n<p>最基础的配置文件是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vite.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置选项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：即使项目没有在 package.json 中开启 type: “module”，Vite 也支持在配置文件中使用 ESM 语法。这种情况下，配置文件会在被加载前自动进行预处理。</p>\n<p>你可以显式地通过 –config 命令行选项指定一个配置文件（相对于 cwd 路径进行解析）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vite --config my-config.js</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置智能提示\"><a href=\"#配置智能提示\" class=\"headerlink\" title=\"配置智能提示\"></a>配置智能提示</h5><p>因为 Vite 本身附带 Typescript 类型，所以你可以通过 IDE 和 jsdoc 的配合来实现智能提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@type <span class=\"type\">&#123;import(&#x27;vite&#x27;).UserConfig&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> config</span><br></pre></td></tr></table></figure>\n\n<p>另外你可以使用 defineConfig 工具函数，这样不用 jsdoc 注解也可以获取类型提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Vite 也直接支持 TS 配置文件。你可以在 vite.config.ts 中使用 defineConfig 工具函数。</p>\n<h5 id=\"情景配置\"><a href=\"#情景配置\" class=\"headerlink\" title=\"情景配置\"></a>情景配置</h5><p>如果配置文件需要基于（dev/serve 或 build）命令或者不同的 模式 来决定选项，则可以选择导出这样一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(<span class=\"function\">(<span class=\"params\">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (command === <span class=\"string\">&#x27;serve&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// dev 独有配置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// command === &#x27;build&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// build 独有配置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在 Vite 的 API 中，在开发环境下 command 的值为 serve（在 CLI 中， vite dev 和 vite serve 是 vite 的别名），而在生产环境下为 build（vite build）。</p>\n<h5 id=\"异步配置\"><a href=\"#异步配置\" class=\"headerlink\" title=\"异步配置\"></a>异步配置</h5><p>如果配置需要调用一个异步函数，也可以转而导出一个异步函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(<span class=\"keyword\">async</span> (&#123; command, mode &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> asyncFunction()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建模式所需的特有配置</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"共享配置\"><a href=\"#共享配置\" class=\"headerlink\" title=\"共享配置\"></a>共享配置</h5><h6 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> process.cwd()项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。</li>\n</ul>\n<h6 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> /开发或生产环境服务的公共基础路径。合法的值包括以下几种：绝对 URL 路径名，例如 /foo/完整的 URL，例如 <a href=\"https://foo.com/%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%96\">https://foo.com/空字符串或</a> ./（用于开发环境）</li>\n</ul>\n<h6 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> ‘development’（开发模式），’production’（生产模式）在配置中指明将会把 <strong>serve 和 build</strong> 时的模式 <strong>都</strong> 覆盖掉。也可以通过命令行 –mode 选项来重写。</li>\n</ul>\n<h6 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h6><ul>\n<li><strong>类型：</strong> (Plugin | Plugin[])[]需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。</li>\n</ul>\n<h6 id=\"publicDir\"><a href=\"#publicDir\" class=\"headerlink\" title=\"publicDir\"></a>publicDir</h6><ul>\n<li><strong>类型：</strong> string | false</li>\n<li><strong>默认：</strong> “public”作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目的根目录的相对路径。将 publicDir 设定为 false 可以关闭此项功能。</li>\n</ul>\n<h5 id=\"开发服务器选项\"><a href=\"#开发服务器选项\" class=\"headerlink\" title=\"开发服务器选项\"></a>开发服务器选项</h5><h6 id=\"server-host\"><a href=\"#server-host\" class=\"headerlink\" title=\"server.host\"></a>server.host</h6><ul>\n<li><strong>类型：</strong> string | boolean</li>\n<li><strong>默认：</strong> ‘127.0.0.1’指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。也可以通过 CLI 使用 –host 0.0.0.0 或 –host 来设置。</li>\n</ul>\n<h6 id=\"server-port\"><a href=\"#server-port\" class=\"headerlink\" title=\"server.port\"></a>server.port</h6><ul>\n<li><strong>类型：</strong> number</li>\n<li><strong>默认值：</strong> 3000指定开发服务器端口。注意：如果端口已经被使用，Vite 会自动尝试下一个可用的端口，所以这可能不是开发服务器最终监听的实际端口</li>\n</ul>\n<h6 id=\"server-https\"><a href=\"#server-https\" class=\"headerlink\" title=\"server.https\"></a>server.https</h6><ul>\n<li><strong>类型：</strong> boolean | https.ServerOptions启用 TLS + HTTP/2。注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS。这个值也可以是一个传递给 https.createServer() 的 选项对象。</li>\n</ul>\n<h6 id=\"server-open\"><a href=\"#server-open\" class=\"headerlink\" title=\"server.open\"></a>server.open</h6><ul>\n<li><strong>类型：</strong> boolean | string在开发服务器启动时自动在浏览器中打开应用程序。当此值为字符串时，会被用作 URL 的路径名。若你想指定喜欢的浏览器打开服务器，你可以设置环境变量 process.env.BROWSER（例如：firefox）。示例：**export default defineConfig({ server: { open: ‘/docs/index.html’ } })</li>\n</ul>\n<h6 id=\"server-proxy\"><a href=\"#server-proxy\" class=\"headerlink\" title=\"server.proxy\"></a>server.proxy</h6><ul>\n<li><strong>类型：</strong> Record&lt;string, string | ProxyOptions&gt;为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。如果 key 值以 ^ 开头，将会被解释为 RegExp。configure 可用于访问 proxy 实例。使用 http-proxy。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  <span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 字符串简写写法</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/foo&#x27;</span>: <span class=\"string\">&#x27;http://localhost:4567&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 选项写法</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">rewrite</span>: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> path.replace(<span class=\"regexp\">/^\\/api/</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 正则表达式写法</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;^/fallback/.*&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">rewrite</span>: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> path.replace(<span class=\"regexp\">/^\\/fallback/</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 proxy 实例</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">configure</span>: <span class=\"function\">(<span class=\"params\">proxy, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// proxy 是 &#x27;http-proxy&#x27; 的实例</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"构建选项\"><a href=\"#构建选项\" class=\"headerlink\" title=\"构建选项\"></a>构建选项</h5><h6 id=\"build-target\"><a href=\"#build-target\" class=\"headerlink\" title=\"build.target#\"></a>build.target#</h6><ul>\n<li><strong>类型：</strong> string | string[]</li>\n<li><strong>默认：</strong> ‘modules’</li>\n<li><strong>相关内容：:</strong> 浏览器兼容性设置最终构建的浏览器兼容目标。默认值是一个 Vite 特有的值——‘modules’，这是指 支持原生 ES 模块的浏览器。另一个特殊值是 “esnext” —— 即假设有原生动态导入支持，并且将会转译得尽可能小：如果 build.minify 选项为 ‘terser’， ‘esnext’ 将会强制降级为 ‘es2019’。其他情况下将完全不会执行转译。转换过程将会由 esbuild 执行，并且此值应该是一个合法的 esbuild 目标选项。自定义目标也可以是一个 ES 版本（例如：es2015）、一个浏览器版本（例如：chrome58）或是多个目标组成的一个数组。注意：如果代码包含不能被 esbuild 安全地编译的特性，那么构建将会失败。查看 esbuild 文档 获取更多细节。</li>\n</ul>\n<h6 id=\"build-outDir\"><a href=\"#build-outDir\" class=\"headerlink\" title=\"build.outDir\"></a>build.outDir</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> dist指定输出路径（相对于 项目根目录).</li>\n</ul>\n<h6 id=\"build-assetsDir\"><a href=\"#build-assetsDir\" class=\"headerlink\" title=\"build.assetsDir\"></a>build.assetsDir</h6><ul>\n<li><strong>类型：</strong> string</li>\n<li><strong>默认：</strong> assets指定生成静态资源的存放路径（相对于 build.outDir）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">官方地址：https://vitejs.cn/</span><br></pre></td></tr></table></figure>"},{"title":"前端程序员必须知道的 Web 漏洞","date":"2022-01-14T12:14:32.000Z","_content":"\n随着互联网的发展，早已经不是仅限于简单的网页或是社交，电商购物、银行转账、企业管理等等。 Web 安全也是非常值得注意的。\n\n##### 什么是 Web 安全？\n\n黑客利用网络操作系统的漏洞和 Web 服务器的 SQL 注入漏洞等，得到 Web 服务器的控制权，轻则篡改、删除、添加数据，重则窃取重要的商业信息、转账等，更严重的就是在网页中植入恶意代码，使网站受到不可预期的侵害。\n\n常见的攻击可分为三类：XSS、CSRF、SQL注入。\n\n##### 1、XSS 攻击\n\nCross Site Scripting 跨站脚本攻击，为了与 CSS 区分，所以简写为 XSS 。\n\n恶意攻击给 Web 页面植入恶意的 Script 代码，当用户浏览该网页的时候，嵌入 Web 里面的 script 代码会被执行，从而达到攻击的效果。\n\n讲直白点，就是恶意攻击者通过在输入框处添加恶意 script 代码，用户浏览网页的时候执行 script 代码，从而达到恶意攻击用户的目的。\n\n###### 1.1、XSS 的危害\n\n- 盗用各类账号，然后进行数据各种任意操作。\n- 控制企业数据，包括删除、添加、篡改敏感信息等。\n- 盗取具有商业价值信息。\n- 强制发送电子邮件，获取验证码。\n- 控制受害者的机器向其他网站发起攻击。\n\n###### 1.2、XSS 的攻击类型\n\n- 反射型 XSS 跨站脚本攻击\n\n发出请求时，XSS代码会出现在 url 中，作为输入提交到服务器端，服务器再返回给浏览器，然后浏览器解析执行 XSS 代码，这一过程像一次反射，所以称之为反射型。\n\n这种类型的攻击，通常是把 XSS 攻击代码放入请求地址的 数据传输部分，如：\n\n```\nhttp://www.xxx.com?q=<script>alert(\"恶意脚本\")</script>\n\n或\n\nhttp://www.xxx.com?n=<img src=\"1 onerror=alert('恶意代码')\">\n```\n\n- 存储型 XSS 跨站脚本攻击\n\n提交的 XSS 代码会存储在服务器端，如数据库、内存、文件系统内，下次请求目标页面时不再提交 XSS 代码。\n\n如在留言板输入框位置添加 script 代码或 html、css 代码，把代码为转义，直接存入数据库。\n\n- 文档型 XSS 跨站脚本攻击\n\n文档型的 XSS 攻击不会经过服务器，作为中间人的角色，在数据传输过程中劫持到网络数据包，然后修改里面的 html 文档。\n\n###### 1.3、XSS 的防御措施\n\n措施1：编码。\n\n对这些数据进行 html entity 编码。客户端和服务器端都需要进行转义编码。\n\n措施2：过滤。\n\n移除用户上传的 DOM 属性，如上边的 onerror。\n\n移除用户上传的 style、script、iframe 节点。\n\n```html\n// 如\n<div>\n <style>\n  body { display:none } \n </style>  \n</div>\n```\n\n措施3：利用 CSP\n\n浏览器中的内容安全策略，就是决策浏览器加载哪些资源。\n\n##### 2、CSRF 攻击\n\nCross site request forgery 跨站点请求伪造。\n\n攻击者诱导受害者进入第三方网站，向被攻击网站发送跨站请求，利用被攻击者在被攻击网站已经获取的注册凭证，绕过后台的用户验证达到冒充用户对攻击网站进行的某种操作。\n\n###### CSRF 攻击特点：\n\n- 并没有劫持 cookie，只是伪造受害者的身份。\n- 攻击一般发起在第三方网站，被攻击网站无法防止攻击发生。\n- 跨站请求可以是各种方式，如：图片url、超链接、CORS、form提交。\n\n###### 2.1、CSRF 的危害\n\n- 在社交网络，网站被劫持之后，点击会自动关注 + 分享。\n- 银行系统，被攻击以后可以查询余额，也可以自动转账。\n- 电商类系统，如果被攻击可以添加、删除、清空购物车。\n\n###### 2.2、CSRF 的攻击类型\n\n- GET 类型攻击\n\n使用非常简单，只需要一个 http 请求。\n\n比如页面中的一个图片添加链接，还有 iframe、script ，最容易完成 CSFR 攻击，且不易被用户发现，隐蔽性超强。\n\n由于 get 接口是最常见的一种 CSRF 攻击类型，所以很多重要的接口不适用 get 方式，使用 post 一定程度上可以防止 CSRF 攻击。\n\n- POST 类型攻击\n\n这种类型的 SCRF 攻击，通常使用的是一个自动提交的表单。简单讲就是伪造一个自动提交的表单，一旦访问页面时，表单就会自动提交。如：\n\n```js\n<form action=\"http://xxx.com/widthdraw\" method=\"post\">\n <input type=\"hidden\" name=\"account\" value=\"web\" />\n <input type=\"hidden\" name=\"psd\" value=\"hacker\" />\n</form>\n\n<script type=\"text/javascript\">\n document.forms[0].submit()\n</script>\n```\n\n- 链接类型的攻击\n\n比起前两个，这个类型的比较少见，链接类型的攻击必须要用户点击链接，才能触发。\n\n通常在论坛中发布的图片嵌入恶意的链接，或以广告的形式诱导用户点击中招。所以我们在邮箱中看到乱七八糟的广告，尽量别点击，防止遇到三方攻击。\n\n- 登录 CSRF 攻击方式\n\n伪造一种新型的攻击方式，用户误以为是在网站正常登录，实际上是使用账户和密码登录到了黑客网站，这样黑客可以监听到用户的所有操作，甚至知道用户的账户信息。\n\n###### 2.3、CSRF 的防御措施\n\n**措施**1：检查 http 头部的 referer 信息\n\nreferer 包含在请求头内，表示请求接口的页面来源。\n\n服务端通过检查 referer 信息，发现来源于外域时，就可以拦截请求，通过阻止不明外域的访问，一定程度上可以减少攻击。\n\n**措施**2：使用一次性令牌\n\n使用一次性令牌做身份识别，黑客是无法通过跨域拿到一次性令牌的，所以服务端可以通过判断是否携带一次性令牌，就可以排除一部分的非法操作者。\n\n**措施**3：使用验证图片\n\n服务端生成一些文本和数字，在服务端保存这份信息，同时以图片的形式在客户端展现，让用户去合法填写信息，当 CSRF 攻击时，拿不到这个验证码的时候，无法向服务器提供这个信息，导致匹配失败，从而识别它是非法攻击者。\n\n这个应用非常常见，登录的时候，需要填写图形验证码。\n\n现在滑动图片验证也非常常见。\n\n##### 3、SQL注入\n\nSQL 注入，一般发生在注册、评论、添加等，只有有用户输入的地方，就有可能发生 SQL 注入。SQL 注入是一种常见的 Web 安全漏洞，攻击者会利用这个漏洞，可以访问或修改数据，利用潜在的数据库漏洞进行攻击。\n\n所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将(恶意的)SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入(恶意)SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击.\n\n###### 3.1、SQL 注入危害\n\n任意的账号都可以登录，可以进行任意的操作，粗暴点讲，就是随便来。\n\n###### 3.2、 SQL注入分类\n\n- 数字型注入\n\n当输入的参数为整数时，则有可能存在数字型漏洞。\n\n- 字符型注入\n\n当输入参数为字符串时，则可能存在字符型注入漏洞。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符型一般需要使用单引号来闭合。\n\n字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码。\n\n- 其他类型\n\n其实我觉得 SQL 注入只有两种类型：数字型与字符型。很多人可能会说还有如：Cookie 注入、POST 注入、延时注入等。\n\n的确如此，但这些类型的注入归根结底也是数字型和字符型注入的不同展现形式或者注入的位置不同罢了\n\n以下是一些常见的注入叫法：\n\n- POST注入：注入字段在 POST 数据中\n- Cookie注入：注入字段在 Cookie 数据中\n- 延时注入：使用数据库延时特性注入\n- 搜索注入：注入处为搜索的地方\n- base64注入：注入字符串需要经过 base64 加密\n\n###### 3.3、SQL注入的防范措施\n\n凡是用户输入的地方，我们都应该防止黑客攻击，永远不要相信用户的输入。所以对应的防御措施分别有：\n\n- 添加正则验证，使用正则表达式过滤传入的参数。\n- 屏蔽敏感词汇。\n- 字符串过滤。\n\n##### 4、接口加密\n\n前后端分离之后，前端每天都会接触到很多接口。发送网络请求的时候，有些接口就会使用 get 方法。最常见的传参方式就是，直接在 url 地址后面加参数。\n\n直接采用这种方式传输数据，如果数据被劫持或抓包工具偷走之后，就会直接被人盗取走，特别危险。若是采用接口加密，如下：\n\n接口加密就是将接口请求调用中传递的参数进行加密，目的就是为了保证接口请求中传递参数和返回的结果的安全性，一般比较敏感数据，如身份证、电话号码、账号、密码等需要进行加密。\n\n常见的加密方式：\n\n- md5 加密\n- base64 加密\n- RSA 加密\n- 对称加密算法\n- bcryptjs\n\n加密方式较多，可以根据自己具体的需要和项目语言选择其中一种。\n\n加密之后的数据更安全，那我们能不能将接口所有的数据都进行加密呢？加密是非常消耗资源的，如果有大批量的数据都进行加密时，返回数据需要的时间就更长，会直接影响用户体验。所以我们进行加密时，只需要对敏感的重要的信息进行加密。","source":"_posts/前端程序员必须知道的-Web-漏洞.md","raw":"---\ntitle: 前端程序员必须知道的 Web 漏洞\ndate: 2022-01-14 20:14:32\ntags: 前端安全\ncategories: 前端安全\n---\n\n随着互联网的发展，早已经不是仅限于简单的网页或是社交，电商购物、银行转账、企业管理等等。 Web 安全也是非常值得注意的。\n\n##### 什么是 Web 安全？\n\n黑客利用网络操作系统的漏洞和 Web 服务器的 SQL 注入漏洞等，得到 Web 服务器的控制权，轻则篡改、删除、添加数据，重则窃取重要的商业信息、转账等，更严重的就是在网页中植入恶意代码，使网站受到不可预期的侵害。\n\n常见的攻击可分为三类：XSS、CSRF、SQL注入。\n\n##### 1、XSS 攻击\n\nCross Site Scripting 跨站脚本攻击，为了与 CSS 区分，所以简写为 XSS 。\n\n恶意攻击给 Web 页面植入恶意的 Script 代码，当用户浏览该网页的时候，嵌入 Web 里面的 script 代码会被执行，从而达到攻击的效果。\n\n讲直白点，就是恶意攻击者通过在输入框处添加恶意 script 代码，用户浏览网页的时候执行 script 代码，从而达到恶意攻击用户的目的。\n\n###### 1.1、XSS 的危害\n\n- 盗用各类账号，然后进行数据各种任意操作。\n- 控制企业数据，包括删除、添加、篡改敏感信息等。\n- 盗取具有商业价值信息。\n- 强制发送电子邮件，获取验证码。\n- 控制受害者的机器向其他网站发起攻击。\n\n###### 1.2、XSS 的攻击类型\n\n- 反射型 XSS 跨站脚本攻击\n\n发出请求时，XSS代码会出现在 url 中，作为输入提交到服务器端，服务器再返回给浏览器，然后浏览器解析执行 XSS 代码，这一过程像一次反射，所以称之为反射型。\n\n这种类型的攻击，通常是把 XSS 攻击代码放入请求地址的 数据传输部分，如：\n\n```\nhttp://www.xxx.com?q=<script>alert(\"恶意脚本\")</script>\n\n或\n\nhttp://www.xxx.com?n=<img src=\"1 onerror=alert('恶意代码')\">\n```\n\n- 存储型 XSS 跨站脚本攻击\n\n提交的 XSS 代码会存储在服务器端，如数据库、内存、文件系统内，下次请求目标页面时不再提交 XSS 代码。\n\n如在留言板输入框位置添加 script 代码或 html、css 代码，把代码为转义，直接存入数据库。\n\n- 文档型 XSS 跨站脚本攻击\n\n文档型的 XSS 攻击不会经过服务器，作为中间人的角色，在数据传输过程中劫持到网络数据包，然后修改里面的 html 文档。\n\n###### 1.3、XSS 的防御措施\n\n措施1：编码。\n\n对这些数据进行 html entity 编码。客户端和服务器端都需要进行转义编码。\n\n措施2：过滤。\n\n移除用户上传的 DOM 属性，如上边的 onerror。\n\n移除用户上传的 style、script、iframe 节点。\n\n```html\n// 如\n<div>\n <style>\n  body { display:none } \n </style>  \n</div>\n```\n\n措施3：利用 CSP\n\n浏览器中的内容安全策略，就是决策浏览器加载哪些资源。\n\n##### 2、CSRF 攻击\n\nCross site request forgery 跨站点请求伪造。\n\n攻击者诱导受害者进入第三方网站，向被攻击网站发送跨站请求，利用被攻击者在被攻击网站已经获取的注册凭证，绕过后台的用户验证达到冒充用户对攻击网站进行的某种操作。\n\n###### CSRF 攻击特点：\n\n- 并没有劫持 cookie，只是伪造受害者的身份。\n- 攻击一般发起在第三方网站，被攻击网站无法防止攻击发生。\n- 跨站请求可以是各种方式，如：图片url、超链接、CORS、form提交。\n\n###### 2.1、CSRF 的危害\n\n- 在社交网络，网站被劫持之后，点击会自动关注 + 分享。\n- 银行系统，被攻击以后可以查询余额，也可以自动转账。\n- 电商类系统，如果被攻击可以添加、删除、清空购物车。\n\n###### 2.2、CSRF 的攻击类型\n\n- GET 类型攻击\n\n使用非常简单，只需要一个 http 请求。\n\n比如页面中的一个图片添加链接，还有 iframe、script ，最容易完成 CSFR 攻击，且不易被用户发现，隐蔽性超强。\n\n由于 get 接口是最常见的一种 CSRF 攻击类型，所以很多重要的接口不适用 get 方式，使用 post 一定程度上可以防止 CSRF 攻击。\n\n- POST 类型攻击\n\n这种类型的 SCRF 攻击，通常使用的是一个自动提交的表单。简单讲就是伪造一个自动提交的表单，一旦访问页面时，表单就会自动提交。如：\n\n```js\n<form action=\"http://xxx.com/widthdraw\" method=\"post\">\n <input type=\"hidden\" name=\"account\" value=\"web\" />\n <input type=\"hidden\" name=\"psd\" value=\"hacker\" />\n</form>\n\n<script type=\"text/javascript\">\n document.forms[0].submit()\n</script>\n```\n\n- 链接类型的攻击\n\n比起前两个，这个类型的比较少见，链接类型的攻击必须要用户点击链接，才能触发。\n\n通常在论坛中发布的图片嵌入恶意的链接，或以广告的形式诱导用户点击中招。所以我们在邮箱中看到乱七八糟的广告，尽量别点击，防止遇到三方攻击。\n\n- 登录 CSRF 攻击方式\n\n伪造一种新型的攻击方式，用户误以为是在网站正常登录，实际上是使用账户和密码登录到了黑客网站，这样黑客可以监听到用户的所有操作，甚至知道用户的账户信息。\n\n###### 2.3、CSRF 的防御措施\n\n**措施**1：检查 http 头部的 referer 信息\n\nreferer 包含在请求头内，表示请求接口的页面来源。\n\n服务端通过检查 referer 信息，发现来源于外域时，就可以拦截请求，通过阻止不明外域的访问，一定程度上可以减少攻击。\n\n**措施**2：使用一次性令牌\n\n使用一次性令牌做身份识别，黑客是无法通过跨域拿到一次性令牌的，所以服务端可以通过判断是否携带一次性令牌，就可以排除一部分的非法操作者。\n\n**措施**3：使用验证图片\n\n服务端生成一些文本和数字，在服务端保存这份信息，同时以图片的形式在客户端展现，让用户去合法填写信息，当 CSRF 攻击时，拿不到这个验证码的时候，无法向服务器提供这个信息，导致匹配失败，从而识别它是非法攻击者。\n\n这个应用非常常见，登录的时候，需要填写图形验证码。\n\n现在滑动图片验证也非常常见。\n\n##### 3、SQL注入\n\nSQL 注入，一般发生在注册、评论、添加等，只有有用户输入的地方，就有可能发生 SQL 注入。SQL 注入是一种常见的 Web 安全漏洞，攻击者会利用这个漏洞，可以访问或修改数据，利用潜在的数据库漏洞进行攻击。\n\n所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将(恶意的)SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入(恶意)SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击.\n\n###### 3.1、SQL 注入危害\n\n任意的账号都可以登录，可以进行任意的操作，粗暴点讲，就是随便来。\n\n###### 3.2、 SQL注入分类\n\n- 数字型注入\n\n当输入的参数为整数时，则有可能存在数字型漏洞。\n\n- 字符型注入\n\n当输入参数为字符串时，则可能存在字符型注入漏洞。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符型一般需要使用单引号来闭合。\n\n字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码。\n\n- 其他类型\n\n其实我觉得 SQL 注入只有两种类型：数字型与字符型。很多人可能会说还有如：Cookie 注入、POST 注入、延时注入等。\n\n的确如此，但这些类型的注入归根结底也是数字型和字符型注入的不同展现形式或者注入的位置不同罢了\n\n以下是一些常见的注入叫法：\n\n- POST注入：注入字段在 POST 数据中\n- Cookie注入：注入字段在 Cookie 数据中\n- 延时注入：使用数据库延时特性注入\n- 搜索注入：注入处为搜索的地方\n- base64注入：注入字符串需要经过 base64 加密\n\n###### 3.3、SQL注入的防范措施\n\n凡是用户输入的地方，我们都应该防止黑客攻击，永远不要相信用户的输入。所以对应的防御措施分别有：\n\n- 添加正则验证，使用正则表达式过滤传入的参数。\n- 屏蔽敏感词汇。\n- 字符串过滤。\n\n##### 4、接口加密\n\n前后端分离之后，前端每天都会接触到很多接口。发送网络请求的时候，有些接口就会使用 get 方法。最常见的传参方式就是，直接在 url 地址后面加参数。\n\n直接采用这种方式传输数据，如果数据被劫持或抓包工具偷走之后，就会直接被人盗取走，特别危险。若是采用接口加密，如下：\n\n接口加密就是将接口请求调用中传递的参数进行加密，目的就是为了保证接口请求中传递参数和返回的结果的安全性，一般比较敏感数据，如身份证、电话号码、账号、密码等需要进行加密。\n\n常见的加密方式：\n\n- md5 加密\n- base64 加密\n- RSA 加密\n- 对称加密算法\n- bcryptjs\n\n加密方式较多，可以根据自己具体的需要和项目语言选择其中一种。\n\n加密之后的数据更安全，那我们能不能将接口所有的数据都进行加密呢？加密是非常消耗资源的，如果有大批量的数据都进行加密时，返回数据需要的时间就更长，会直接影响用户体验。所以我们进行加密时，只需要对敏感的重要的信息进行加密。","slug":"前端程序员必须知道的-Web-漏洞","published":1,"updated":"2022-01-14T12:42:48.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyeeekyq0004i0fzf9fm0p13","content":"<p>随着互联网的发展，早已经不是仅限于简单的网页或是社交，电商购物、银行转账、企业管理等等。 Web 安全也是非常值得注意的。</p>\n<h5 id=\"什么是-Web-安全？\"><a href=\"#什么是-Web-安全？\" class=\"headerlink\" title=\"什么是 Web 安全？\"></a>什么是 Web 安全？</h5><p>黑客利用网络操作系统的漏洞和 Web 服务器的 SQL 注入漏洞等，得到 Web 服务器的控制权，轻则篡改、删除、添加数据，重则窃取重要的商业信息、转账等，更严重的就是在网页中植入恶意代码，使网站受到不可预期的侵害。</p>\n<p>常见的攻击可分为三类：XSS、CSRF、SQL注入。</p>\n<h5 id=\"1、XSS-攻击\"><a href=\"#1、XSS-攻击\" class=\"headerlink\" title=\"1、XSS 攻击\"></a>1、XSS 攻击</h5><p>Cross Site Scripting 跨站脚本攻击，为了与 CSS 区分，所以简写为 XSS 。</p>\n<p>恶意攻击给 Web 页面植入恶意的 Script 代码，当用户浏览该网页的时候，嵌入 Web 里面的 script 代码会被执行，从而达到攻击的效果。</p>\n<p>讲直白点，就是恶意攻击者通过在输入框处添加恶意 script 代码，用户浏览网页的时候执行 script 代码，从而达到恶意攻击用户的目的。</p>\n<h6 id=\"1-1、XSS-的危害\"><a href=\"#1-1、XSS-的危害\" class=\"headerlink\" title=\"1.1、XSS 的危害\"></a>1.1、XSS 的危害</h6><ul>\n<li>盗用各类账号，然后进行数据各种任意操作。</li>\n<li>控制企业数据，包括删除、添加、篡改敏感信息等。</li>\n<li>盗取具有商业价值信息。</li>\n<li>强制发送电子邮件，获取验证码。</li>\n<li>控制受害者的机器向其他网站发起攻击。</li>\n</ul>\n<h6 id=\"1-2、XSS-的攻击类型\"><a href=\"#1-2、XSS-的攻击类型\" class=\"headerlink\" title=\"1.2、XSS 的攻击类型\"></a>1.2、XSS 的攻击类型</h6><ul>\n<li>反射型 XSS 跨站脚本攻击</li>\n</ul>\n<p>发出请求时，XSS代码会出现在 url 中，作为输入提交到服务器端，服务器再返回给浏览器，然后浏览器解析执行 XSS 代码，这一过程像一次反射，所以称之为反射型。</p>\n<p>这种类型的攻击，通常是把 XSS 攻击代码放入请求地址的 数据传输部分，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.xxx.com?q=&lt;script&gt;alert(&quot;恶意脚本&quot;)&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.xxx.com?n=&lt;img src=&quot;1 onerror=alert(&#x27;恶意代码&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>存储型 XSS 跨站脚本攻击</li>\n</ul>\n<p>提交的 XSS 代码会存储在服务器端，如数据库、内存、文件系统内，下次请求目标页面时不再提交 XSS 代码。</p>\n<p>如在留言板输入框位置添加 script 代码或 html、css 代码，把代码为转义，直接存入数据库。</p>\n<ul>\n<li>文档型 XSS 跨站脚本攻击</li>\n</ul>\n<p>文档型的 XSS 攻击不会经过服务器，作为中间人的角色，在数据传输过程中劫持到网络数据包，然后修改里面的 html 文档。</p>\n<h6 id=\"1-3、XSS-的防御措施\"><a href=\"#1-3、XSS-的防御措施\" class=\"headerlink\" title=\"1.3、XSS 的防御措施\"></a>1.3、XSS 的防御措施</h6><p>措施1：编码。</p>\n<p>对这些数据进行 html entity 编码。客户端和服务器端都需要进行转义编码。</p>\n<p>措施2：过滤。</p>\n<p>移除用户上传的 DOM 属性，如上边的 onerror。</p>\n<p>移除用户上传的 style、script、iframe 节点。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">display</span>:none &#125; </span></span><br><span class=\"line\"><span class=\"css\"> </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>措施3：利用 CSP</p>\n<p>浏览器中的内容安全策略，就是决策浏览器加载哪些资源。</p>\n<h5 id=\"2、CSRF-攻击\"><a href=\"#2、CSRF-攻击\" class=\"headerlink\" title=\"2、CSRF 攻击\"></a>2、CSRF 攻击</h5><p>Cross site request forgery 跨站点请求伪造。</p>\n<p>攻击者诱导受害者进入第三方网站，向被攻击网站发送跨站请求，利用被攻击者在被攻击网站已经获取的注册凭证，绕过后台的用户验证达到冒充用户对攻击网站进行的某种操作。</p>\n<h6 id=\"CSRF-攻击特点：\"><a href=\"#CSRF-攻击特点：\" class=\"headerlink\" title=\"CSRF 攻击特点：\"></a>CSRF 攻击特点：</h6><ul>\n<li>并没有劫持 cookie，只是伪造受害者的身份。</li>\n<li>攻击一般发起在第三方网站，被攻击网站无法防止攻击发生。</li>\n<li>跨站请求可以是各种方式，如：图片url、超链接、CORS、form提交。</li>\n</ul>\n<h6 id=\"2-1、CSRF-的危害\"><a href=\"#2-1、CSRF-的危害\" class=\"headerlink\" title=\"2.1、CSRF 的危害\"></a>2.1、CSRF 的危害</h6><ul>\n<li>在社交网络，网站被劫持之后，点击会自动关注 + 分享。</li>\n<li>银行系统，被攻击以后可以查询余额，也可以自动转账。</li>\n<li>电商类系统，如果被攻击可以添加、删除、清空购物车。</li>\n</ul>\n<h6 id=\"2-2、CSRF-的攻击类型\"><a href=\"#2-2、CSRF-的攻击类型\" class=\"headerlink\" title=\"2.2、CSRF 的攻击类型\"></a>2.2、CSRF 的攻击类型</h6><ul>\n<li>GET 类型攻击</li>\n</ul>\n<p>使用非常简单，只需要一个 http 请求。</p>\n<p>比如页面中的一个图片添加链接，还有 iframe、script ，最容易完成 CSFR 攻击，且不易被用户发现，隐蔽性超强。</p>\n<p>由于 get 接口是最常见的一种 CSRF 攻击类型，所以很多重要的接口不适用 get 方式，使用 post 一定程度上可以防止 CSRF 攻击。</p>\n<ul>\n<li>POST 类型攻击</li>\n</ul>\n<p>这种类型的 SCRF 攻击，通常使用的是一个自动提交的表单。简单讲就是伪造一个自动提交的表单，一旦访问页面时，表单就会自动提交。如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">&quot;http://xxx.com/widthdraw&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;account&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;web&quot;</span> /&gt;</span></span></span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;psd&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hacker&quot;</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> <span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>].submit()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>链接类型的攻击</li>\n</ul>\n<p>比起前两个，这个类型的比较少见，链接类型的攻击必须要用户点击链接，才能触发。</p>\n<p>通常在论坛中发布的图片嵌入恶意的链接，或以广告的形式诱导用户点击中招。所以我们在邮箱中看到乱七八糟的广告，尽量别点击，防止遇到三方攻击。</p>\n<ul>\n<li>登录 CSRF 攻击方式</li>\n</ul>\n<p>伪造一种新型的攻击方式，用户误以为是在网站正常登录，实际上是使用账户和密码登录到了黑客网站，这样黑客可以监听到用户的所有操作，甚至知道用户的账户信息。</p>\n<h6 id=\"2-3、CSRF-的防御措施\"><a href=\"#2-3、CSRF-的防御措施\" class=\"headerlink\" title=\"2.3、CSRF 的防御措施\"></a>2.3、CSRF 的防御措施</h6><p><strong>措施</strong>1：检查 http 头部的 referer 信息</p>\n<p>referer 包含在请求头内，表示请求接口的页面来源。</p>\n<p>服务端通过检查 referer 信息，发现来源于外域时，就可以拦截请求，通过阻止不明外域的访问，一定程度上可以减少攻击。</p>\n<p><strong>措施</strong>2：使用一次性令牌</p>\n<p>使用一次性令牌做身份识别，黑客是无法通过跨域拿到一次性令牌的，所以服务端可以通过判断是否携带一次性令牌，就可以排除一部分的非法操作者。</p>\n<p><strong>措施</strong>3：使用验证图片</p>\n<p>服务端生成一些文本和数字，在服务端保存这份信息，同时以图片的形式在客户端展现，让用户去合法填写信息，当 CSRF 攻击时，拿不到这个验证码的时候，无法向服务器提供这个信息，导致匹配失败，从而识别它是非法攻击者。</p>\n<p>这个应用非常常见，登录的时候，需要填写图形验证码。</p>\n<p>现在滑动图片验证也非常常见。</p>\n<h5 id=\"3、SQL注入\"><a href=\"#3、SQL注入\" class=\"headerlink\" title=\"3、SQL注入\"></a>3、SQL注入</h5><p>SQL 注入，一般发生在注册、评论、添加等，只有有用户输入的地方，就有可能发生 SQL 注入。SQL 注入是一种常见的 Web 安全漏洞，攻击者会利用这个漏洞，可以访问或修改数据，利用潜在的数据库漏洞进行攻击。</p>\n<p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将(恶意的)SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入(恶意)SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击.</p>\n<h6 id=\"3-1、SQL-注入危害\"><a href=\"#3-1、SQL-注入危害\" class=\"headerlink\" title=\"3.1、SQL 注入危害\"></a>3.1、SQL 注入危害</h6><p>任意的账号都可以登录，可以进行任意的操作，粗暴点讲，就是随便来。</p>\n<h6 id=\"3-2、-SQL注入分类\"><a href=\"#3-2、-SQL注入分类\" class=\"headerlink\" title=\"3.2、 SQL注入分类\"></a>3.2、 SQL注入分类</h6><ul>\n<li>数字型注入</li>\n</ul>\n<p>当输入的参数为整数时，则有可能存在数字型漏洞。</p>\n<ul>\n<li>字符型注入</li>\n</ul>\n<p>当输入参数为字符串时，则可能存在字符型注入漏洞。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符型一般需要使用单引号来闭合。</p>\n<p>字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码。</p>\n<ul>\n<li>其他类型</li>\n</ul>\n<p>其实我觉得 SQL 注入只有两种类型：数字型与字符型。很多人可能会说还有如：Cookie 注入、POST 注入、延时注入等。</p>\n<p>的确如此，但这些类型的注入归根结底也是数字型和字符型注入的不同展现形式或者注入的位置不同罢了</p>\n<p>以下是一些常见的注入叫法：</p>\n<ul>\n<li>POST注入：注入字段在 POST 数据中</li>\n<li>Cookie注入：注入字段在 Cookie 数据中</li>\n<li>延时注入：使用数据库延时特性注入</li>\n<li>搜索注入：注入处为搜索的地方</li>\n<li>base64注入：注入字符串需要经过 base64 加密</li>\n</ul>\n<h6 id=\"3-3、SQL注入的防范措施\"><a href=\"#3-3、SQL注入的防范措施\" class=\"headerlink\" title=\"3.3、SQL注入的防范措施\"></a>3.3、SQL注入的防范措施</h6><p>凡是用户输入的地方，我们都应该防止黑客攻击，永远不要相信用户的输入。所以对应的防御措施分别有：</p>\n<ul>\n<li>添加正则验证，使用正则表达式过滤传入的参数。</li>\n<li>屏蔽敏感词汇。</li>\n<li>字符串过滤。</li>\n</ul>\n<h5 id=\"4、接口加密\"><a href=\"#4、接口加密\" class=\"headerlink\" title=\"4、接口加密\"></a>4、接口加密</h5><p>前后端分离之后，前端每天都会接触到很多接口。发送网络请求的时候，有些接口就会使用 get 方法。最常见的传参方式就是，直接在 url 地址后面加参数。</p>\n<p>直接采用这种方式传输数据，如果数据被劫持或抓包工具偷走之后，就会直接被人盗取走，特别危险。若是采用接口加密，如下：</p>\n<p>接口加密就是将接口请求调用中传递的参数进行加密，目的就是为了保证接口请求中传递参数和返回的结果的安全性，一般比较敏感数据，如身份证、电话号码、账号、密码等需要进行加密。</p>\n<p>常见的加密方式：</p>\n<ul>\n<li>md5 加密</li>\n<li>base64 加密</li>\n<li>RSA 加密</li>\n<li>对称加密算法</li>\n<li>bcryptjs</li>\n</ul>\n<p>加密方式较多，可以根据自己具体的需要和项目语言选择其中一种。</p>\n<p>加密之后的数据更安全，那我们能不能将接口所有的数据都进行加密呢？加密是非常消耗资源的，如果有大批量的数据都进行加密时，返回数据需要的时间就更长，会直接影响用户体验。所以我们进行加密时，只需要对敏感的重要的信息进行加密。</p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<p>随着互联网的发展，早已经不是仅限于简单的网页或是社交，电商购物、银行转账、企业管理等等。 Web 安全也是非常值得注意的。</p>\n<h5 id=\"什么是-Web-安全？\"><a href=\"#什么是-Web-安全？\" class=\"headerlink\" title=\"什么是 Web 安全？\"></a>什么是 Web 安全？</h5><p>黑客利用网络操作系统的漏洞和 Web 服务器的 SQL 注入漏洞等，得到 Web 服务器的控制权，轻则篡改、删除、添加数据，重则窃取重要的商业信息、转账等，更严重的就是在网页中植入恶意代码，使网站受到不可预期的侵害。</p>\n<p>常见的攻击可分为三类：XSS、CSRF、SQL注入。</p>\n<h5 id=\"1、XSS-攻击\"><a href=\"#1、XSS-攻击\" class=\"headerlink\" title=\"1、XSS 攻击\"></a>1、XSS 攻击</h5><p>Cross Site Scripting 跨站脚本攻击，为了与 CSS 区分，所以简写为 XSS 。</p>\n<p>恶意攻击给 Web 页面植入恶意的 Script 代码，当用户浏览该网页的时候，嵌入 Web 里面的 script 代码会被执行，从而达到攻击的效果。</p>\n<p>讲直白点，就是恶意攻击者通过在输入框处添加恶意 script 代码，用户浏览网页的时候执行 script 代码，从而达到恶意攻击用户的目的。</p>\n<h6 id=\"1-1、XSS-的危害\"><a href=\"#1-1、XSS-的危害\" class=\"headerlink\" title=\"1.1、XSS 的危害\"></a>1.1、XSS 的危害</h6><ul>\n<li>盗用各类账号，然后进行数据各种任意操作。</li>\n<li>控制企业数据，包括删除、添加、篡改敏感信息等。</li>\n<li>盗取具有商业价值信息。</li>\n<li>强制发送电子邮件，获取验证码。</li>\n<li>控制受害者的机器向其他网站发起攻击。</li>\n</ul>\n<h6 id=\"1-2、XSS-的攻击类型\"><a href=\"#1-2、XSS-的攻击类型\" class=\"headerlink\" title=\"1.2、XSS 的攻击类型\"></a>1.2、XSS 的攻击类型</h6><ul>\n<li>反射型 XSS 跨站脚本攻击</li>\n</ul>\n<p>发出请求时，XSS代码会出现在 url 中，作为输入提交到服务器端，服务器再返回给浏览器，然后浏览器解析执行 XSS 代码，这一过程像一次反射，所以称之为反射型。</p>\n<p>这种类型的攻击，通常是把 XSS 攻击代码放入请求地址的 数据传输部分，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.xxx.com?q=&lt;script&gt;alert(&quot;恶意脚本&quot;)&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.xxx.com?n=&lt;img src=&quot;1 onerror=alert(&#x27;恶意代码&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>存储型 XSS 跨站脚本攻击</li>\n</ul>\n<p>提交的 XSS 代码会存储在服务器端，如数据库、内存、文件系统内，下次请求目标页面时不再提交 XSS 代码。</p>\n<p>如在留言板输入框位置添加 script 代码或 html、css 代码，把代码为转义，直接存入数据库。</p>\n<ul>\n<li>文档型 XSS 跨站脚本攻击</li>\n</ul>\n<p>文档型的 XSS 攻击不会经过服务器，作为中间人的角色，在数据传输过程中劫持到网络数据包，然后修改里面的 html 文档。</p>\n<h6 id=\"1-3、XSS-的防御措施\"><a href=\"#1-3、XSS-的防御措施\" class=\"headerlink\" title=\"1.3、XSS 的防御措施\"></a>1.3、XSS 的防御措施</h6><p>措施1：编码。</p>\n<p>对这些数据进行 html entity 编码。客户端和服务器端都需要进行转义编码。</p>\n<p>措施2：过滤。</p>\n<p>移除用户上传的 DOM 属性，如上边的 onerror。</p>\n<p>移除用户上传的 style、script、iframe 节点。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">display</span>:none &#125; </span></span><br><span class=\"line\"><span class=\"css\"> </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>措施3：利用 CSP</p>\n<p>浏览器中的内容安全策略，就是决策浏览器加载哪些资源。</p>\n<h5 id=\"2、CSRF-攻击\"><a href=\"#2、CSRF-攻击\" class=\"headerlink\" title=\"2、CSRF 攻击\"></a>2、CSRF 攻击</h5><p>Cross site request forgery 跨站点请求伪造。</p>\n<p>攻击者诱导受害者进入第三方网站，向被攻击网站发送跨站请求，利用被攻击者在被攻击网站已经获取的注册凭证，绕过后台的用户验证达到冒充用户对攻击网站进行的某种操作。</p>\n<h6 id=\"CSRF-攻击特点：\"><a href=\"#CSRF-攻击特点：\" class=\"headerlink\" title=\"CSRF 攻击特点：\"></a>CSRF 攻击特点：</h6><ul>\n<li>并没有劫持 cookie，只是伪造受害者的身份。</li>\n<li>攻击一般发起在第三方网站，被攻击网站无法防止攻击发生。</li>\n<li>跨站请求可以是各种方式，如：图片url、超链接、CORS、form提交。</li>\n</ul>\n<h6 id=\"2-1、CSRF-的危害\"><a href=\"#2-1、CSRF-的危害\" class=\"headerlink\" title=\"2.1、CSRF 的危害\"></a>2.1、CSRF 的危害</h6><ul>\n<li>在社交网络，网站被劫持之后，点击会自动关注 + 分享。</li>\n<li>银行系统，被攻击以后可以查询余额，也可以自动转账。</li>\n<li>电商类系统，如果被攻击可以添加、删除、清空购物车。</li>\n</ul>\n<h6 id=\"2-2、CSRF-的攻击类型\"><a href=\"#2-2、CSRF-的攻击类型\" class=\"headerlink\" title=\"2.2、CSRF 的攻击类型\"></a>2.2、CSRF 的攻击类型</h6><ul>\n<li>GET 类型攻击</li>\n</ul>\n<p>使用非常简单，只需要一个 http 请求。</p>\n<p>比如页面中的一个图片添加链接，还有 iframe、script ，最容易完成 CSFR 攻击，且不易被用户发现，隐蔽性超强。</p>\n<p>由于 get 接口是最常见的一种 CSRF 攻击类型，所以很多重要的接口不适用 get 方式，使用 post 一定程度上可以防止 CSRF 攻击。</p>\n<ul>\n<li>POST 类型攻击</li>\n</ul>\n<p>这种类型的 SCRF 攻击，通常使用的是一个自动提交的表单。简单讲就是伪造一个自动提交的表单，一旦访问页面时，表单就会自动提交。如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">&quot;http://xxx.com/widthdraw&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;account&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;web&quot;</span> /&gt;</span></span></span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;psd&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hacker&quot;</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> <span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>].submit()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>链接类型的攻击</li>\n</ul>\n<p>比起前两个，这个类型的比较少见，链接类型的攻击必须要用户点击链接，才能触发。</p>\n<p>通常在论坛中发布的图片嵌入恶意的链接，或以广告的形式诱导用户点击中招。所以我们在邮箱中看到乱七八糟的广告，尽量别点击，防止遇到三方攻击。</p>\n<ul>\n<li>登录 CSRF 攻击方式</li>\n</ul>\n<p>伪造一种新型的攻击方式，用户误以为是在网站正常登录，实际上是使用账户和密码登录到了黑客网站，这样黑客可以监听到用户的所有操作，甚至知道用户的账户信息。</p>\n<h6 id=\"2-3、CSRF-的防御措施\"><a href=\"#2-3、CSRF-的防御措施\" class=\"headerlink\" title=\"2.3、CSRF 的防御措施\"></a>2.3、CSRF 的防御措施</h6><p><strong>措施</strong>1：检查 http 头部的 referer 信息</p>\n<p>referer 包含在请求头内，表示请求接口的页面来源。</p>\n<p>服务端通过检查 referer 信息，发现来源于外域时，就可以拦截请求，通过阻止不明外域的访问，一定程度上可以减少攻击。</p>\n<p><strong>措施</strong>2：使用一次性令牌</p>\n<p>使用一次性令牌做身份识别，黑客是无法通过跨域拿到一次性令牌的，所以服务端可以通过判断是否携带一次性令牌，就可以排除一部分的非法操作者。</p>\n<p><strong>措施</strong>3：使用验证图片</p>\n<p>服务端生成一些文本和数字，在服务端保存这份信息，同时以图片的形式在客户端展现，让用户去合法填写信息，当 CSRF 攻击时，拿不到这个验证码的时候，无法向服务器提供这个信息，导致匹配失败，从而识别它是非法攻击者。</p>\n<p>这个应用非常常见，登录的时候，需要填写图形验证码。</p>\n<p>现在滑动图片验证也非常常见。</p>\n<h5 id=\"3、SQL注入\"><a href=\"#3、SQL注入\" class=\"headerlink\" title=\"3、SQL注入\"></a>3、SQL注入</h5><p>SQL 注入，一般发生在注册、评论、添加等，只有有用户输入的地方，就有可能发生 SQL 注入。SQL 注入是一种常见的 Web 安全漏洞，攻击者会利用这个漏洞，可以访问或修改数据，利用潜在的数据库漏洞进行攻击。</p>\n<p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将(恶意的)SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入(恶意)SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击.</p>\n<h6 id=\"3-1、SQL-注入危害\"><a href=\"#3-1、SQL-注入危害\" class=\"headerlink\" title=\"3.1、SQL 注入危害\"></a>3.1、SQL 注入危害</h6><p>任意的账号都可以登录，可以进行任意的操作，粗暴点讲，就是随便来。</p>\n<h6 id=\"3-2、-SQL注入分类\"><a href=\"#3-2、-SQL注入分类\" class=\"headerlink\" title=\"3.2、 SQL注入分类\"></a>3.2、 SQL注入分类</h6><ul>\n<li>数字型注入</li>\n</ul>\n<p>当输入的参数为整数时，则有可能存在数字型漏洞。</p>\n<ul>\n<li>字符型注入</li>\n</ul>\n<p>当输入参数为字符串时，则可能存在字符型注入漏洞。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符型一般需要使用单引号来闭合。</p>\n<p>字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码。</p>\n<ul>\n<li>其他类型</li>\n</ul>\n<p>其实我觉得 SQL 注入只有两种类型：数字型与字符型。很多人可能会说还有如：Cookie 注入、POST 注入、延时注入等。</p>\n<p>的确如此，但这些类型的注入归根结底也是数字型和字符型注入的不同展现形式或者注入的位置不同罢了</p>\n<p>以下是一些常见的注入叫法：</p>\n<ul>\n<li>POST注入：注入字段在 POST 数据中</li>\n<li>Cookie注入：注入字段在 Cookie 数据中</li>\n<li>延时注入：使用数据库延时特性注入</li>\n<li>搜索注入：注入处为搜索的地方</li>\n<li>base64注入：注入字符串需要经过 base64 加密</li>\n</ul>\n<h6 id=\"3-3、SQL注入的防范措施\"><a href=\"#3-3、SQL注入的防范措施\" class=\"headerlink\" title=\"3.3、SQL注入的防范措施\"></a>3.3、SQL注入的防范措施</h6><p>凡是用户输入的地方，我们都应该防止黑客攻击，永远不要相信用户的输入。所以对应的防御措施分别有：</p>\n<ul>\n<li>添加正则验证，使用正则表达式过滤传入的参数。</li>\n<li>屏蔽敏感词汇。</li>\n<li>字符串过滤。</li>\n</ul>\n<h5 id=\"4、接口加密\"><a href=\"#4、接口加密\" class=\"headerlink\" title=\"4、接口加密\"></a>4、接口加密</h5><p>前后端分离之后，前端每天都会接触到很多接口。发送网络请求的时候，有些接口就会使用 get 方法。最常见的传参方式就是，直接在 url 地址后面加参数。</p>\n<p>直接采用这种方式传输数据，如果数据被劫持或抓包工具偷走之后，就会直接被人盗取走，特别危险。若是采用接口加密，如下：</p>\n<p>接口加密就是将接口请求调用中传递的参数进行加密，目的就是为了保证接口请求中传递参数和返回的结果的安全性，一般比较敏感数据，如身份证、电话号码、账号、密码等需要进行加密。</p>\n<p>常见的加密方式：</p>\n<ul>\n<li>md5 加密</li>\n<li>base64 加密</li>\n<li>RSA 加密</li>\n<li>对称加密算法</li>\n<li>bcryptjs</li>\n</ul>\n<p>加密方式较多，可以根据自己具体的需要和项目语言选择其中一种。</p>\n<p>加密之后的数据更安全，那我们能不能将接口所有的数据都进行加密呢？加密是非常消耗资源的，如果有大批量的数据都进行加密时，返回数据需要的时间就更长，会直接影响用户体验。所以我们进行加密时，只需要对敏感的重要的信息进行加密。</p>\n"}],"PostAsset":[{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-01.png","slug":"box-shandow-01.png","post":"ckxnaa6es00010gfz7ryq57i5","modified":0,"renderable":0},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-02.png","slug":"box-shandow-02.png","post":"ckxnaa6es00010gfz7ryq57i5","modified":0,"renderable":0},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-03.png","slug":"box-shandow-03.png","post":"ckxnaa6es00010gfz7ryq57i5","modified":0,"renderable":0},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-04.png","slug":"box-shandow-04.png","post":"ckxnaa6es00010gfz7ryq57i5","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckxnaa6es00010gfz7ryq57i5","category_id":"ckxnaa6ev00040gfz8sm71ybg","_id":"ckxnaa6ez000f0gfz7th6gkso"},{"post_id":"ckxnaa6eu00030gfzg9xa0xyk","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f1000l0gfzhbgdfuuu"},{"post_id":"ckxnaa6f0000h0gfzfihr0fhf","category_id":"ckxnaa6ev00040gfz8sm71ybg","_id":"ckxnaa6f5000p0gfzg69ddh8c"},{"post_id":"ckxnaa6ew00060gfz0bupa2sk","category_id":"ckxnaa6f0000g0gfz5i5yeu0x","_id":"ckxnaa6f5000s0gfzc8j7e7rq"},{"post_id":"ckxnaa6f1000j0gfz9gc72ikr","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f5000u0gfz76iu53ie"},{"post_id":"ckxnaa6f2000n0gfz1dak76rp","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f6000x0gfz9g82fqbh"},{"post_id":"ckxnaa6ex00080gfz71zhekym","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f6000y0gfzeys236ph"},{"post_id":"ckxnaa6ex00090gfzcnl82hgk","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f600120gfz9uzn8w38"},{"post_id":"ckxnaa6ey000b0gfz86hfhjei","category_id":"ckxnaa6f5000w0gfz9ik5hta2","_id":"ckxnaa6f600140gfz9j2p6zff"},{"post_id":"ckxnaa6ez000e0gfz72btgcc4","category_id":"ckxnaa6f5000w0gfz9ik5hta2","_id":"ckxnaa6f700170gfzfkkr2wh6"},{"post_id":"ckxnaa6f8001a0gfz6ab6044y","category_id":"ckxnaa6ev00040gfz8sm71ybg","_id":"ckxnaa6f9001b0gfz58li6u0z"},{"post_id":"ckyeeekyi0000i0fz8hcjestd","category_id":"ckxnaa6f5000w0gfz9ik5hta2","_id":"ckyeeekyo0002i0fzh0jrakib"},{"post_id":"ckyeeekyq0004i0fzf9fm0p13","category_id":"ckyeeekyr0005i0fz4whf8n2l","_id":"ckyeeekys0008i0fz2fz08b3c"}],"PostTag":[{"post_id":"ckxnaa6eu00030gfzg9xa0xyk","tag_id":"ckxnaa6ex00070gfz63if0e1d","_id":"ckxnaa6ez000d0gfzcdbb3wjm"},{"post_id":"ckxnaa6ex00080gfz71zhekym","tag_id":"ckxnaa6ez000c0gfz5blccyxk","_id":"ckxnaa6f1000k0gfz0byb2y5o"},{"post_id":"ckxnaa6ex00090gfzcnl82hgk","tag_id":"ckxnaa6f0000i0gfz2u9x4cde","_id":"ckxnaa6f5000q0gfz0vsl3abx"},{"post_id":"ckxnaa6ey000b0gfz86hfhjei","tag_id":"ckxnaa6f3000o0gfzd8yf35m3","_id":"ckxnaa6f5000v0gfz81193npt"},{"post_id":"ckxnaa6ez000e0gfz72btgcc4","tag_id":"ckxnaa6f5000t0gfzfj6mf7kf","_id":"ckxnaa6f600100gfz09d5amq8"},{"post_id":"ckxnaa6f0000h0gfzfihr0fhf","tag_id":"ckxnaa6f6000z0gfzhmfy6kvi","_id":"ckxnaa6f600150gfzafab0ag8"},{"post_id":"ckxnaa6f1000j0gfz9gc72ikr","tag_id":"ckxnaa6f600130gfz9ekq2n6m","_id":"ckxnaa6f700180gfz3sdg1gav"},{"post_id":"ckxnaa6f2000n0gfz1dak76rp","tag_id":"ckxnaa6f700160gfzc52jfgss","_id":"ckxnaa6f700190gfz1o3ka9y2"},{"post_id":"ckyeeekyi0000i0fz8hcjestd","tag_id":"ckyeeekyk0001i0fzha9v4luq","_id":"ckyeeekyp0003i0fz8oo3bidw"},{"post_id":"ckyeeekyq0004i0fzf9fm0p13","tag_id":"ckyeeekyr0006i0fz6ct1bv38","_id":"ckyeeekys0007i0fzfniq75mu"}],"Tag":[{"name":"async/await","_id":"ckxnaa6ex00070gfz63if0e1d"},{"name":"数组方法","_id":"ckxnaa6ez000c0gfz5blccyxk"},{"name":"js函数柯里化","_id":"ckxnaa6f0000i0gfz2u9x4cde"},{"name":"vue3对比vue2","_id":"ckxnaa6f3000o0gfzd8yf35m3"},{"name":"vue基础","_id":"ckxnaa6f5000t0gfzfj6mf7kf"},{"name":"white-space","_id":"ckxnaa6f6000z0gfzhmfy6kvi"},{"name":"表单验证","_id":"ckxnaa6f600130gfz9ekq2n6m"},{"name":"webSocket","_id":"ckxnaa6f700160gfzc52jfgss"},{"name":"vite","_id":"ckyeeekyk0001i0fzha9v4luq"},{"name":"前端安全","_id":"ckyeeekyr0006i0fz6ct1bv38"}]}}