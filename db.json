{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/bg_01.jpg","path":"images/bg_01.jpg","modified":1,"renderable":0},{"_id":"source/images/bg_02.jpg","path":"images/bg_02.jpg","modified":1,"renderable":0},{"_id":"source/images/bg_03.jpg","path":"images/bg_03.jpg","modified":1,"renderable":0},{"_id":"source/images/head.png","path":"images/head.png","modified":1,"renderable":0},{"_id":"source/images/header_01.jpg","path":"images/header_01.jpg","modified":1,"renderable":0},{"_id":"source/images/header_02.jpg","path":"images/header_02.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg_03.jpg","path":"images/bg_03.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-more.png","path":"images/favicon-more.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/left_con_01.jpg","path":"images/left_con_01.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/styles.styl","hash":"d8e351c3023ba189c0ea54cc06f1f5e4b1b78f24","modified":1640450848927},{"_id":"source/_posts/CSS3阴影-box-shadow.md","hash":"91a96094cbb978c1691ec537d580576c828cb408","modified":1633537573536},{"_id":"source/_posts/async-await详解.md","hash":"d7ccb6de542dd375443ad1ee711297eb1637e94c","modified":1633792680975},{"_id":"source/_posts/git版本回退.md","hash":"d3c34e9b480411490cebd5b8d8e58e859c9bda9e","modified":1633602559445},{"_id":"source/_posts/js中一些好用的数组方法.md","hash":"88b626b2a1a0f9879e627dac81b4576b652780d8","modified":1633531441441},{"_id":"source/_posts/js函数柯里化.md","hash":"dda1c648fe370590a02d4105634947f9b375ee56","modified":1634048615202},{"_id":"source/_posts/vue3对比vue2.md","hash":"2f7e73d833faf0d1a963012cda74c7ef28ff5f70","modified":1636550238191},{"_id":"source/_posts/vue基础.md","hash":"c4cf2c9c5917b75e46a93daf9016da1a42aa030b","modified":1635429139896},{"_id":"source/_posts/webSocket.md","hash":"4b6013cb652a6bde549e596b7fadd81e8aca4f3f","modified":1633701309748},{"_id":"source/_posts/white-space.md","hash":"46fd22c7b1b85b7823dd2458f1ee63e583111cde","modified":1633965254081},{"_id":"source/_posts/常用的表单验证.md","hash":"e646e77e672fc8ab9d44771b1a6172b4f0f306d2","modified":1633333138095},{"_id":"source/_posts/用CSS代码让你的列表网页提升渲染性能.md","hash":"01556eb40f79f6135b4402a32cc6d597534864af","modified":1633266516020},{"_id":"source/images/bg_03.jpg","hash":"15a7a8d9f27333032cc7797fbd64f250271022bc","modified":1632361996546},{"_id":"source/images/bg_01.jpg","hash":"03f00d410a7ccc4134625bd3352129a150498ea6","modified":1632361996489},{"_id":"source/images/header_01.jpg","hash":"25a6d8226ac5f0560b9b7c074333468272335403","modified":1632362007476},{"_id":"source/categories/index-1.md","hash":"b13c7286ea258ff9611dd9ac02c9b4601624307d","modified":1633194079455},{"_id":"source/categories/index.md","hash":"0775707ad678ac653935a73b416f23ef30c48a60","modified":1632233882253},{"_id":"source/tags/index.md","hash":"26b26e8c69106f17ce29b1dcaf72f651d8e667e8","modified":1633194218665},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-01.png","hash":"4f055b88921ad073263c9a3ff89dfc07ead5c58a","modified":1633532143452},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-02.png","hash":"f97516b5cfb10c0c7c4f65092e5092360770137d","modified":1633532678904},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-03.png","hash":"238b2adb4b4d703a9592b3dbe88a9feba7173d86","modified":1633532781360},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-04.png","hash":"c447895d276c9b1fdaff1566e3612e8c6a772588","modified":1633532909717},{"_id":"source/images/header_02.jpg","hash":"744f81dc47506b747c0a0abf6851f793fd739799","modified":1632362007506},{"_id":"source/images/head.png","hash":"4913ce36a23d9b54da48d82fc8aa2d9d4dd287c4","modified":1640524897179},{"_id":"source/images/bg_02.jpg","hash":"bec6ace3c93372487c6e8d4be51be3d01f0d9046","modified":1632361996520},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1632229321129},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1632229321129},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1632229321133},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1632229321129},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1632229321134},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1632229321134},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1632229321134},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1632229321135},{"_id":"themes/next/_config.yml","hash":"f1113440447ec3b1ece0d554e86a89b05c81883b","modified":1640525033435},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1632229321135},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1632229321142},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1632229321171},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1632229321130},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1632229321130},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1632229321132},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1632229321132},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1632229321132},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1632229321132},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1632229321132},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1632229321133},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1632229321133},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1632229321133},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1632229321133},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1632229321136},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1632229321136},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1632229321136},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1632229321136},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1632229321137},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1632229321137},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1632229321137},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1632229321138},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1632229321138},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1632229321143},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1632229321143},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1632229321143},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1632229321143},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1632229321143},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1632229321144},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1632229321144},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1632229321144},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1632229321144},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1632229321145},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1632229321145},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1632229321145},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1632229321146},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1632229321146},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1632229321146},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1632229321146},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1632229321147},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1632229321147},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1632229321147},{"_id":"themes/next/languages/zh-CN.yml","hash":"43b582cfe82bf163ee9a673012f405fbae4353c2","modified":1632233797247},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1632229321148},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1632229321148},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1640448626622},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1632229321169},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1632229321170},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1632229321170},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1632229321170},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1632229321170},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1632229321171},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1632229321177},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1632229321131},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1632229321130},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1632229321131},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1632229321132},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1632229321138},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1632229321139},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1632229321139},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1632229321139},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1632229321139},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1632229321140},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1632229321142},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1632229321142},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1632229321142},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1632229321142},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1640449393488},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1632229321149},{"_id":"themes/next/layout/_macro/post.swig","hash":"be826acb46e4dbee91443d36bb19e4bb2a9ee5b0","modified":1640449442828},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1633181184990},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1632229321150},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1b8f4f97a5663c5bca85b5ce210d4a9578326ef2","modified":1633061032322},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1632229321153},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1632229321155},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1632229321158},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1632229321158},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1632229321158},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1632229321159},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1632229321160},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1632229321161},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1632229321162},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1632229321165},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1632229321166},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1632229321167},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1632229321171},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1632229321175},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1632229321175},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1632229321176},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1632229321176},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1632229321176},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1632229321176},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1632229321177},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1632229321177},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1632229321177},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1632229321177},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1632229321178},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1632229321178},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1632229321178},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1632229321178},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1632229321178},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1632229321179},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1632229321179},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1632229321179},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1632229321179},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1632229321180},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1632229321200},{"_id":"themes/next/source/css/main.styl","hash":"1e2c236284b078757766166b6f46f4f5edd24d58","modified":1640451343889},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1632229321208},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632229321208},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632229321208},{"_id":"themes/next/source/images/bg_03.jpg","hash":"15a7a8d9f27333032cc7797fbd64f250271022bc","modified":1632361996546},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1632229321209},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1632229321210},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1632229321210},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1632229321210},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632229321210},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632229321211},{"_id":"themes/next/source/images/favicon.png","hash":"ee89b9f25ece9543af8f7406c0c625330f50f206","modified":1633182907747},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1632229321211},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1632229321211},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1632229321212},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1632229321212},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1633020211948},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1632229321213},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1632229321214},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1632229321215},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1632229321151},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1632229321151},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1632229321152},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1632229321152},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1632229321152},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1632229321153},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1632229321153},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1632229321154},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1632229321154},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1632229321155},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1632229321155},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1632229321156},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1632229321156},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1632229321156},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1632229321157},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1632229321157},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1632229321157},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1632229321157},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1632229321159},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1632229321159},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1632229321160},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1632229321160},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1632229321160},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1632229321161},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1632229321162},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1632229321162},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1632229321162},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1632229321162},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1632229321163},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1632229321164},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1632229321165},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1632229321165},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1632229321165},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1632229321166},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1632229321166},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1632229321167},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1632229321167},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1632229321167},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1632229321168},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1632229321168},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1632229321169},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1632229321169},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1632229321172},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1632229321172},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1632229321172},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1632229321173},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1632229321173},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1632229321174},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1632229321175},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1632229321175},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1632229321205},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1632229321205},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1632229321206},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1632229321206},{"_id":"themes/next/source/css/_variables/base.styl","hash":"620cb02a4e182b44d494586528ace9847adc7b6c","modified":1633022699250},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1633020586455},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1632229321213},{"_id":"themes/next/source/lib/three/.gitignore","hash":"5767276045f60da2350895a59aa6e138b0e83294","modified":1632236229550},{"_id":"themes/next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1632236229551},{"_id":"themes/next/source/lib/three/README.md","hash":"76071f107e07113ccb23192680782577a15c5350","modified":1632236229551},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"558838e0821f76c1e6d58add25116853caa1976c","modified":1632236229551},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"1b371d908c6729f15877601792583e25cc4e6091","modified":1632236229552},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"8667c49d81292b55e4ec8c0ec9f8eb42f4ababab","modified":1632236229552},{"_id":"themes/next/source/lib/three/package.json","hash":"ff493a283c04f87a272abdffa8aa29fb4368b803","modified":1632236229553},{"_id":"themes/next/source/lib/three/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1632236229553},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"62fe85b767c525a07bbec1193c0840ee924dad9a","modified":1632236229554},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1632229321218},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1632229321218},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1632229321190},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1632229321190},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1632229321180},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1632229321187},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"a9d134e5564d3d846ba1cdba5786b1a32f8e9044","modified":1633059644018},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1632229321193},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1632229321195},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1632229321195},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1633020925085},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1632229321201},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1632229321203},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1632229321204},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1632229321205},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1632229321205},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1632229321205},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1632229321204},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1632229321202},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1632229321203},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1632229321203},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1632229321216},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1632229321217},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1632236229546},{"_id":"themes/next/source/lib/three/.git/config","hash":"c9c13087a3f33e6f46cd35a93c8b9bdf27618852","modified":1632236229549},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1632236225467},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"51439496ae6791f8b002584e71f5d10f4f1a1f71","modified":1632236229542},{"_id":"themes/next/source/lib/three/.git/index","hash":"0f370e4fa993c3ce9cb11d5f1907faa30aa69440","modified":1632236229557},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1632236229550},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"71141daa39bbcedcf14ae95c05023a57828a5a43","modified":1632236229553},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"69725cd0af6868c5aa059343cc6e18e0c10b2f2e","modified":1632236229553},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"10795d7f1e5393b2b5e1529b017ee4e0ffe82ac9","modified":1632236229554},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"8381c792b161001a1b5cf39613c6d48e2588b3ce","modified":1632236229554},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"ac382962d408f16acf07b925b94bb15495b5207c","modified":1632236229554},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1632229321188},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1632229321188},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1632229321189},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1632229321190},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1632229321190},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1632229321191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1632229321192},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1632229321192},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1632229321193},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1632229321192},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1632229321193},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1632229321193},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1632229321181},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1632229321182},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1632229321183},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1632229321183},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1632229321183},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1632229321185},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1632229321186},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1632229321187},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1632229321187},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1632229321187},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1632229321188},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1632229321188},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1632229321194},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1632229321197},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1632229321199},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1632229321199},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1632229321199},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1632229321200},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1632236225468},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1632236225468},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1632236225469},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1632236225469},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1632236225470},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1632236225470},{"_id":"themes/next/source/lib/three/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1632236225471},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1632236225472},{"_id":"themes/next/source/lib/three/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1632236225472},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1632236225472},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1632236225473},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"6df29120ca8fd1c342262596eb133dc61b237cea","modified":1632236229547},{"_id":"themes/next/source/lib/three/.git/objects/pack/pack-75f0bd54ccc830622c5523e90e168e5d930b759d.idx","hash":"5f4f97f13dbe353456fa6978bc089b4320f79272","modified":1632236229383},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1632236229547},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"6df29120ca8fd1c342262596eb133dc61b237cea","modified":1632236229548},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1632236229545},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"6df29120ca8fd1c342262596eb133dc61b237cea","modified":1632236229545},{"_id":"themes/next/source/images/favicon-more.png","hash":"8e81d401fd7d3f28cd77bb2d3859aa3aae2c720e","modified":1633182907683},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1632229321217},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1632229321217},{"_id":"themes/next/source/lib/three/.git/objects/pack/pack-75f0bd54ccc830622c5523e90e168e5d930b759d.pack","hash":"89e534013b432027b94500494ad5573cd869ce00","modified":1632236229383},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1632236229557},{"_id":"themes/next/source/images/left_con_01.jpg","hash":"12be299455f28e3a5194163b3dc123ea9b4e958f","modified":1632362007537},{"_id":"public/search.xml","hash":"41052a92808e5586bfe5eaa3cd2d18fbce9f25cf","modified":1640525091617},{"_id":"public/categories/index.html","hash":"bebfe9bc8555b9f4f4fc33b4600fe74f864c684d","modified":1640525091617},{"_id":"public/tags/index.html","hash":"301c0f899efa0069ef9553c294c97b0827acd0da","modified":1640525091617},{"_id":"public/categories/index-1.html","hash":"915443b4c85d674a0205e41539f0265495aff7fa","modified":1640525091617},{"_id":"public/archives/2021/11/index.html","hash":"af8433e966e512572d614f511f932f6432318b50","modified":1640525091617},{"_id":"public/categories/css/index.html","hash":"dd142bbb6bc666d7e6586c58d31f05b264f70879","modified":1640525091617},{"_id":"public/categories/javaScript/index.html","hash":"47ad5a162d446741cacdeede321c133eeb229ab1","modified":1640525091617},{"_id":"public/categories/git/index.html","hash":"42d932c3bb7fa75a886530bfb5282ddbd12875f5","modified":1640525091617},{"_id":"public/categories/vue/index.html","hash":"b116b0b33ad17d5fd32c388109948f010c8875a7","modified":1640525091617},{"_id":"public/tags/async-await/index.html","hash":"aef9b7f69c239ad854414b74ceabf1ced2410fcc","modified":1640525091617},{"_id":"public/tags/数组方法/index.html","hash":"a645cdba6aa79a0f78c6daad040aa16b5e3dbf07","modified":1640525091617},{"_id":"public/tags/js函数柯里化/index.html","hash":"95af4d288fc3c24c7d23f13beb18f33ee4bde2fb","modified":1640525091617},{"_id":"public/tags/vue3对比vue2/index.html","hash":"8ea664a2f799627ff782a3fb36ac4517b016cb67","modified":1640525091617},{"_id":"public/tags/vue基础/index.html","hash":"7de70f6ce5861cc83dd362502c82362cf7bf0584","modified":1640525091617},{"_id":"public/tags/white-space/index.html","hash":"285e212b839ff12360a3c24d631b2d7524a18437","modified":1640525091617},{"_id":"public/tags/表单验证/index.html","hash":"d3e00822a9bee13066e48648f817b29c773a41cd","modified":1640525091617},{"_id":"public/tags/webSocket/index.html","hash":"9642f53ee84352bd0b00d6bb58c3df7886a9e1c7","modified":1640525091617},{"_id":"public/page/2/index.html","hash":"ff70e9a4d39ac8e1e94b49d97d64499b5a0ebf8e","modified":1640525091617},{"_id":"public/2021/11/02/vue3对比vue2/index.html","hash":"91dec4e80769c342cccc9fd2fc1060d92bb2065c","modified":1640525091617},{"_id":"public/2021/10/12/js函数柯里化/index.html","hash":"9c9edcf4390ab9f6eb99b25020d84f5a5b1c09b4","modified":1640525091617},{"_id":"public/2021/10/11/white-space/index.html","hash":"2e3b15fd92331c3329649067bf049f570d8fdfd0","modified":1640525091617},{"_id":"public/2021/10/09/async-await详解/index.html","hash":"76d7acf6df36dbbcb00d630c5d6086629200a96e","modified":1640525091617},{"_id":"public/2021/10/08/vue基础/index.html","hash":"60c01d5157215830960f7cc2628c4e54c2804fbc","modified":1640525091617},{"_id":"public/2021/10/07/git版本回退/index.html","hash":"cd0f109fcadf773d0613e5227675c773adafc2bb","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/index.html","hash":"90a30e3a2ae42171c0eefc88aba7bee5ab6660dd","modified":1640525091617},{"_id":"public/2021/10/04/js中一些好用的数组方法/index.html","hash":"764a8ab7aabc84b4c3f81b24cf8323110a1e6daa","modified":1640525091617},{"_id":"public/2021/10/04/webSocket/index.html","hash":"7f5abf6ae6280217a0f22942ac28e0ee1058421e","modified":1640525091617},{"_id":"public/2021/10/03/用CSS代码让你的列表网页提升渲染性能/index.html","hash":"76120b630111231dd54ae83946a8e4ef71bc2e03","modified":1640525091617},{"_id":"public/2021/10/02/常用的表单验证/index.html","hash":"fbb3ea8958bd6dc07c47bbcac913c783ca2e190f","modified":1640525091617},{"_id":"public/archives/index.html","hash":"ee6de76f1155448919e63ef1cc73edc1702a5eb8","modified":1640525091617},{"_id":"public/archives/2021/index.html","hash":"2ef6e790f24091b80ee578ad8603e6231eb2a254","modified":1640525091617},{"_id":"public/archives/2021/10/index.html","hash":"377426a43e7c78c44a01ab587be6d66a34d53b1f","modified":1640525091617},{"_id":"public/index.html","hash":"5f1bd51de4e5726d5caedb575f1d7837f7a0b904","modified":1640525091617},{"_id":"public/images/bg_03.jpg","hash":"15a7a8d9f27333032cc7797fbd64f250271022bc","modified":1640525091617},{"_id":"public/images/header_01.jpg","hash":"25a6d8226ac5f0560b9b7c074333468272335403","modified":1640525091617},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1640525091617},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1640525091617},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1640525091617},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1640525091617},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1640525091617},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1640525091617},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1640525091617},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1640525091617},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1640525091617},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1640525091617},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1640525091617},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1640525091617},{"_id":"public/images/favicon.png","hash":"ee89b9f25ece9543af8f7406c0c625330f50f206","modified":1640525091617},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1640525091617},{"_id":"public/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1640525091617},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-01.png","hash":"4f055b88921ad073263c9a3ff89dfc07ead5c58a","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-02.png","hash":"f97516b5cfb10c0c7c4f65092e5092360770137d","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-04.png","hash":"c447895d276c9b1fdaff1566e3612e8c6a772588","modified":1640525091617},{"_id":"public/2021/10/06/CSS3阴影-box-shadow/box-shandow-03.png","hash":"238b2adb4b4d703a9592b3dbe88a9feba7173d86","modified":1640525091617},{"_id":"public/images/bg_01.jpg","hash":"03f00d410a7ccc4134625bd3352129a150498ea6","modified":1640525091617},{"_id":"public/images/header_02.jpg","hash":"744f81dc47506b747c0a0abf6851f793fd739799","modified":1640525091617},{"_id":"public/images/favicon-more.png","hash":"8e81d401fd7d3f28cd77bb2d3859aa3aae2c720e","modified":1640525091617},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1640525091617},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1640525091617},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1640525091617},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1640525091617},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1640525091617},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1640525091617},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1640525091617},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1640525091617},{"_id":"public/lib/three/README.html","hash":"d8faebc08f93684752eeb936400e62117bd59b6e","modified":1640525091617},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1640525091617},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1640525091617},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1640525091617},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1640525091617},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1640525091617},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1640525091617},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1640525091617},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1640525091617},{"_id":"public/css/main.css","hash":"1fef56c2eb323e4abb41f6add0b3528f4c946bcf","modified":1640525091617},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1640525091617},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1640525091617},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1640525091617},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1640525091617},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1640525091617},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1640525091617},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1640525091617},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1640525091617},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1640525091617},{"_id":"public/images/head.png","hash":"4913ce36a23d9b54da48d82fc8aa2d9d4dd287c4","modified":1640525091617},{"_id":"public/images/bg_02.jpg","hash":"bec6ace3c93372487c6e8d4be51be3d01f0d9046","modified":1640525091617},{"_id":"public/images/left_con_01.jpg","hash":"12be299455f28e3a5194163b3dc123ea9b4e958f","modified":1640525091617},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1640525091617}],"Category":[{"name":"css","_id":"ckxnaa6ev00040gfz8sm71ybg"},{"name":"javaScript","_id":"ckxnaa6ey000a0gfzdjui6y6c"},{"name":"git","_id":"ckxnaa6f0000g0gfz5i5yeu0x"},{"name":"vue","_id":"ckxnaa6f5000w0gfz9ik5hta2"}],"Data":[{"_id":"styles","data":"body {\n  background-color: #eee;\n}\n"}],"Page":[{"title":"分类","date":"2021-09-21T14:17:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-09-21 22:17:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-09-21T14:18:02.253Z","path":"categories/index.html","layout":"page","_id":"ckxnaa6eq00000gfz9dx4g6c2","content":"","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":""},{"title":"tags","date":"2021-10-02T17:03:14.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-10-03 01:03:14\ntype: tags\n---\n","updated":"2021-10-02T17:03:38.665Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxnaa6et00020gfz2qdjfyg7","content":"","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":""},{"title":"categories","date":"2021-10-02T17:00:58.000Z","type":"categories","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2021-10-03 01:00:58\ntype: categories\n---\n","updated":"2021-10-02T17:01:19.455Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"ckxnaa6ew00050gfz37sravm0","content":"","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":""}],"Post":[{"title":"CSS3阴影(box-shadow)","date":"2021-10-06T14:51:21.000Z","_content":"\n##### 1、单侧投影\n\n- 外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 \n\n- 单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。\n\n```\n<style>\n.left {\n box-shadow: -8px 0 5px -5px #333;\n}\n.right {\n box-shadow: 8px 0 5px -5px #333;\n}\n.top {\n box-shadow: 0 -8px 5px -5px #333;\n}\n.bottom {\n box-shadow: 0 8px 5px -5px #333;\n}\n</style>\n<div class='left'>左</div>\n<div class='right'>右</div>\n<div class='top'>上</div>\n<div class='bottom'>下</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png)\n\n##### 2、立体文字阴影\n\n- 立体文字阴影的关键点在于多层 text-shadow 的叠加\n- 合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码\n- 运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和\n- HSL(颜色值)\n- - H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  - S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  - L：Lightness(亮度)。取值为：0.0% - 100.0%\n\n```\n<style>\n@function blessing($color) {\n $val: 0px 0px $color;\n @for $i from 1 through 50 {\n $color: fade-out(desaturate($color, 1%), .02);\n $val: #{$val}, -#{$i}px #{$i}px #{$color};\n }\n @return $val;\n}\n\ndiv {\n text-align: center;\n font-size: 20vmin;\n line-height: 45vh;\n text-shadow: blessing(hsl(0, 100%, 50%));\n color: hsl(14, 100%, 60%);\n}\n</style>\n<div>福</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png)\n\n##### 3、线性渐变模拟长阴影\n\n- 借用了元素的两个伪元素\n- 通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置\n\n```\n<style>\ndiv {\n position: relative;\n width: 30vmin;\n height: 30vmin;\n line-height: 30vh;\n text-align: center;\n font-size: 30px;\n background: #fff;\n margin: 30vmin auto;\n}\n\ndiv::before,\ndiv::after {\n content: \"\";\n position: absolute;\n top: 0;\n left: 0;\n right: 0;\n bottom: 0;\n z-index: -1;\n}\n\ndiv::before {\n content: ':before';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 50%;\n transform: translate(100%, 0) skewY(45deg) scaleX(.6);\n background: linear-gradient(90deg, rgba(0, 0, 0, .3), transparent);\n}\n\ndiv::after {\n content: ':after';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 0;\n transform: translate(0%, 100%) skewX(45deg) scaleY(.6);\n background: linear-gradient(180deg, rgba(0, 0, 0, .3), transparent);\n}\n</style>\n<div>Web秀</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png)\n\n##### 4、渐变实现内切角\n\n- 阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果\n- 阴影实现缺点，单个标签最多只能是2个内切圆角\n- 径向渐变实现内切圆角可以是4边\n\n```\n<style>\ndiv {\n position: relative;\n width: 20vw;\n height: 8vw;\n margin: 1vw auto;\n border-radius: 1vmin;\n overflow: hidden;\n line-height: 8vw;\n color: #fff;\n text-align: center;\n}\n\n.shadow::before {\n position: absolute;\n content: \"\";\n top: -2vw;\n left: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.shadow::after {\n position: absolute;\n content: \"\";\n bottom: -2vw;\n right: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.linear {\n background-size: 70% 70%;\n background-image: \n radial-gradient(\n circle at 100% 100%, \n transparent 1vw, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 100% 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 100%, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw);\n background-repeat: no-repeat;\n background-position: \n right bottom, \n left top, \n right top, \n left bottom;\n}\n</style>\n<div class=\"shadow\">阴影实现缺点最多是2边</div>\n<div class=\"linear\">径向渐变内切圆角4边</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png)","source":"_posts/CSS3阴影-box-shadow.md","raw":"---\ntitle: CSS3阴影(box-shadow)\ndate: 2021-10-06 22:51:21\ntags:\ncategories: css\n---\n\n##### 1、单侧投影\n\n- 外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 \n\n- 单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。\n\n```\n<style>\n.left {\n box-shadow: -8px 0 5px -5px #333;\n}\n.right {\n box-shadow: 8px 0 5px -5px #333;\n}\n.top {\n box-shadow: 0 -8px 5px -5px #333;\n}\n.bottom {\n box-shadow: 0 8px 5px -5px #333;\n}\n</style>\n<div class='left'>左</div>\n<div class='right'>右</div>\n<div class='top'>上</div>\n<div class='bottom'>下</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png)\n\n##### 2、立体文字阴影\n\n- 立体文字阴影的关键点在于多层 text-shadow 的叠加\n- 合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码\n- 运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和\n- HSL(颜色值)\n- - H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\n  - S：Saturation(饱和度)。取值为：0.0% - 100.0%\n  - L：Lightness(亮度)。取值为：0.0% - 100.0%\n\n```\n<style>\n@function blessing($color) {\n $val: 0px 0px $color;\n @for $i from 1 through 50 {\n $color: fade-out(desaturate($color, 1%), .02);\n $val: #{$val}, -#{$i}px #{$i}px #{$color};\n }\n @return $val;\n}\n\ndiv {\n text-align: center;\n font-size: 20vmin;\n line-height: 45vh;\n text-shadow: blessing(hsl(0, 100%, 50%));\n color: hsl(14, 100%, 60%);\n}\n</style>\n<div>福</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png)\n\n##### 3、线性渐变模拟长阴影\n\n- 借用了元素的两个伪元素\n- 通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置\n\n```\n<style>\ndiv {\n position: relative;\n width: 30vmin;\n height: 30vmin;\n line-height: 30vh;\n text-align: center;\n font-size: 30px;\n background: #fff;\n margin: 30vmin auto;\n}\n\ndiv::before,\ndiv::after {\n content: \"\";\n position: absolute;\n top: 0;\n left: 0;\n right: 0;\n bottom: 0;\n z-index: -1;\n}\n\ndiv::before {\n content: ':before';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 50%;\n transform: translate(100%, 0) skewY(45deg) scaleX(.6);\n background: linear-gradient(90deg, rgba(0, 0, 0, .3), transparent);\n}\n\ndiv::after {\n content: ':after';\n font-size: 30px;\n text-align: center;\n line-height: 30vh;\n transform-origin: 0 0;\n transform: translate(0%, 100%) skewX(45deg) scaleY(.6);\n background: linear-gradient(180deg, rgba(0, 0, 0, .3), transparent);\n}\n</style>\n<div>Web秀</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png)\n\n##### 4、渐变实现内切角\n\n- 阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果\n- 阴影实现缺点，单个标签最多只能是2个内切圆角\n- 径向渐变实现内切圆角可以是4边\n\n```\n<style>\ndiv {\n position: relative;\n width: 20vw;\n height: 8vw;\n margin: 1vw auto;\n border-radius: 1vmin;\n overflow: hidden;\n line-height: 8vw;\n color: #fff;\n text-align: center;\n}\n\n.shadow::before {\n position: absolute;\n content: \"\";\n top: -2vw;\n left: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.shadow::after {\n position: absolute;\n content: \"\";\n bottom: -2vw;\n right: -2vw;\n width: 4vw;\n height: 4vw;\n border-radius: 50%;\n box-shadow: 0 0 0 15vw #e91e63; \n z-index: -1;\n}\n\n.linear {\n background-size: 70% 70%;\n background-image: \n radial-gradient(\n circle at 100% 100%, \n transparent 1vw, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 100% 0, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw),\n radial-gradient(\n circle at 0 100%, \n transparent 0, \n transparent 2vw, \n #03A9F5 2vw);\n background-repeat: no-repeat;\n background-position: \n right bottom, \n left top, \n right top, \n left bottom;\n}\n</style>\n<div class=\"shadow\">阴影实现缺点最多是2边</div>\n<div class=\"linear\">径向渐变内切圆角4边</div>\n```\n\n![](https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png)","slug":"CSS3阴影-box-shadow","published":1,"updated":"2021-10-06T16:26:13.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6es00010gfz7ryq57i5","content":"<h5 id=\"1、单侧投影\"><a href=\"#1、单侧投影\" class=\"headerlink\" title=\"1、单侧投影\"></a>1、单侧投影</h5><ul>\n<li><p>外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 </p>\n</li>\n<li><p>单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\"> box-shadow: -8px 0 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\"> box-shadow: 8px 0 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top &#123;</span><br><span class=\"line\"> box-shadow: 0 -8px 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bottom &#123;</span><br><span class=\"line\"> box-shadow: 0 8px 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&#x27;left&#x27;&gt;左&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&#x27;right&#x27;&gt;右&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&#x27;top&#x27;&gt;上&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&#x27;bottom&#x27;&gt;下&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png\"></p>\n<h5 id=\"2、立体文字阴影\"><a href=\"#2、立体文字阴影\" class=\"headerlink\" title=\"2、立体文字阴影\"></a>2、立体文字阴影</h5><ul>\n<li>立体文字阴影的关键点在于多层 text-shadow 的叠加</li>\n<li>合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码</li>\n<li>运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和</li>\n<li>HSL(颜色值)</li>\n<li><ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">@function blessing($color) &#123;</span><br><span class=\"line\"> $val: 0px 0px $color;</span><br><span class=\"line\"> @for $i from 1 through 50 &#123;</span><br><span class=\"line\"> $color: fade-out(desaturate($color, 1%), .02);</span><br><span class=\"line\"> $val: #&#123;$val&#125;, -#&#123;$i&#125;px #&#123;$i&#125;px #&#123;$color&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> @return $val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div &#123;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> font-size: 20vmin;</span><br><span class=\"line\"> line-height: 45vh;</span><br><span class=\"line\"> text-shadow: blessing(hsl(0, 100%, 50%));</span><br><span class=\"line\"> color: hsl(14, 100%, 60%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div&gt;福&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png\"></p>\n<h5 id=\"3、线性渐变模拟长阴影\"><a href=\"#3、线性渐变模拟长阴影\" class=\"headerlink\" title=\"3、线性渐变模拟长阴影\"></a>3、线性渐变模拟长阴影</h5><ul>\n<li>借用了元素的两个伪元素</li>\n<li>通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\"> position: relative;</span><br><span class=\"line\"> width: 30vmin;</span><br><span class=\"line\"> height: 30vmin;</span><br><span class=\"line\"> line-height: 30vh;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> font-size: 30px;</span><br><span class=\"line\"> background: #fff;</span><br><span class=\"line\"> margin: 30vmin auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div::before,</span><br><span class=\"line\">div::after &#123;</span><br><span class=\"line\"> content: &quot;&quot;;</span><br><span class=\"line\"> position: absolute;</span><br><span class=\"line\"> top: 0;</span><br><span class=\"line\"> left: 0;</span><br><span class=\"line\"> right: 0;</span><br><span class=\"line\"> bottom: 0;</span><br><span class=\"line\"> z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div::before &#123;</span><br><span class=\"line\"> content: &#x27;:before&#x27;;</span><br><span class=\"line\"> font-size: 30px;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> line-height: 30vh;</span><br><span class=\"line\"> transform-origin: 0 50%;</span><br><span class=\"line\"> transform: translate(100%, 0) skewY(45deg) scaleX(.6);</span><br><span class=\"line\"> background: linear-gradient(90deg, rgba(0, 0, 0, .3), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div::after &#123;</span><br><span class=\"line\"> content: &#x27;:after&#x27;;</span><br><span class=\"line\"> font-size: 30px;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> line-height: 30vh;</span><br><span class=\"line\"> transform-origin: 0 0;</span><br><span class=\"line\"> transform: translate(0%, 100%) skewX(45deg) scaleY(.6);</span><br><span class=\"line\"> background: linear-gradient(180deg, rgba(0, 0, 0, .3), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div&gt;Web秀&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png\"></p>\n<h5 id=\"4、渐变实现内切角\"><a href=\"#4、渐变实现内切角\" class=\"headerlink\" title=\"4、渐变实现内切角\"></a>4、渐变实现内切角</h5><ul>\n<li>阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果</li>\n<li>阴影实现缺点，单个标签最多只能是2个内切圆角</li>\n<li>径向渐变实现内切圆角可以是4边</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\"> position: relative;</span><br><span class=\"line\"> width: 20vw;</span><br><span class=\"line\"> height: 8vw;</span><br><span class=\"line\"> margin: 1vw auto;</span><br><span class=\"line\"> border-radius: 1vmin;</span><br><span class=\"line\"> overflow: hidden;</span><br><span class=\"line\"> line-height: 8vw;</span><br><span class=\"line\"> color: #fff;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.shadow::before &#123;</span><br><span class=\"line\"> position: absolute;</span><br><span class=\"line\"> content: &quot;&quot;;</span><br><span class=\"line\"> top: -2vw;</span><br><span class=\"line\"> left: -2vw;</span><br><span class=\"line\"> width: 4vw;</span><br><span class=\"line\"> height: 4vw;</span><br><span class=\"line\"> border-radius: 50%;</span><br><span class=\"line\"> box-shadow: 0 0 0 15vw #e91e63; </span><br><span class=\"line\"> z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.shadow::after &#123;</span><br><span class=\"line\"> position: absolute;</span><br><span class=\"line\"> content: &quot;&quot;;</span><br><span class=\"line\"> bottom: -2vw;</span><br><span class=\"line\"> right: -2vw;</span><br><span class=\"line\"> width: 4vw;</span><br><span class=\"line\"> height: 4vw;</span><br><span class=\"line\"> border-radius: 50%;</span><br><span class=\"line\"> box-shadow: 0 0 0 15vw #e91e63; </span><br><span class=\"line\"> z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.linear &#123;</span><br><span class=\"line\"> background-size: 70% 70%;</span><br><span class=\"line\"> background-image: </span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 100% 100%, </span><br><span class=\"line\"> transparent 1vw, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw),</span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 0 0, </span><br><span class=\"line\"> transparent 0, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw),</span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 100% 0, </span><br><span class=\"line\"> transparent 0, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw),</span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 0 100%, </span><br><span class=\"line\"> transparent 0, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw);</span><br><span class=\"line\"> background-repeat: no-repeat;</span><br><span class=\"line\"> background-position: </span><br><span class=\"line\"> right bottom, </span><br><span class=\"line\"> left top, </span><br><span class=\"line\"> right top, </span><br><span class=\"line\"> left bottom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;shadow&quot;&gt;阴影实现缺点最多是2边&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;linear&quot;&gt;径向渐变内切圆角4边&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png\"></p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"1、单侧投影\"><a href=\"#1、单侧投影\" class=\"headerlink\" title=\"1、单侧投影\"></a>1、单侧投影</h5><ul>\n<li><p>外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 </p>\n</li>\n<li><p>单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\"> box-shadow: -8px 0 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\"> box-shadow: 8px 0 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top &#123;</span><br><span class=\"line\"> box-shadow: 0 -8px 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bottom &#123;</span><br><span class=\"line\"> box-shadow: 0 8px 5px -5px #333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&#x27;left&#x27;&gt;左&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&#x27;right&#x27;&gt;右&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&#x27;top&#x27;&gt;上&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&#x27;bottom&#x27;&gt;下&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png\"></p>\n<h5 id=\"2、立体文字阴影\"><a href=\"#2、立体文字阴影\" class=\"headerlink\" title=\"2、立体文字阴影\"></a>2、立体文字阴影</h5><ul>\n<li>立体文字阴影的关键点在于多层 text-shadow 的叠加</li>\n<li>合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码</li>\n<li>运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和</li>\n<li>HSL(颜色值)</li>\n<li><ul>\n<li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li>\n<li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li>\n<li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">@function blessing($color) &#123;</span><br><span class=\"line\"> $val: 0px 0px $color;</span><br><span class=\"line\"> @for $i from 1 through 50 &#123;</span><br><span class=\"line\"> $color: fade-out(desaturate($color, 1%), .02);</span><br><span class=\"line\"> $val: #&#123;$val&#125;, -#&#123;$i&#125;px #&#123;$i&#125;px #&#123;$color&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> @return $val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div &#123;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> font-size: 20vmin;</span><br><span class=\"line\"> line-height: 45vh;</span><br><span class=\"line\"> text-shadow: blessing(hsl(0, 100%, 50%));</span><br><span class=\"line\"> color: hsl(14, 100%, 60%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div&gt;福&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png\"></p>\n<h5 id=\"3、线性渐变模拟长阴影\"><a href=\"#3、线性渐变模拟长阴影\" class=\"headerlink\" title=\"3、线性渐变模拟长阴影\"></a>3、线性渐变模拟长阴影</h5><ul>\n<li>借用了元素的两个伪元素</li>\n<li>通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\"> position: relative;</span><br><span class=\"line\"> width: 30vmin;</span><br><span class=\"line\"> height: 30vmin;</span><br><span class=\"line\"> line-height: 30vh;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> font-size: 30px;</span><br><span class=\"line\"> background: #fff;</span><br><span class=\"line\"> margin: 30vmin auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div::before,</span><br><span class=\"line\">div::after &#123;</span><br><span class=\"line\"> content: &quot;&quot;;</span><br><span class=\"line\"> position: absolute;</span><br><span class=\"line\"> top: 0;</span><br><span class=\"line\"> left: 0;</span><br><span class=\"line\"> right: 0;</span><br><span class=\"line\"> bottom: 0;</span><br><span class=\"line\"> z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div::before &#123;</span><br><span class=\"line\"> content: &#x27;:before&#x27;;</span><br><span class=\"line\"> font-size: 30px;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> line-height: 30vh;</span><br><span class=\"line\"> transform-origin: 0 50%;</span><br><span class=\"line\"> transform: translate(100%, 0) skewY(45deg) scaleX(.6);</span><br><span class=\"line\"> background: linear-gradient(90deg, rgba(0, 0, 0, .3), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div::after &#123;</span><br><span class=\"line\"> content: &#x27;:after&#x27;;</span><br><span class=\"line\"> font-size: 30px;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\"> line-height: 30vh;</span><br><span class=\"line\"> transform-origin: 0 0;</span><br><span class=\"line\"> transform: translate(0%, 100%) skewX(45deg) scaleY(.6);</span><br><span class=\"line\"> background: linear-gradient(180deg, rgba(0, 0, 0, .3), transparent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div&gt;Web秀&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png\"></p>\n<h5 id=\"4、渐变实现内切角\"><a href=\"#4、渐变实现内切角\" class=\"headerlink\" title=\"4、渐变实现内切角\"></a>4、渐变实现内切角</h5><ul>\n<li>阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果</li>\n<li>阴影实现缺点，单个标签最多只能是2个内切圆角</li>\n<li>径向渐变实现内切圆角可以是4边</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\"> position: relative;</span><br><span class=\"line\"> width: 20vw;</span><br><span class=\"line\"> height: 8vw;</span><br><span class=\"line\"> margin: 1vw auto;</span><br><span class=\"line\"> border-radius: 1vmin;</span><br><span class=\"line\"> overflow: hidden;</span><br><span class=\"line\"> line-height: 8vw;</span><br><span class=\"line\"> color: #fff;</span><br><span class=\"line\"> text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.shadow::before &#123;</span><br><span class=\"line\"> position: absolute;</span><br><span class=\"line\"> content: &quot;&quot;;</span><br><span class=\"line\"> top: -2vw;</span><br><span class=\"line\"> left: -2vw;</span><br><span class=\"line\"> width: 4vw;</span><br><span class=\"line\"> height: 4vw;</span><br><span class=\"line\"> border-radius: 50%;</span><br><span class=\"line\"> box-shadow: 0 0 0 15vw #e91e63; </span><br><span class=\"line\"> z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.shadow::after &#123;</span><br><span class=\"line\"> position: absolute;</span><br><span class=\"line\"> content: &quot;&quot;;</span><br><span class=\"line\"> bottom: -2vw;</span><br><span class=\"line\"> right: -2vw;</span><br><span class=\"line\"> width: 4vw;</span><br><span class=\"line\"> height: 4vw;</span><br><span class=\"line\"> border-radius: 50%;</span><br><span class=\"line\"> box-shadow: 0 0 0 15vw #e91e63; </span><br><span class=\"line\"> z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.linear &#123;</span><br><span class=\"line\"> background-size: 70% 70%;</span><br><span class=\"line\"> background-image: </span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 100% 100%, </span><br><span class=\"line\"> transparent 1vw, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw),</span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 0 0, </span><br><span class=\"line\"> transparent 0, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw),</span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 100% 0, </span><br><span class=\"line\"> transparent 0, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw),</span><br><span class=\"line\"> radial-gradient(</span><br><span class=\"line\"> circle at 0 100%, </span><br><span class=\"line\"> transparent 0, </span><br><span class=\"line\"> transparent 2vw, </span><br><span class=\"line\"> #03A9F5 2vw);</span><br><span class=\"line\"> background-repeat: no-repeat;</span><br><span class=\"line\"> background-position: </span><br><span class=\"line\"> right bottom, </span><br><span class=\"line\"> left top, </span><br><span class=\"line\"> right top, </span><br><span class=\"line\"> left bottom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;shadow&quot;&gt;阴影实现缺点最多是2边&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;linear&quot;&gt;径向渐变内切圆角4边&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png\"></p>\n"},{"title":"async/await详解","date":"2021-10-09T14:45:39.000Z","_content":"\n#### 1、前言\n\n&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。\n\n#### 2、详解\n\n&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。\n\n##### 2.1、async\n\n&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。\n\n- 函数返回非Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg)\n\n&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。\n\n- ###### 函数返回Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg)\n\n&emsp;&emsp;可以看出返回的也是Promise对象。\n\n##### 2.2、await\n\n&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。\n\n![](https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png)\n\n&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。\n\n##### 2.3、async、await结合使用\n\n**语法：**\n\n```\nasync function 函数名() {\n\tawait XXX;\n}\n```\n\n**示例代码：**\n\n```\nfunction testAsync() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中...')\n\t\t\t\tresolve('resolve return')\n\t\t\t} else {\n\t\t\t\treject('reject return')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nfunction testAsync2() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中2...')\n\t\t\t\tresolve('resolve return2')\n\t\t\t} else {\n\t\t\t\treject('reject return2')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nasync function test() {\n\tconsole.log('test开始...');\n\tvar value1 = await testAsync();\n\tconsole.log(value1);\n\tvar value2 = await testAsync2();\n\tconsole.log(value2);\n\tvar value3 = await 'test结束...';\n\tconsole.log(value3);\n}\n\nconsole.log(test());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\" />\n\n&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。\n\n&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：\n\n```\nfunction fun1() {\n\treturn '函数1'\n}\n\nfunction fun2() {\n\treturn '函数2'\n}\n\nfunction fun3() {\n\tconsole.log(fun1());\n\tconsole.log(test()); // async/await函数\n\tconsole.log(fun2());\n}\n\n console.log(fun3());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\" />\n\n梳理一下函数的执行过程:\n\n1. 先执行函数1\n2. 进入test函数并输出开始\n3. 在test函数中遇到await，立即返回Promise对象\n4. 执行函数2\n5. 执行test函数中的testAsync方法\n6. 等到test函数中的testAsync方法执行完后，继续执行testAsync2方法\n7. test函数结束\n\n&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n##### 2.4、async、await异常处理\n\n&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try...catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。\n\n```\n // 第一种写法\n async function myFunction() {\n   try {\n     await something();\n   } catch (err) {\n     console.log(err);\n   }\n }\n \n // 第二种写法\n async function myFunction() {\n   await somethingPromise()\n   .catch(function (err) {\n     console.log(err);\n   });\n }\n```\n\n#### 3、总结\n\n&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n&emsp;&emsp;可以使用try...catch或.catch对async函数进行异常处理。","source":"_posts/async-await详解.md","raw":"---\ntitle: async/await详解\ndate: 2021-10-09 22:45:39\ntags: async/await\ncategories: javaScript\n---\n\n#### 1、前言\n\n&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。\n\n#### 2、详解\n\n&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。\n\n##### 2.1、async\n\n&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。\n\n- 函数返回非Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg)\n\n&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。\n\n- ###### 函数返回Promise对象\n\n![](https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg)\n\n&emsp;&emsp;可以看出返回的也是Promise对象。\n\n##### 2.2、await\n\n&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。\n\n![](https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png)\n\n&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。\n\n##### 2.3、async、await结合使用\n\n**语法：**\n\n```\nasync function 函数名() {\n\tawait XXX;\n}\n```\n\n**示例代码：**\n\n```\nfunction testAsync() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中...')\n\t\t\t\tresolve('resolve return')\n\t\t\t} else {\n\t\t\t\treject('reject return')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nfunction testAsync2() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tif (true) {\n\t\t\t\tconsole.log('请求中2...')\n\t\t\t\tresolve('resolve return2')\n\t\t\t} else {\n\t\t\t\treject('reject return2')\n\t\t\t}\n\t\t}, 2000)\n\t})\n}\n\nasync function test() {\n\tconsole.log('test开始...');\n\tvar value1 = await testAsync();\n\tconsole.log(value1);\n\tvar value2 = await testAsync2();\n\tconsole.log(value2);\n\tvar value3 = await 'test结束...';\n\tconsole.log(value3);\n}\n\nconsole.log(test());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\" />\n\n&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。\n\n&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：\n\n```\nfunction fun1() {\n\treturn '函数1'\n}\n\nfunction fun2() {\n\treturn '函数2'\n}\n\nfunction fun3() {\n\tconsole.log(fun1());\n\tconsole.log(test()); // async/await函数\n\tconsole.log(fun2());\n}\n\n console.log(fun3());\n```\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\" />\n\n梳理一下函数的执行过程:\n\n1. 先执行函数1\n2. 进入test函数并输出开始\n3. 在test函数中遇到await，立即返回Promise对象\n4. 执行函数2\n5. 执行test函数中的testAsync方法\n6. 等到test函数中的testAsync方法执行完后，继续执行testAsync2方法\n7. test函数结束\n\n&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n##### 2.4、async、await异常处理\n\n&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try...catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。\n\n```\n // 第一种写法\n async function myFunction() {\n   try {\n     await something();\n   } catch (err) {\n     console.log(err);\n   }\n }\n \n // 第二种写法\n async function myFunction() {\n   await somethingPromise()\n   .catch(function (err) {\n     console.log(err);\n   });\n }\n```\n\n#### 3、总结\n\n&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。\n\n&emsp;&emsp;可以使用try...catch或.catch对async函数进行异常处理。","slug":"async-await详解","published":1,"updated":"2021-10-09T15:18:00.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6eu00030gfzg9xa0xyk","content":"<h4 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h4><p>&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。</p>\n<h4 id=\"2、详解\"><a href=\"#2、详解\" class=\"headerlink\" title=\"2、详解\"></a>2、详解</h4><p>&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。</p>\n<h5 id=\"2-1、async\"><a href=\"#2-1、async\" class=\"headerlink\" title=\"2.1、async\"></a>2.1、async</h5><p>&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。</p>\n<ul>\n<li>函数返回非Promise对象</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg\"></p>\n<p>&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。</p>\n<ul>\n<li><h6 id=\"函数返回Promise对象\"><a href=\"#函数返回Promise对象\" class=\"headerlink\" title=\"函数返回Promise对象\"></a>函数返回Promise对象</h6></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg\"></p>\n<p>&emsp;&emsp;可以看出返回的也是Promise对象。</p>\n<h5 id=\"2-2、await\"><a href=\"#2-2、await\" class=\"headerlink\" title=\"2.2、await\"></a>2.2、await</h5><p>&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png\"></p>\n<p>&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。</p>\n<h5 id=\"2-3、async、await结合使用\"><a href=\"#2-3、async、await结合使用\" class=\"headerlink\" title=\"2.3、async、await结合使用\"></a>2.3、async、await结合使用</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function 函数名() &#123;</span><br><span class=\"line\">\tawait XXX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function testAsync() &#123;</span><br><span class=\"line\">\treturn new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\tif (true) &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&#x27;请求中...&#x27;)</span><br><span class=\"line\">\t\t\t\tresolve(&#x27;resolve return&#x27;)</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treject(&#x27;reject return&#x27;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, 2000)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function testAsync2() &#123;</span><br><span class=\"line\">\treturn new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\tif (true) &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&#x27;请求中2...&#x27;)</span><br><span class=\"line\">\t\t\t\tresolve(&#x27;resolve return2&#x27;)</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treject(&#x27;reject return2&#x27;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, 2000)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function test() &#123;</span><br><span class=\"line\">\tconsole.log(&#x27;test开始...&#x27;);</span><br><span class=\"line\">\tvar value1 = await testAsync();</span><br><span class=\"line\">\tconsole.log(value1);</span><br><span class=\"line\">\tvar value2 = await testAsync2();</span><br><span class=\"line\">\tconsole.log(value2);</span><br><span class=\"line\">\tvar value3 = await &#x27;test结束...&#x27;;</span><br><span class=\"line\">\tconsole.log(value3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(test());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\">\n\n<p>&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。</p>\n<p>&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">\treturn &#x27;函数1&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun2() &#123;</span><br><span class=\"line\">\treturn &#x27;函数2&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun3() &#123;</span><br><span class=\"line\">\tconsole.log(fun1());</span><br><span class=\"line\">\tconsole.log(test()); // async/await函数</span><br><span class=\"line\">\tconsole.log(fun2());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> console.log(fun3());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\">\n\n<p>梳理一下函数的执行过程:</p>\n<ol>\n<li>先执行函数1</li>\n<li>进入test函数并输出开始</li>\n<li>在test函数中遇到await，立即返回Promise对象</li>\n<li>执行函数2</li>\n<li>执行test函数中的testAsync方法</li>\n<li>等到test函数中的testAsync方法执行完后，继续执行testAsync2方法</li>\n<li>test函数结束</li>\n</ol>\n<p>&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<h5 id=\"2-4、async、await异常处理\"><a href=\"#2-4、async、await异常处理\" class=\"headerlink\" title=\"2.4、async、await异常处理\"></a>2.4、async、await异常处理</h5><p>&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try…catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一种写法</span><br><span class=\"line\">async function myFunction() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    await something();</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种写法</span><br><span class=\"line\">async function myFunction() &#123;</span><br><span class=\"line\">  await somethingPromise()</span><br><span class=\"line\">  .catch(function (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、总结\"><a href=\"#3、总结\" class=\"headerlink\" title=\"3、总结\"></a>3、总结</h4><p>&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<p>&emsp;&emsp;可以使用try…catch或.catch对async函数进行异常处理。</p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h4 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h4><p>&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。</p>\n<h4 id=\"2、详解\"><a href=\"#2、详解\" class=\"headerlink\" title=\"2、详解\"></a>2、详解</h4><p>&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。</p>\n<h5 id=\"2-1、async\"><a href=\"#2-1、async\" class=\"headerlink\" title=\"2.1、async\"></a>2.1、async</h5><p>&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。</p>\n<ul>\n<li>函数返回非Promise对象</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg\"></p>\n<p>&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。</p>\n<ul>\n<li><h6 id=\"函数返回Promise对象\"><a href=\"#函数返回Promise对象\" class=\"headerlink\" title=\"函数返回Promise对象\"></a>函数返回Promise对象</h6></li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg\"></p>\n<p>&emsp;&emsp;可以看出返回的也是Promise对象。</p>\n<h5 id=\"2-2、await\"><a href=\"#2-2、await\" class=\"headerlink\" title=\"2.2、await\"></a>2.2、await</h5><p>&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png\"></p>\n<p>&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。</p>\n<h5 id=\"2-3、async、await结合使用\"><a href=\"#2-3、async、await结合使用\" class=\"headerlink\" title=\"2.3、async、await结合使用\"></a>2.3、async、await结合使用</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function 函数名() &#123;</span><br><span class=\"line\">\tawait XXX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function testAsync() &#123;</span><br><span class=\"line\">\treturn new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\tif (true) &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&#x27;请求中...&#x27;)</span><br><span class=\"line\">\t\t\t\tresolve(&#x27;resolve return&#x27;)</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treject(&#x27;reject return&#x27;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, 2000)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function testAsync2() &#123;</span><br><span class=\"line\">\treturn new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\t\tif (true) &#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(&#x27;请求中2...&#x27;)</span><br><span class=\"line\">\t\t\t\tresolve(&#x27;resolve return2&#x27;)</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treject(&#x27;reject return2&#x27;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, 2000)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function test() &#123;</span><br><span class=\"line\">\tconsole.log(&#x27;test开始...&#x27;);</span><br><span class=\"line\">\tvar value1 = await testAsync();</span><br><span class=\"line\">\tconsole.log(value1);</span><br><span class=\"line\">\tvar value2 = await testAsync2();</span><br><span class=\"line\">\tconsole.log(value2);</span><br><span class=\"line\">\tvar value3 = await &#x27;test结束...&#x27;;</span><br><span class=\"line\">\tconsole.log(value3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(test());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg\" style=\"zoom:50%;\">\n\n<p>&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。</p>\n<p>&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">\treturn &#x27;函数1&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun2() &#123;</span><br><span class=\"line\">\treturn &#x27;函数2&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun3() &#123;</span><br><span class=\"line\">\tconsole.log(fun1());</span><br><span class=\"line\">\tconsole.log(test()); // async/await函数</span><br><span class=\"line\">\tconsole.log(fun2());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> console.log(fun3());</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg\" style=\"zoom:50%;\">\n\n<p>梳理一下函数的执行过程:</p>\n<ol>\n<li>先执行函数1</li>\n<li>进入test函数并输出开始</li>\n<li>在test函数中遇到await，立即返回Promise对象</li>\n<li>执行函数2</li>\n<li>执行test函数中的testAsync方法</li>\n<li>等到test函数中的testAsync方法执行完后，继续执行testAsync2方法</li>\n<li>test函数结束</li>\n</ol>\n<p>&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<h5 id=\"2-4、async、await异常处理\"><a href=\"#2-4、async、await异常处理\" class=\"headerlink\" title=\"2.4、async、await异常处理\"></a>2.4、async、await异常处理</h5><p>&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try…catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一种写法</span><br><span class=\"line\">async function myFunction() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    await something();</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种写法</span><br><span class=\"line\">async function myFunction() &#123;</span><br><span class=\"line\">  await somethingPromise()</span><br><span class=\"line\">  .catch(function (err) &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、总结\"><a href=\"#3、总结\" class=\"headerlink\" title=\"3、总结\"></a>3、总结</h4><p>&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p>\n<p>&emsp;&emsp;可以使用try…catch或.catch对async函数进行异常处理。</p>\n"},{"title":"git版本回退","date":"2021-10-07T09:55:22.000Z","_content":"\n对于git版本的回退，我们一般会用到如下两个命令：\n\n- git reset\n- git revert\n\n这两个命令有什么区别呢？\n\n##### 1、git reset\n\n假设有如下几个提交:\n\n![](https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png)\n\n执行如下命令\n\n```\ngit reset --hard a0fvf8\n```\n\n命令执行之后，HEAD指针就会移动到B提交下\n\n![](https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png)\n\n此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：\n\n```\ngit push -f\n```\n\n这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。\n\n##### 2、git revert\n\n通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。\n\n用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）\n\n```\ngit revert 5lk4er\ngit revert 76sdeb\n```\n\n![](https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png)\n\n如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退\n\n```\ngit revert OLDER_COMMIT^..NEWER_COMMIT\n```\n\n这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循","source":"_posts/git版本回退.md","raw":"---\ntitle: git版本回退\ndate: 2021-10-07 17:55:22\ntags:\ncategories: git\n---\n\n对于git版本的回退，我们一般会用到如下两个命令：\n\n- git reset\n- git revert\n\n这两个命令有什么区别呢？\n\n##### 1、git reset\n\n假设有如下几个提交:\n\n![](https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png)\n\n执行如下命令\n\n```\ngit reset --hard a0fvf8\n```\n\n命令执行之后，HEAD指针就会移动到B提交下\n\n![](https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png)\n\n此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：\n\n```\ngit push -f\n```\n\n这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。\n\n##### 2、git revert\n\n通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。\n\n用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）\n\n```\ngit revert 5lk4er\ngit revert 76sdeb\n```\n\n![](https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png)\n\n如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退\n\n```\ngit revert OLDER_COMMIT^..NEWER_COMMIT\n```\n\n这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循","slug":"git版本回退","published":1,"updated":"2021-10-07T10:29:19.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6ew00060gfz0bupa2sk","content":"<p>对于git版本的回退，我们一般会用到如下两个命令：</p>\n<ul>\n<li>git reset</li>\n<li>git revert</li>\n</ul>\n<p>这两个命令有什么区别呢？</p>\n<h5 id=\"1、git-reset\"><a href=\"#1、git-reset\" class=\"headerlink\" title=\"1、git reset\"></a>1、git reset</h5><p>假设有如下几个提交:</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png\"></p>\n<p>执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard a0fvf8</span><br></pre></td></tr></table></figure>\n\n<p>命令执行之后，HEAD指针就会移动到B提交下</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png\"></p>\n<p>此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。</p>\n<h5 id=\"2、git-revert\"><a href=\"#2、git-revert\" class=\"headerlink\" title=\"2、git revert\"></a>2、git revert</h5><p>通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。</p>\n<p>用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert 5lk4er</span><br><span class=\"line\">git revert 76sdeb</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png\"></p>\n<p>如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert OLDER_COMMIT^..NEWER_COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循</p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<p>对于git版本的回退，我们一般会用到如下两个命令：</p>\n<ul>\n<li>git reset</li>\n<li>git revert</li>\n</ul>\n<p>这两个命令有什么区别呢？</p>\n<h5 id=\"1、git-reset\"><a href=\"#1、git-reset\" class=\"headerlink\" title=\"1、git reset\"></a>1、git reset</h5><p>假设有如下几个提交:</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png\"></p>\n<p>执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard a0fvf8</span><br></pre></td></tr></table></figure>\n\n<p>命令执行之后，HEAD指针就会移动到B提交下</p>\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png\"></p>\n<p>此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。</p>\n<h5 id=\"2、git-revert\"><a href=\"#2、git-revert\" class=\"headerlink\" title=\"2、git revert\"></a>2、git revert</h5><p>通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。</p>\n<p>用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert 5lk4er</span><br><span class=\"line\">git revert 76sdeb</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png\"></p>\n<p>如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert OLDER_COMMIT^..NEWER_COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循</p>\n"},{"title":"js中一些好用的数组方法","date":"2021-10-04T10:30:25.000Z","_content":"\n##### 1、some()\n\n**语法：**\n\n```\narray.some(function(currentValue,index,arr),thisValue)\n```\n\n```\n//把10修改成20\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some(function (currentValue, index) {\n  if (currentValue === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n\n//把10修改成20 箭头函数\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some((item, index) => {\n  if (item === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n```\n\n##### 2、every()\n\n**语法：**\n\n```\narray.every(function(currentValue,index,arr), thisValue)\n```\n\n```\n//判断每个元素的值是否都大于4\nvar ages = [5, 32, 7, 10, 33, 12, 40];\n\nvar res = ages.some(function (currentValue) {\n  return currentValue > 4\n})\nconsole.log(res);\n//输出：true\n\n//箭头函数\nvar res = ages.some(item => item > 4)\nconsole.log(res);\n//-------------------------\nvar arr = [ 1, 2, 3, 4, 5, 6 ]; \n\nvar every = arr.every( function( val, index, arr){\n    console.log( 'val：' + val); //打印1，不会打印2、3、4、5、6\n\n    return val > 4; \n}); \n\nconsole.log(every); //返回false\n```\n\n##### 3、reduce()\n\n**语法：**\n\n```\narray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\ntotal：必需。初始值, 或者计算结束后的返回值。\ncurrentValue：\t必需。当前元素\ncurrentIndex：可选。当前元素的索引\narr：可选。当前元素所属的数组对象。\ninitialValue：可选。传递给函数的初始值\n```\n\n```\n//计算所有元素的和\nvar numbers = [15.5, 2.3, 1.1, 4.7];\nvar res = numbers.reduce(function (total, currentValue) {\n  return total += currentValue\n}, 0)\n\nconsole.log(res);\n//23.6\n\n//计算大于4的元素的和\nvar result = numbers.filter(item => item > 4).reduce((total, item) => total += item, 0)\nconsole.log(result);\n//20.2\n```\n\n##### 4、includes()\n\n**语法：**\n\n```\narr.includes(searchElement)\narr.includes(searchElement, fromIndex)\n```\n\n```\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n","source":"_posts/js中一些好用的数组方法.md","raw":"---\ntitle: js中一些好用的数组方法\ndate: 2021-10-04 18:30:25\ntags: 数组方法\ncategories: javaScript\n---\n\n##### 1、some()\n\n**语法：**\n\n```\narray.some(function(currentValue,index,arr),thisValue)\n```\n\n```\n//把10修改成20\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some(function (currentValue, index) {\n  if (currentValue === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n\n//把10修改成20 箭头函数\nvar ages = [5, 32, 7, 10, 33, 12, 40];\nages.some((item, index) => {\n  if (item === 10) {\n    ages[index] = 20\n    return true\n  }\n  console.log(index);\n})\n\nconsole.log(ages);\n```\n\n##### 2、every()\n\n**语法：**\n\n```\narray.every(function(currentValue,index,arr), thisValue)\n```\n\n```\n//判断每个元素的值是否都大于4\nvar ages = [5, 32, 7, 10, 33, 12, 40];\n\nvar res = ages.some(function (currentValue) {\n  return currentValue > 4\n})\nconsole.log(res);\n//输出：true\n\n//箭头函数\nvar res = ages.some(item => item > 4)\nconsole.log(res);\n//-------------------------\nvar arr = [ 1, 2, 3, 4, 5, 6 ]; \n\nvar every = arr.every( function( val, index, arr){\n    console.log( 'val：' + val); //打印1，不会打印2、3、4、5、6\n\n    return val > 4; \n}); \n\nconsole.log(every); //返回false\n```\n\n##### 3、reduce()\n\n**语法：**\n\n```\narray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\ntotal：必需。初始值, 或者计算结束后的返回值。\ncurrentValue：\t必需。当前元素\ncurrentIndex：可选。当前元素的索引\narr：可选。当前元素所属的数组对象。\ninitialValue：可选。传递给函数的初始值\n```\n\n```\n//计算所有元素的和\nvar numbers = [15.5, 2.3, 1.1, 4.7];\nvar res = numbers.reduce(function (total, currentValue) {\n  return total += currentValue\n}, 0)\n\nconsole.log(res);\n//23.6\n\n//计算大于4的元素的和\nvar result = numbers.filter(item => item > 4).reduce((total, item) => total += item, 0)\nconsole.log(result);\n//20.2\n```\n\n##### 4、includes()\n\n**语法：**\n\n```\narr.includes(searchElement)\narr.includes(searchElement, fromIndex)\n```\n\n```\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n","slug":"js中一些好用的数组方法","published":1,"updated":"2021-10-06T14:44:01.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6ex00080gfz71zhekym","content":"<h5 id=\"1、some\"><a href=\"#1、some\" class=\"headerlink\" title=\"1、some()\"></a>1、some()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.some(function(currentValue,index,arr),thisValue)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把10修改成20</span><br><span class=\"line\">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class=\"line\">ages.some(function (currentValue, index) &#123;</span><br><span class=\"line\">  if (currentValue === 10) &#123;</span><br><span class=\"line\">    ages[index] = 20</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ages);</span><br><span class=\"line\"></span><br><span class=\"line\">//把10修改成20 箭头函数</span><br><span class=\"line\">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class=\"line\">ages.some((item, index) =&gt; &#123;</span><br><span class=\"line\">  if (item === 10) &#123;</span><br><span class=\"line\">    ages[index] = 20</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ages);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、every\"><a href=\"#2、every\" class=\"headerlink\" title=\"2、every()\"></a>2、every()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.every(function(currentValue,index,arr), thisValue)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断每个元素的值是否都大于4</span><br><span class=\"line\">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class=\"line\"></span><br><span class=\"line\">var res = ages.some(function (currentValue) &#123;</span><br><span class=\"line\">  return currentValue &gt; 4</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(res);</span><br><span class=\"line\">//输出：true</span><br><span class=\"line\"></span><br><span class=\"line\">//箭头函数</span><br><span class=\"line\">var res = ages.some(item =&gt; item &gt; 4)</span><br><span class=\"line\">console.log(res);</span><br><span class=\"line\">//-------------------------</span><br><span class=\"line\">var arr = [ 1, 2, 3, 4, 5, 6 ]; </span><br><span class=\"line\"></span><br><span class=\"line\">var every = arr.every( function( val, index, arr)&#123;</span><br><span class=\"line\">    console.log( &#x27;val：&#x27; + val); //打印1，不会打印2、3、4、5、6</span><br><span class=\"line\"></span><br><span class=\"line\">    return val &gt; 4; </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">console.log(every); //返回false</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、reduce\"><a href=\"#3、reduce\" class=\"headerlink\" title=\"3、reduce()\"></a>3、reduce()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span><br><span class=\"line\">total：必需。初始值, 或者计算结束后的返回值。</span><br><span class=\"line\">currentValue：\t必需。当前元素</span><br><span class=\"line\">currentIndex：可选。当前元素的索引</span><br><span class=\"line\">arr：可选。当前元素所属的数组对象。</span><br><span class=\"line\">initialValue：可选。传递给函数的初始值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//计算所有元素的和</span><br><span class=\"line\">var numbers = [15.5, 2.3, 1.1, 4.7];</span><br><span class=\"line\">var res = numbers.reduce(function (total, currentValue) &#123;</span><br><span class=\"line\">  return total += currentValue</span><br><span class=\"line\">&#125;, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(res);</span><br><span class=\"line\">//23.6</span><br><span class=\"line\"></span><br><span class=\"line\">//计算大于4的元素的和</span><br><span class=\"line\">var result = numbers.filter(item =&gt; item &gt; 4).reduce((total, item) =&gt; total += item, 0)</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">//20.2</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、includes\"><a href=\"#4、includes\" class=\"headerlink\" title=\"4、includes()\"></a>4、includes()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.includes(searchElement)</span><br><span class=\"line\">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(2);     // true</span><br><span class=\"line\">[1, 2, 3].includes(4);     // false</span><br><span class=\"line\">[1, 2, 3].includes(3, 3);  // false</span><br><span class=\"line\">[1, 2, 3].includes(3, -1); // true</span><br><span class=\"line\">[1, 2, NaN].includes(NaN); // true</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"1、some\"><a href=\"#1、some\" class=\"headerlink\" title=\"1、some()\"></a>1、some()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.some(function(currentValue,index,arr),thisValue)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把10修改成20</span><br><span class=\"line\">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class=\"line\">ages.some(function (currentValue, index) &#123;</span><br><span class=\"line\">  if (currentValue === 10) &#123;</span><br><span class=\"line\">    ages[index] = 20</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ages);</span><br><span class=\"line\"></span><br><span class=\"line\">//把10修改成20 箭头函数</span><br><span class=\"line\">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class=\"line\">ages.some((item, index) =&gt; &#123;</span><br><span class=\"line\">  if (item === 10) &#123;</span><br><span class=\"line\">    ages[index] = 20</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ages);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、every\"><a href=\"#2、every\" class=\"headerlink\" title=\"2、every()\"></a>2、every()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.every(function(currentValue,index,arr), thisValue)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断每个元素的值是否都大于4</span><br><span class=\"line\">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class=\"line\"></span><br><span class=\"line\">var res = ages.some(function (currentValue) &#123;</span><br><span class=\"line\">  return currentValue &gt; 4</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(res);</span><br><span class=\"line\">//输出：true</span><br><span class=\"line\"></span><br><span class=\"line\">//箭头函数</span><br><span class=\"line\">var res = ages.some(item =&gt; item &gt; 4)</span><br><span class=\"line\">console.log(res);</span><br><span class=\"line\">//-------------------------</span><br><span class=\"line\">var arr = [ 1, 2, 3, 4, 5, 6 ]; </span><br><span class=\"line\"></span><br><span class=\"line\">var every = arr.every( function( val, index, arr)&#123;</span><br><span class=\"line\">    console.log( &#x27;val：&#x27; + val); //打印1，不会打印2、3、4、5、6</span><br><span class=\"line\"></span><br><span class=\"line\">    return val &gt; 4; </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\">console.log(every); //返回false</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、reduce\"><a href=\"#3、reduce\" class=\"headerlink\" title=\"3、reduce()\"></a>3、reduce()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span><br><span class=\"line\">total：必需。初始值, 或者计算结束后的返回值。</span><br><span class=\"line\">currentValue：\t必需。当前元素</span><br><span class=\"line\">currentIndex：可选。当前元素的索引</span><br><span class=\"line\">arr：可选。当前元素所属的数组对象。</span><br><span class=\"line\">initialValue：可选。传递给函数的初始值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//计算所有元素的和</span><br><span class=\"line\">var numbers = [15.5, 2.3, 1.1, 4.7];</span><br><span class=\"line\">var res = numbers.reduce(function (total, currentValue) &#123;</span><br><span class=\"line\">  return total += currentValue</span><br><span class=\"line\">&#125;, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(res);</span><br><span class=\"line\">//23.6</span><br><span class=\"line\"></span><br><span class=\"line\">//计算大于4的元素的和</span><br><span class=\"line\">var result = numbers.filter(item =&gt; item &gt; 4).reduce((total, item) =&gt; total += item, 0)</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">//20.2</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、includes\"><a href=\"#4、includes\" class=\"headerlink\" title=\"4、includes()\"></a>4、includes()</h5><p><strong>语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.includes(searchElement)</span><br><span class=\"line\">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1, 2, 3].includes(2);     // true</span><br><span class=\"line\">[1, 2, 3].includes(4);     // false</span><br><span class=\"line\">[1, 2, 3].includes(3, 3);  // false</span><br><span class=\"line\">[1, 2, 3].includes(3, -1); // true</span><br><span class=\"line\">[1, 2, NaN].includes(NaN); // true</span><br></pre></td></tr></table></figure>\n\n"},{"title":"js函数柯里化","date":"2021-10-12T14:05:48.000Z","_content":"\n&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。\n\n&emsp;&emsp;如何实现add(1)(2)(3)(4)=10\n\n```\nfunction add(){\n\t// 将传入的不定参数转为数组对象\n\tvar _args = Array.prototype.slice.call(arguments);\n\tvar _adder = function(){\n\t\t_args.push(...arguments)\n\t\treturn _adder\n\t}\n\t// toString隐形转换的特性\n\t_adder.toString = function(){\n\t\treturn _args.reduce((a,b) => {\n\t\t\treturn a + b\n\t\t}, 0)\n\t}\n\treturn _adder\n}\nconsole.log(add(1,2,3)) // 6\nconsole.log(add(1)(2)(3)) // 6\n```\n\n","source":"_posts/js函数柯里化.md","raw":"---\ntitle: js函数柯里化\ndate: 2021-10-12 22:05:48\ntags: js函数柯里化\ncategories: javaScript\n---\n\n&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。\n\n&emsp;&emsp;如何实现add(1)(2)(3)(4)=10\n\n```\nfunction add(){\n\t// 将传入的不定参数转为数组对象\n\tvar _args = Array.prototype.slice.call(arguments);\n\tvar _adder = function(){\n\t\t_args.push(...arguments)\n\t\treturn _adder\n\t}\n\t// toString隐形转换的特性\n\t_adder.toString = function(){\n\t\treturn _args.reduce((a,b) => {\n\t\t\treturn a + b\n\t\t}, 0)\n\t}\n\treturn _adder\n}\nconsole.log(add(1,2,3)) // 6\nconsole.log(add(1)(2)(3)) // 6\n```\n\n","slug":"js函数柯里化","published":1,"updated":"2021-10-12T14:23:35.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6ex00090gfzcnl82hgk","content":"<p>&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。</p>\n<p>&emsp;&emsp;如何实现add(1)(2)(3)(4)=10</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add()&#123;</span><br><span class=\"line\">\t// 将传入的不定参数转为数组对象</span><br><span class=\"line\">\tvar _args = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">\tvar _adder = function()&#123;</span><br><span class=\"line\">\t\t_args.push(...arguments)</span><br><span class=\"line\">\t\treturn _adder</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// toString隐形转换的特性</span><br><span class=\"line\">\t_adder.toString = function()&#123;</span><br><span class=\"line\">\t\treturn _args.reduce((a,b) =&gt; &#123;</span><br><span class=\"line\">\t\t\treturn a + b</span><br><span class=\"line\">\t\t&#125;, 0)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn _adder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add(1,2,3)) // 6</span><br><span class=\"line\">console.log(add(1)(2)(3)) // 6</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<p>&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。</p>\n<p>&emsp;&emsp;如何实现add(1)(2)(3)(4)=10</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add()&#123;</span><br><span class=\"line\">\t// 将传入的不定参数转为数组对象</span><br><span class=\"line\">\tvar _args = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">\tvar _adder = function()&#123;</span><br><span class=\"line\">\t\t_args.push(...arguments)</span><br><span class=\"line\">\t\treturn _adder</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// toString隐形转换的特性</span><br><span class=\"line\">\t_adder.toString = function()&#123;</span><br><span class=\"line\">\t\treturn _args.reduce((a,b) =&gt; &#123;</span><br><span class=\"line\">\t\t\treturn a + b</span><br><span class=\"line\">\t\t&#125;, 0)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn _adder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add(1,2,3)) // 6</span><br><span class=\"line\">console.log(add(1)(2)(3)) // 6</span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue3对比vue2","date":"2021-11-02T08:55:26.000Z","_content":"\n##### 使用vue-cli4.0创建项目\n\n先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0\n\n**安装**vue-cli npm install -g @vue/cli\n\n**更新**vue-cli npm update -g @vue/cli\n\n**创建项目：**\n\nvue create vue3-demo\n\ncd vue3-demo\n\nyarn serve\n\n**升级vue2项目**\n\nyarn add vue-next\n\n##### 创建vue3项目-vite方式\n\nnpm init vite-app <project-name>\n\ncd <project-name>\n\nyarn\n\nyarn dev\n\n\n\n**vite**是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动\n\n- 快速的冷启动，不需要等待打包操作\n- 即时的热模块更新，替换性能和模块数量的解耦让更新飞起\n- 真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变\n\n##### 生命周期的变化\n\n| vue2.x          | vue3.x            |\n| --------------- | ----------------- |\n| beforeCreate    | 移除(setup)       |\n| created         | 移除(setup)       |\n| beforeMount     | onBeforeMount     |\n| mounted         | onMounted         |\n| beforeUpdate    | onBeforeUpdate    |\n| updated         | onUpdated         |\n| beforeUnmounte  | onBeforeUnmounte  |\n| unmounted       | onUnmounted       |\n| errorCaptured   | onErrorCaptured   |\n| renderTracked   | onRenderTracked   |\n| renderTriggered | onRenderTriggered |\n\n```\nimpor { onMounted } from 'vue';\nexport default {\n\tsetup(){\n\t\tonMounted(() => {\n\t\t\tconsole.log('component is mounted')\n\t\t})\n\t}\n}\n```\n\n##### main.js中变化 新增全局API: createApp()\n\nvue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例\n\n```\nimport { createApp } from 'vue';\nconst app = createApp({});\n```\n\n##### router.js\n\nvue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。\n\n```\nimport { createRouter, createWebHashHistory } from 'vue-router';\n\nconst routes = [\n\t{\n\t\tname: 'homepage',\n\t\tpath: '/homepage',\n\t\tcomponent: () => import('../views/homepage/index.vue')\n\t}\n];\n\nconst router = createRouter({\n\thistory: createWebHashHistory(),\n\troutes\n})\n\nexport default router;\n```\n\n##### vuex\n\nvue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。\n\n```\nimport { createStore } from 'vuex';\n\nexport default createStore({\n\tstate: {\n\t\n\t},\n\tgetters: {\n\t\n\t},\n\tmutations: {\n\t\n\t},\n\tactions: {\n\t\n\t}\n})\n```\n\n##### 应用配置\n\n```\nVue.config\t\t\t\t\t->\tapp.config\n\nVue.config.ignoredElements\t->\tapp.config.ignoredElements\t\n\nVue.component\t\t\t\t->\tapp.component\t\n\nVue.directive\t\t\t\t->\tapp.directive\t\n\nVue.mixin\t\t\t\t\t->\tapp.mixin\t\n\nVue.use\t\t\t\t\t\t->\tapp.use\t\n```\n\nconfig: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。\n\n```\nconst app = Vue.createApp({});\napp.config = {...}\n```\n\n1. devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true\n\n2. errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) => {}\n\n3. warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) => {};\n\n4. globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.\n\n   ```\n   // Vue2.x\n   Vue.prototype.name = 'zhang_san'\n   // Vue3.x\n   app.config.globalProperties.name = 'zhang_san'\n   app.component('child-component', {\n   \tmounted(){\n   \t\tconsole.log(this.name)\n   \t}\n   })\n   ```\n\n5. isCustomElement (类型: (tag: string) => boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag => tag.startsWith('ion');\n\n##### 挂载应用程序\n\n```\nimport { createApp } from 'vue';\nimport App from './App.vue'; \nconst app = createApp(App);\napp.mount( #app'); \n```\n\n##### 注册全局组件\n\n```\nimport { createApp } from 'vue';\nconst app = createApp({});\n// myComponent为组件实例\napp.component('my-component, myComponent);\n//重置组件\nconst MyComponent = app.component('my-component', {});\n```\n\n##### 新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\n\n参数: Object | () => Object.\n\n概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。\n\n用例：\n\n```\nimport { createApp } from 'vue' ;\n//全局注入数据\nconst app = createApp({\n\tprocide: {\n\t\tuser: 'zhang_san'\n\t}\n});\n// 获取数据\napp.component(‘my-component', {\n\tinject: [ 'user'],\n\tdata() {...}\n});\n```\n\n##### 全局方法\n\n```\n// Vue2.x\nimport Vue from 'vue';\nVue.nextTick(()=>{ ... })\n// 或者\nexport default {\n\t...\n\tthis.$nextTick(()=>{ ... })\n\t...\n}\n\n// Vue3.x\nimport { nextTick } from 'vue';\nexport default {\n\t...\n\tnextTick(()=>{ ... })\n\t...\n}\n```\n\n##### 自定义指令：directive\n\nVue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）\n\n1. bind\t\t\t\t\t\t\t->\tbeforeMount（挂载前）\n2. inserted\t\t\t\t\t\t->\tmounted（挂载后）\n3. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUpdate（新增，更新前）\n4. update\t\t\t\t\t\t\t->\t删除\n5. componentUpdate\t\t->\tupdate（更新后）\n6. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUnmounted（新增，卸载前）\n7. unbind\t\t\t\t\t\t\t->\tunmounted（卸载后）\n\n##### 跨组件通讯\n\nvue2.x eventBus\n\nVue3.x 中全局事件总成将使用mitt来实现跨组件通讯。\n\n使用**mitt**之前先安装mitt模块**npm install --save mitt**\n\n```\nimport mitt from 'mitt'\nconst VueEvent = mitt()\n\nexport default VueEvent;\n```\n\n\n\n```\n<template>\n\t<div>\n\t\t<button @click=\"doLogin\">父子组件传值</button>\n\t</div>\n</template>\n\n<script>\nimport VueEvent from '../model/event'\n\nexport default {\n\tdata(){\n\t\treturn {}\n\t},\n\tmethods:{\n\t\tdoLogin(){\n\t\t\tVueEvent.emit('login')\n\t\t}\n\t}\n}\n</script>\n```\n\n```\n<template>\n用户登录组件\n</template>\n\n<script>\nimport VueEvent from '../model/event'\nexport default {\n\tmounted(){\n\t\tVueEvent.on('login',() => {\n\t\t\talert('doLogin')\n\t\t})\n\t}\n}\n</script>\n```\n\n##### Vue3.x组件自定义事件验证\n\n父组件\n\n```\n<template>\n\t<div>\n\t\t<login @submit=\"getChild\"></login>\n\t</div>\n</template>\n\n<script>\nimport Login from \"./Login\"\nexport default {\n\tdata(){\n\t\treturn {\n\t\t\ttitle: 'hello vue'\n\t\t}\n\t},\n\tcomponents:{\n\t\tLogin\n\t},\n\tmethods:{\n\t\tgetChild(data){\n\t\t\talert(data)\n\t\t}\n\t}\n}\n</script>\n```\n\n子组件\n\n```\n<template>\n\t<input type=\"text\" v-model=\"username\" />\n\t<br>\n\t<input type=\"text\" v-model=\"password\" />\n\t<br>\n\n\t<button @click=\"run\">通过广播方式实现子组件给父组件传值</button>\n</template>\n\n<script>\nexport default {\n\t// 建议定义所有发出的事件，以便更好地记录组件应该如何工作\n\temits: {\n\t\tsubmit :({\n\t\t\tusername,\n\t\t\tpassword\n\t\t}) => {\n\t\t\tif (username && password) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"传入的参数不能为空\")\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\tdata(){\n\t\treturn {\n\t\t\tusername: '张三',\n\t\t\tpassword: ''\n\t\t}\n\t},\n\tmethods:{\n\t\trun(){\n\t\t\tthis.$emit('submit',{\n\t\t\t\tusername: this.username,\n\t\t\t\tpassword: this.password\n\t\t\t})\n\t\t}\n\t}\n}\n</script>\n```\n\n","source":"_posts/vue3对比vue2.md","raw":"---\ntitle: vue3对比vue2\ndate: 2021-11-02 16:55:26\ntags: vue3对比vue2\ncategories: vue\n---\n\n##### 使用vue-cli4.0创建项目\n\n先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0\n\n**安装**vue-cli npm install -g @vue/cli\n\n**更新**vue-cli npm update -g @vue/cli\n\n**创建项目：**\n\nvue create vue3-demo\n\ncd vue3-demo\n\nyarn serve\n\n**升级vue2项目**\n\nyarn add vue-next\n\n##### 创建vue3项目-vite方式\n\nnpm init vite-app <project-name>\n\ncd <project-name>\n\nyarn\n\nyarn dev\n\n\n\n**vite**是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动\n\n- 快速的冷启动，不需要等待打包操作\n- 即时的热模块更新，替换性能和模块数量的解耦让更新飞起\n- 真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变\n\n##### 生命周期的变化\n\n| vue2.x          | vue3.x            |\n| --------------- | ----------------- |\n| beforeCreate    | 移除(setup)       |\n| created         | 移除(setup)       |\n| beforeMount     | onBeforeMount     |\n| mounted         | onMounted         |\n| beforeUpdate    | onBeforeUpdate    |\n| updated         | onUpdated         |\n| beforeUnmounte  | onBeforeUnmounte  |\n| unmounted       | onUnmounted       |\n| errorCaptured   | onErrorCaptured   |\n| renderTracked   | onRenderTracked   |\n| renderTriggered | onRenderTriggered |\n\n```\nimpor { onMounted } from 'vue';\nexport default {\n\tsetup(){\n\t\tonMounted(() => {\n\t\t\tconsole.log('component is mounted')\n\t\t})\n\t}\n}\n```\n\n##### main.js中变化 新增全局API: createApp()\n\nvue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例\n\n```\nimport { createApp } from 'vue';\nconst app = createApp({});\n```\n\n##### router.js\n\nvue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。\n\n```\nimport { createRouter, createWebHashHistory } from 'vue-router';\n\nconst routes = [\n\t{\n\t\tname: 'homepage',\n\t\tpath: '/homepage',\n\t\tcomponent: () => import('../views/homepage/index.vue')\n\t}\n];\n\nconst router = createRouter({\n\thistory: createWebHashHistory(),\n\troutes\n})\n\nexport default router;\n```\n\n##### vuex\n\nvue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。\n\n```\nimport { createStore } from 'vuex';\n\nexport default createStore({\n\tstate: {\n\t\n\t},\n\tgetters: {\n\t\n\t},\n\tmutations: {\n\t\n\t},\n\tactions: {\n\t\n\t}\n})\n```\n\n##### 应用配置\n\n```\nVue.config\t\t\t\t\t->\tapp.config\n\nVue.config.ignoredElements\t->\tapp.config.ignoredElements\t\n\nVue.component\t\t\t\t->\tapp.component\t\n\nVue.directive\t\t\t\t->\tapp.directive\t\n\nVue.mixin\t\t\t\t\t->\tapp.mixin\t\n\nVue.use\t\t\t\t\t\t->\tapp.use\t\n```\n\nconfig: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。\n\n```\nconst app = Vue.createApp({});\napp.config = {...}\n```\n\n1. devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true\n\n2. errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) => {}\n\n3. warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) => {};\n\n4. globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.\n\n   ```\n   // Vue2.x\n   Vue.prototype.name = 'zhang_san'\n   // Vue3.x\n   app.config.globalProperties.name = 'zhang_san'\n   app.component('child-component', {\n   \tmounted(){\n   \t\tconsole.log(this.name)\n   \t}\n   })\n   ```\n\n5. isCustomElement (类型: (tag: string) => boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag => tag.startsWith('ion');\n\n##### 挂载应用程序\n\n```\nimport { createApp } from 'vue';\nimport App from './App.vue'; \nconst app = createApp(App);\napp.mount( #app'); \n```\n\n##### 注册全局组件\n\n```\nimport { createApp } from 'vue';\nconst app = createApp({});\n// myComponent为组件实例\napp.component('my-component, myComponent);\n//重置组件\nconst MyComponent = app.component('my-component', {});\n```\n\n##### 新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\n\n参数: Object | () => Object.\n\n概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。\n\n用例：\n\n```\nimport { createApp } from 'vue' ;\n//全局注入数据\nconst app = createApp({\n\tprocide: {\n\t\tuser: 'zhang_san'\n\t}\n});\n// 获取数据\napp.component(‘my-component', {\n\tinject: [ 'user'],\n\tdata() {...}\n});\n```\n\n##### 全局方法\n\n```\n// Vue2.x\nimport Vue from 'vue';\nVue.nextTick(()=>{ ... })\n// 或者\nexport default {\n\t...\n\tthis.$nextTick(()=>{ ... })\n\t...\n}\n\n// Vue3.x\nimport { nextTick } from 'vue';\nexport default {\n\t...\n\tnextTick(()=>{ ... })\n\t...\n}\n```\n\n##### 自定义指令：directive\n\nVue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）\n\n1. bind\t\t\t\t\t\t\t->\tbeforeMount（挂载前）\n2. inserted\t\t\t\t\t\t->\tmounted（挂载后）\n3. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUpdate（新增，更新前）\n4. update\t\t\t\t\t\t\t->\t删除\n5. componentUpdate\t\t->\tupdate（更新后）\n6. ​\t\t\t\t\t\t\t\t\t\t->\tbeforeUnmounted（新增，卸载前）\n7. unbind\t\t\t\t\t\t\t->\tunmounted（卸载后）\n\n##### 跨组件通讯\n\nvue2.x eventBus\n\nVue3.x 中全局事件总成将使用mitt来实现跨组件通讯。\n\n使用**mitt**之前先安装mitt模块**npm install --save mitt**\n\n```\nimport mitt from 'mitt'\nconst VueEvent = mitt()\n\nexport default VueEvent;\n```\n\n\n\n```\n<template>\n\t<div>\n\t\t<button @click=\"doLogin\">父子组件传值</button>\n\t</div>\n</template>\n\n<script>\nimport VueEvent from '../model/event'\n\nexport default {\n\tdata(){\n\t\treturn {}\n\t},\n\tmethods:{\n\t\tdoLogin(){\n\t\t\tVueEvent.emit('login')\n\t\t}\n\t}\n}\n</script>\n```\n\n```\n<template>\n用户登录组件\n</template>\n\n<script>\nimport VueEvent from '../model/event'\nexport default {\n\tmounted(){\n\t\tVueEvent.on('login',() => {\n\t\t\talert('doLogin')\n\t\t})\n\t}\n}\n</script>\n```\n\n##### Vue3.x组件自定义事件验证\n\n父组件\n\n```\n<template>\n\t<div>\n\t\t<login @submit=\"getChild\"></login>\n\t</div>\n</template>\n\n<script>\nimport Login from \"./Login\"\nexport default {\n\tdata(){\n\t\treturn {\n\t\t\ttitle: 'hello vue'\n\t\t}\n\t},\n\tcomponents:{\n\t\tLogin\n\t},\n\tmethods:{\n\t\tgetChild(data){\n\t\t\talert(data)\n\t\t}\n\t}\n}\n</script>\n```\n\n子组件\n\n```\n<template>\n\t<input type=\"text\" v-model=\"username\" />\n\t<br>\n\t<input type=\"text\" v-model=\"password\" />\n\t<br>\n\n\t<button @click=\"run\">通过广播方式实现子组件给父组件传值</button>\n</template>\n\n<script>\nexport default {\n\t// 建议定义所有发出的事件，以便更好地记录组件应该如何工作\n\temits: {\n\t\tsubmit :({\n\t\t\tusername,\n\t\t\tpassword\n\t\t}) => {\n\t\t\tif (username && password) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"传入的参数不能为空\")\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\tdata(){\n\t\treturn {\n\t\t\tusername: '张三',\n\t\t\tpassword: ''\n\t\t}\n\t},\n\tmethods:{\n\t\trun(){\n\t\t\tthis.$emit('submit',{\n\t\t\t\tusername: this.username,\n\t\t\t\tpassword: this.password\n\t\t\t})\n\t\t}\n\t}\n}\n</script>\n```\n\n","slug":"vue3对比vue2","published":1,"updated":"2021-11-10T13:17:18.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6ey000b0gfz86hfhjei","content":"<h5 id=\"使用vue-cli4-0创建项目\"><a href=\"#使用vue-cli4-0创建项目\" class=\"headerlink\" title=\"使用vue-cli4.0创建项目\"></a>使用vue-cli4.0创建项目</h5><p>先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0</p>\n<p><strong>安装</strong>vue-cli npm install -g @vue/cli</p>\n<p><strong>更新</strong>vue-cli npm update -g @vue/cli</p>\n<p><strong>创建项目：</strong></p>\n<p>vue create vue3-demo</p>\n<p>cd vue3-demo</p>\n<p>yarn serve</p>\n<p><strong>升级vue2项目</strong></p>\n<p>yarn add vue-next</p>\n<h5 id=\"创建vue3项目-vite方式\"><a href=\"#创建vue3项目-vite方式\" class=\"headerlink\" title=\"创建vue3项目-vite方式\"></a>创建vue3项目-vite方式</h5><p>npm init vite-app <project-name></project-name></p>\n<p>cd <project-name></project-name></p>\n<p>yarn</p>\n<p>yarn dev</p>\n<p><strong>vite</strong>是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动</p>\n<ul>\n<li>快速的冷启动，不需要等待打包操作</li>\n<li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li>\n<li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变</li>\n</ul>\n<h5 id=\"生命周期的变化\"><a href=\"#生命周期的变化\" class=\"headerlink\" title=\"生命周期的变化\"></a>生命周期的变化</h5><table>\n<thead>\n<tr>\n<th>vue2.x</th>\n<th>vue3.x</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beforeCreate</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>created</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n</tr>\n<tr>\n<td>beforeUnmounte</td>\n<td>onBeforeUnmounte</td>\n</tr>\n<tr>\n<td>unmounted</td>\n<td>onUnmounted</td>\n</tr>\n<tr>\n<td>errorCaptured</td>\n<td>onErrorCaptured</td>\n</tr>\n<tr>\n<td>renderTracked</td>\n<td>onRenderTracked</td>\n</tr>\n<tr>\n<td>renderTriggered</td>\n<td>onRenderTriggered</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impor &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tsetup()&#123;</span><br><span class=\"line\">\t\tonMounted(() =&gt; &#123;</span><br><span class=\"line\">\t\t\tconsole.log(&#x27;component is mounted&#x27;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"main-js中变化-新增全局API-createApp\"><a href=\"#main-js中变化-新增全局API-createApp\" class=\"headerlink\" title=\"main.js中变化 新增全局API: createApp()\"></a>main.js中变化 新增全局API: createApp()</h5><p>vue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">const app = createApp(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a>router.js</h5><p>vue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createRouter, createWebHashHistory &#125; from &#x27;vue-router&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const routes = [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname: &#x27;homepage&#x27;,</span><br><span class=\"line\">\t\tpath: &#x27;/homepage&#x27;,</span><br><span class=\"line\">\t\tcomponent: () =&gt; import(&#x27;../views/homepage/index.vue&#x27;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">const router = createRouter(&#123;</span><br><span class=\"line\">\thistory: createWebHashHistory(),</span><br><span class=\"line\">\troutes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default router;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h5><p>vue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore &#125; from &#x27;vuex&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default createStore(&#123;</span><br><span class=\"line\">\tstate: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tgetters: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmutations: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tactions: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"应用配置\"><a href=\"#应用配置\" class=\"headerlink\" title=\"应用配置\"></a>应用配置</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config\t\t\t\t\t-&gt;\tapp.config</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.ignoredElements\t-&gt;\tapp.config.ignoredElements\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component\t\t\t\t-&gt;\tapp.component\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive\t\t\t\t-&gt;\tapp.directive\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.mixin\t\t\t\t\t-&gt;\tapp.mixin\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use\t\t\t\t\t\t-&gt;\tapp.use\t</span><br></pre></td></tr></table></figure>\n\n<p>config: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = Vue.createApp(&#123;&#125;);</span><br><span class=\"line\">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true</p>\n</li>\n<li><p>errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) =&gt; {}</p>\n</li>\n<li><p>warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) =&gt; {};</p>\n</li>\n<li><p>globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue2.x</span><br><span class=\"line\">Vue.prototype.name = &#x27;zhang_san&#x27;</span><br><span class=\"line\">// Vue3.x</span><br><span class=\"line\">app.config.globalProperties.name = &#x27;zhang_san&#x27;</span><br><span class=\"line\">app.component(&#x27;child-component&#x27;, &#123;</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\t\tconsole.log(this.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>isCustomElement (类型: (tag: string) =&gt; boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag =&gt; tag.startsWith(‘ion’);</p>\n</li>\n</ol>\n<h5 id=\"挂载应用程序\"><a href=\"#挂载应用程序\" class=\"headerlink\" title=\"挂载应用程序\"></a>挂载应用程序</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;; </span><br><span class=\"line\">const app = createApp(App);</span><br><span class=\"line\">app.mount( #app&#x27;); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">const app = createApp(&#123;&#125;);</span><br><span class=\"line\">// myComponent为组件实例</span><br><span class=\"line\">app.component(&#x27;my-component, myComponent);</span><br><span class=\"line\">//重置组件</span><br><span class=\"line\">const MyComponent = app.component(&#x27;my-component&#x27;, &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\"><a href=\"#新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\" class=\"headerlink\" title=\"新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\"></a>新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)</h5><p>参数: Object | () =&gt; Object.</p>\n<p>概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。</p>\n<p>用例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27; ;</span><br><span class=\"line\">//全局注入数据</span><br><span class=\"line\">const app = createApp(&#123;</span><br><span class=\"line\">\tprocide: &#123;</span><br><span class=\"line\">\t\tuser: &#x27;zhang_san&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 获取数据</span><br><span class=\"line\">app.component(‘my-component&#x27;, &#123;</span><br><span class=\"line\">\tinject: [ &#x27;user&#x27;],</span><br><span class=\"line\">\tdata() &#123;...&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"全局方法\"><a href=\"#全局方法\" class=\"headerlink\" title=\"全局方法\"></a>全局方法</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue2.x</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;;</span><br><span class=\"line\">Vue.nextTick(()=&gt;&#123; ... &#125;)</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tthis.$nextTick(()=&gt;&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Vue3.x</span><br><span class=\"line\">import &#123; nextTick &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tnextTick(()=&gt;&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"自定义指令：directive\"><a href=\"#自定义指令：directive\" class=\"headerlink\" title=\"自定义指令：directive\"></a>自定义指令：directive</h5><p>Vue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）</p>\n<ol>\n<li>bind                            -&gt;    beforeMount（挂载前）</li>\n<li>inserted                        -&gt;    mounted（挂载后）</li>\n<li>​                                        -&gt;    beforeUpdate（新增，更新前）</li>\n<li>update                            -&gt;    删除</li>\n<li>componentUpdate        -&gt;    update（更新后）</li>\n<li>​                                        -&gt;    beforeUnmounted（新增，卸载前）</li>\n<li>unbind                            -&gt;    unmounted（卸载后）</li>\n</ol>\n<h5 id=\"跨组件通讯\"><a href=\"#跨组件通讯\" class=\"headerlink\" title=\"跨组件通讯\"></a>跨组件通讯</h5><p>vue2.x eventBus</p>\n<p>Vue3.x 中全局事件总成将使用mitt来实现跨组件通讯。</p>\n<p>使用<strong>mitt</strong>之前先安装mitt模块<strong>npm install –save mitt</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">const VueEvent = mitt()</span><br><span class=\"line\"></span><br><span class=\"line\">export default VueEvent;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;button @click=&quot;doLogin&quot;&gt;父子组件传值&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import VueEvent from &#x27;../model/event&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\treturn &#123;&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tdoLogin()&#123;</span><br><span class=\"line\">\t\t\tVueEvent.emit(&#x27;login&#x27;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">用户登录组件</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import VueEvent from &#x27;../model/event&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\t\tVueEvent.on(&#x27;login&#x27;,() =&gt; &#123;</span><br><span class=\"line\">\t\t\talert(&#x27;doLogin&#x27;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3-x组件自定义事件验证\"><a href=\"#Vue3-x组件自定义事件验证\" class=\"headerlink\" title=\"Vue3.x组件自定义事件验证\"></a>Vue3.x组件自定义事件验证</h5><p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;login @submit=&quot;getChild&quot;&gt;&lt;/login&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Login from &quot;./Login&quot;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\ttitle: &#x27;hello vue&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcomponents:&#123;</span><br><span class=\"line\">\t\tLogin</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tgetChild(data)&#123;</span><br><span class=\"line\">\t\t\talert(data)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;text&quot; v-model=&quot;username&quot; /&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;text&quot; v-model=&quot;password&quot; /&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;button @click=&quot;run&quot;&gt;通过广播方式实现子组件给父组件传值&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\t// 建议定义所有发出的事件，以便更好地记录组件应该如何工作</span><br><span class=\"line\">\temits: &#123;</span><br><span class=\"line\">\t\tsubmit :(&#123;</span><br><span class=\"line\">\t\t\tusername,</span><br><span class=\"line\">\t\t\tpassword</span><br><span class=\"line\">\t\t&#125;) =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (username &amp;&amp; password) &#123;</span><br><span class=\"line\">\t\t\t\treturn true</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tconsole.warn(&quot;传入的参数不能为空&quot;)</span><br><span class=\"line\">\t\t\t\treturn false</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\tusername: &#x27;张三&#x27;,</span><br><span class=\"line\">\t\t\tpassword: &#x27;&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\trun()&#123;</span><br><span class=\"line\">\t\t\tthis.$emit(&#x27;submit&#x27;,&#123;</span><br><span class=\"line\">\t\t\t\tusername: this.username,</span><br><span class=\"line\">\t\t\t\tpassword: this.password</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"使用vue-cli4-0创建项目\"><a href=\"#使用vue-cli4-0创建项目\" class=\"headerlink\" title=\"使用vue-cli4.0创建项目\"></a>使用vue-cli4.0创建项目</h5><p>先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0</p>\n<p><strong>安装</strong>vue-cli npm install -g @vue/cli</p>\n<p><strong>更新</strong>vue-cli npm update -g @vue/cli</p>\n<p><strong>创建项目：</strong></p>\n<p>vue create vue3-demo</p>\n<p>cd vue3-demo</p>\n<p>yarn serve</p>\n<p><strong>升级vue2项目</strong></p>\n<p>yarn add vue-next</p>\n<h5 id=\"创建vue3项目-vite方式\"><a href=\"#创建vue3项目-vite方式\" class=\"headerlink\" title=\"创建vue3项目-vite方式\"></a>创建vue3项目-vite方式</h5><p>npm init vite-app <project-name></project-name></p>\n<p>cd <project-name></project-name></p>\n<p>yarn</p>\n<p>yarn dev</p>\n<p><strong>vite</strong>是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动</p>\n<ul>\n<li>快速的冷启动，不需要等待打包操作</li>\n<li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li>\n<li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变</li>\n</ul>\n<h5 id=\"生命周期的变化\"><a href=\"#生命周期的变化\" class=\"headerlink\" title=\"生命周期的变化\"></a>生命周期的变化</h5><table>\n<thead>\n<tr>\n<th>vue2.x</th>\n<th>vue3.x</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beforeCreate</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>created</td>\n<td>移除(setup)</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>onBeforeMount</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>onMounted</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>onBeforeUpdate</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>onUpdated</td>\n</tr>\n<tr>\n<td>beforeUnmounte</td>\n<td>onBeforeUnmounte</td>\n</tr>\n<tr>\n<td>unmounted</td>\n<td>onUnmounted</td>\n</tr>\n<tr>\n<td>errorCaptured</td>\n<td>onErrorCaptured</td>\n</tr>\n<tr>\n<td>renderTracked</td>\n<td>onRenderTracked</td>\n</tr>\n<tr>\n<td>renderTriggered</td>\n<td>onRenderTriggered</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impor &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tsetup()&#123;</span><br><span class=\"line\">\t\tonMounted(() =&gt; &#123;</span><br><span class=\"line\">\t\t\tconsole.log(&#x27;component is mounted&#x27;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"main-js中变化-新增全局API-createApp\"><a href=\"#main-js中变化-新增全局API-createApp\" class=\"headerlink\" title=\"main.js中变化 新增全局API: createApp()\"></a>main.js中变化 新增全局API: createApp()</h5><p>vue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">const app = createApp(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a>router.js</h5><p>vue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createRouter, createWebHashHistory &#125; from &#x27;vue-router&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const routes = [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname: &#x27;homepage&#x27;,</span><br><span class=\"line\">\t\tpath: &#x27;/homepage&#x27;,</span><br><span class=\"line\">\t\tcomponent: () =&gt; import(&#x27;../views/homepage/index.vue&#x27;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">const router = createRouter(&#123;</span><br><span class=\"line\">\thistory: createWebHashHistory(),</span><br><span class=\"line\">\troutes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default router;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h5><p>vue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore &#125; from &#x27;vuex&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default createStore(&#123;</span><br><span class=\"line\">\tstate: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tgetters: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmutations: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tactions: &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"应用配置\"><a href=\"#应用配置\" class=\"headerlink\" title=\"应用配置\"></a>应用配置</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config\t\t\t\t\t-&gt;\tapp.config</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.ignoredElements\t-&gt;\tapp.config.ignoredElements\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component\t\t\t\t-&gt;\tapp.component\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive\t\t\t\t-&gt;\tapp.directive\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.mixin\t\t\t\t\t-&gt;\tapp.mixin\t</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use\t\t\t\t\t\t-&gt;\tapp.use\t</span><br></pre></td></tr></table></figure>\n\n<p>config: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = Vue.createApp(&#123;&#125;);</span><br><span class=\"line\">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true</p>\n</li>\n<li><p>errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) =&gt; {}</p>\n</li>\n<li><p>warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) =&gt; {};</p>\n</li>\n<li><p>globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue2.x</span><br><span class=\"line\">Vue.prototype.name = &#x27;zhang_san&#x27;</span><br><span class=\"line\">// Vue3.x</span><br><span class=\"line\">app.config.globalProperties.name = &#x27;zhang_san&#x27;</span><br><span class=\"line\">app.component(&#x27;child-component&#x27;, &#123;</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\t\tconsole.log(this.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li><p>isCustomElement (类型: (tag: string) =&gt; boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag =&gt; tag.startsWith(‘ion’);</p>\n</li>\n</ol>\n<h5 id=\"挂载应用程序\"><a href=\"#挂载应用程序\" class=\"headerlink\" title=\"挂载应用程序\"></a>挂载应用程序</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;; </span><br><span class=\"line\">const app = createApp(App);</span><br><span class=\"line\">app.mount( #app&#x27;); </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">const app = createApp(&#123;&#125;);</span><br><span class=\"line\">// myComponent为组件实例</span><br><span class=\"line\">app.component(&#x27;my-component, myComponent);</span><br><span class=\"line\">//重置组件</span><br><span class=\"line\">const MyComponent = app.component(&#x27;my-component&#x27;, &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\"><a href=\"#新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取\" class=\"headerlink\" title=\"新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)\"></a>新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)</h5><p>参数: Object | () =&gt; Object.</p>\n<p>概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。</p>\n<p>用例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createApp &#125; from &#x27;vue&#x27; ;</span><br><span class=\"line\">//全局注入数据</span><br><span class=\"line\">const app = createApp(&#123;</span><br><span class=\"line\">\tprocide: &#123;</span><br><span class=\"line\">\t\tuser: &#x27;zhang_san&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 获取数据</span><br><span class=\"line\">app.component(‘my-component&#x27;, &#123;</span><br><span class=\"line\">\tinject: [ &#x27;user&#x27;],</span><br><span class=\"line\">\tdata() &#123;...&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"全局方法\"><a href=\"#全局方法\" class=\"headerlink\" title=\"全局方法\"></a>全局方法</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue2.x</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;;</span><br><span class=\"line\">Vue.nextTick(()=&gt;&#123; ... &#125;)</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tthis.$nextTick(()=&gt;&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Vue3.x</span><br><span class=\"line\">import &#123; nextTick &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tnextTick(()=&gt;&#123; ... &#125;)</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"自定义指令：directive\"><a href=\"#自定义指令：directive\" class=\"headerlink\" title=\"自定义指令：directive\"></a>自定义指令：directive</h5><p>Vue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）</p>\n<ol>\n<li>bind                            -&gt;    beforeMount（挂载前）</li>\n<li>inserted                        -&gt;    mounted（挂载后）</li>\n<li>​                                        -&gt;    beforeUpdate（新增，更新前）</li>\n<li>update                            -&gt;    删除</li>\n<li>componentUpdate        -&gt;    update（更新后）</li>\n<li>​                                        -&gt;    beforeUnmounted（新增，卸载前）</li>\n<li>unbind                            -&gt;    unmounted（卸载后）</li>\n</ol>\n<h5 id=\"跨组件通讯\"><a href=\"#跨组件通讯\" class=\"headerlink\" title=\"跨组件通讯\"></a>跨组件通讯</h5><p>vue2.x eventBus</p>\n<p>Vue3.x 中全局事件总成将使用mitt来实现跨组件通讯。</p>\n<p>使用<strong>mitt</strong>之前先安装mitt模块<strong>npm install –save mitt</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mitt from &#x27;mitt&#x27;</span><br><span class=\"line\">const VueEvent = mitt()</span><br><span class=\"line\"></span><br><span class=\"line\">export default VueEvent;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;button @click=&quot;doLogin&quot;&gt;父子组件传值&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import VueEvent from &#x27;../model/event&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\treturn &#123;&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tdoLogin()&#123;</span><br><span class=\"line\">\t\t\tVueEvent.emit(&#x27;login&#x27;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">用户登录组件</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import VueEvent from &#x27;../model/event&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\t\tVueEvent.on(&#x27;login&#x27;,() =&gt; &#123;</span><br><span class=\"line\">\t\t\talert(&#x27;doLogin&#x27;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Vue3-x组件自定义事件验证\"><a href=\"#Vue3-x组件自定义事件验证\" class=\"headerlink\" title=\"Vue3.x组件自定义事件验证\"></a>Vue3.x组件自定义事件验证</h5><p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;login @submit=&quot;getChild&quot;&gt;&lt;/login&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Login from &quot;./Login&quot;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\ttitle: &#x27;hello vue&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcomponents:&#123;</span><br><span class=\"line\">\t\tLogin</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tgetChild(data)&#123;</span><br><span class=\"line\">\t\t\talert(data)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;text&quot; v-model=&quot;username&quot; /&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;text&quot; v-model=&quot;password&quot; /&gt;</span><br><span class=\"line\">\t&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;button @click=&quot;run&quot;&gt;通过广播方式实现子组件给父组件传值&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\t// 建议定义所有发出的事件，以便更好地记录组件应该如何工作</span><br><span class=\"line\">\temits: &#123;</span><br><span class=\"line\">\t\tsubmit :(&#123;</span><br><span class=\"line\">\t\t\tusername,</span><br><span class=\"line\">\t\t\tpassword</span><br><span class=\"line\">\t\t&#125;) =&gt; &#123;</span><br><span class=\"line\">\t\t\tif (username &amp;&amp; password) &#123;</span><br><span class=\"line\">\t\t\t\treturn true</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tconsole.warn(&quot;传入的参数不能为空&quot;)</span><br><span class=\"line\">\t\t\t\treturn false</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\tusername: &#x27;张三&#x27;,</span><br><span class=\"line\">\t\t\tpassword: &#x27;&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\trun()&#123;</span><br><span class=\"line\">\t\t\tthis.$emit(&#x27;submit&#x27;,&#123;</span><br><span class=\"line\">\t\t\t\tusername: this.username,</span><br><span class=\"line\">\t\t\t\tpassword: this.password</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue基础","date":"2021-10-08T14:26:02.000Z","_content":"\n##### Setter\n\n```\nvar vm = new Vue({\n el: '#el',\n data: {\n  num: 100,\n }\n computed: {\n  price: {\n   set: function(newValue){\n    this.num = newValue * 100;\n   },\n   get: function() {\n    return (this.num/100).toFixed(2);\n   }\n  }\n }\n});\n```\n\n##### 绑定value\n\n表单控件的值可以绑定在vue实例的动态属性上\n\n```\n<input type=\"checkbox\" v-model=\"checked\" v-bind:true-value=\"a\" v-bind:false-value=\"b\">\n\n// 选中：vm.checked==vm.a\n\n// 未选中：vm.hchecked==vm.b\n```\n\n##### 内联样式绑定\n\n```\n<div v-bind:style=\"dada\"></div>\n\ndata: {\n dada: {\n  color: 'green',\n  fontSize: '10px'\n }\n}\n```\n\n数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。\n\n```\n<div v-bind:style=\"[ styleObjectA, styleObjectB ]\"></div>\n```\n\n##### 列表渲染\n\nv-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。\n\n```\n<li v-for=\"(index,item) in items\">{{index}} – {{$index}} – {{item.title}}</li>\n```\n\n在vue.js中提供了$set方法，修改数据的同时进行试图更新。\n\n```\nthis.$set('item[0]', {title: 'da'})\n\nthis.$set( target, key, value )\n```\n\n##### 内置指令\n\n```\nv-pre指令，表示跳过编译这个元素和子元素，显示原始的{{}}Mustache标签，用来减少编译时间\n```\n\n##### v-for 中使用 key\n\n​\t\t使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；\n\n​\t\t使用key的注意事项：\n\n- 不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）\n- 不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。\n- 如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。\n\n##### v-if/v-else-if/v-else 中使用 key\n\n> 可能很多人都会忽略这个点\n\n​\t\t原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。\n\n> 如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了\n\n​\t\t相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可\n\n```\n  <transition>\n    <button \n      v-if=\"isEditing\"\n      v-on:click=\"isEditing = false\"\n    >\n      Save\n    </button>\n    <button \n      v-else \n      v-on:click=\"isEditing = true\"\n    >\n      Edit\n    </button>\n  </transition>\n```\n\n```\n.v-enter-active, .v-leave-active {\n  transition: all 1s;\n}\n.v-enter, .v-leave-to {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.v-leave-active {\n  position: absolute;\n}\n```\n\n​\t\t例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的\n\n##### v-for 和 v-if 不要一起使用\n\n> 此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整\n>\n> **永远不要把 v-if 和 v-for 同时用在同一个元素上。**\n\n​\t\t原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断\n\n```\n<ul>\n  <li v-for=\"user in users\" v-if=\"user.active\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据\n\n```\n<ul v-if=\"active\">\n  <li v-for=\"user in users\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点\n\n​\t\t如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤\n\n```\n// js\nlet usersActive = computed(()=>users.filter(user => user.active))\n\n// template\n<ul>\n    <li v-for=\"user in usersActive\">\n      {{ user.name }}\n    </li>\n</ul>\n```\n\n##### 使用简单的 计算属性\n\n​\t\tcomputed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算\n\n```\nlet price = computed(()=>{\n  let basePrice = manufactureCost / (1 - profitMargin)\n  return (\n      basePrice -\n      basePrice * (discountPercent || 0)\n  )\n})\n```\n\n​\t\t当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。\n\n```\nlet basePrice = computed(() => manufactureCost / (1 - profitMargin))\nlet discount = computed(() => basePrice * (discountPercent || 0))\nlet finalPrice = computed(() => basePrice - discount)\n```\n\n​\t\t如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice\n\n##### functional 函数式组件**（Vue2）**\n\n优化前\n\n```\n<template> \n    <div class=\"cell\"> \n        <div v-if=\"value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n优化后\n\n```\n<template functional> \n    <div class=\"cell\"> \n        <div v-if=\"props.value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n- 没有this（没有实例）\n- 没有响应式数据\n\n##### 采用合理的数据处理算法\n\n```\n/**\n * 数组转树形结构,时间复杂度O(n)\n * @param list 数组\n * @param idKey 元素id键\n * @param parIdKey 元素父id键\n * @param parId 第一级根节点的父id值\n * @return {[]}\n */\n function listToTree (list,idKey,parIdKey,parId) {\n    let map = {};\n    let result = [];\n    let len = list.length;\n\n    // 构建map\n    for (let i = 0; i < len; i++) {\n        //将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)\n        map[list[i][idKey]] = list[i];\n    }\n\n    // 构建树形数组\n    for(let i=0; i < len; i++) {\n        let itemParId = list[i][parIdKey];\n        // 顶级节点\n        if(itemParId === parId) {\n            result.push(list[i]);\n            continue;\n        }\n        // 孤儿节点，舍弃(不存在其父节点)\n        if(!map[itemParId]){\n            continue;\n        }\n        // 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）\n        if(map[itemParId].children) {\n            map[itemParId].children.push(list[i]);\n        } else {\n            map[itemParId].children = [list[i]];\n        }\n    }\n    return result;\n}\n```\n\n","source":"_posts/vue基础.md","raw":"---\ntitle: vue基础\ndate: 2021-10-08 22:26:02\ntags: vue基础\ncategories: vue\n---\n\n##### Setter\n\n```\nvar vm = new Vue({\n el: '#el',\n data: {\n  num: 100,\n }\n computed: {\n  price: {\n   set: function(newValue){\n    this.num = newValue * 100;\n   },\n   get: function() {\n    return (this.num/100).toFixed(2);\n   }\n  }\n }\n});\n```\n\n##### 绑定value\n\n表单控件的值可以绑定在vue实例的动态属性上\n\n```\n<input type=\"checkbox\" v-model=\"checked\" v-bind:true-value=\"a\" v-bind:false-value=\"b\">\n\n// 选中：vm.checked==vm.a\n\n// 未选中：vm.hchecked==vm.b\n```\n\n##### 内联样式绑定\n\n```\n<div v-bind:style=\"dada\"></div>\n\ndata: {\n dada: {\n  color: 'green',\n  fontSize: '10px'\n }\n}\n```\n\n数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。\n\n```\n<div v-bind:style=\"[ styleObjectA, styleObjectB ]\"></div>\n```\n\n##### 列表渲染\n\nv-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。\n\n```\n<li v-for=\"(index,item) in items\">{{index}} – {{$index}} – {{item.title}}</li>\n```\n\n在vue.js中提供了$set方法，修改数据的同时进行试图更新。\n\n```\nthis.$set('item[0]', {title: 'da'})\n\nthis.$set( target, key, value )\n```\n\n##### 内置指令\n\n```\nv-pre指令，表示跳过编译这个元素和子元素，显示原始的{{}}Mustache标签，用来减少编译时间\n```\n\n##### v-for 中使用 key\n\n​\t\t使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；\n\n​\t\t使用key的注意事项：\n\n- 不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）\n- 不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。\n- 如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。\n\n##### v-if/v-else-if/v-else 中使用 key\n\n> 可能很多人都会忽略这个点\n\n​\t\t原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。\n\n> 如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了\n\n​\t\t相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可\n\n```\n  <transition>\n    <button \n      v-if=\"isEditing\"\n      v-on:click=\"isEditing = false\"\n    >\n      Save\n    </button>\n    <button \n      v-else \n      v-on:click=\"isEditing = true\"\n    >\n      Edit\n    </button>\n  </transition>\n```\n\n```\n.v-enter-active, .v-leave-active {\n  transition: all 1s;\n}\n.v-enter, .v-leave-to {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.v-leave-active {\n  position: absolute;\n}\n```\n\n​\t\t例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的\n\n##### v-for 和 v-if 不要一起使用\n\n> 此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整\n>\n> **永远不要把 v-if 和 v-for 同时用在同一个元素上。**\n\n​\t\t原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断\n\n```\n<ul>\n  <li v-for=\"user in users\" v-if=\"user.active\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据\n\n```\n<ul v-if=\"active\">\n  <li v-for=\"user in users\">\n    {{ user.name }}\n  </li>\n</ul>\n```\n\n​\t\t如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点\n\n​\t\t如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤\n\n```\n// js\nlet usersActive = computed(()=>users.filter(user => user.active))\n\n// template\n<ul>\n    <li v-for=\"user in usersActive\">\n      {{ user.name }}\n    </li>\n</ul>\n```\n\n##### 使用简单的 计算属性\n\n​\t\tcomputed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算\n\n```\nlet price = computed(()=>{\n  let basePrice = manufactureCost / (1 - profitMargin)\n  return (\n      basePrice -\n      basePrice * (discountPercent || 0)\n  )\n})\n```\n\n​\t\t当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。\n\n```\nlet basePrice = computed(() => manufactureCost / (1 - profitMargin))\nlet discount = computed(() => basePrice * (discountPercent || 0))\nlet finalPrice = computed(() => basePrice - discount)\n```\n\n​\t\t如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice\n\n##### functional 函数式组件**（Vue2）**\n\n优化前\n\n```\n<template> \n    <div class=\"cell\"> \n        <div v-if=\"value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n优化后\n\n```\n<template functional> \n    <div class=\"cell\"> \n        <div v-if=\"props.value\" class=\"on\"></div> \n        <section v-else class=\"off\"></section> \n    </div> \n</template> \n\n<script> \nexport default { \n    props: ['value'], \n} \n</script>\n```\n\n- 没有this（没有实例）\n- 没有响应式数据\n\n##### 采用合理的数据处理算法\n\n```\n/**\n * 数组转树形结构,时间复杂度O(n)\n * @param list 数组\n * @param idKey 元素id键\n * @param parIdKey 元素父id键\n * @param parId 第一级根节点的父id值\n * @return {[]}\n */\n function listToTree (list,idKey,parIdKey,parId) {\n    let map = {};\n    let result = [];\n    let len = list.length;\n\n    // 构建map\n    for (let i = 0; i < len; i++) {\n        //将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)\n        map[list[i][idKey]] = list[i];\n    }\n\n    // 构建树形数组\n    for(let i=0; i < len; i++) {\n        let itemParId = list[i][parIdKey];\n        // 顶级节点\n        if(itemParId === parId) {\n            result.push(list[i]);\n            continue;\n        }\n        // 孤儿节点，舍弃(不存在其父节点)\n        if(!map[itemParId]){\n            continue;\n        }\n        // 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）\n        if(map[itemParId].children) {\n            map[itemParId].children.push(list[i]);\n        } else {\n            map[itemParId].children = [list[i]];\n        }\n    }\n    return result;\n}\n```\n\n","slug":"vue基础","published":1,"updated":"2021-10-28T13:52:19.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6ez000e0gfz72btgcc4","content":"<h5 id=\"Setter\"><a href=\"#Setter\" class=\"headerlink\" title=\"Setter\"></a>Setter</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\"> el: &#x27;#el&#x27;,</span><br><span class=\"line\"> data: &#123;</span><br><span class=\"line\">  num: 100,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">  price: &#123;</span><br><span class=\"line\">   set: function(newValue)&#123;</span><br><span class=\"line\">    this.num = newValue * 100;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   get: function() &#123;</span><br><span class=\"line\">    return (this.num/100).toFixed(2);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"绑定value\"><a href=\"#绑定value\" class=\"headerlink\" title=\"绑定value\"></a>绑定value</h5><p>表单控件的值可以绑定在vue实例的动态属性上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;checkbox&quot; v-model=&quot;checked&quot; v-bind:true-value=&quot;a&quot; v-bind:false-value=&quot;b&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 选中：vm.checked==vm.a</span><br><span class=\"line\"></span><br><span class=\"line\">// 未选中：vm.hchecked==vm.b</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内联样式绑定\"><a href=\"#内联样式绑定\" class=\"headerlink\" title=\"内联样式绑定\"></a>内联样式绑定</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=&quot;dada&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\"> dada: &#123;</span><br><span class=\"line\">  color: &#x27;green&#x27;,</span><br><span class=\"line\">  fontSize: &#x27;10px&#x27;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=&quot;[ styleObjectA, styleObjectB ]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h5><p>v-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-for=&quot;(index,item) in items&quot;&gt;&#123;&#123;index&#125;&#125; – &#123;&#123;$index&#125;&#125; – &#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在vue.js中提供了$set方法，修改数据的同时进行试图更新。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$set(&#x27;item[0]&#x27;, &#123;title: &#x27;da&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">this.$set( target, key, value )</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-pre指令，表示跳过编译这个元素和子元素，显示原始的&#123;&#123;&#125;&#125;Mustache标签，用来减少编译时间</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"v-for-中使用-key\"><a href=\"#v-for-中使用-key\" class=\"headerlink\" title=\"v-for 中使用 key\"></a>v-for 中使用 key</h5><p>​        使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；</p>\n<p>​        使用key的注意事项：</p>\n<ul>\n<li>不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）</li>\n<li>不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。</li>\n<li>如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。</li>\n</ul>\n<h5 id=\"v-if-v-else-if-v-else-中使用-key\"><a href=\"#v-if-v-else-if-v-else-中使用-key\" class=\"headerlink\" title=\"v-if/v-else-if/v-else 中使用 key\"></a>v-if/v-else-if/v-else 中使用 key</h5><blockquote>\n<p>可能很多人都会忽略这个点</p>\n</blockquote>\n<p>​        原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。</p>\n<blockquote>\n<p>如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了</p>\n</blockquote>\n<p>​        相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition&gt;</span><br><span class=\"line\">  &lt;button </span><br><span class=\"line\">    v-if=&quot;isEditing&quot;</span><br><span class=\"line\">    v-on:click=&quot;isEditing = false&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    Save</span><br><span class=\"line\">  &lt;/button&gt;</span><br><span class=\"line\">  &lt;button </span><br><span class=\"line\">    v-else </span><br><span class=\"line\">    v-on:click=&quot;isEditing = true&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    Edit</span><br><span class=\"line\">  &lt;/button&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.v-enter-active, .v-leave-active &#123;</span><br><span class=\"line\">  transition: all 1s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-enter, .v-leave-to &#123;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: translateY(30px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的</p>\n<h5 id=\"v-for-和-v-if-不要一起使用\"><a href=\"#v-for-和-v-if-不要一起使用\" class=\"headerlink\" title=\"v-for 和 v-if 不要一起使用\"></a>v-for 和 v-if 不要一起使用</h5><blockquote>\n<p>此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整</p>\n<p><strong>永远不要把 v-if 和 v-for 同时用在同一个元素上。</strong></p>\n</blockquote>\n<p>​        原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for=&quot;user in users&quot; v-if=&quot;user.active&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​        我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul v-if=&quot;active&quot;&gt;</span><br><span class=\"line\">  &lt;li v-for=&quot;user in users&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​        如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点</p>\n<p>​        如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js</span><br><span class=\"line\">let usersActive = computed(()=&gt;users.filter(user =&gt; user.active))</span><br><span class=\"line\"></span><br><span class=\"line\">// template</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for=&quot;user in usersActive&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用简单的-计算属性\"><a href=\"#使用简单的-计算属性\" class=\"headerlink\" title=\"使用简单的 计算属性\"></a>使用简单的 计算属性</h5><p>​        computed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let price = computed(()=&gt;&#123;</span><br><span class=\"line\">  let basePrice = manufactureCost / (1 - profitMargin)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">      basePrice -</span><br><span class=\"line\">      basePrice * (discountPercent || 0)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>​        当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let basePrice = computed(() =&gt; manufactureCost / (1 - profitMargin))</span><br><span class=\"line\">let discount = computed(() =&gt; basePrice * (discountPercent || 0))</span><br><span class=\"line\">let finalPrice = computed(() =&gt; basePrice - discount)</span><br></pre></td></tr></table></figure>\n\n<p>​        如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice</p>\n<h5 id=\"functional-函数式组件（Vue2）\"><a href=\"#functional-函数式组件（Vue2）\" class=\"headerlink\" title=\"functional 函数式组件（Vue2）\"></a>functional 函数式组件<strong>（Vue2）</strong></h5><p>优化前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优化后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template functional&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;props.value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有this（没有实例）</li>\n<li>没有响应式数据</li>\n</ul>\n<h5 id=\"采用合理的数据处理算法\"><a href=\"#采用合理的数据处理算法\" class=\"headerlink\" title=\"采用合理的数据处理算法\"></a>采用合理的数据处理算法</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 数组转树形结构,时间复杂度O(n)</span><br><span class=\"line\"> * @param list 数组</span><br><span class=\"line\"> * @param idKey 元素id键</span><br><span class=\"line\"> * @param parIdKey 元素父id键</span><br><span class=\"line\"> * @param parId 第一级根节点的父id值</span><br><span class=\"line\"> * @return &#123;[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"> function listToTree (list,idKey,parIdKey,parId) &#123;</span><br><span class=\"line\">    let map = &#123;&#125;;</span><br><span class=\"line\">    let result = [];</span><br><span class=\"line\">    let len = list.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构建map</span><br><span class=\"line\">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        //将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)</span><br><span class=\"line\">        map[list[i][idKey]] = list[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构建树形数组</span><br><span class=\"line\">    for(let i=0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        let itemParId = list[i][parIdKey];</span><br><span class=\"line\">        // 顶级节点</span><br><span class=\"line\">        if(itemParId === parId) &#123;</span><br><span class=\"line\">            result.push(list[i]);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 孤儿节点，舍弃(不存在其父节点)</span><br><span class=\"line\">        if(!map[itemParId])&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）</span><br><span class=\"line\">        if(map[itemParId].children) &#123;</span><br><span class=\"line\">            map[itemParId].children.push(list[i]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            map[itemParId].children = [list[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"Setter\"><a href=\"#Setter\" class=\"headerlink\" title=\"Setter\"></a>Setter</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\"> el: &#x27;#el&#x27;,</span><br><span class=\"line\"> data: &#123;</span><br><span class=\"line\">  num: 100,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">  price: &#123;</span><br><span class=\"line\">   set: function(newValue)&#123;</span><br><span class=\"line\">    this.num = newValue * 100;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   get: function() &#123;</span><br><span class=\"line\">    return (this.num/100).toFixed(2);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"绑定value\"><a href=\"#绑定value\" class=\"headerlink\" title=\"绑定value\"></a>绑定value</h5><p>表单控件的值可以绑定在vue实例的动态属性上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;checkbox&quot; v-model=&quot;checked&quot; v-bind:true-value=&quot;a&quot; v-bind:false-value=&quot;b&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 选中：vm.checked==vm.a</span><br><span class=\"line\"></span><br><span class=\"line\">// 未选中：vm.hchecked==vm.b</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内联样式绑定\"><a href=\"#内联样式绑定\" class=\"headerlink\" title=\"内联样式绑定\"></a>内联样式绑定</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=&quot;dada&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\"> dada: &#123;</span><br><span class=\"line\">  color: &#x27;green&#x27;,</span><br><span class=\"line\">  fontSize: &#x27;10px&#x27;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style=&quot;[ styleObjectA, styleObjectB ]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h5><p>v-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li v-for=&quot;(index,item) in items&quot;&gt;&#123;&#123;index&#125;&#125; – &#123;&#123;$index&#125;&#125; – &#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在vue.js中提供了$set方法，修改数据的同时进行试图更新。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$set(&#x27;item[0]&#x27;, &#123;title: &#x27;da&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">this.$set( target, key, value )</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-pre指令，表示跳过编译这个元素和子元素，显示原始的&#123;&#123;&#125;&#125;Mustache标签，用来减少编译时间</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"v-for-中使用-key\"><a href=\"#v-for-中使用-key\" class=\"headerlink\" title=\"v-for 中使用 key\"></a>v-for 中使用 key</h5><p>​        使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；</p>\n<p>​        使用key的注意事项：</p>\n<ul>\n<li>不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）</li>\n<li>不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。</li>\n<li>如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。</li>\n</ul>\n<h5 id=\"v-if-v-else-if-v-else-中使用-key\"><a href=\"#v-if-v-else-if-v-else-中使用-key\" class=\"headerlink\" title=\"v-if/v-else-if/v-else 中使用 key\"></a>v-if/v-else-if/v-else 中使用 key</h5><blockquote>\n<p>可能很多人都会忽略这个点</p>\n</blockquote>\n<p>​        原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。</p>\n<blockquote>\n<p>如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了</p>\n</blockquote>\n<p>​        相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition&gt;</span><br><span class=\"line\">  &lt;button </span><br><span class=\"line\">    v-if=&quot;isEditing&quot;</span><br><span class=\"line\">    v-on:click=&quot;isEditing = false&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    Save</span><br><span class=\"line\">  &lt;/button&gt;</span><br><span class=\"line\">  &lt;button </span><br><span class=\"line\">    v-else </span><br><span class=\"line\">    v-on:click=&quot;isEditing = true&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    Edit</span><br><span class=\"line\">  &lt;/button&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.v-enter-active, .v-leave-active &#123;</span><br><span class=\"line\">  transition: all 1s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-enter, .v-leave-to &#123;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: translateY(30px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的</p>\n<h5 id=\"v-for-和-v-if-不要一起使用\"><a href=\"#v-for-和-v-if-不要一起使用\" class=\"headerlink\" title=\"v-for 和 v-if 不要一起使用\"></a>v-for 和 v-if 不要一起使用</h5><blockquote>\n<p>此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整</p>\n<p><strong>永远不要把 v-if 和 v-for 同时用在同一个元素上。</strong></p>\n</blockquote>\n<p>​        原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for=&quot;user in users&quot; v-if=&quot;user.active&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​        我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul v-if=&quot;active&quot;&gt;</span><br><span class=\"line\">  &lt;li v-for=&quot;user in users&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​        如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点</p>\n<p>​        如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js</span><br><span class=\"line\">let usersActive = computed(()=&gt;users.filter(user =&gt; user.active))</span><br><span class=\"line\"></span><br><span class=\"line\">// template</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for=&quot;user in usersActive&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; user.name &#125;&#125;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用简单的-计算属性\"><a href=\"#使用简单的-计算属性\" class=\"headerlink\" title=\"使用简单的 计算属性\"></a>使用简单的 计算属性</h5><p>​        computed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let price = computed(()=&gt;&#123;</span><br><span class=\"line\">  let basePrice = manufactureCost / (1 - profitMargin)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">      basePrice -</span><br><span class=\"line\">      basePrice * (discountPercent || 0)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>​        当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let basePrice = computed(() =&gt; manufactureCost / (1 - profitMargin))</span><br><span class=\"line\">let discount = computed(() =&gt; basePrice * (discountPercent || 0))</span><br><span class=\"line\">let finalPrice = computed(() =&gt; basePrice - discount)</span><br></pre></td></tr></table></figure>\n\n<p>​        如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice</p>\n<h5 id=\"functional-函数式组件（Vue2）\"><a href=\"#functional-函数式组件（Vue2）\" class=\"headerlink\" title=\"functional 函数式组件（Vue2）\"></a>functional 函数式组件<strong>（Vue2）</strong></h5><p>优化前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优化后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template functional&gt; </span><br><span class=\"line\">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class=\"line\">        &lt;div v-if=&quot;props.value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class=\"line\">    &lt;/div&gt; </span><br><span class=\"line\">&lt;/template&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt; </span><br><span class=\"line\">export default &#123; </span><br><span class=\"line\">    props: [&#x27;value&#x27;], </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有this（没有实例）</li>\n<li>没有响应式数据</li>\n</ul>\n<h5 id=\"采用合理的数据处理算法\"><a href=\"#采用合理的数据处理算法\" class=\"headerlink\" title=\"采用合理的数据处理算法\"></a>采用合理的数据处理算法</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 数组转树形结构,时间复杂度O(n)</span><br><span class=\"line\"> * @param list 数组</span><br><span class=\"line\"> * @param idKey 元素id键</span><br><span class=\"line\"> * @param parIdKey 元素父id键</span><br><span class=\"line\"> * @param parId 第一级根节点的父id值</span><br><span class=\"line\"> * @return &#123;[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"> function listToTree (list,idKey,parIdKey,parId) &#123;</span><br><span class=\"line\">    let map = &#123;&#125;;</span><br><span class=\"line\">    let result = [];</span><br><span class=\"line\">    let len = list.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构建map</span><br><span class=\"line\">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        //将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)</span><br><span class=\"line\">        map[list[i][idKey]] = list[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 构建树形数组</span><br><span class=\"line\">    for(let i=0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        let itemParId = list[i][parIdKey];</span><br><span class=\"line\">        // 顶级节点</span><br><span class=\"line\">        if(itemParId === parId) &#123;</span><br><span class=\"line\">            result.push(list[i]);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 孤儿节点，舍弃(不存在其父节点)</span><br><span class=\"line\">        if(!map[itemParId])&#123;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）</span><br><span class=\"line\">        if(map[itemParId].children) &#123;</span><br><span class=\"line\">            map[itemParId].children.push(list[i]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            map[itemParId].children = [list[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"CSS white-space 属性","date":"2021-10-11T12:51:48.000Z","_content":"\n##### 兼容性：\n\n&emsp;&emsp;所有浏览器都支持 white-space 属性。\n\n&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 \"inherit\"。\n\n##### 官方定义和用法：\n\n&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。\n\n| 值       | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| normal   | 默认。空白会被浏览器忽略。                                   |\n| pre      | 空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。    |\n| nowrap   | 文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。 |\n| pre-wrap | 保留空白符序列，但是正常地进行换行。                         |\n| pre-line | 合并空白符序列，但是保留换行符。                             |\n| inherit  | 规定应该从父元素继承 white-space 属性的值。                  |\n\n###### pre-line\n\n&emsp;&emsp;合并空格，保留换行符，允许自动换行\n\n###### normal\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行\n\n###### nowrap\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行\n\n###### pre\n\n&emsp;&emsp;保留空格，保留换行符，不允许自动换行\n\n###### pre-wrap\n\n&emsp;&emsp;保留空格，保留换行符，允许自动换行。\n\n| **值**   | **空白符** | **换行符** | **自动换行** |\n| -------- | ---------- | ---------- | ------------ |\n| pre-line | 合并       | 保留       | 允许         |\n| normal   | 合并       | 忽略       | 允许         |\n| nowrap   | 合并       | 忽略       | 不允许       |\n| pre      | 保留       | 保留       | 不允许       |\n| pre-wrap | 保留       | 保留       | 允许         |","source":"_posts/white-space.md","raw":"---\ntitle: CSS white-space 属性\ndate: 2021-10-11 20:51:48\ntags: white-space\ncategories: css\n---\n\n##### 兼容性：\n\n&emsp;&emsp;所有浏览器都支持 white-space 属性。\n\n&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 \"inherit\"。\n\n##### 官方定义和用法：\n\n&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。\n\n| 值       | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| normal   | 默认。空白会被浏览器忽略。                                   |\n| pre      | 空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。    |\n| nowrap   | 文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。 |\n| pre-wrap | 保留空白符序列，但是正常地进行换行。                         |\n| pre-line | 合并空白符序列，但是保留换行符。                             |\n| inherit  | 规定应该从父元素继承 white-space 属性的值。                  |\n\n###### pre-line\n\n&emsp;&emsp;合并空格，保留换行符，允许自动换行\n\n###### normal\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行\n\n###### nowrap\n\n&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行\n\n###### pre\n\n&emsp;&emsp;保留空格，保留换行符，不允许自动换行\n\n###### pre-wrap\n\n&emsp;&emsp;保留空格，保留换行符，允许自动换行。\n\n| **值**   | **空白符** | **换行符** | **自动换行** |\n| -------- | ---------- | ---------- | ------------ |\n| pre-line | 合并       | 保留       | 允许         |\n| normal   | 合并       | 忽略       | 允许         |\n| nowrap   | 合并       | 忽略       | 不允许       |\n| pre      | 保留       | 保留       | 不允许       |\n| pre-wrap | 保留       | 保留       | 允许         |","slug":"white-space","published":1,"updated":"2021-10-11T15:14:14.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6f0000h0gfzfihr0fhf","content":"<h5 id=\"兼容性：\"><a href=\"#兼容性：\" class=\"headerlink\" title=\"兼容性：\"></a>兼容性：</h5><p>&emsp;&emsp;所有浏览器都支持 white-space 属性。</p>\n<p>&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。</p>\n<h5 id=\"官方定义和用法：\"><a href=\"#官方定义和用法：\" class=\"headerlink\" title=\"官方定义和用法：\"></a>官方定义和用法：</h5><p>&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认。空白会被浏览器忽略。</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留空白符序列，但是正常地进行换行。</td>\n</tr>\n<tr>\n<td>pre-line</td>\n<td>合并空白符序列，但是保留换行符。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 white-space 属性的值。</td>\n</tr>\n</tbody></table>\n<h6 id=\"pre-line\"><a href=\"#pre-line\" class=\"headerlink\" title=\"pre-line\"></a>pre-line</h6><p>&emsp;&emsp;合并空格，保留换行符，允许自动换行</p>\n<h6 id=\"normal\"><a href=\"#normal\" class=\"headerlink\" title=\"normal\"></a>normal</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行</p>\n<h6 id=\"nowrap\"><a href=\"#nowrap\" class=\"headerlink\" title=\"nowrap\"></a>nowrap</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行</p>\n<h6 id=\"pre\"><a href=\"#pre\" class=\"headerlink\" title=\"pre\"></a>pre</h6><p>&emsp;&emsp;保留空格，保留换行符，不允许自动换行</p>\n<h6 id=\"pre-wrap\"><a href=\"#pre-wrap\" class=\"headerlink\" title=\"pre-wrap\"></a>pre-wrap</h6><p>&emsp;&emsp;保留空格，保留换行符，允许自动换行。</p>\n<table>\n<thead>\n<tr>\n<th><strong>值</strong></th>\n<th><strong>空白符</strong></th>\n<th><strong>换行符</strong></th>\n<th><strong>自动换行</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pre-line</td>\n<td>合并</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>normal</td>\n<td>合并</td>\n<td>忽略</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>合并</td>\n<td>忽略</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>保留</td>\n<td>保留</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n</tbody></table>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"兼容性：\"><a href=\"#兼容性：\" class=\"headerlink\" title=\"兼容性：\"></a>兼容性：</h5><p>&emsp;&emsp;所有浏览器都支持 white-space 属性。</p>\n<p>&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。</p>\n<h5 id=\"官方定义和用法：\"><a href=\"#官方定义和用法：\" class=\"headerlink\" title=\"官方定义和用法：\"></a>官方定义和用法：</h5><p>&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>默认。空白会被浏览器忽略。</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留空白符序列，但是正常地进行换行。</td>\n</tr>\n<tr>\n<td>pre-line</td>\n<td>合并空白符序列，但是保留换行符。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 white-space 属性的值。</td>\n</tr>\n</tbody></table>\n<h6 id=\"pre-line\"><a href=\"#pre-line\" class=\"headerlink\" title=\"pre-line\"></a>pre-line</h6><p>&emsp;&emsp;合并空格，保留换行符，允许自动换行</p>\n<h6 id=\"normal\"><a href=\"#normal\" class=\"headerlink\" title=\"normal\"></a>normal</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行</p>\n<h6 id=\"nowrap\"><a href=\"#nowrap\" class=\"headerlink\" title=\"nowrap\"></a>nowrap</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行</p>\n<h6 id=\"pre\"><a href=\"#pre\" class=\"headerlink\" title=\"pre\"></a>pre</h6><p>&emsp;&emsp;保留空格，保留换行符，不允许自动换行</p>\n<h6 id=\"pre-wrap\"><a href=\"#pre-wrap\" class=\"headerlink\" title=\"pre-wrap\"></a>pre-wrap</h6><p>&emsp;&emsp;保留空格，保留换行符，允许自动换行。</p>\n<table>\n<thead>\n<tr>\n<th><strong>值</strong></th>\n<th><strong>空白符</strong></th>\n<th><strong>换行符</strong></th>\n<th><strong>自动换行</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pre-line</td>\n<td>合并</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>normal</td>\n<td>合并</td>\n<td>忽略</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>合并</td>\n<td>忽略</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>保留</td>\n<td>保留</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留</td>\n<td>保留</td>\n<td>允许</td>\n</tr>\n</tbody></table>\n"},{"title":"常用的表单验证","date":"2021-10-02T14:22:16.000Z","_content":"\n##### 1、判断字符串是否是 https?:|mailto:|tal:  开头的\n\n```\nexport function isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path)\n}\n```\n\n##### 2、检验字符串是否是 admin  editor\n\n```\nexport function validUsername(str) {\n  const valid_map = ['admin', 'editor']\n  return valid_map.indexOf(str.trim()) >= 0\n}\n```\n\n##### 3、判断网址\n\n```\nexport function validURL(url) {\n  const reg = /^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/\n  return reg.test(url)\n}\n```\n\n##### 4、判断都是小写字母\n\n```\nexport function validLowerCase(str) {\n  const reg = /^[a-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 5、判断都是大写字母\n\n```\nexport function validUpperCase(str) {\n  const reg = /^[A-Z]+$/\n  return reg.test(str)\n}\n```\n\n##### 6、判断是只能是数字和字母\n\n```\nexport function validAlphabets(str) {\n  const reg = /^[0-9A-Za-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 7、用户密码格式\n\n```\nexport function isEvolPass(str) {\n  return /^(?=.*[0-9])(?=.*[a-zA-Z]).{8,30}$/.test(str) // 用户密码格式正则\n}\n```\n\n##### 8、邮箱校验\n\n```\nexport function isEmail(email) {\n  const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  return reg.test(email)\n}\n```\n\n##### 9、验证字符串\n\n```\nexport function isString(str) {\n  if (typeof str === 'string' || str instanceof String) {\n    return true\n  }\n  return false\n}\n```\n\n##### 10、手机号码校验\n\n```\nexport function isPhone(str) {\n  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d{8}$/.test(str) //  手机号码正则\n}\n```\n\n##### 11、验证是数组\n\n```\nexport function isArray(arg) {\n  if (typeof Array.isArray === 'undefined') {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n  return Array.isArray(arg)\n}\n```\n\n##### 12、判断只能是汉字\n\n```\nexport function isChinese(str){\n\tconst reg=/^[\\u0391-\\uFFE5]+$/;\n    return reg.test(str)\n}\n```\n\n##### 13、校验时间大小\n\n```\nexport function checkDate(obj){\n    const obj_value=obj.replace(/-/g,\"/\");//替换字符，变成标准格式(检验格式为：'2009-12-10')\n    // var obj_value=obj.replace(\"-\",\"/\");//替换字符，变成标准格式(检验格式为：'2010-12-10 11:12')\n    const date1=new Date(Date.parse(obj_value));\n    const date2=new Date();//取今天的日期\n    if(date1>date2){\n    \treturn false; //不能大于当前时间\n    }\n    return true\n}\n```\n\n##### 14、判断ip\n\n```\nexport function isIP(strIP) {\n    if (isNull(strIP)) return false;\n    \tconst re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式\n    if(re.test(strIP)){\n    \tif( RegExp.$1 <256 && RegExp.$2<256 && RegExp.$3<256 && RegExp.$4<256) return true;\n    }\n\treturn false;\n}\n```\n\n##### 15、检查输入字符串是否为空或者全部都是空格\n\n```\nexport function isNull( str ){\n    if ( str == \"\" ) return true;\n    const regu = \"^[ ]+$\";\n    var const = new RegExp(regu);\n    return re.test(str);\n}\n```\n\n##### 16、判断是否是日期  (输入：date：日期；fmt：日期格式)\n\n```\nexport function isDate( date, fmt ) {\n    if (fmt==null) fmt=\"yyyyMMdd\";\n    const yIndex = fmt.indexOf(\"yyyy\");\n    if(yIndex==-1) return false;\n    const year = date.substring(yIndex,yIndex+4);\n    const mIndex = fmt.indexOf(\"MM\");\n    if(mIndex==-1) return false;\n    const month = date.substring(mIndex,mIndex+2);\n    const dIndex = fmt.indexOf(\"dd\");\n    if(dIndex==-1) return false;\n    const day = date.substring(dIndex,dIndex+2);\n    if(!isNumber(year)||year>\"2100\" || year< \"1900\") return false;\n    if(!isNumber(month)||month>\"12\" || month< \"01\") return false;\n    if(day>getMaxDay(year,month) || day< \"01\") return false;\n    return true;\n}\n```\n\n##### 17、字符1是否以字符串2开始和结束\n\n```\nfunction isFirstMatch(str1,str2){\n    const index = str1.indexOf(str2);\n    if(index==0) return true;\n    return false;\n}\nexport function isLastMatch(str1,str2){\n    const index = str1.lastIndexOf(str2);\n    if(str1.length==index+str2.length) return true;\n    return false;\n}\n```\n\n","source":"_posts/常用的表单验证.md","raw":"---\ntitle: 常用的表单验证\ndate: 2021-10-02 22:22:16\ntags: 表单验证\ncategories: javaScript\n---\n\n##### 1、判断字符串是否是 https?:|mailto:|tal:  开头的\n\n```\nexport function isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path)\n}\n```\n\n##### 2、检验字符串是否是 admin  editor\n\n```\nexport function validUsername(str) {\n  const valid_map = ['admin', 'editor']\n  return valid_map.indexOf(str.trim()) >= 0\n}\n```\n\n##### 3、判断网址\n\n```\nexport function validURL(url) {\n  const reg = /^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/\n  return reg.test(url)\n}\n```\n\n##### 4、判断都是小写字母\n\n```\nexport function validLowerCase(str) {\n  const reg = /^[a-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 5、判断都是大写字母\n\n```\nexport function validUpperCase(str) {\n  const reg = /^[A-Z]+$/\n  return reg.test(str)\n}\n```\n\n##### 6、判断是只能是数字和字母\n\n```\nexport function validAlphabets(str) {\n  const reg = /^[0-9A-Za-z]+$/\n  return reg.test(str)\n}\n```\n\n##### 7、用户密码格式\n\n```\nexport function isEvolPass(str) {\n  return /^(?=.*[0-9])(?=.*[a-zA-Z]).{8,30}$/.test(str) // 用户密码格式正则\n}\n```\n\n##### 8、邮箱校验\n\n```\nexport function isEmail(email) {\n  const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  return reg.test(email)\n}\n```\n\n##### 9、验证字符串\n\n```\nexport function isString(str) {\n  if (typeof str === 'string' || str instanceof String) {\n    return true\n  }\n  return false\n}\n```\n\n##### 10、手机号码校验\n\n```\nexport function isPhone(str) {\n  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d{8}$/.test(str) //  手机号码正则\n}\n```\n\n##### 11、验证是数组\n\n```\nexport function isArray(arg) {\n  if (typeof Array.isArray === 'undefined') {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n  return Array.isArray(arg)\n}\n```\n\n##### 12、判断只能是汉字\n\n```\nexport function isChinese(str){\n\tconst reg=/^[\\u0391-\\uFFE5]+$/;\n    return reg.test(str)\n}\n```\n\n##### 13、校验时间大小\n\n```\nexport function checkDate(obj){\n    const obj_value=obj.replace(/-/g,\"/\");//替换字符，变成标准格式(检验格式为：'2009-12-10')\n    // var obj_value=obj.replace(\"-\",\"/\");//替换字符，变成标准格式(检验格式为：'2010-12-10 11:12')\n    const date1=new Date(Date.parse(obj_value));\n    const date2=new Date();//取今天的日期\n    if(date1>date2){\n    \treturn false; //不能大于当前时间\n    }\n    return true\n}\n```\n\n##### 14、判断ip\n\n```\nexport function isIP(strIP) {\n    if (isNull(strIP)) return false;\n    \tconst re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式\n    if(re.test(strIP)){\n    \tif( RegExp.$1 <256 && RegExp.$2<256 && RegExp.$3<256 && RegExp.$4<256) return true;\n    }\n\treturn false;\n}\n```\n\n##### 15、检查输入字符串是否为空或者全部都是空格\n\n```\nexport function isNull( str ){\n    if ( str == \"\" ) return true;\n    const regu = \"^[ ]+$\";\n    var const = new RegExp(regu);\n    return re.test(str);\n}\n```\n\n##### 16、判断是否是日期  (输入：date：日期；fmt：日期格式)\n\n```\nexport function isDate( date, fmt ) {\n    if (fmt==null) fmt=\"yyyyMMdd\";\n    const yIndex = fmt.indexOf(\"yyyy\");\n    if(yIndex==-1) return false;\n    const year = date.substring(yIndex,yIndex+4);\n    const mIndex = fmt.indexOf(\"MM\");\n    if(mIndex==-1) return false;\n    const month = date.substring(mIndex,mIndex+2);\n    const dIndex = fmt.indexOf(\"dd\");\n    if(dIndex==-1) return false;\n    const day = date.substring(dIndex,dIndex+2);\n    if(!isNumber(year)||year>\"2100\" || year< \"1900\") return false;\n    if(!isNumber(month)||month>\"12\" || month< \"01\") return false;\n    if(day>getMaxDay(year,month) || day< \"01\") return false;\n    return true;\n}\n```\n\n##### 17、字符1是否以字符串2开始和结束\n\n```\nfunction isFirstMatch(str1,str2){\n    const index = str1.indexOf(str2);\n    if(index==0) return true;\n    return false;\n}\nexport function isLastMatch(str1,str2){\n    const index = str1.lastIndexOf(str2);\n    if(str1.length==index+str2.length) return true;\n    return false;\n}\n```\n\n","slug":"常用的表单验证","published":1,"updated":"2021-10-04T07:38:58.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6f1000j0gfz9gc72ikr","content":"<h5 id=\"1、判断字符串是否是-https-mailto-tal-开头的\"><a href=\"#1、判断字符串是否是-https-mailto-tal-开头的\" class=\"headerlink\" title=\"1、判断字符串是否是 https?:|mailto:|tal:  开头的\"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isExternal(path) &#123;</span><br><span class=\"line\">  return /^(https?:|mailto:|tel:)/.test(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、检验字符串是否是-admin-editor\"><a href=\"#2、检验字符串是否是-admin-editor\" class=\"headerlink\" title=\"2、检验字符串是否是 admin  editor\"></a>2、检验字符串是否是 admin  editor</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validUsername(str) &#123;</span><br><span class=\"line\">  const valid_map = [&#x27;admin&#x27;, &#x27;editor&#x27;]</span><br><span class=\"line\">  return valid_map.indexOf(str.trim()) &gt;= 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、判断网址\"><a href=\"#3、判断网址\" class=\"headerlink\" title=\"3、判断网址\"></a>3、判断网址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validURL(url) &#123;</span><br><span class=\"line\">  const reg = /^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?&#x27;\\\\+&amp;%$#=~_-]+))*$/</span><br><span class=\"line\">  return reg.test(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、判断都是小写字母\"><a href=\"#4、判断都是小写字母\" class=\"headerlink\" title=\"4、判断都是小写字母\"></a>4、判断都是小写字母</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validLowerCase(str) &#123;</span><br><span class=\"line\">  const reg = /^[a-z]+$/</span><br><span class=\"line\">  return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5、判断都是大写字母\"><a href=\"#5、判断都是大写字母\" class=\"headerlink\" title=\"5、判断都是大写字母\"></a>5、判断都是大写字母</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validUpperCase(str) &#123;</span><br><span class=\"line\">  const reg = /^[A-Z]+$/</span><br><span class=\"line\">  return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6、判断是只能是数字和字母\"><a href=\"#6、判断是只能是数字和字母\" class=\"headerlink\" title=\"6、判断是只能是数字和字母\"></a>6、判断是只能是数字和字母</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validAlphabets(str) &#123;</span><br><span class=\"line\">  const reg = /^[0-9A-Za-z]+$/</span><br><span class=\"line\">  return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7、用户密码格式\"><a href=\"#7、用户密码格式\" class=\"headerlink\" title=\"7、用户密码格式\"></a>7、用户密码格式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isEvolPass(str) &#123;</span><br><span class=\"line\">  return /^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/.test(str) // 用户密码格式正则</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"8、邮箱校验\"><a href=\"#8、邮箱校验\" class=\"headerlink\" title=\"8、邮箱校验\"></a>8、邮箱校验</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isEmail(email) &#123;</span><br><span class=\"line\">  const reg = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span><br><span class=\"line\">  return reg.test(email)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9、验证字符串\"><a href=\"#9、验证字符串\" class=\"headerlink\" title=\"9、验证字符串\"></a>9、验证字符串</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isString(str) &#123;</span><br><span class=\"line\">  if (typeof str === &#x27;string&#x27; || str instanceof String) &#123;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10、手机号码校验\"><a href=\"#10、手机号码校验\" class=\"headerlink\" title=\"10、手机号码校验\"></a>10、手机号码校验</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isPhone(str) &#123;</span><br><span class=\"line\">  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d&#123;8&#125;$/.test(str) //  手机号码正则</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"11、验证是数组\"><a href=\"#11、验证是数组\" class=\"headerlink\" title=\"11、验证是数组\"></a>11、验证是数组</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isArray(arg) &#123;</span><br><span class=\"line\">  if (typeof Array.isArray === &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">    return Object.prototype.toString.call(arg) === &#x27;[object Array]&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return Array.isArray(arg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"12、判断只能是汉字\"><a href=\"#12、判断只能是汉字\" class=\"headerlink\" title=\"12、判断只能是汉字\"></a>12、判断只能是汉字</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isChinese(str)&#123;</span><br><span class=\"line\">\tconst reg=/^[\\u0391-\\uFFE5]+$/;</span><br><span class=\"line\">    return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"13、校验时间大小\"><a href=\"#13、校验时间大小\" class=\"headerlink\" title=\"13、校验时间大小\"></a>13、校验时间大小</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function checkDate(obj)&#123;</span><br><span class=\"line\">    const obj_value=obj.replace(/-/g,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span><br><span class=\"line\">    // var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span><br><span class=\"line\">    const date1=new Date(Date.parse(obj_value));</span><br><span class=\"line\">    const date2=new Date();//取今天的日期</span><br><span class=\"line\">    if(date1&gt;date2)&#123;</span><br><span class=\"line\">    \treturn false; //不能大于当前时间</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"14、判断ip\"><a href=\"#14、判断ip\" class=\"headerlink\" title=\"14、判断ip\"></a>14、判断ip</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isIP(strIP) &#123;</span><br><span class=\"line\">    if (isNull(strIP)) return false;</span><br><span class=\"line\">    \tconst re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式</span><br><span class=\"line\">    if(re.test(strIP))&#123;</span><br><span class=\"line\">    \tif( RegExp.$1 &lt;256 &amp;&amp; RegExp.$2&lt;256 &amp;&amp; RegExp.$3&lt;256 &amp;&amp; RegExp.$4&lt;256) return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\treturn false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"15、检查输入字符串是否为空或者全部都是空格\"><a href=\"#15、检查输入字符串是否为空或者全部都是空格\" class=\"headerlink\" title=\"15、检查输入字符串是否为空或者全部都是空格\"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isNull( str )&#123;</span><br><span class=\"line\">    if ( str == &quot;&quot; ) return true;</span><br><span class=\"line\">    const regu = &quot;^[ ]+$&quot;;</span><br><span class=\"line\">    var const = new RegExp(regu);</span><br><span class=\"line\">    return re.test(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"16、判断是否是日期-输入：date：日期；fmt：日期格式\"><a href=\"#16、判断是否是日期-输入：date：日期；fmt：日期格式\" class=\"headerlink\" title=\"16、判断是否是日期  (输入：date：日期；fmt：日期格式)\"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isDate( date, fmt ) &#123;</span><br><span class=\"line\">    if (fmt==null) fmt=&quot;yyyyMMdd&quot;;</span><br><span class=\"line\">    const yIndex = fmt.indexOf(&quot;yyyy&quot;);</span><br><span class=\"line\">    if(yIndex==-1) return false;</span><br><span class=\"line\">    const year = date.substring(yIndex,yIndex+4);</span><br><span class=\"line\">    const mIndex = fmt.indexOf(&quot;MM&quot;);</span><br><span class=\"line\">    if(mIndex==-1) return false;</span><br><span class=\"line\">    const month = date.substring(mIndex,mIndex+2);</span><br><span class=\"line\">    const dIndex = fmt.indexOf(&quot;dd&quot;);</span><br><span class=\"line\">    if(dIndex==-1) return false;</span><br><span class=\"line\">    const day = date.substring(dIndex,dIndex+2);</span><br><span class=\"line\">    if(!isNumber(year)||year&gt;&quot;2100&quot; || year&lt; &quot;1900&quot;) return false;</span><br><span class=\"line\">    if(!isNumber(month)||month&gt;&quot;12&quot; || month&lt; &quot;01&quot;) return false;</span><br><span class=\"line\">    if(day&gt;getMaxDay(year,month) || day&lt; &quot;01&quot;) return false;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"17、字符1是否以字符串2开始和结束\"><a href=\"#17、字符1是否以字符串2开始和结束\" class=\"headerlink\" title=\"17、字符1是否以字符串2开始和结束\"></a>17、字符1是否以字符串2开始和结束</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFirstMatch(str1,str2)&#123;</span><br><span class=\"line\">    const index = str1.indexOf(str2);</span><br><span class=\"line\">    if(index==0) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function isLastMatch(str1,str2)&#123;</span><br><span class=\"line\">    const index = str1.lastIndexOf(str2);</span><br><span class=\"line\">    if(str1.length==index+str2.length) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"1、判断字符串是否是-https-mailto-tal-开头的\"><a href=\"#1、判断字符串是否是-https-mailto-tal-开头的\" class=\"headerlink\" title=\"1、判断字符串是否是 https?:|mailto:|tal:  开头的\"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isExternal(path) &#123;</span><br><span class=\"line\">  return /^(https?:|mailto:|tel:)/.test(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2、检验字符串是否是-admin-editor\"><a href=\"#2、检验字符串是否是-admin-editor\" class=\"headerlink\" title=\"2、检验字符串是否是 admin  editor\"></a>2、检验字符串是否是 admin  editor</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validUsername(str) &#123;</span><br><span class=\"line\">  const valid_map = [&#x27;admin&#x27;, &#x27;editor&#x27;]</span><br><span class=\"line\">  return valid_map.indexOf(str.trim()) &gt;= 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、判断网址\"><a href=\"#3、判断网址\" class=\"headerlink\" title=\"3、判断网址\"></a>3、判断网址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validURL(url) &#123;</span><br><span class=\"line\">  const reg = /^(http?|https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?&#x27;\\\\+&amp;%$#=~_-]+))*$/</span><br><span class=\"line\">  return reg.test(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、判断都是小写字母\"><a href=\"#4、判断都是小写字母\" class=\"headerlink\" title=\"4、判断都是小写字母\"></a>4、判断都是小写字母</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validLowerCase(str) &#123;</span><br><span class=\"line\">  const reg = /^[a-z]+$/</span><br><span class=\"line\">  return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5、判断都是大写字母\"><a href=\"#5、判断都是大写字母\" class=\"headerlink\" title=\"5、判断都是大写字母\"></a>5、判断都是大写字母</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validUpperCase(str) &#123;</span><br><span class=\"line\">  const reg = /^[A-Z]+$/</span><br><span class=\"line\">  return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6、判断是只能是数字和字母\"><a href=\"#6、判断是只能是数字和字母\" class=\"headerlink\" title=\"6、判断是只能是数字和字母\"></a>6、判断是只能是数字和字母</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function validAlphabets(str) &#123;</span><br><span class=\"line\">  const reg = /^[0-9A-Za-z]+$/</span><br><span class=\"line\">  return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7、用户密码格式\"><a href=\"#7、用户密码格式\" class=\"headerlink\" title=\"7、用户密码格式\"></a>7、用户密码格式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isEvolPass(str) &#123;</span><br><span class=\"line\">  return /^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/.test(str) // 用户密码格式正则</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"8、邮箱校验\"><a href=\"#8、邮箱校验\" class=\"headerlink\" title=\"8、邮箱校验\"></a>8、邮箱校验</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isEmail(email) &#123;</span><br><span class=\"line\">  const reg = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span><br><span class=\"line\">  return reg.test(email)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9、验证字符串\"><a href=\"#9、验证字符串\" class=\"headerlink\" title=\"9、验证字符串\"></a>9、验证字符串</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isString(str) &#123;</span><br><span class=\"line\">  if (typeof str === &#x27;string&#x27; || str instanceof String) &#123;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"10、手机号码校验\"><a href=\"#10、手机号码校验\" class=\"headerlink\" title=\"10、手机号码校验\"></a>10、手机号码校验</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isPhone(str) &#123;</span><br><span class=\"line\">  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\\d&#123;8&#125;$/.test(str) //  手机号码正则</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"11、验证是数组\"><a href=\"#11、验证是数组\" class=\"headerlink\" title=\"11、验证是数组\"></a>11、验证是数组</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isArray(arg) &#123;</span><br><span class=\"line\">  if (typeof Array.isArray === &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">    return Object.prototype.toString.call(arg) === &#x27;[object Array]&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return Array.isArray(arg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"12、判断只能是汉字\"><a href=\"#12、判断只能是汉字\" class=\"headerlink\" title=\"12、判断只能是汉字\"></a>12、判断只能是汉字</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isChinese(str)&#123;</span><br><span class=\"line\">\tconst reg=/^[\\u0391-\\uFFE5]+$/;</span><br><span class=\"line\">    return reg.test(str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"13、校验时间大小\"><a href=\"#13、校验时间大小\" class=\"headerlink\" title=\"13、校验时间大小\"></a>13、校验时间大小</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function checkDate(obj)&#123;</span><br><span class=\"line\">    const obj_value=obj.replace(/-/g,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span><br><span class=\"line\">    // var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span><br><span class=\"line\">    const date1=new Date(Date.parse(obj_value));</span><br><span class=\"line\">    const date2=new Date();//取今天的日期</span><br><span class=\"line\">    if(date1&gt;date2)&#123;</span><br><span class=\"line\">    \treturn false; //不能大于当前时间</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"14、判断ip\"><a href=\"#14、判断ip\" class=\"headerlink\" title=\"14、判断ip\"></a>14、判断ip</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isIP(strIP) &#123;</span><br><span class=\"line\">    if (isNull(strIP)) return false;</span><br><span class=\"line\">    \tconst re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/g //匹配IP地址的正则表达式</span><br><span class=\"line\">    if(re.test(strIP))&#123;</span><br><span class=\"line\">    \tif( RegExp.$1 &lt;256 &amp;&amp; RegExp.$2&lt;256 &amp;&amp; RegExp.$3&lt;256 &amp;&amp; RegExp.$4&lt;256) return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\treturn false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"15、检查输入字符串是否为空或者全部都是空格\"><a href=\"#15、检查输入字符串是否为空或者全部都是空格\" class=\"headerlink\" title=\"15、检查输入字符串是否为空或者全部都是空格\"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isNull( str )&#123;</span><br><span class=\"line\">    if ( str == &quot;&quot; ) return true;</span><br><span class=\"line\">    const regu = &quot;^[ ]+$&quot;;</span><br><span class=\"line\">    var const = new RegExp(regu);</span><br><span class=\"line\">    return re.test(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"16、判断是否是日期-输入：date：日期；fmt：日期格式\"><a href=\"#16、判断是否是日期-输入：date：日期；fmt：日期格式\" class=\"headerlink\" title=\"16、判断是否是日期  (输入：date：日期；fmt：日期格式)\"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function isDate( date, fmt ) &#123;</span><br><span class=\"line\">    if (fmt==null) fmt=&quot;yyyyMMdd&quot;;</span><br><span class=\"line\">    const yIndex = fmt.indexOf(&quot;yyyy&quot;);</span><br><span class=\"line\">    if(yIndex==-1) return false;</span><br><span class=\"line\">    const year = date.substring(yIndex,yIndex+4);</span><br><span class=\"line\">    const mIndex = fmt.indexOf(&quot;MM&quot;);</span><br><span class=\"line\">    if(mIndex==-1) return false;</span><br><span class=\"line\">    const month = date.substring(mIndex,mIndex+2);</span><br><span class=\"line\">    const dIndex = fmt.indexOf(&quot;dd&quot;);</span><br><span class=\"line\">    if(dIndex==-1) return false;</span><br><span class=\"line\">    const day = date.substring(dIndex,dIndex+2);</span><br><span class=\"line\">    if(!isNumber(year)||year&gt;&quot;2100&quot; || year&lt; &quot;1900&quot;) return false;</span><br><span class=\"line\">    if(!isNumber(month)||month&gt;&quot;12&quot; || month&lt; &quot;01&quot;) return false;</span><br><span class=\"line\">    if(day&gt;getMaxDay(year,month) || day&lt; &quot;01&quot;) return false;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"17、字符1是否以字符串2开始和结束\"><a href=\"#17、字符1是否以字符串2开始和结束\" class=\"headerlink\" title=\"17、字符1是否以字符串2开始和结束\"></a>17、字符1是否以字符串2开始和结束</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFirstMatch(str1,str2)&#123;</span><br><span class=\"line\">    const index = str1.indexOf(str2);</span><br><span class=\"line\">    if(index==0) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function isLastMatch(str1,str2)&#123;</span><br><span class=\"line\">    const index = str1.lastIndexOf(str2);</span><br><span class=\"line\">    if(str1.length==index+str2.length) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"webSocket","date":"2021-10-04T07:37:44.000Z","_content":"\n##### websocket是什么\n\n&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。\n\n&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。\n\n##### 工作方式\n\n&emsp;&emsp;广播和收听\n\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\" />\n\n##### 为什么需要websocket协议\n\n　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。\n　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。\n\n##### 什么场景下用websocket\n\n1. websocket社交订阅\n2. websocket多玩家游戏\n3. websocket协同编辑/编程\n4. websocket收集点击流数据\n5. 股票基金报价\n6. 体育实况更新\n7. 多媒体聊天\n8. 基于位置的应用\n9. 在线教育\n10. 论坛的消息广播\n11. 弹幕、客服等等\n\n##### 怎么使用websocket\n\n服务器端：略\n\n客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io\n\n1. 启动服务器\n2. 启动客户端程序连接服务器（**永久**连接）\n3. 服务器为每个客户创建专用对象（负责当前客户消息的收发）\n4. 客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）\n\n**客户端**\n\n```\n<div class=\"btn\">\n    <input type=\"button\" value=\"清空\" onclick=\"reset()\"/>\n    <input type=\"button\" value=\"发送\" onclick=\"send()\">\n</div>\n\nvar socket = new WebSocket('ws://127.0.0.1:80/websocket/ws'); \n\n//创建Socket \nsocket.onopen = function(event) { \n\n    //向服务器发送数据\n    //socket.send('哈哈哈哈'); \n\n    //接收数据事件\n    socket.onmessage = function(event) {\n    body.innerHTML+=\"<br/>对方：\"+event.data;\n    }; \n\n    // socket关闭事件\n    socket.onclose = function(event) {\n    body.innerHTML+=\"<br/>系统：已和服务器断开连接！！！\";\n    }; \n\n    //关闭socket\n    //socket.close()\n};\n\n//-----------\nvar body=document.getElementById(\"body\");\nfunction send(){\n    var msg=document.getElementById(\"content\").value;//获取输入框内容\n    socket.send(msg);//发送消息\n    reset();//清空输入框\n    body.innerHTML+=\"<br/>我：\"+msg;\n}\n\nfunction reset(){\n    document.getElementById(\"content\").value=\"\";\n}\n```\n\n**服务器端**\n\n```\npackage action;\n\nimport java.io.IOException;\n\nimport javax.websocket.CloseReason;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\n\n//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,\n//结构形式为“ws：//ip:端口/项目名/指定的url”\n@ServerEndpoint(\"/ws\")\npublic class WSServer {\n    private Session session;\n    //连接打开时执行\n    @OnOpen\n    public void onOpen(Session session) {\n    \tthis.session=session;\n        System.out.println(\"一个客户端连接进来了 ... 它的sessionid是：\" + session.getId());\n    }\n\n    //收到消息时执行\n    @OnMessage\n    public void onMessage(String message, Session session) {\n    \tSystem.out.println(session.getId()+\"客户端发送的消息是：\"+message);\n        try{\n        \tthis.sendMessage(message);//消息发回给客户端\n        }catch(Exception e){\n        \te.printStackTrace();\n        }\n        //return currentUser + \"：\" + message;如果有返回值，则客户端发送消息后会收到这个返回值\n    }\n\n    //连接关闭时执行\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        System.out.println(\"一个客户端关闭了，它的sessionid是：\" + session.getId());\n    }\n\n    //连接错误时执行\n    @OnError\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n    //自定义的方法，用于发送消息\n    public void sendMessage(String message) throws IOException{\n    \tthis.session.getBasicRemote().sendText(message);\n        //this.session.getAsyncRemote().sendText(message);\n    }\n}\n```\n\n","source":"_posts/webSocket.md","raw":"---\ntitle: webSocket\ndate: 2021-10-04 15:37:44\ntags: webSocket\ncategories: javaScript\n---\n\n##### websocket是什么\n\n&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。\n\n&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。\n\n##### 工作方式\n\n&emsp;&emsp;广播和收听\n\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\" />\n\n##### 为什么需要websocket协议\n\n　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。\n　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。\n\n##### 什么场景下用websocket\n\n1. websocket社交订阅\n2. websocket多玩家游戏\n3. websocket协同编辑/编程\n4. websocket收集点击流数据\n5. 股票基金报价\n6. 体育实况更新\n7. 多媒体聊天\n8. 基于位置的应用\n9. 在线教育\n10. 论坛的消息广播\n11. 弹幕、客服等等\n\n##### 怎么使用websocket\n\n服务器端：略\n\n客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io\n\n1. 启动服务器\n2. 启动客户端程序连接服务器（**永久**连接）\n3. 服务器为每个客户创建专用对象（负责当前客户消息的收发）\n4. 客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）\n\n**客户端**\n\n```\n<div class=\"btn\">\n    <input type=\"button\" value=\"清空\" onclick=\"reset()\"/>\n    <input type=\"button\" value=\"发送\" onclick=\"send()\">\n</div>\n\nvar socket = new WebSocket('ws://127.0.0.1:80/websocket/ws'); \n\n//创建Socket \nsocket.onopen = function(event) { \n\n    //向服务器发送数据\n    //socket.send('哈哈哈哈'); \n\n    //接收数据事件\n    socket.onmessage = function(event) {\n    body.innerHTML+=\"<br/>对方：\"+event.data;\n    }; \n\n    // socket关闭事件\n    socket.onclose = function(event) {\n    body.innerHTML+=\"<br/>系统：已和服务器断开连接！！！\";\n    }; \n\n    //关闭socket\n    //socket.close()\n};\n\n//-----------\nvar body=document.getElementById(\"body\");\nfunction send(){\n    var msg=document.getElementById(\"content\").value;//获取输入框内容\n    socket.send(msg);//发送消息\n    reset();//清空输入框\n    body.innerHTML+=\"<br/>我：\"+msg;\n}\n\nfunction reset(){\n    document.getElementById(\"content\").value=\"\";\n}\n```\n\n**服务器端**\n\n```\npackage action;\n\nimport java.io.IOException;\n\nimport javax.websocket.CloseReason;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\n\n//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,\n//结构形式为“ws：//ip:端口/项目名/指定的url”\n@ServerEndpoint(\"/ws\")\npublic class WSServer {\n    private Session session;\n    //连接打开时执行\n    @OnOpen\n    public void onOpen(Session session) {\n    \tthis.session=session;\n        System.out.println(\"一个客户端连接进来了 ... 它的sessionid是：\" + session.getId());\n    }\n\n    //收到消息时执行\n    @OnMessage\n    public void onMessage(String message, Session session) {\n    \tSystem.out.println(session.getId()+\"客户端发送的消息是：\"+message);\n        try{\n        \tthis.sendMessage(message);//消息发回给客户端\n        }catch(Exception e){\n        \te.printStackTrace();\n        }\n        //return currentUser + \"：\" + message;如果有返回值，则客户端发送消息后会收到这个返回值\n    }\n\n    //连接关闭时执行\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        System.out.println(\"一个客户端关闭了，它的sessionid是：\" + session.getId());\n    }\n\n    //连接错误时执行\n    @OnError\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n    //自定义的方法，用于发送消息\n    public void sendMessage(String message) throws IOException{\n    \tthis.session.getBasicRemote().sendText(message);\n        //this.session.getAsyncRemote().sendText(message);\n    }\n}\n```\n\n","slug":"webSocket","published":1,"updated":"2021-10-08T13:55:09.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6f2000n0gfz1dak76rp","content":"<h5 id=\"websocket是什么\"><a href=\"#websocket是什么\" class=\"headerlink\" title=\"websocket是什么\"></a>websocket是什么</h5><p>&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。</p>\n<p>&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。</p>\n<h5 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h5><p>&emsp;&emsp;广播和收听</p>\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\">\n\n<h5 id=\"为什么需要websocket协议\"><a href=\"#为什么需要websocket协议\" class=\"headerlink\" title=\"为什么需要websocket协议\"></a>为什么需要websocket协议</h5><p>　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。<br>　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p>\n<h5 id=\"什么场景下用websocket\"><a href=\"#什么场景下用websocket\" class=\"headerlink\" title=\"什么场景下用websocket\"></a>什么场景下用websocket</h5><ol>\n<li>websocket社交订阅</li>\n<li>websocket多玩家游戏</li>\n<li>websocket协同编辑/编程</li>\n<li>websocket收集点击流数据</li>\n<li>股票基金报价</li>\n<li>体育实况更新</li>\n<li>多媒体聊天</li>\n<li>基于位置的应用</li>\n<li>在线教育</li>\n<li>论坛的消息广播</li>\n<li>弹幕、客服等等</li>\n</ol>\n<h5 id=\"怎么使用websocket\"><a href=\"#怎么使用websocket\" class=\"headerlink\" title=\"怎么使用websocket\"></a>怎么使用websocket</h5><p>服务器端：略</p>\n<p>客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io</p>\n<ol>\n<li>启动服务器</li>\n<li>启动客户端程序连接服务器（<strong>永久</strong>连接）</li>\n<li>服务器为每个客户创建专用对象（负责当前客户消息的收发）</li>\n<li>客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）</li>\n</ol>\n<p><strong>客户端</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;btn&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;清空&quot; onclick=&quot;reset()&quot;/&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;发送&quot; onclick=&quot;send()&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var socket = new WebSocket(&#x27;ws://127.0.0.1:80/websocket/ws&#x27;); </span><br><span class=\"line\"></span><br><span class=\"line\">//创建Socket </span><br><span class=\"line\">socket.onopen = function(event) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    //向服务器发送数据</span><br><span class=\"line\">    //socket.send(&#x27;哈哈哈哈&#x27;); </span><br><span class=\"line\"></span><br><span class=\"line\">    //接收数据事件</span><br><span class=\"line\">    socket.onmessage = function(event) &#123;</span><br><span class=\"line\">    body.innerHTML+=&quot;&lt;br/&gt;对方：&quot;+event.data;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    // socket关闭事件</span><br><span class=\"line\">    socket.onclose = function(event) &#123;</span><br><span class=\"line\">    body.innerHTML+=&quot;&lt;br/&gt;系统：已和服务器断开连接！！！&quot;;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    //关闭socket</span><br><span class=\"line\">    //socket.close()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//-----------</span><br><span class=\"line\">var body=document.getElementById(&quot;body&quot;);</span><br><span class=\"line\">function send()&#123;</span><br><span class=\"line\">    var msg=document.getElementById(&quot;content&quot;).value;//获取输入框内容</span><br><span class=\"line\">    socket.send(msg);//发送消息</span><br><span class=\"line\">    reset();//清空输入框</span><br><span class=\"line\">    body.innerHTML+=&quot;&lt;br/&gt;我：&quot;+msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function reset()&#123;</span><br><span class=\"line\">    document.getElementById(&quot;content&quot;).value=&quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>服务器端</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package action;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.websocket.CloseReason;</span><br><span class=\"line\">import javax.websocket.OnClose;</span><br><span class=\"line\">import javax.websocket.OnError;</span><br><span class=\"line\">import javax.websocket.OnMessage;</span><br><span class=\"line\">import javax.websocket.OnOpen;</span><br><span class=\"line\">import javax.websocket.Session;</span><br><span class=\"line\">import javax.websocket.server.PathParam;</span><br><span class=\"line\">import javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"></span><br><span class=\"line\">//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,</span><br><span class=\"line\">//结构形式为“ws：//ip:端口/项目名/指定的url”</span><br><span class=\"line\">@ServerEndpoint(&quot;/ws&quot;)</span><br><span class=\"line\">public class WSServer &#123;</span><br><span class=\"line\">    private Session session;</span><br><span class=\"line\">    //连接打开时执行</span><br><span class=\"line\">    @OnOpen</span><br><span class=\"line\">    public void onOpen(Session session) &#123;</span><br><span class=\"line\">    \tthis.session=session;</span><br><span class=\"line\">        System.out.println(&quot;一个客户端连接进来了 ... 它的sessionid是：&quot; + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //收到消息时执行</span><br><span class=\"line\">    @OnMessage</span><br><span class=\"line\">    public void onMessage(String message, Session session) &#123;</span><br><span class=\"line\">    \tSystem.out.println(session.getId()+&quot;客户端发送的消息是：&quot;+message);</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">        \tthis.sendMessage(message);//消息发回给客户端</span><br><span class=\"line\">        &#125;catch(Exception e)&#123;</span><br><span class=\"line\">        \te.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //return currentUser + &quot;：&quot; + message;如果有返回值，则客户端发送消息后会收到这个返回值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接关闭时执行</span><br><span class=\"line\">    @OnClose</span><br><span class=\"line\">    public void onClose(Session session, CloseReason closeReason) &#123;</span><br><span class=\"line\">        System.out.println(&quot;一个客户端关闭了，它的sessionid是：&quot; + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接错误时执行</span><br><span class=\"line\">    @OnError</span><br><span class=\"line\">    public void onError(Throwable t) &#123;</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //自定义的方法，用于发送消息</span><br><span class=\"line\">    public void sendMessage(String message) throws IOException&#123;</span><br><span class=\"line\">    \tthis.session.getBasicRemote().sendText(message);</span><br><span class=\"line\">        //this.session.getAsyncRemote().sendText(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<h5 id=\"websocket是什么\"><a href=\"#websocket是什么\" class=\"headerlink\" title=\"websocket是什么\"></a>websocket是什么</h5><p>&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。</p>\n<p>&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。</p>\n<h5 id=\"工作方式\"><a href=\"#工作方式\" class=\"headerlink\" title=\"工作方式\"></a>工作方式</h5><p>&emsp;&emsp;广播和收听</p>\n<img src=\"https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png\" style=\"zoom: 67%;\">\n\n<h5 id=\"为什么需要websocket协议\"><a href=\"#为什么需要websocket协议\" class=\"headerlink\" title=\"为什么需要websocket协议\"></a>为什么需要websocket协议</h5><p>　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。<br>　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p>\n<h5 id=\"什么场景下用websocket\"><a href=\"#什么场景下用websocket\" class=\"headerlink\" title=\"什么场景下用websocket\"></a>什么场景下用websocket</h5><ol>\n<li>websocket社交订阅</li>\n<li>websocket多玩家游戏</li>\n<li>websocket协同编辑/编程</li>\n<li>websocket收集点击流数据</li>\n<li>股票基金报价</li>\n<li>体育实况更新</li>\n<li>多媒体聊天</li>\n<li>基于位置的应用</li>\n<li>在线教育</li>\n<li>论坛的消息广播</li>\n<li>弹幕、客服等等</li>\n</ol>\n<h5 id=\"怎么使用websocket\"><a href=\"#怎么使用websocket\" class=\"headerlink\" title=\"怎么使用websocket\"></a>怎么使用websocket</h5><p>服务器端：略</p>\n<p>客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io</p>\n<ol>\n<li>启动服务器</li>\n<li>启动客户端程序连接服务器（<strong>永久</strong>连接）</li>\n<li>服务器为每个客户创建专用对象（负责当前客户消息的收发）</li>\n<li>客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）</li>\n</ol>\n<p><strong>客户端</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;btn&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;清空&quot; onclick=&quot;reset()&quot;/&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;发送&quot; onclick=&quot;send()&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var socket = new WebSocket(&#x27;ws://127.0.0.1:80/websocket/ws&#x27;); </span><br><span class=\"line\"></span><br><span class=\"line\">//创建Socket </span><br><span class=\"line\">socket.onopen = function(event) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    //向服务器发送数据</span><br><span class=\"line\">    //socket.send(&#x27;哈哈哈哈&#x27;); </span><br><span class=\"line\"></span><br><span class=\"line\">    //接收数据事件</span><br><span class=\"line\">    socket.onmessage = function(event) &#123;</span><br><span class=\"line\">    body.innerHTML+=&quot;&lt;br/&gt;对方：&quot;+event.data;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    // socket关闭事件</span><br><span class=\"line\">    socket.onclose = function(event) &#123;</span><br><span class=\"line\">    body.innerHTML+=&quot;&lt;br/&gt;系统：已和服务器断开连接！！！&quot;;</span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    //关闭socket</span><br><span class=\"line\">    //socket.close()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//-----------</span><br><span class=\"line\">var body=document.getElementById(&quot;body&quot;);</span><br><span class=\"line\">function send()&#123;</span><br><span class=\"line\">    var msg=document.getElementById(&quot;content&quot;).value;//获取输入框内容</span><br><span class=\"line\">    socket.send(msg);//发送消息</span><br><span class=\"line\">    reset();//清空输入框</span><br><span class=\"line\">    body.innerHTML+=&quot;&lt;br/&gt;我：&quot;+msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function reset()&#123;</span><br><span class=\"line\">    document.getElementById(&quot;content&quot;).value=&quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>服务器端</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package action;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.websocket.CloseReason;</span><br><span class=\"line\">import javax.websocket.OnClose;</span><br><span class=\"line\">import javax.websocket.OnError;</span><br><span class=\"line\">import javax.websocket.OnMessage;</span><br><span class=\"line\">import javax.websocket.OnOpen;</span><br><span class=\"line\">import javax.websocket.Session;</span><br><span class=\"line\">import javax.websocket.server.PathParam;</span><br><span class=\"line\">import javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"></span><br><span class=\"line\">//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,</span><br><span class=\"line\">//结构形式为“ws：//ip:端口/项目名/指定的url”</span><br><span class=\"line\">@ServerEndpoint(&quot;/ws&quot;)</span><br><span class=\"line\">public class WSServer &#123;</span><br><span class=\"line\">    private Session session;</span><br><span class=\"line\">    //连接打开时执行</span><br><span class=\"line\">    @OnOpen</span><br><span class=\"line\">    public void onOpen(Session session) &#123;</span><br><span class=\"line\">    \tthis.session=session;</span><br><span class=\"line\">        System.out.println(&quot;一个客户端连接进来了 ... 它的sessionid是：&quot; + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //收到消息时执行</span><br><span class=\"line\">    @OnMessage</span><br><span class=\"line\">    public void onMessage(String message, Session session) &#123;</span><br><span class=\"line\">    \tSystem.out.println(session.getId()+&quot;客户端发送的消息是：&quot;+message);</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">        \tthis.sendMessage(message);//消息发回给客户端</span><br><span class=\"line\">        &#125;catch(Exception e)&#123;</span><br><span class=\"line\">        \te.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //return currentUser + &quot;：&quot; + message;如果有返回值，则客户端发送消息后会收到这个返回值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接关闭时执行</span><br><span class=\"line\">    @OnClose</span><br><span class=\"line\">    public void onClose(Session session, CloseReason closeReason) &#123;</span><br><span class=\"line\">        System.out.println(&quot;一个客户端关闭了，它的sessionid是：&quot; + session.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接错误时执行</span><br><span class=\"line\">    @OnError</span><br><span class=\"line\">    public void onError(Throwable t) &#123;</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //自定义的方法，用于发送消息</span><br><span class=\"line\">    public void sendMessage(String message) throws IOException&#123;</span><br><span class=\"line\">    \tthis.session.getBasicRemote().sendText(message);</span><br><span class=\"line\">        //this.session.getAsyncRemote().sendText(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"用CSS代码让你的列表网页提升渲染性能","date":"2021-10-03T12:47:58.000Z","_content":"\n&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。\n\n##### content-visibility属性有三个可选值:\n\n- visible: 默认值。对布局和呈现不会产生什么影响。\n- hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。\n- auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。\n\n##### 代码：\n\n```\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <!-- ... -->\n    <!-- 此处省略n个<div class=\"card\"></div> -->\n    <!-- ... -->\n    <div class=\"card\"></div>\n```\n\n\n\n```\n .card {\n    position: relative;\n    overflow: hidden;\n    transition-duration: 0.3s;\n    margin-bottom: 10px;\n    width: 200px;\n    height: 100px;\n    background-color: #ffaa00;\n    content-visibility: auto;\n  }\n```\n\n##### 问题：\n\n&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题\n\n##### 解决方法：\n\n​&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。\n\n##### 总结：\n\n&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。","source":"_posts/用CSS代码让你的列表网页提升渲染性能.md","raw":"---\ntitle: 用CSS代码让你的列表网页提升渲染性能\ndate: 2021-10-03 20:47:58\ntags:\ncategories: css\n---\n\n&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。\n\n##### content-visibility属性有三个可选值:\n\n- visible: 默认值。对布局和呈现不会产生什么影响。\n- hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。\n- auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。\n\n##### 代码：\n\n```\n    <div class=\"card\"></div>\n    <div class=\"card\"></div>\n    <!-- ... -->\n    <!-- 此处省略n个<div class=\"card\"></div> -->\n    <!-- ... -->\n    <div class=\"card\"></div>\n```\n\n\n\n```\n .card {\n    position: relative;\n    overflow: hidden;\n    transition-duration: 0.3s;\n    margin-bottom: 10px;\n    width: 200px;\n    height: 100px;\n    background-color: #ffaa00;\n    content-visibility: auto;\n  }\n```\n\n##### 问题：\n\n&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题\n\n##### 解决方法：\n\n​&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。\n\n##### 总结：\n\n&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。","slug":"用CSS代码让你的列表网页提升渲染性能","published":1,"updated":"2021-10-03T13:08:36.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxnaa6f8001a0gfz6ab6044y","content":"<p>&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。</p>\n<h5 id=\"content-visibility属性有三个可选值\"><a href=\"#content-visibility属性有三个可选值\" class=\"headerlink\" title=\"content-visibility属性有三个可选值:\"></a>content-visibility属性有三个可选值:</h5><ul>\n<li>visible: 默认值。对布局和呈现不会产生什么影响。</li>\n<li>hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。</li>\n<li>auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。</li>\n</ul>\n<h5 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;!-- 此处省略n个&lt;div class=&quot;card&quot;&gt;&lt;/div&gt; --&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.card &#123;</span><br><span class=\"line\">   position: relative;</span><br><span class=\"line\">   overflow: hidden;</span><br><span class=\"line\">   transition-duration: 0.3s;</span><br><span class=\"line\">   margin-bottom: 10px;</span><br><span class=\"line\">   width: 200px;</span><br><span class=\"line\">   height: 100px;</span><br><span class=\"line\">   background-color: #ffaa00;</span><br><span class=\"line\">   content-visibility: auto;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题</p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><p>​&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。</p>\n","site":{"data":{"styles":"body {\n  background-color: #eee;\n}\n"}},"excerpt":"","more":"<p>&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。</p>\n<h5 id=\"content-visibility属性有三个可选值\"><a href=\"#content-visibility属性有三个可选值\" class=\"headerlink\" title=\"content-visibility属性有三个可选值:\"></a>content-visibility属性有三个可选值:</h5><ul>\n<li>visible: 默认值。对布局和呈现不会产生什么影响。</li>\n<li>hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。</li>\n<li>auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。</li>\n</ul>\n<h5 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;!-- 此处省略n个&lt;div class=&quot;card&quot;&gt;&lt;/div&gt; --&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.card &#123;</span><br><span class=\"line\">   position: relative;</span><br><span class=\"line\">   overflow: hidden;</span><br><span class=\"line\">   transition-duration: 0.3s;</span><br><span class=\"line\">   margin-bottom: 10px;</span><br><span class=\"line\">   width: 200px;</span><br><span class=\"line\">   height: 100px;</span><br><span class=\"line\">   background-color: #ffaa00;</span><br><span class=\"line\">   content-visibility: auto;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h5><p>&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题</p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><p>​&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。</p>\n"}],"PostAsset":[{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-01.png","post":"ckxnaa6es00010gfz7ryq57i5","slug":"box-shandow-01.png","modified":1,"renderable":1},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-02.png","post":"ckxnaa6es00010gfz7ryq57i5","slug":"box-shandow-02.png","modified":1,"renderable":1},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-03.png","post":"ckxnaa6es00010gfz7ryq57i5","slug":"box-shandow-03.png","modified":1,"renderable":1},{"_id":"source/_posts/CSS3阴影-box-shadow/box-shandow-04.png","post":"ckxnaa6es00010gfz7ryq57i5","slug":"box-shandow-04.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckxnaa6es00010gfz7ryq57i5","category_id":"ckxnaa6ev00040gfz8sm71ybg","_id":"ckxnaa6ez000f0gfz7th6gkso"},{"post_id":"ckxnaa6eu00030gfzg9xa0xyk","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f1000l0gfzhbgdfuuu"},{"post_id":"ckxnaa6f0000h0gfzfihr0fhf","category_id":"ckxnaa6ev00040gfz8sm71ybg","_id":"ckxnaa6f5000p0gfzg69ddh8c"},{"post_id":"ckxnaa6ew00060gfz0bupa2sk","category_id":"ckxnaa6f0000g0gfz5i5yeu0x","_id":"ckxnaa6f5000s0gfzc8j7e7rq"},{"post_id":"ckxnaa6f1000j0gfz9gc72ikr","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f5000u0gfz76iu53ie"},{"post_id":"ckxnaa6f2000n0gfz1dak76rp","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f6000x0gfz9g82fqbh"},{"post_id":"ckxnaa6ex00080gfz71zhekym","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f6000y0gfzeys236ph"},{"post_id":"ckxnaa6ex00090gfzcnl82hgk","category_id":"ckxnaa6ey000a0gfzdjui6y6c","_id":"ckxnaa6f600120gfz9uzn8w38"},{"post_id":"ckxnaa6ey000b0gfz86hfhjei","category_id":"ckxnaa6f5000w0gfz9ik5hta2","_id":"ckxnaa6f600140gfz9j2p6zff"},{"post_id":"ckxnaa6ez000e0gfz72btgcc4","category_id":"ckxnaa6f5000w0gfz9ik5hta2","_id":"ckxnaa6f700170gfzfkkr2wh6"},{"post_id":"ckxnaa6f8001a0gfz6ab6044y","category_id":"ckxnaa6ev00040gfz8sm71ybg","_id":"ckxnaa6f9001b0gfz58li6u0z"}],"PostTag":[{"post_id":"ckxnaa6eu00030gfzg9xa0xyk","tag_id":"ckxnaa6ex00070gfz63if0e1d","_id":"ckxnaa6ez000d0gfzcdbb3wjm"},{"post_id":"ckxnaa6ex00080gfz71zhekym","tag_id":"ckxnaa6ez000c0gfz5blccyxk","_id":"ckxnaa6f1000k0gfz0byb2y5o"},{"post_id":"ckxnaa6ex00090gfzcnl82hgk","tag_id":"ckxnaa6f0000i0gfz2u9x4cde","_id":"ckxnaa6f5000q0gfz0vsl3abx"},{"post_id":"ckxnaa6ey000b0gfz86hfhjei","tag_id":"ckxnaa6f3000o0gfzd8yf35m3","_id":"ckxnaa6f5000v0gfz81193npt"},{"post_id":"ckxnaa6ez000e0gfz72btgcc4","tag_id":"ckxnaa6f5000t0gfzfj6mf7kf","_id":"ckxnaa6f600100gfz09d5amq8"},{"post_id":"ckxnaa6f0000h0gfzfihr0fhf","tag_id":"ckxnaa6f6000z0gfzhmfy6kvi","_id":"ckxnaa6f600150gfzafab0ag8"},{"post_id":"ckxnaa6f1000j0gfz9gc72ikr","tag_id":"ckxnaa6f600130gfz9ekq2n6m","_id":"ckxnaa6f700180gfz3sdg1gav"},{"post_id":"ckxnaa6f2000n0gfz1dak76rp","tag_id":"ckxnaa6f700160gfzc52jfgss","_id":"ckxnaa6f700190gfz1o3ka9y2"}],"Tag":[{"name":"async/await","_id":"ckxnaa6ex00070gfz63if0e1d"},{"name":"数组方法","_id":"ckxnaa6ez000c0gfz5blccyxk"},{"name":"js函数柯里化","_id":"ckxnaa6f0000i0gfz2u9x4cde"},{"name":"vue3对比vue2","_id":"ckxnaa6f3000o0gfzd8yf35m3"},{"name":"vue基础","_id":"ckxnaa6f5000t0gfzfj6mf7kf"},{"name":"white-space","_id":"ckxnaa6f6000z0gfzhmfy6kvi"},{"name":"表单验证","_id":"ckxnaa6f600130gfz9ekq2n6m"},{"name":"webSocket","_id":"ckxnaa6f700160gfzc52jfgss"}]}}