<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用的表单验证</title>
      <link href="/hb-myblog.github.io/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/hb-myblog.github.io/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h5 id="1、判断字符串是否是-https-mailto-tal-开头的"><a href="#1、判断字符串是否是-https-mailto-tal-开头的" class="headerlink" title="1、判断字符串是否是 https?:|mailto:|tal:  开头的"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export function isExternal(path) &#123;</span><br><span class="line">  return /^(https?:|mailto:|tel:)/.test(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、检验字符串是否是-admin-editor"><a href="#2、检验字符串是否是-admin-editor" class="headerlink" title="2、检验字符串是否是 admin  editor"></a>2、检验字符串是否是 admin  editor</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validUsername(str) &#123;</span><br><span class="line">  const valid_map = [&#x27;admin&#x27;, &#x27;editor&#x27;]</span><br><span class="line">  return valid_map.indexOf(str.trim()) &gt;= 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、判断网址"><a href="#3、判断网址" class="headerlink" title="3、判断网址"></a>3、判断网址</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validURL(url) &#123;</span><br><span class="line">  const reg = /^(http?|https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?&#x27;\\+&amp;%$#=~_-]+))*$/</span><br><span class="line">  return reg.test(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、判断都是小写字母"><a href="#4、判断都是小写字母" class="headerlink" title="4、判断都是小写字母"></a>4、判断都是小写字母</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validLowerCase(str) &#123;</span><br><span class="line">  const reg = /^[a-z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、判断都是大写字母"><a href="#5、判断都是大写字母" class="headerlink" title="5、判断都是大写字母"></a>5、判断都是大写字母</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validUpperCase(str) &#123;</span><br><span class="line">  const reg = /^[A-Z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、判断是只能是数字和字母"><a href="#6、判断是只能是数字和字母" class="headerlink" title="6、判断是只能是数字和字母"></a>6、判断是只能是数字和字母</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validAlphabets(str) &#123;</span><br><span class="line">  const reg = /^[0-9A-Za-z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、用户密码格式"><a href="#7、用户密码格式" class="headerlink" title="7、用户密码格式"></a>7、用户密码格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export function isEvolPass(str) &#123;</span><br><span class="line">  return /^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/.test(str) // 用户密码格式正则</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、邮箱校验"><a href="#8、邮箱校验" class="headerlink" title="8、邮箱校验"></a>8、邮箱校验</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function isEmail(email) &#123;</span><br><span class="line">  const reg = /^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span><br><span class="line">  return reg.test(email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、验证字符串"><a href="#9、验证字符串" class="headerlink" title="9、验证字符串"></a>9、验证字符串</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export function isString(str) &#123;</span><br><span class="line">  if (typeof str === &#x27;string&#x27; || str instanceof String) &#123;</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">  return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10、手机号码校验"><a href="#10、手机号码校验" class="headerlink" title="10、手机号码校验"></a>10、手机号码校验</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export function isPhone(str) &#123;</span><br><span class="line">  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\d&#123;8&#125;$/.test(str) //  手机号码正则</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11、验证是数组"><a href="#11、验证是数组" class="headerlink" title="11、验证是数组"></a>11、验证是数组</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export function isArray(arg) &#123;</span><br><span class="line">  if (typeof Array.isArray === &#x27;undefined&#x27;) &#123;</span><br><span class="line">    return Object.prototype.toString.call(arg) === &#x27;[object Array]&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  return Array.isArray(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、判断只能是汉字"><a href="#12、判断只能是汉字" class="headerlink" title="12、判断只能是汉字"></a>12、判断只能是汉字</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function isChinese(str)&#123;</span><br><span class="line">const reg=/^[\u0391-\uFFE5]+$/;</span><br><span class="line">    return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13、校验时间大小"><a href="#13、校验时间大小" class="headerlink" title="13、校验时间大小"></a>13、校验时间大小</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export function checkDate(obj)&#123;</span><br><span class="line">    const obj_value=obj.replace(/-/g,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span><br><span class="line">    // var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span><br><span class="line">    const date1=new Date(Date.parse(obj_value));</span><br><span class="line">    const date2=new Date();//取今天的日期</span><br><span class="line">    if(date1&gt;date2)&#123;</span><br><span class="line">    return false; //不能大于当前时间</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14、判断ip"><a href="#14、判断ip" class="headerlink" title="14、判断ip"></a>14、判断ip</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export function isIP(strIP) &#123;</span><br><span class="line">    if (isNull(strIP)) return false;</span><br><span class="line">    const re=/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/g //匹配IP地址的正则表达式</span><br><span class="line">    if(re.test(strIP))&#123;</span><br><span class="line">    if( RegExp.$1 &lt;256 &amp;&amp; RegExp.$2&lt;256 &amp;&amp; RegExp.$3&lt;256 &amp;&amp; RegExp.$4&lt;256) return true;</span><br><span class="line">    &#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15、检查输入字符串是否为空或者全部都是空格"><a href="#15、检查输入字符串是否为空或者全部都是空格" class="headerlink" title="15、检查输入字符串是否为空或者全部都是空格"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export function isNull( str )&#123;</span><br><span class="line">    if ( str == &quot;&quot; ) return true;</span><br><span class="line">    const regu = &quot;^[ ]+$&quot;;</span><br><span class="line">    var const = new RegExp(regu);</span><br><span class="line">    return re.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="16、判断是否是日期-输入：date：日期；fmt：日期格式"><a href="#16、判断是否是日期-输入：date：日期；fmt：日期格式" class="headerlink" title="16、判断是否是日期  (输入：date：日期；fmt：日期格式)"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export function isDate( date, fmt ) &#123;</span><br><span class="line">    if (fmt==null) fmt=&quot;yyyyMMdd&quot;;</span><br><span class="line">    const yIndex = fmt.indexOf(&quot;yyyy&quot;);</span><br><span class="line">    if(yIndex==-1) return false;</span><br><span class="line">    const year = date.substring(yIndex,yIndex+4);</span><br><span class="line">    const mIndex = fmt.indexOf(&quot;MM&quot;);</span><br><span class="line">    if(mIndex==-1) return false;</span><br><span class="line">    const month = date.substring(mIndex,mIndex+2);</span><br><span class="line">    const dIndex = fmt.indexOf(&quot;dd&quot;);</span><br><span class="line">    if(dIndex==-1) return false;</span><br><span class="line">    const day = date.substring(dIndex,dIndex+2);</span><br><span class="line">    if(!isNumber(year)||year&gt;&quot;2100&quot; || year&lt; &quot;1900&quot;) return false;</span><br><span class="line">    if(!isNumber(month)||month&gt;&quot;12&quot; || month&lt; &quot;01&quot;) return false;</span><br><span class="line">    if(day&gt;getMaxDay(year,month) || day&lt; &quot;01&quot;) return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="17、字符1是否以字符串2开始和结束"><a href="#17、字符1是否以字符串2开始和结束" class="headerlink" title="17、字符1是否以字符串2开始和结束"></a>17、字符1是否以字符串2开始和结束</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function isFirstMatch(str1,str2)&#123;</span><br><span class="line">    const index = str1.indexOf(str2);</span><br><span class="line">    if(index==0) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">export function isLastMatch(str1,str2)&#123;</span><br><span class="line">    const index = str1.lastIndexOf(str2);</span><br><span class="line">    if(str1.length==index+str2.length) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hb-myblog.github.io/2021/09/21/hello-world/"/>
      <url>/hb-myblog.github.io/2021/09/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
