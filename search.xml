<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS3阴影(box-shadow)</title>
      <link href="/hb-myblog.github.io/2021/10/06/CSS3%E9%98%B4%E5%BD%B1-box-shadow/"/>
      <url>/hb-myblog.github.io/2021/10/06/CSS3%E9%98%B4%E5%BD%B1-box-shadow/</url>
      
        <content type="html"><![CDATA[<h5 id="1、单侧投影"><a href="#1、单侧投影" class="headerlink" title="1、单侧投影"></a>1、单侧投影</h5><ul><li><p>外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 </p></li><li><p>单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.left &#123;</span><br><span class="line"> box-shadow: -8px 0 5px -5px #333;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line"> box-shadow: 8px 0 5px -5px #333;</span><br><span class="line">&#125;</span><br><span class="line">.top &#123;</span><br><span class="line"> box-shadow: 0 -8px 5px -5px #333;</span><br><span class="line">&#125;</span><br><span class="line">.bottom &#123;</span><br><span class="line"> box-shadow: 0 8px 5px -5px #333;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&#x27;left&#x27;&gt;左&lt;/div&gt;</span><br><span class="line">&lt;div class=&#x27;right&#x27;&gt;右&lt;/div&gt;</span><br><span class="line">&lt;div class=&#x27;top&#x27;&gt;上&lt;/div&gt;</span><br><span class="line">&lt;div class=&#x27;bottom&#x27;&gt;下&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/hb-myblog.github.io/hb-myblog.github/box-shandow-01.png"></p><h5 id="2、立体文字阴影"><a href="#2、立体文字阴影" class="headerlink" title="2、立体文字阴影"></a>2、立体文字阴影</h5><ul><li>立体文字阴影的关键点在于多层 text-shadow 的叠加</li><li>合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码</li><li>运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和</li><li>HSL(颜色值)</li><li><ul><li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li><li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li><li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">@function blessing($color) &#123;</span><br><span class="line"> $val: 0px 0px $color;</span><br><span class="line"> @for $i from 1 through 50 &#123;</span><br><span class="line"> $color: fade-out(desaturate($color, 1%), .02);</span><br><span class="line"> $val: #&#123;$val&#125;, -#&#123;$i&#125;px #&#123;$i&#125;px #&#123;$color&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> @return $val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line"> text-align: center;</span><br><span class="line"> font-size: 20vmin;</span><br><span class="line"> line-height: 45vh;</span><br><span class="line"> text-shadow: blessing(hsl(0, 100%, 50%));</span><br><span class="line"> color: hsl(14, 100%, 60%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;福&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/hb-myblog.github.io/hb-myblog.github/box-shandow-02.png"></p><h5 id="3、线性渐变模拟长阴影"><a href="#3、线性渐变模拟长阴影" class="headerlink" title="3、线性渐变模拟长阴影"></a>3、线性渐变模拟长阴影</h5><ul><li>借用了元素的两个伪元素</li><li>通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line"> position: relative;</span><br><span class="line"> width: 30vmin;</span><br><span class="line"> height: 30vmin;</span><br><span class="line"> line-height: 30vh;</span><br><span class="line"> text-align: center;</span><br><span class="line"> font-size: 30px;</span><br><span class="line"> background: #fff;</span><br><span class="line"> margin: 30vmin auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div::before,</span><br><span class="line">div::after &#123;</span><br><span class="line"> content: &quot;&quot;;</span><br><span class="line"> position: absolute;</span><br><span class="line"> top: 0;</span><br><span class="line"> left: 0;</span><br><span class="line"> right: 0;</span><br><span class="line"> bottom: 0;</span><br><span class="line"> z-index: -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div::before &#123;</span><br><span class="line"> content: &#x27;:before&#x27;;</span><br><span class="line"> font-size: 30px;</span><br><span class="line"> text-align: center;</span><br><span class="line"> line-height: 30vh;</span><br><span class="line"> transform-origin: 0 50%;</span><br><span class="line"> transform: translate(100%, 0) skewY(45deg) scaleX(.6);</span><br><span class="line"> background: linear-gradient(90deg, rgba(0, 0, 0, .3), transparent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div::after &#123;</span><br><span class="line"> content: &#x27;:after&#x27;;</span><br><span class="line"> font-size: 30px;</span><br><span class="line"> text-align: center;</span><br><span class="line"> line-height: 30vh;</span><br><span class="line"> transform-origin: 0 0;</span><br><span class="line"> transform: translate(0%, 100%) skewX(45deg) scaleY(.6);</span><br><span class="line"> background: linear-gradient(180deg, rgba(0, 0, 0, .3), transparent);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;Web秀&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/hb-myblog.github.io/hb-myblog.github/box-shandow-03.png"></p><h5 id="4、渐变实现内切角"><a href="#4、渐变实现内切角" class="headerlink" title="4、渐变实现内切角"></a>4、渐变实现内切角</h5><ul><li>阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果</li><li>阴影实现缺点，单个标签最多只能是2个内切圆角</li><li>径向渐变实现内切圆角可以是4边</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line"> position: relative;</span><br><span class="line"> width: 20vw;</span><br><span class="line"> height: 8vw;</span><br><span class="line"> margin: 1vw auto;</span><br><span class="line"> border-radius: 1vmin;</span><br><span class="line"> overflow: hidden;</span><br><span class="line"> line-height: 8vw;</span><br><span class="line"> color: #fff;</span><br><span class="line"> text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.shadow::before &#123;</span><br><span class="line"> position: absolute;</span><br><span class="line"> content: &quot;&quot;;</span><br><span class="line"> top: -2vw;</span><br><span class="line"> left: -2vw;</span><br><span class="line"> width: 4vw;</span><br><span class="line"> height: 4vw;</span><br><span class="line"> border-radius: 50%;</span><br><span class="line"> box-shadow: 0 0 0 15vw #e91e63; </span><br><span class="line"> z-index: -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.shadow::after &#123;</span><br><span class="line"> position: absolute;</span><br><span class="line"> content: &quot;&quot;;</span><br><span class="line"> bottom: -2vw;</span><br><span class="line"> right: -2vw;</span><br><span class="line"> width: 4vw;</span><br><span class="line"> height: 4vw;</span><br><span class="line"> border-radius: 50%;</span><br><span class="line"> box-shadow: 0 0 0 15vw #e91e63; </span><br><span class="line"> z-index: -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.linear &#123;</span><br><span class="line"> background-size: 70% 70%;</span><br><span class="line"> background-image: </span><br><span class="line"> radial-gradient(</span><br><span class="line"> circle at 100% 100%, </span><br><span class="line"> transparent 1vw, </span><br><span class="line"> transparent 2vw, </span><br><span class="line"> #03A9F5 2vw),</span><br><span class="line"> radial-gradient(</span><br><span class="line"> circle at 0 0, </span><br><span class="line"> transparent 0, </span><br><span class="line"> transparent 2vw, </span><br><span class="line"> #03A9F5 2vw),</span><br><span class="line"> radial-gradient(</span><br><span class="line"> circle at 100% 0, </span><br><span class="line"> transparent 0, </span><br><span class="line"> transparent 2vw, </span><br><span class="line"> #03A9F5 2vw),</span><br><span class="line"> radial-gradient(</span><br><span class="line"> circle at 0 100%, </span><br><span class="line"> transparent 0, </span><br><span class="line"> transparent 2vw, </span><br><span class="line"> #03A9F5 2vw);</span><br><span class="line"> background-repeat: no-repeat;</span><br><span class="line"> background-position: </span><br><span class="line"> right bottom, </span><br><span class="line"> left top, </span><br><span class="line"> right top, </span><br><span class="line"> left bottom;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;shadow&quot;&gt;阴影实现缺点最多是2边&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;linear&quot;&gt;径向渐变内切圆角4边&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/hb-myblog.github.io/hb-myblog.github/box-shandow-04.png"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js中一些好用的数组方法</title>
      <link href="/hb-myblog.github.io/2021/10/04/js%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
      <url>/hb-myblog.github.io/2021/10/04/js%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="1、some"><a href="#1、some" class="headerlink" title="1、some()"></a>1、some()</h5><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.some(function(currentValue,index,arr),thisValue)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//把10修改成20</span><br><span class="line">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class="line">ages.some(function (currentValue, index) &#123;</span><br><span class="line">  if (currentValue === 10) &#123;</span><br><span class="line">    ages[index] = 20</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(index);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(ages);</span><br><span class="line"></span><br><span class="line">//把10修改成20 箭头函数</span><br><span class="line">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class="line">ages.some((item, index) =&gt; &#123;</span><br><span class="line">  if (item === 10) &#123;</span><br><span class="line">    ages[index] = 20</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(index);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(ages);</span><br></pre></td></tr></table></figure><h5 id="2、every"><a href="#2、every" class="headerlink" title="2、every()"></a>2、every()</h5><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.every(function(currentValue,index,arr), thisValue)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//判断每个元素的值是否都大于4</span><br><span class="line">var ages = [5, 32, 7, 10, 33, 12, 40];</span><br><span class="line"></span><br><span class="line">var res = ages.some(function (currentValue) &#123;</span><br><span class="line">  return currentValue &gt; 4</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res);</span><br><span class="line">//输出：true</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">var res = ages.some(item =&gt; item &gt; 4)</span><br><span class="line">console.log(res);</span><br><span class="line">//-------------------------</span><br><span class="line">var arr = [ 1, 2, 3, 4, 5, 6 ]; </span><br><span class="line"></span><br><span class="line">var every = arr.every( function( val, index, arr)&#123;</span><br><span class="line">    console.log( &#x27;val：&#x27; + val); //打印1，不会打印2、3、4、5、6</span><br><span class="line"></span><br><span class="line">    return val &gt; 4; </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">console.log(every); //返回false</span><br></pre></td></tr></table></figure><h5 id="3、reduce"><a href="#3、reduce" class="headerlink" title="3、reduce()"></a>3、reduce()</h5><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span><br><span class="line">total：必需。初始值, 或者计算结束后的返回值。</span><br><span class="line">currentValue：必需。当前元素</span><br><span class="line">currentIndex：可选。当前元素的索引</span><br><span class="line">arr：可选。当前元素所属的数组对象。</span><br><span class="line">initialValue：可选。传递给函数的初始值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//计算所有元素的和</span><br><span class="line">var numbers = [15.5, 2.3, 1.1, 4.7];</span><br><span class="line">var res = numbers.reduce(function (total, currentValue) &#123;</span><br><span class="line">  return total += currentValue</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">console.log(res);</span><br><span class="line">//23.6</span><br><span class="line"></span><br><span class="line">//计算大于4的元素的和</span><br><span class="line">var result = numbers.filter(item =&gt; item &gt; 4).reduce((total, item) =&gt; total += item, 0)</span><br><span class="line">console.log(result);</span><br><span class="line">//20.2</span><br></pre></td></tr></table></figure><h5 id="4、includes"><a href="#4、includes" class="headerlink" title="4、includes()"></a>4、includes()</h5><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(searchElement)</span><br><span class="line">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].includes(2);     // true</span><br><span class="line">[1, 2, 3].includes(4);     // false</span><br><span class="line">[1, 2, 3].includes(3, 3);  // false</span><br><span class="line">[1, 2, 3].includes(3, -1); // true</span><br><span class="line">[1, 2, NaN].includes(NaN); // true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webSocket</title>
      <link href="/hb-myblog.github.io/2021/10/04/webSocket/"/>
      <url>/hb-myblog.github.io/2021/10/04/webSocket/</url>
      
        <content type="html"><![CDATA[<h5 id="websocket是什么"><a href="#websocket是什么" class="headerlink" title="websocket是什么"></a>websocket是什么</h5><p>&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。</p><p>&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。</p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用CSS代码让你的列表网页提升渲染性能</title>
      <link href="/hb-myblog.github.io/2021/10/03/%E7%94%A8CSS%E4%BB%A3%E7%A0%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8%E7%BD%91%E9%A1%B5%E6%8F%90%E5%8D%87%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD/"/>
      <url>/hb-myblog.github.io/2021/10/03/%E7%94%A8CSS%E4%BB%A3%E7%A0%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8%E7%BD%91%E9%A1%B5%E6%8F%90%E5%8D%87%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。</p><h5 id="content-visibility属性有三个可选值"><a href="#content-visibility属性有三个可选值" class="headerlink" title="content-visibility属性有三个可选值:"></a>content-visibility属性有三个可选值:</h5><ul><li>visible: 默认值。对布局和呈现不会产生什么影响。</li><li>hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。</li><li>auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。</li></ul><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;!-- 此处省略n个&lt;div class=&quot;card&quot;&gt;&lt;/div&gt; --&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.card &#123;</span><br><span class="line">   position: relative;</span><br><span class="line">   overflow: hidden;</span><br><span class="line">   transition-duration: 0.3s;</span><br><span class="line">   margin-bottom: 10px;</span><br><span class="line">   width: 200px;</span><br><span class="line">   height: 100px;</span><br><span class="line">   background-color: #ffaa00;</span><br><span class="line">   content-visibility: auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题</p><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>​&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。</p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的表单验证</title>
      <link href="/hb-myblog.github.io/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/hb-myblog.github.io/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h5 id="1、判断字符串是否是-https-mailto-tal-开头的"><a href="#1、判断字符串是否是-https-mailto-tal-开头的" class="headerlink" title="1、判断字符串是否是 https?:|mailto:|tal:  开头的"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export function isExternal(path) &#123;</span><br><span class="line">  return /^(https?:|mailto:|tel:)/.test(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、检验字符串是否是-admin-editor"><a href="#2、检验字符串是否是-admin-editor" class="headerlink" title="2、检验字符串是否是 admin  editor"></a>2、检验字符串是否是 admin  editor</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validUsername(str) &#123;</span><br><span class="line">  const valid_map = [&#x27;admin&#x27;, &#x27;editor&#x27;]</span><br><span class="line">  return valid_map.indexOf(str.trim()) &gt;= 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、判断网址"><a href="#3、判断网址" class="headerlink" title="3、判断网址"></a>3、判断网址</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validURL(url) &#123;</span><br><span class="line">  const reg = /^(http?|https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?&#x27;\\+&amp;%$#=~_-]+))*$/</span><br><span class="line">  return reg.test(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、判断都是小写字母"><a href="#4、判断都是小写字母" class="headerlink" title="4、判断都是小写字母"></a>4、判断都是小写字母</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validLowerCase(str) &#123;</span><br><span class="line">  const reg = /^[a-z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、判断都是大写字母"><a href="#5、判断都是大写字母" class="headerlink" title="5、判断都是大写字母"></a>5、判断都是大写字母</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validUpperCase(str) &#123;</span><br><span class="line">  const reg = /^[A-Z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、判断是只能是数字和字母"><a href="#6、判断是只能是数字和字母" class="headerlink" title="6、判断是只能是数字和字母"></a>6、判断是只能是数字和字母</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function validAlphabets(str) &#123;</span><br><span class="line">  const reg = /^[0-9A-Za-z]+$/</span><br><span class="line">  return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、用户密码格式"><a href="#7、用户密码格式" class="headerlink" title="7、用户密码格式"></a>7、用户密码格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export function isEvolPass(str) &#123;</span><br><span class="line">  return /^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/.test(str) // 用户密码格式正则</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、邮箱校验"><a href="#8、邮箱校验" class="headerlink" title="8、邮箱校验"></a>8、邮箱校验</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function isEmail(email) &#123;</span><br><span class="line">  const reg = /^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span><br><span class="line">  return reg.test(email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、验证字符串"><a href="#9、验证字符串" class="headerlink" title="9、验证字符串"></a>9、验证字符串</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export function isString(str) &#123;</span><br><span class="line">  if (typeof str === &#x27;string&#x27; || str instanceof String) &#123;</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">  return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10、手机号码校验"><a href="#10、手机号码校验" class="headerlink" title="10、手机号码校验"></a>10、手机号码校验</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export function isPhone(str) &#123;</span><br><span class="line">  return /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\d&#123;8&#125;$/.test(str) //  手机号码正则</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11、验证是数组"><a href="#11、验证是数组" class="headerlink" title="11、验证是数组"></a>11、验证是数组</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export function isArray(arg) &#123;</span><br><span class="line">  if (typeof Array.isArray === &#x27;undefined&#x27;) &#123;</span><br><span class="line">    return Object.prototype.toString.call(arg) === &#x27;[object Array]&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  return Array.isArray(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、判断只能是汉字"><a href="#12、判断只能是汉字" class="headerlink" title="12、判断只能是汉字"></a>12、判断只能是汉字</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export function isChinese(str)&#123;</span><br><span class="line">const reg=/^[\u0391-\uFFE5]+$/;</span><br><span class="line">    return reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13、校验时间大小"><a href="#13、校验时间大小" class="headerlink" title="13、校验时间大小"></a>13、校验时间大小</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export function checkDate(obj)&#123;</span><br><span class="line">    const obj_value=obj.replace(/-/g,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span><br><span class="line">    // var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span><br><span class="line">    const date1=new Date(Date.parse(obj_value));</span><br><span class="line">    const date2=new Date();//取今天的日期</span><br><span class="line">    if(date1&gt;date2)&#123;</span><br><span class="line">    return false; //不能大于当前时间</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14、判断ip"><a href="#14、判断ip" class="headerlink" title="14、判断ip"></a>14、判断ip</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export function isIP(strIP) &#123;</span><br><span class="line">    if (isNull(strIP)) return false;</span><br><span class="line">    const re=/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/g //匹配IP地址的正则表达式</span><br><span class="line">    if(re.test(strIP))&#123;</span><br><span class="line">    if( RegExp.$1 &lt;256 &amp;&amp; RegExp.$2&lt;256 &amp;&amp; RegExp.$3&lt;256 &amp;&amp; RegExp.$4&lt;256) return true;</span><br><span class="line">    &#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15、检查输入字符串是否为空或者全部都是空格"><a href="#15、检查输入字符串是否为空或者全部都是空格" class="headerlink" title="15、检查输入字符串是否为空或者全部都是空格"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export function isNull( str )&#123;</span><br><span class="line">    if ( str == &quot;&quot; ) return true;</span><br><span class="line">    const regu = &quot;^[ ]+$&quot;;</span><br><span class="line">    var const = new RegExp(regu);</span><br><span class="line">    return re.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="16、判断是否是日期-输入：date：日期；fmt：日期格式"><a href="#16、判断是否是日期-输入：date：日期；fmt：日期格式" class="headerlink" title="16、判断是否是日期  (输入：date：日期；fmt：日期格式)"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export function isDate( date, fmt ) &#123;</span><br><span class="line">    if (fmt==null) fmt=&quot;yyyyMMdd&quot;;</span><br><span class="line">    const yIndex = fmt.indexOf(&quot;yyyy&quot;);</span><br><span class="line">    if(yIndex==-1) return false;</span><br><span class="line">    const year = date.substring(yIndex,yIndex+4);</span><br><span class="line">    const mIndex = fmt.indexOf(&quot;MM&quot;);</span><br><span class="line">    if(mIndex==-1) return false;</span><br><span class="line">    const month = date.substring(mIndex,mIndex+2);</span><br><span class="line">    const dIndex = fmt.indexOf(&quot;dd&quot;);</span><br><span class="line">    if(dIndex==-1) return false;</span><br><span class="line">    const day = date.substring(dIndex,dIndex+2);</span><br><span class="line">    if(!isNumber(year)||year&gt;&quot;2100&quot; || year&lt; &quot;1900&quot;) return false;</span><br><span class="line">    if(!isNumber(month)||month&gt;&quot;12&quot; || month&lt; &quot;01&quot;) return false;</span><br><span class="line">    if(day&gt;getMaxDay(year,month) || day&lt; &quot;01&quot;) return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="17、字符1是否以字符串2开始和结束"><a href="#17、字符1是否以字符串2开始和结束" class="headerlink" title="17、字符1是否以字符串2开始和结束"></a>17、字符1是否以字符串2开始和结束</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function isFirstMatch(str1,str2)&#123;</span><br><span class="line">    const index = str1.indexOf(str2);</span><br><span class="line">    if(index==0) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">export function isLastMatch(str1,str2)&#123;</span><br><span class="line">    const index = str1.lastIndexOf(str2);</span><br><span class="line">    if(str1.length==index+str2.length) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
