<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js大文件上传</title>
      <link href="/2023/03/27/js%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/03/27/js%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>; <span class="comment">// 分片大小，每个分片2MB</span></span><br><span class="line">  <span class="keyword">const</span> fileSize = file.size; <span class="comment">// 文件大小</span></span><br><span class="line">  <span class="keyword">const</span> chunkNum = <span class="built_in">Math</span>.ceil(fileSize / chunkSize); <span class="comment">// 分片数量</span></span><br><span class="line">  <span class="keyword">let</span> uploadedSize = <span class="number">0</span>; <span class="comment">// 已上传大小</span></span><br><span class="line">  <span class="keyword">let</span> chunks = []; <span class="comment">// 分片列表</span></span><br><span class="line">  <span class="comment">// 上传分片</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">uploadChunks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (chunks.length === chunkNum) &#123;</span><br><span class="line">      <span class="comment">// 所有分片上传完成，合并分片</span></span><br><span class="line">      mergeChunks();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> start = chunks.length * chunkSize; <span class="comment">// 分片起始位置</span></span><br><span class="line">    <span class="keyword">const</span> end = <span class="built_in">Math</span>.min(start + chunkSize, fileSize); <span class="comment">// 分片结束位置</span></span><br><span class="line">    <span class="keyword">const</span> chunk = file.slice(start, end); <span class="comment">// 获取分片</span></span><br><span class="line">    <span class="keyword">const</span> fd = <span class="keyword">new</span> FormData(); <span class="comment">// 创建表单数据</span></span><br><span class="line">    fd.append(<span class="string">&#x27;chunk&#x27;</span>, chunk);</span><br><span class="line">    fd.append(<span class="string">&#x27;chunkNum&#x27;</span>, chunks.length + <span class="number">1</span>);</span><br><span class="line">    fd.append(<span class="string">&#x27;fileName&#x27;</span>, file.name);</span><br><span class="line">    fd.append(<span class="string">&#x27;fileSize&#x27;</span>, fileSize);</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// 创建 AJAX 请求</span></span><br><span class="line">    xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;upload.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">        <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span><br><span class="line">          uploadedSize += chunk.size;</span><br><span class="line">          chunks.push(res.data);</span><br><span class="line">          <span class="comment">// 更新上传进度</span></span><br><span class="line">          <span class="keyword">const</span> progress = uploadedSize / fileSize;</span><br><span class="line">          updateProgress(progress);</span><br><span class="line">          <span class="comment">// 继续上传下一个分片</span></span><br><span class="line">          uploadChunks();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(fd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 合并分片</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mergeChunks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;merge.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">        <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 上传完成</span></span><br><span class="line">          <span class="keyword">const</span> url = res.data;</span><br><span class="line">          uploadSuccess(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 上传失败</span></span><br><span class="line">          uploadFail()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">    xhr.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="attr">fileName</span>: file.name,</span><br><span class="line">      <span class="attr">fileSize</span>: fileSize,</span><br><span class="line">      <span class="attr">chunks</span>: chunks</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新上传进度</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params">progress</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新进度条等UI</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 上传成功</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">uploadSuccess</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理上传成功后的逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 上传失败</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">uploadFail</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理上传失败后的逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 开始上传</span></span><br><span class="line">  uploadChunks();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==uploadFile== 函数会先根据文件大小和分片大小计算出分片数量，然后依次上传每个分片，并记录已上传分片的信息。当所有分片上传完成后，会调用 ==mergeChunks== 函数将分片合并，并传递文件名、文件大小和分片信息给后端进行合并操作。最后，如果合并成功，就会调用==uploadSuccess==函数进行上传成功后的处理。 </p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js大文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题汇总</title>
      <link href="/2023/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2023/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="1、长列表渲染"><a href="#1、长列表渲染" class="headerlink" title="1、长列表渲染"></a>1、长列表渲染</h4><p>虚拟列表</p><h4 id="2、-移动端兼容性"><a href="#2、-移动端兼容性" class="headerlink" title="2、 移动端兼容性"></a>2、 移动端兼容性</h4><p><a href="https://max.book118.com/html/2019/0619/5142124023002100.shtm">移动端兼容问题</a></p><h4 id="3、编程题-事件循环"><a href="#3、编程题-事件循环" class="headerlink" title="3、编程题(==事件循环==)"></a>3、编程题(==事件循环==)</h4><p><img src="https://pic7.58cdn.com.cn/nowater/webim/big/n_v22844d1fc8a024ae4a54d6c6843c87e80.jpg" alt="c7971caff58468b4bcd763de428a514.jpg"></p><p>setTimeout放在宏任务队列，this指向==window==，this.skill会发生报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  obj=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;jsCoder&#x27;</span>,</span><br><span class="line">  <span class="attr">skill</span>:[<span class="string">&#x27;es6&#x27;</span>,<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;angular&#x27;</span>],</span><br><span class="line">  <span class="attr">say</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span>  i=<span class="number">0</span>,len=<span class="built_in">this</span>.skill.length;i&lt;len;i++)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;No.&#x27;</span>+(i+<span class="number">1</span>)+<span class="built_in">this</span>.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.skill[i]);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;---------------&#x27;</span>);</span><br><span class="line">      &#125;,<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.say(); </span><br></pre></td></tr></table></figure><h4 id="4、编程题（this指向和闭包）"><a href="#4、编程题（this指向和闭包）" class="headerlink" title="4、编程题（this指向和闭包）"></a>4、编程题（this指向和闭包）</h4><p><img src="https://pic5.58cdn.com.cn/nowater/webim/big/n_v204d0ee6149d848b592e4e9b6f33062ca.jpg" alt="8b246c376f1641a867e4263858ff1fb.jpg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// f() 10 *2 *2</span></span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">11</span>, <span class="comment">// obj.fn() 11 * 2 = 22 // 为什么只执行一次？</span></span><br><span class="line">  <span class="attr">fn</span>: (</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">debugger</span></span><br><span class="line">      <span class="built_in">this</span>.num *= <span class="number">2</span>;</span><br><span class="line">      num += <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// console.log(this, num, this.num);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">debugger</span></span><br><span class="line">        <span class="built_in">this</span>.num *= <span class="number">2</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        num += <span class="number">12</span></span><br><span class="line">        <span class="comment">// console.log(this, num, this.num);</span></span><br><span class="line">        <span class="built_in">console</span>.log(num) <span class="comment">// 第一次执行在内存中存储变量num： 10 + 12 = 22  ；第二次执行从内存中拿变量num 22 + 12 = 34</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">  )(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = obj.fn <span class="comment">// 创建全局函数</span></span><br><span class="line">f() <span class="comment">// 执行全局函数</span></span><br><span class="line">obj.fn() <span class="comment">// 执行obj中的fn</span></span><br><span class="line"><span class="built_in">console</span>.log(num, obj.num)</span><br><span class="line"><span class="comment">// 22</span></span><br><span class="line"><span class="comment">// 34</span></span><br><span class="line"><span class="comment">// 40 22</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Threejs从入门到精通</title>
      <link href="/2023/03/06/Threejs%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2023/03/06/Threejs%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Threejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebGL从入门到精通</title>
      <link href="/2023/03/06/WebGL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2023/03/06/WebGL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<p>s</p>]]></content>
      
      
      
        <tags>
            
            <tag> WebGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探索前沿科技ChatGPT</title>
      <link href="/2023/03/04/%E6%8E%A2%E7%B4%A2%E5%89%8D%E6%B2%BF%E7%A7%91%E6%8A%80ChatGPT/"/>
      <url>/2023/03/04/%E6%8E%A2%E7%B4%A2%E5%89%8D%E6%B2%BF%E7%A7%91%E6%8A%80ChatGPT/</url>
      
        <content type="html"><![CDATA[<h3 id="chatGPT是什么"><a href="#chatGPT是什么" class="headerlink" title="chatGPT是什么"></a>chatGPT是什么</h3><p>chatGPT是一种大型语言模型，使用人工智能技术进行训练和优化，能够模拟人类的自然语言交流，它是由OpenAi公司开发的，旨在帮助人们更加便捷地进行各种任务和沟通。</p><p>chatGPT是一种智能对话系统，它可以通过简单的自然语言输入回答各种问题，这使得用户可以像人类一样与chatGPT进行对话，而不需要掌握特殊的编程或指令技能，chatGPT可以用于解答各种问题，例如天气预报、旅游咨询、健康建议、文化解释、语言翻译等。其次，chatGPT强大的语言处理技术可以自动识别和解决各种语言交流中的难点和问题，可以处理复杂的句子和语法结构，识别并解决各种语言歧义和多义性问题，还可以进行语言翻译，使人们可以更容易跨语言交流。chatGPT可以通过不断的训练和优化来扩展其功能和应用领域，从而更好地为人们提供服务，总之chatGPT是一种功能功能强大且具有潜力的语言模型，它可以使人们更加方便和和容易地进行各种任务和沟通，虽然它仍然存在一些限制和不足之处，但随着技术的不断发展和完善，chatGPT的应用前景仍然非常广阔。</p><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h3><p>从中期来看，ChatGPT可能对劳动力市场的影响分为两类：第一类，增强或放大一些技能，提升已经存在的职业价值；第二类，创造新的高技能工作机会，出现新的职业或行业。</p><p>在全球学术界和产业界人士看来，ChatGPT是划时代产物；对整个认知和创意行业来说，它可能带来类似电脑与手算的天壤之别，必须要全面的思考和认知。</p><p>我们认为，<strong>不久的将来ChatGPT和大模型AI很可能会对人类行动、思维、工作方式造成巨大影响。</strong>随着它的大规模应用，势必会对劳动力市场、教育体系、社会经济，甚至全球劳动分工造成颠覆性改变。面对ChatGPT掀起的浪潮，人们难以依赖过去的经验做出准确判断。</p><p>面向未来，人类该何去何从？接受变化，面对挑战，抓住机遇，<strong>与新一代AI共存融合、共同创造，可能是唯一的选择。</strong></p><p>总而言之，人类具有的独特优势是AI在某些情况下仍然不可替代的。之所以标注上这个提问时间，是因为随着AI的不断进化，或许在不久的将来，这些曾被认为是人类独特的能力或许将会被取代。</p><p>长期来看，企业的商业模式和行业竞争会被重塑。我们更应该思考的是，该如何放大ChatGPT的作用，并与其共存（co-exist）、共创（co-create），乃至共同进化（co-evolve）。这需要我们在未来的工作和教育中主动拥抱GPT模型和相关衍生工具和流程，重塑我们的工作、商业模式和教育体系。</p><p><a href="https://www.toutiao.com/article/7210998293592130087/?app=news_article&timestamp=1680442561&use_new_style=1&req_id=202304022136007C59BEF298C2E2671D20&group_id=7210998293592130087&wxshare_count=1&tt_from=weixin&utm_source=weixin&utm_medium=toutiao_android&utm_campaign=client_share&share_token=6b4375ac-3e47-41e3-98c9-a91e1ce343cf&source=m_redirect&wid=1680442790811">转载自</a></p><h3 id="chatGPT一些实际性的应用"><a href="#chatGPT一些实际性的应用" class="headerlink" title="chatGPT一些实际性的应用"></a>chatGPT一些实际性的应用</h3><h4 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h4><p><a href="https://www.cursor.so/">cursor编辑器</a>是一款与OpenAI合作并且基于GPT4的新一代辅助编程神器,集成了OpenAI 的 GPT-4。它支持多种文件类型，支持格式化文本，支持多种主题，支持多语言语法高亮，支持快捷键设置，支持代码折叠、括号匹配、自动缩进等功能等功能。最关键的是，不用科学上网，它能帮助我们生成代码。</p><h4 id="office365"><a href="#office365" class="headerlink" title="office365"></a>office365</h4><p>微软这一次推出了基于AI打造的Copilot，可以将其植入到OFFICE办公软件中，包括Word、Excel和PowerPoint，微软还表示Copilot基于新一代AI模型GPT-4打造，可以更加符合人类的口吻以及思维模式，用户可以通过Copilot完成许多任务，例如在文档中生成文本、根据Word文档来创建PowerPoint 演示文稿，还可以使用Excel中的数据透视表等功能。需要注意的是，Copilot目前仅在Microsoft 365商业版和教育版中提供，并且可能需要进行许可证的配置才能使用。</p><h3 id="chatGPT使用方法"><a href="#chatGPT使用方法" class="headerlink" title="chatGPT使用方法"></a>chatGPT使用方法</h3><h4 id="黑魔法的使用"><a href="#黑魔法的使用" class="headerlink" title="黑魔法的使用"></a>黑魔法的使用</h4><p>这里我推荐使用3366go进行梯子搭建，地址 <a href="https://3366go.com/%EF%BC%8C%E8%BF%9B%E5%85%A5%E7%BD%91%E5%9D%80%E5%90%8E%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85Windows/Mac/Android/IOS%E5%90%84%E7%A7%8D%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8google%E6%8F%92%E4%BB%B6%EF%BC%8C%E5%85%B6%E4%BB%96%E6%96%B9%E5%BC%8F%E8%AF%B7%E8%87%AA%E8%A1%8C%E6%93%8D%E4%BD%9C%E3%80%82">https://3366go.com/，进入网址后注册一个账号，里面有详细的安装教程，可以安装Windows/Mac/Android/IOS各种版本，这里我推荐使用google插件，其他方式请自行操作。</a></p><p><img src="https://pic8.58cdn.com.cn/nowater/webim/big/n_v2ce37ab24a3004c12b329219813b75984.png" alt="image.png"></p><p>下面是插件安装教程，打开谷歌浏览器或者Edge浏览器的扩展程序</p><p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v2f18a20de0d134669b5da91aaf4d5b398.png" alt="image.png"></p><p>打开开发者模式，将刚才下载的crx插件包拖拽到浏览器中</p><p><img src="https://pic2.58cdn.com.cn/nowater/webim/big/n_v2a1c0abe262fc4ca0a674a3cb615735bf.png" alt="image.png"></p><p><img src="https://pic8.58cdn.com.cn/nowater/webim/big/n_v2dff46e7025cb47efb92e7ac5a0fc0012.png" alt="image.png"></p><p>在扩展快捷栏中找到3366go插件</p><p><img src="https://pic8.58cdn.com.cn/nowater/webim/big/n_v2d0dc268f870e4f759e86cae6c91233a2.png" alt="image.png"></p><p>登录后在当前位置选择任意节点</p><p><img src="https://pic6.58cdn.com.cn/nowater/webim/big/n_v2cf772edfbb5f4c3c9d404fde9f1cb1b6.png" alt="image.png"></p><p>您可以先安装一个客户端做邀请码激活，首次注册赠送7天体验，激活一次邀请码您和邀请码提供者各增加7天体验，我的邀请码是**<font color="red">939344</font>**，欢迎大家接受本人邀请</p><p><img src="/hb-myblog.github/Users\hubin\AppData\Roaming\Typora\typora-user-images\image-20230402202210706.png" alt="image-20230402202210706"></p><p>或者大家可以从这里<a href="https://tieba.baidu.com/f?kw=3366go%E6%89%BE%E8%B7%AF%E4%BA%BA%E7%94%B2%E7%9A%84%E9%82%80%E8%AF%B7%E7%A0%81%E3%80%82">https://tieba.baidu.com/f?kw=3366go找路人甲的邀请码。</a></p><h4 id="谷歌邮箱注册"><a href="#谷歌邮箱注册" class="headerlink" title="谷歌邮箱注册"></a>谷歌邮箱注册</h4><p>地址 <a href="https://www.google.com/intl/zh-CN/gmail/about/">https://www.google.com/intl/zh-CN/gmail/about/</a></p><p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v2bdebdd66fa0944f6ad242dfc56795d3f.png" alt="image.png"></p><h4 id="手机号注册"><a href="#手机号注册" class="headerlink" title="手机号注册"></a>手机号注册</h4><p>地址 <a href="https://sms-activate.org/">https://sms-activate.org/</a></p><p><img src="https://pic5.58cdn.com.cn/nowater/webim/big/n_v21b1396588397420c99fc94bee3baf83b.png" alt="image.png"></p><p>进入网址后切换到中文，然后注册账号，注册提交之后进入邮箱确认</p><p><img src="https://pic5.58cdn.com.cn/nowater/webim/big/n_v2a4b92ecc12d44ebcbc60ebaa7b4d5779.png" alt="image.png"></p><p>然后回到之前的页面进行充值</p><p><img src="/hb-myblog.github/Users\hubin\AppData\Roaming\Typora\typora-user-images\image-20230402174020071.png" alt="image-20230402174020071"></p><p>进入充值页面将滚动条拉到最下方有支付宝充值类型。</p><p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v27c60cc4d0de44d8f963fab99e29f716d.png" alt="image.png"></p><p>这里我们充值最低金额2美元</p><p><img src="https://pic2.58cdn.com.cn/nowater/webim/big/n_v21b241dbfab454d02850d7ef923fed630.png" alt="image.png"></p><p>充值成功后自动跳转回到首页，可以看到我们充值的美刀到账了，没有到账的小伙伴也不用着急，最多五到十分钟就会到账。</p><p><img src="https://pic7.58cdn.com.cn/nowater/webim/big/n_v27cd9cb72871743bdbe620d8ffc6ec679.png" alt="image.png"></p><h4 id="chatGTP账号注册"><a href="#chatGTP账号注册" class="headerlink" title="chatGTP账号注册"></a>chatGTP账号注册</h4><p>首先进入openAi的注册页面，注册一个账号 <a href="https://platform.openai.com/account/org-settings">https://platform.openai.com/account/org-settings</a></p><p><img src="https://pic5.58cdn.com.cn/nowater/webim/big/n_v274f7d835f89d4fdc8d3229eef2a1063d.png" alt="image.png"></p><p>然后用我们之前注册的谷歌邮箱进行账号注册</p><p><img src="/hb-myblog.github/Users\hubin\AppData\Roaming\Typora\typora-user-images\image-20230402180821695.png" alt="image-20230402180821695"></p><p>接下来我们的谷歌邮箱会收到一份邮件，进去之后进行确认，我们会跳转到设置用户名的页面</p><p><img src="https://pic7.58cdn.com.cn/nowater/webim/big/n_v203f63a4a2f2d4c1e911d6894825c997d.png" alt="image.png"></p><p>接着我们回到注册手机号的页面，在左侧搜索栏输入openai，定位到搜索项之后点击，会让我们选择一个国家，这里我们选择的是印度尼西亚，点击它的一个购物车</p><p><img src="/hb-myblog.github/Users\hubin\AppData\Roaming\Typora\typora-user-images\image-20230402181648068.png" alt="image-20230402181648068"></p><p>这个时候我们会跳转到购买号码的页面，然后我们选择一个账户类型，下面列表中会出现一些可选类型</p><p><img src="/hb-myblog.github/Users\hubin\AppData\Roaming\Typora\typora-user-images\image-20230402182828700.png" alt="image-20230402182828700"></p><p><img src="/hb-myblog.github/Users\hubin\AppData\Roaming\Typora\typora-user-images\image-20230402182957740.png" alt="image-20230402182957740"></p><p>我们点击选项卡后面的购买按钮，之后在弹窗里进行确认，即下单了一个可以接收短信的号码，他会出现在下方的列表中</p><p><img src="https://pic5.58cdn.com.cn/nowater/webim/big/n_v2569069c3fa14440f8811748a6fe57d6f.png" alt="image.png"></p><p>这时回到我们的openai注册页面</p><p><img src="https://pic7.58cdn.com.cn/nowater/webim/big/n_v203f63a4a2f2d4c1e911d6894825c997d.png" alt="image.png"></p><p>填好你定义的名字之后点击下一步，进入到验证手机号界面，选择你注册手机号的国家，填入你刚才购买的号码，</p><p><img src="https://pic7.58cdn.com.cn/nowater/webim/big/n_v228e961bc989b45fcb16aa3748fb048d4.png" alt="image.png"></p><p>这里我们选择是</p><p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v2b43eff80f34847a9ae03ae6f4166a0df.png" alt="image.png"></p><p>这里我们选择通过短信发送</p><p><img src="https://pic5.58cdn.com.cn/nowater/webim/big/n_v2c71ccd219dbb4eb28a30c01a1b897bee.png" alt="image.png"></p><p>点击这个位置的地址按钮，将复制的号码粘贴到注册页面中，点击确认发送短信，接下来我们等待验证码，这里需要的时间可能长一些，请耐心等待，收到短信后会有“叮~”的一声，号码页面会出现一条短信，在下如所示位置，复制验证码到注册页面，这时我们就注册完成了</p><p><img src="https://pic6.58cdn.com.cn/nowater/webim/big/n_v22e8046f2eec9434eaa776040c20f8d01.png" alt="image.png"></p><p>最后我们进入openAi的官网 <a href="http://www.openai.com,从导航栏找到chatgtp,点击进入,跳转到登录页面,我们输入自己的账号(谷歌邮箱)和密码,就会跳转到chatgtp聊天页面,我们就可以和chatgtp进行愉快的对话交流了!/">www.openai.com，从导航栏找到chatGTP，点击进入，跳转到登录页面，我们输入自己的账号（谷歌邮箱）和密码，就会跳转到chatGTP聊天页面，我们就可以和chatGTP进行愉快的对话交流了！</a></p><p><img src="https://pic6.58cdn.com.cn/nowater/webim/big/n_v26896494e92ca4fdb968c875106b89d75.png" alt="image.png"></p><p><img src="https://pic2.58cdn.com.cn/nowater/webim/big/n_v2348948e7bad74246ab54a8b5ea0bbf52.png" alt="image.png"></p><p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v2b0dd6c435268421f8fa6e90c33df7993.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> ChatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品360度旋转展示效果实现</title>
      <link href="/2023/02/28/%E4%BA%A7%E5%93%81360%E5%BA%A6%E6%97%8B%E8%BD%AC%E5%B1%95%E7%A4%BA%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/02/28/%E4%BA%A7%E5%93%81360%E5%BA%A6%E6%97%8B%E8%BD%AC%E5%B1%95%E7%A4%BA%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v271fc8841723342a59e3872f46f46d0fa.png" alt="image.png"></p><p><a href="https://www.dongchedi.com/auto/series/4499">https://www.dongchedi.com/auto/series/4499</a></p><p>图片素材</p><p><img src="https://pic7.58cdn.com.cn/nowater/webim/big/n_v2a0cf6dee153940d69e6d3b6544a27977.png" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>&lt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/53a847f7fb68421da55d55c052594e22~noop.image?_iz=58558&from=article.pc_detail&x-expires=1678194517&x-signature=fuLQHk3+3OCIDKxagLF11+/aDQM=" alt="img"></p><p><strong>原理：就是通过js改变img标签的src地址，附值不同角度的图片</strong></p><p><a href="https://www.dongchedi.com/auto/series/4499">https://www.dongchedi.com/auto/series/4499</a> 下的效果是通过控制不同角度的图片的opacity实现的</p><p><strong>关于增加性能开启了3D加速：</strong></p><p>动态改变元素的translate3D，自然开启了3D加速。</p><p>setTimeout/setInterval/requestAnimationFrame和CSS3没有很大的帧速差别。</p><p><strong>现今主要的不同点是：</strong></p><ul><li>功能涵盖面，JS比CSS3大<br>定义动画过程的@keyframes不支持递归定义，如果有多种类似的动画过程，需要调节多个参数来生成的话，将会有很大的冗余（比如jQuery Mobile的动画方案），而JS则天然可以以一套函数实现多个不同的动画过程时间尺度上，@keyframes的动画粒度粗，而JS的动画粒度控制可以很细CSS3动画里被支持的时间函数非常少，不够灵活以现有的接口，CSS3动画无法做到支持两个以上的状态转化。</li><li>实现/重构难度不一，CSS3比JS更简单，性能调优方向固定。</li><li>对于帧速表现不好的低版本浏览器，CSS3可以做到自然降级，而JS则需要撰写额外代码。</li><li>CSS3有兼容性问题，而JS大多时候没有兼容性问题。</li></ul><p><strong>如何判断鼠标或触摸是向左、向右、向上、向下滑动</strong></p><p>触摸参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startx, starty;</span><br><span class="line">    <span class="comment">//获得角度</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAngle</span>(<span class="params">angx, angy</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.atan2(angy, angx) * <span class="number">180</span> / <span class="built_in">Math</span>.PI;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//根据起点终点返回方向 1向上 2向下 3向左 4向右 0未滑动</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDirection</span>(<span class="params">startx, starty, endx, endy</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> angx = endx - startx;</span><br><span class="line">        <span class="keyword">var</span> angy = endy - starty;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//如果滑动距离太短</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(angx) &lt; <span class="number">2</span> &amp;&amp; <span class="built_in">Math</span>.abs(angy) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> angle = getAngle(angx, angy);</span><br><span class="line">        <span class="keyword">if</span> (angle &gt;= -<span class="number">135</span> &amp;&amp; angle &lt;= -<span class="number">45</span>) &#123;</span><br><span class="line">            result = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (angle &gt; <span class="number">45</span> &amp;&amp; angle &lt; <span class="number">135</span>) &#123;</span><br><span class="line">            result = <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((angle &gt;= <span class="number">135</span> &amp;&amp; angle &lt;= <span class="number">180</span>) || (angle &gt;= -<span class="number">180</span> &amp;&amp; angle &lt; -<span class="number">135</span>)) &#123;</span><br><span class="line">            result = <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (angle &gt;= -<span class="number">45</span> &amp;&amp; angle &lt;= <span class="number">45</span>) &#123;</span><br><span class="line">            result = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//手指接触屏幕</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&quot;touchstart&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        startx = e.touches[<span class="number">0</span>].pageX;</span><br><span class="line">        starty = e.touches[<span class="number">0</span>].pageY;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//手指离开屏幕</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&quot;touchend&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> endx, endy;</span><br><span class="line">        endx = e.changedTouches[<span class="number">0</span>].pageX;</span><br><span class="line">        endy = e.changedTouches[<span class="number">0</span>].pageY;</span><br><span class="line">        <span class="keyword">var</span> direction = getDirection(startx, starty, endx, endy);</span><br><span class="line">        <span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                alert(<span class="string">&quot;未滑动！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                alert(<span class="string">&quot;向上！&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                alert(<span class="string">&quot;向下！&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                alert(<span class="string">&quot;向左！&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                alert(<span class="string">&quot;向右！&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>鼠标模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div=<span class="built_in">document</span>.getElementById(<span class="string">&quot;元素id&quot;</span>);</span><br><span class="line">        div.onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">          <span class="comment">//按下</span></span><br><span class="line">               <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                   </span><br><span class="line">                <span class="comment">//移动</span></span><br><span class="line">                 </span><br><span class="line">               &#125;;</span><br><span class="line">               <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                   <span class="built_in">document</span>.onmouseup=<span class="literal">null</span>;</span><br><span class="line">                   <span class="built_in">document</span>.onmousemove=<span class="literal">null</span>;</span><br><span class="line">                  <span class="comment">//松开</span></span><br><span class="line">               &#125;;</span><br><span class="line">         &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 产品360度旋转展示效果实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue操作真实DOM性能瓶颈</title>
      <link href="/2023/02/28/Vue%E6%93%8D%E4%BD%9C%E7%9C%9F%E5%AE%9EDOM%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/"/>
      <url>/2023/02/28/Vue%E6%93%8D%E4%BD%9C%E7%9C%9F%E5%AE%9EDOM%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/</url>
      
        <content type="html"><![CDATA[<h1 id="▶vue性能瓶颈的几种情况："><a href="#▶vue性能瓶颈的几种情况：" class="headerlink" title="▶vue性能瓶颈的几种情况："></a><font color="red">▶</font>vue性能瓶颈的几种情况：</h1><p>1、一次渲染大量的数据的时候,存在大量数据并且都是复杂类型的时候,会导致vue对数据的劫持时间和渲染时间变长, js 连续执行时间过长，会导致页面长时间无法交互，而且渲染时间太慢，用户一次交互反馈的时间过长。</p><p><strong>优化方案:</strong> 可以使用requestAnimation这个方法,将数据进行分割,分批次渲染,减少了 js 的连续运行时间，并且加快了渲染时间，利用加长总运行时间换取了渲染时间，用户既能快速得到反馈，而且不会因为过长时间的 js 运行而无法与页面交互。</p><p>2、当页面中存在大量数据,只是修改了一小部分导致页面也会导致页面卡顿,因为vue的更新以组件为粒度进行更新的，只要修改了当前组件中所使用的数据，组件就会整个去进行更新,造成大量的时间浪费。</p><p><strong>优化方案:</strong> 将不同的模块划分成不同的组件,这样有效降低虚拟dom的diff运算时间过长的问题,比如将大量数据的模块单独放一个组件,其它放一个组件,由于vue是以组件为粒度更新,修改其它组件的情况下不会导致table的重新diff,提升页面响应速度高达几百倍。</p><p>3、动态插槽作用域或者静态插槽的更新</p><p><strong>优化方案:</strong> 使用插槽作用域来替换这两种操作方式,一样能提升性能,因为使用插槽作用域之后,插槽内容会被封装到一个函数中,被子组件渲染,而不是在父组件。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue操作真实DOM性能瓶颈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Native 从入门到精通</title>
      <link href="/2023/02/18/React-Native-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2023/02/18/React-Native-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React从入门到入狱</title>
      <link href="/2022/11/12/React%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2022/11/12/React%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h4 id="React基础"><a href="#React基础" class="headerlink" title="React基础"></a>React基础</h4><h5 id="1-jsx语法规则"><a href="#1-jsx语法规则" class="headerlink" title="1.jsx语法规则:"></a>1.jsx语法规则:</h5><ol><li>定义虚拟DOM时，不要写引号。</li><li>标签中混入JS表达式时要用{}。</li><li>样式的类名指定不要用class，要用className。</li><li>内联样式，要用<code>style=&#123;&#123;key : value&#125;&#125;</code>的形式去写。</li><li>只有一个根标签</li><li>标签必须闭合</li><li>标签首字母<br>(1). 若小写字母开头，则将改标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。<br>(2). 若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</li></ol><h5 id="2-函数式组件"><a href="#2-函数式组件" class="headerlink" title="2.函数式组件"></a>2.函数式组件</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建函数式组件function </span></span><br><span class="line"><span class="function"><span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.渲染组件到页面</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById( <span class="string">&#x27;test&#x27;</span> ))</span><br></pre></td></tr></table></figure><h5 id="3-类式组件"><a href="#3-类式组件" class="headerlink" title="3.类式组件"></a>3.类式组件</h5><ol><li>创建类式组件<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//render是放在哪里的?-- MyComponent的原型对象上，供实例使用。</span></span><br><span class="line">    <span class="comment">//render中的this是谁?— MyComponent的实例对象〈=&gt;MyComponent组件实例对象。console.log( &#x27; render中的this : &#x27; ,this);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>渲染组件到页面<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById( <span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么?</span></span><br><span class="line"><span class="comment">  1.React解析组件标签，找到了MyComponent组件。</span></span><br><span class="line"><span class="comment">  2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span></span><br><span class="line"><span class="comment">  3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="4-生命周期函数"><a href="#4-生命周期函数" class="headerlink" title="4.生命周期函数"></a>4.生命周期函数</h5><p><strong>旧</strong></p><ul><li>初始化阶段:由ReactDOM.render()触发—初次渲染</li></ul><ol><li>constructor()</li><li>componentwillMount()</li><li>render()</li><li>componentDidMount()</li></ol><ul><li>更新阶段:由组件内部this.setSate()或父组件重新render触发</li></ul><ol><li>shouldComponentUpdate()</li><li>componentwillUpdate()</li><li> render()</li><li>componentDidUpdate()</li></ol><ul><li>卸载组件:由ReactDOM.unmountComponentAtNode()触发</li></ul><ol><li>componentwi11Unmount()</li></ol><p><strong>新</strong></p><ul><li>初始化阶段:由ReactDOM.render()触发—初次渲染</li></ul><ol><li>constructor()</li><li>getDerivedStateFromProps()—-当state完全取决于props时使用</li><li>render()</li><li>componentDidMount()</li></ol><ul><li>更新阶段:由组件内部this.setSate()或父组件重新render触发</li></ul><ol><li>getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()—–更新之前获取快照</li><li>componentDidUpdate()</li></ol><ul><li>卸载组件:由ReactDOM.unmountComponentAtNode()触发</li></ul><p>1.componentwi11Unmount()</p><h5 id="5-动态初始化列表，如何确定将数据放在哪个组件的state中"><a href="#5-动态初始化列表，如何确定将数据放在哪个组件的state中" class="headerlink" title="5.动态初始化列表，如何确定将数据放在哪个组件的state中?"></a>5.动态初始化列表，如何确定将数据放在哪个组件的state中?</h5><ol><li>某个组件使用:放在自身的state中</li><li>某些组件使用:放在他们共同的父组件state中(官方称此操作为:状态提升)</li></ol><h5 id="6-关于父子之间通信"><a href="#6-关于父子之间通信" class="headerlink" title="6.关于父子之间通信:"></a>6.关于父子之间通信:</h5><ol><li>【父组件】给【子组件】传递数据:通过props传递</li><li>【子组件】给【父组件】传递数据:通过props传递，要求父提前给子传递一个函数</li></ol><h5 id="7-编写setupProxy-js配置具体代理规则"><a href="#7-编写setupProxy-js配置具体代理规则" class="headerlink" title="7.编写setupProxy.js配置具体代理规则:"></a>7.编写setupProxy.js配置具体代理规则:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware &#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) <span class="title">i</span></span></span><br><span class="line"><span class="function"><span class="title">app</span>.<span class="title">use</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  proxy(<span class="string">&#x27;/api1&#x27;</span>， &#123; <span class="regexp">//</span>api1是需要转发的请求(所有带有/api1前缀的请求都会转发给<span class="number">5000</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">    target: <span class="string">&#x27;http:/ /1oca7host:5000&#x27;</span>，<span class="regexp">//</span>配置转发目标地址(能返回数据的服务器地址)</span></span></span><br><span class="line"><span class="params"><span class="function">    changeorigin: <span class="literal">true</span>，<span class="regexp">//</span>控制服务器接收到的请求头中host字段的值</span></span></span><br><span class="line"><span class="params"><span class="function">      /*</span></span></span><br><span class="line"><span class="params"><span class="function">      changeorigin设置为<span class="literal">true</span>时， 服务器收到的请求头中的host为: localhost: <span class="number">5000</span> </span></span></span><br><span class="line"><span class="params"><span class="function">      changeOrigin设置为<span class="literal">false</span>时， 服务器收到的请求头中的host为: l1ocalhost: <span class="number">3000</span> </span></span></span><br><span class="line"><span class="params"><span class="function">      changeorigin默认值为<span class="literal">false</span>， 但我们一般将changeorigin值设为<span class="literal">true</span></span></span></span><br><span class="line"><span class="params"><span class="function">      */</span></span></span><br><span class="line"><span class="params"><span class="function">    pathRewrite: &#123;<span class="string">&#x27;^/api1 &#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;<span class="regexp">//</span>去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;)，</span></span></span><br><span class="line"><span class="params"><span class="function">  proxy(<span class="string">&#x27;/api2&#x27;</span>， &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    target: <span class="string">&#x27;http: //localhost : 5001&#x27;</span>，</span></span></span><br><span class="line"><span class="params"><span class="function">    changeorigin: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    pathRewrite: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;)</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span></span><br></pre></td></tr></table></figure><h5 id="8-消息订阅与发布机制"><a href="#8-消息订阅与发布机制" class="headerlink" title="8.消息订阅与发布机制"></a>8.消息订阅与发布机制</h5><p><code>npm install pubsub-js</code><br>1.先订阅，再发布（理解:有一种隔空对话的感觉)<br>2.适用于任意组件间通信<br>3.要在组件的componentwillUnmount中取消订阅</p><h5 id="9-路由的基本使用"><a href="#9-路由的基本使用" class="headerlink" title="9.路由的基本使用"></a>9.路由的基本使用</h5><ol><li>路由跳转标签改为Link标签<br><code>&lt;Link to=&quot;/xxxxx&quot; &gt;Demo&lt;/Link&gt;</code><br><code>&lt;NavLink activeClassName=&quot;myActiveClassName&quot; to=&quot;/xxxxx&quot; &gt;Demo&lt;/NavLink&gt;</code></li><li>展示区写Route标签进行路径的匹配<br><code>&lt;Route path=&#39;/xxxx&#39; component=&#123; Demo&#125;/&gt;</code></li><li><App>的最外侧包裹了一个<BrowserRouter>或<HashRouter></HashRouter></BrowserRouter></App></li></ol><h5 id="10-路由组件与一般组件"><a href="#10-路由组件与一般组件" class="headerlink" title="10.路由组件与一般组件"></a>10.路由组件与一般组件</h5><ol><li>写法不同:<br>一般组件: <code>&lt;Demo/&gt;</code><br>路由组件: <code>&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;/&gt;</code></li><li>存放位置不同:<br>一般组件: components<br>路由组件: pages</li><li>接收到的props不同:<br>一般组件:写组件标签时传递了什么，就能收到什么<br>路由组件:接收到三个固定的属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">history:</span><br><span class="line">  go: f go(n)</span><br><span class="line">  <span class="attr">goBack</span>: f goBack()</span><br><span class="line">  <span class="attr">goForward</span>: f goForward()</span><br><span class="line">  <span class="attr">push</span>: f push(path, state)</span><br><span class="line">  <span class="attr">replace</span>: f replace(path，state)</span><br><span class="line"><span class="attr">location</span>:</span><br><span class="line">  pathname: <span class="string">&quot;/ about&quot;</span></span><br><span class="line">  <span class="attr">search</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">state</span>: <span class="literal">undefined</span></span><br><span class="line"><span class="attr">match</span>:</span><br><span class="line">  params: &#123;&#125;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span></span><br><span class="line">  <span class="attr">ur1</span>: <span class="string">&quot;/ about&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="11-NavLink与封装NavLink"><a href="#11-NavLink与封装NavLink" class="headerlink" title="11.NavLink与封装NavLink"></a>11.NavLink与封装NavLink</h5><ol><li>NavLink可以实现路由链接的高亮，通过activeclassName指定样式名</li><li>标签体内容是一个特殊的标签属性</li><li>通过this.props.children可以获取标签体内容</li></ol><h5 id="12-Switch的使用"><a href="#12-Switch的使用" class="headerlink" title="12.Switch的使用"></a>12.Switch的使用</h5><ol><li>通常情况下，path和component是一一对应的关系。</li><li>Switch可以提高路由匹配效率(单一匹配)。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Switch, Route&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="13-history路由模式下解决多级路径刷新页面样式丢失的问题"><a href="#13-history路由模式下解决多级路径刷新页面样式丢失的问题" class="headerlink" title="13.history路由模式下解决多级路径刷新页面样式丢失的问题"></a>13.history路由模式下解决多级路径刷新页面<font color="orange">样式丢失的问题</font></h5><ol><li>public/index.htm1 中引入样式时不写./ 写/（常用)</li><li>public/index.htm1 中引入样式时不写﹒/写%PUBLIC_URL%（常用)</li><li>使用HashRouter</li></ol><h5 id="14-路由严格匹配（慎用）"><a href="#14-路由严格匹配（慎用）" class="headerlink" title="14.路由严格匹配（慎用）"></a>14.路由严格匹配（慎用）</h5><p><code>&lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</code></p><p>路由默认开启模糊匹配(简单记:【输入的路径】必须包含要【匹配的路径】，且顺序要一致)<br><code>&lt;Link to=&quot;/home/a/b&quot; &gt;Demo&lt;/Link&gt;</code> </p><p><code>http://localhost:3000/home/a/b</code>未匹配到a或b的情况下默认给到/home页面<br>页面没有问题一般不开启严格匹配，如果出现由于模糊匹配引发的问题，这种情况再开启严格匹配。有些时候开启会导致无法继续匹配二级路由</p><p>用法<code>&lt;Route exact path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</code></p><h5 id="15-Redirect的使用"><a href="#15-Redirect的使用" class="headerlink" title="15.Redirect的使用"></a>15.Redirect的使用</h5><p>1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由<br>2.具体编码:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/ Switch&gt;</span><br></pre></td></tr></table></figure><h5 id="16-嵌套路由"><a href="#16-嵌套路由" class="headerlink" title="16.嵌套路由"></a>16.嵌套路由</h5><ol><li>注册子路山时要写上父路山的path值</li><li>路山的匹配是按照注册路由的顺序进行的</li></ol><h5 id="17-向路由组件传递参数"><a href="#17-向路由组件传递参数" class="headerlink" title="17.向路由组件传递参数"></a>17.向路由组件传递参数</h5><ol><li><p>params参数<br>路由链接(携带参数):<code>&lt;Link to=&#39;/demo/test/tom/18&#39;&#125;&gt;详情&lt;/Link&gt;</code><br>注册路由(声明接收):<code>&lt;Route path=&quot;/demo/test/:name/:age&quot; component=&#123;Test&#125;/&gt;</code><br>接收参数: <code>this.props.match.params</code></p></li><li><p>search参数<br>路由链接(携带参数):<code>&lt;Link to=&#39; /demo/test?name=tom&amp;age=18&#39;&#125;&gt;诈情&lt;/Link&gt;</code><br>注册路由(无需声明，正常注册即可):<code>&lt;Route path=&quot; /demo/test&quot; component=&#123;Test&#125;/&gt;</code><br>接收参数: <code>this.props.location.search</code><br>备注:获取到的search是urlencoded编码字符串，需要借助querystring解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;querystring&#x27;</span></span><br><span class="line">qs.parse(<span class="string">&#x27;id=1&amp;name=tom&#x27;</span>) <span class="comment">//&#123;id:&#x27;1&#x27;,name:&#x27;tom&#x27;&#125;</span></span><br><span class="line">qs.stringfy(&#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>&#125;) <span class="comment">//id=1&amp;name=tom</span></span><br></pre></td></tr></table></figure></li><li><p>state参数<br>路由链接(携带参数):<code>&lt;Link to=&#123;&#123;path: '/demo/test' ,state:&#123;name : 'tom' ,age:18]&#125;&#125;&gt;详情&lt;/Link&gt;</code><br>注册路由(无需声明，正常注册即可):<code>&lt;Route path=&quot; /demo/test&quot; component=&#123;Test&#125;/&gt;</code><br>接收参数: <code>this.props.location.state</code><br>备注:刷新也可以保留住参数</p></li></ol><h5 id="18-路由push模式和replace模式"><a href="#18-路由push模式和replace模式" class="headerlink" title="18.路由push模式和replace模式"></a>18.路由push模式和replace模式</h5><p><code>&lt;Link replace to=&#123;&#123;path:'/demo/test' ,state:&#123;name : 'tom' ,age:18]&#125;&#125;&gt;详情&lt;/Link&gt;</code></p><h5 id="19-编程式路由导航"><a href="#19-编程式路由导航" class="headerlink" title="19.编程式路由导航"></a>19.编程式路由导航</h5><p>借助this.prosp.history对象上的API对操作路由跳转、前进、后退</p><ul><li>this.prosp.history.push()</li><li>this.prosp.history.replace()</li><li>this.prosp.history.goBack()</li><li>this.prosp.history.goForward()</li><li>this.prosp.history.go()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.propps.histroy.push(<span class="string">&#x27;/xxx/id/name&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.propps.histroy.push(<span class="string">&#x27;/xxx/?id=xxx&amp;name=xxx&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.propps.histroy.push(<span class="string">&#x27;/xxx&#x27;</span>, &#123;...&#125;)</span><br></pre></td></tr></table></figure><h5 id="20-withRouter的使用"><a href="#20-withRouter的使用" class="headerlink" title="20.withRouter的使用"></a>20.withRouter的使用</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; … &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(Header)</span><br><span class="line"><span class="comment">//withRouter可以加工一般组件，让一般组件具备路由组件所特有的API</span></span><br><span class="line"><span class="comment">// withRouter的返回值是一个新组件</span></span><br></pre></td></tr></table></figure><h5 id="21-BrowserRouter、HashRouter的区别"><a href="#21-BrowserRouter、HashRouter的区别" class="headerlink" title="21.BrowserRouter、HashRouter的区别"></a>21.BrowserRouter、HashRouter的区别</h5><ol><li>底层原理不一样:<br>BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。HashRouter使用的是URL的哈希值。</li><li>ur1表现形式不一样<br>BrowserRouter的路径中没有#,例如: localhost:3000/demo/testHashRouter的路径包含#,例如: localhost:3000/#/demo/test</li><li>刷新后对路由state参数的影响<br>(1). BrowserRouter没有任何影响，因为state保存在history对象中。<br>(2). HashRouter刷新后会导致路由state参数的丢失。</li><li>备注: HashRouter可以用于解决一些路径错误相关的问题。</li></ol><h5 id="22-antd的按需引入-自定主题"><a href="#22-antd的按需引入-自定主题" class="headerlink" title="22.antd的按需引入+自定主题"></a>22.antd的按需引入+自定主题</h5><ol><li>安装依赖:<code>yarn add react-app-rewired customize-cra babel-plugin-import less less-loader</code></li><li>修改package.json<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;start&quot;</span> :<span class="string">&quot;react-app-rewired start&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;build&quot;</span> :<span class="string">&quot;react-app-rewired build&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;test&quot;</span> : <span class="string">&quot;react-app-rewired test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;eject&quot;</span> : <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>根目录下创建config-overrides.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置具体的修改规则</span></span><br><span class="line"><span class="keyword">const</span> &#123; override，fixBabelImports,addLessLoader&#125; = <span class="built_in">require</span>( <span class="string">&#x27; customize-cra&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  fixBabelImports(<span class="string">&#x27;import , &#123;</span></span><br><span class="line"><span class="string">    libraryName: &#x27;</span>antd<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    libraryDirectory: &#x27;</span>es<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    style: true,</span></span><br><span class="line"><span class="string">  &#125;),</span></span><br><span class="line"><span class="string">  addLessLoader(&#123;</span></span><br><span class="line"><span class="string">    lessoptions:&#123;</span></span><br><span class="line"><span class="string">      javascriptEnabled: true,</span></span><br><span class="line"><span class="string">      modifyVars: &#123;&#x27;</span>@primary-color<span class="string">&#x27; : &#x27;</span>green<span class="string">&#x27;&#125;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></li><li>备注:不用在组件里亲自引入样式了，即: import ‘antd/dist/antd.css’应该删掉</li></ol><h5 id="23-redux精简版"><a href="#23-redux精简版" class="headerlink" title="23.redux精简版"></a>23.redux精简版</h5><p><strong>(1)</strong>. 去除Count组件自身的状态<br><strong>(2)</strong>. src下建立:</p><blockquote><p>-redux</p><blockquote><p>-store.js<br>-count_reducer.js</p></blockquote></blockquote><p><strong>(3)</strong>. store.js:<br>1).引入redux中的createStore函数，创建一个store<br>2).createstore调用时要传入一个为其服务的reducer<br>3).记得暴露store对象<br><strong>(4)</strong>. count_reducer.js:<br>1).reducer的本质是一个函数，接收: preState,action，返回加工后的状态<br>2).reducer有两个作用:初始化状态，加工状态<br>3).reducer被第一次调用时，是store自动触发的，传递的preState是undefined，传递的action是:{type : ‘@@REDUX/ INIT_a.2.b.4}<br><strong>(5)</strong>. 在index.js中监测store中状态的改变，一旦发生改变重新渲染<code>&lt;App/&gt;</code><br>备注: redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。</p><h5 id="24-redux完整版"><a href="#24-redux完整版" class="headerlink" title="24.redux完整版"></a>24.redux完整版</h5><p><strong>新增文件:</strong></p><ol><li>count_action.js 专门用于创建action对象</li><li>constant.js放置容易写错的type值工<br><img src="https://pic2.58cdn.com.cn/nowater/webim/big/n_v2317857e1c4c9412f94132d33a41cbc8c.png" alt="redux原理图"></li></ol><h5 id="25-redux异步action版"><a href="#25-redux异步action版" class="headerlink" title="25.redux异步action版"></a>25.redux异步action版</h5><ol><li>明确:延迟的动作不想交给组件自身，想交给action</li><li>何时需要异步action:想要对状态进行操作，但是具体的数据靠异步任务返回。</li><li>具体编码:</li></ol><ul><li>yarn add redux-thunk，并配置在store中</li><li>创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。</li><li>异步任务有结果后，分发一个同步的action去真正操作数据</li></ul><ol start="4"><li>备注:异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。</li></ol><h5 id="26-react-redux基本使用"><a href="#26-react-redux基本使用" class="headerlink" title="26.react-redux基本使用"></a>26.react-redux基本使用</h5><ol><li>明确两个概念:</li></ol><p>1). UI组件:不能使用任何redux的api，只负责页面的呈现、交互等。<br>2). 容器组件:负责和redux通信，将结果交给UI组件。<br>2. 如何创建一个容器组件–—靠react-redux的connect函数<br>connect(mapStateToProps,mapDispatchToProps)(UI组件)<br>-mapstateToProps:映射状态，返回值是一个对象<br>-mapDispatchToProps:映射操作状态的方法，返回值是一个对象<br>3. 备注:容器组件中的store是靠props传进去的，而不是在容器组件中直接引入<br>4. 备注2: mapDispatchToProps，也可以是一个对象<br><img src="https://pic2.58cdn.com.cn/nowater/webim/big/n_v22da92f5537ff42928c964b2672e2f221.png" alt="react-redux原理图"></p><h5 id="27-react-redux优化"><a href="#27-react-redux优化" class="headerlink" title="27.react-redux优化"></a>27.react-redux优化</h5><ol><li>容器组件和UI组件混成一个文件</li><li>无需自己给容器组件传递store，给<code>&lt;App/&gt;</code>包裹一个<code>&lt;Provider store=&#123;store&#125;&gt;</code>即可。</li><li>使用了react-redux后也不用再自己检测redux中状态的改变了,<br>容器组件可以自动完成这个工作。</li><li>mapDispatchToProps也可以简单的写成一个对象</li><li>一个组件要和redux“打交道”要经过那几步?</li></ol><ul><li>(1).定义好UI组件—不暴露</li><li>(2).引入connect生成一个容器组件，并暴露，写法如下:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect(</span><br><span class="line">  <span class="function"><span class="params">state</span> =&gt;</span>(&#123;<span class="attr">key</span>:value&#125;), <span class="comment">// 映射状态</span></span><br><span class="line">  &#123;<span class="attr">key</span> : xxxxXAction&#125; <span class="comment">// 映射操作状态的方法</span></span><br><span class="line">)(UI组件)</span><br></pre></td></tr></table></figure></li><li>(3).在UI组件中通过this.props.xxxxxxx读取和操作状态</li></ul><h5 id="28-react-redux数据共享"><a href="#28-react-redux数据共享" class="headerlink" title="28.react-redux数据共享"></a>28.react-redux数据共享</h5><ol><li>定义一个Pserson组件，和lCount组件通过redux共享数据。</li><li>为Person组件编写: reducer、action，配置constant常量。</li><li>重点:Person的reducer和Count的Reducer要使用combineReducers进行合并，合并后的总状态是一个对象!</li><li>交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。</li></ol><h5 id="29-react-redux开发者工具的使用"><a href="#29-react-redux开发者工具的使用" class="headerlink" title="29.react-redux开发者工具的使用"></a>29.react-redux开发者工具的使用</h5><ol><li>yarn add redux-devtools-extension</li><li>store中进行配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;composewithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(allReducer,composewithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure></li></ol><h5 id="30-react-redux代码优化"><a href="#30-react-redux代码优化" class="headerlink" title="30.react-redux代码优化"></a>30.react-redux代码优化</h5><ol><li>所有变量名字要规范，尽量触发对象的简写形式。</li><li>reducers文件夹中，编写index.js专门用于汇总并暴露所有的reducer</li></ol><h4 id="React扩展"><a href="#React扩展" class="headerlink" title="React扩展"></a>React扩展</h4><h5 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h5><h6 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h6><ol><li>setState(statechange，[callback])——对象式的setState</li></ol><ul><li>1.stateChange为状态改变对象(该对象可以体现出状态的更改)</li><li>2.callback是可选的回调函数，它在状态更新完毕、界面也更新后(render调用后)才被调用</li></ul><ol start="2"><li>setState(updater,[callback])——函数式的setState</li></ol><ul><li>1.updater为返回stateChange对象的函数。</li><li>2.updater可以接收到state和props.</li><li>3.callback是可选的回调函数，它在状态更新、界面也更新后(render调用后)才被调用。</li></ul><p><strong>总结:</strong></p><ol><li>对象式的setstate是函数式的setstate的简写方式(语法糖)</li><li>使用原则:</li></ol><ul><li>(1).如果新状态不依赖于原状态===&gt;使用对象方式</li><li>(2).如果新状态依赖于原状态===≥使用函数方式</li><li>(3).如果需要在setstate()执行后获取最新的状态数据，要在第二个callback函数中读取</li></ul><h5 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2.lazyLoad"></a>2.lazyLoad</h5><p>路由组件的lazyLoad</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.通过React的lazy函数配合import()函数动态加载路由组件===&gt;路由组件代码会被分开打包</span></span><br><span class="line"><span class="keyword">const</span> Login = lazy(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@/pages/Login&#x27;</span>))</span><br><span class="line"><span class="comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span></span><br><span class="line">&lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>loading. . . ..<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/××x&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Xxx×&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/Suspense&gt;</span><br></pre></td></tr></table></figure><h5 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3.Hooks"></a>3.Hooks</h5><h6 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. React Hook/Hooks是什么?</h6><ol><li>Hook是React 16.8.0版本增加的新特性/新语法</li><li>可以让你在函数组件中使用state以及其他的React特性</li></ol><h6 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2.三个常用的Hook"></a>2.三个常用的Hook</h6><ol><li>state Hook: React.usestate()</li><li>Effect Hook: React.useEffect()</li><li>Ref Hook: React.useRef()</li></ol><h6 id="3-state-Hook"><a href="#3-state-Hook" class="headerlink" title="3.state Hook"></a>3.state Hook</h6><ol><li>state Hook让函数组件也可以有state状态，并进行状态数据的读写操作</li><li>语法: const [xxx，setxxx] = React.useState(initvalue)</li><li>useState()说明:<br> 参数:第一次初始化指定的值在内部作缓存<br> 返回值:包含2个元素的数组，第1个为内部当前状态值，第2个为更新状态值的函数</li><li>setXx×()2种写法:<br> setXxx(newvalue):参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值<br> setxxx(value =&gt; newvalue):参数为函数，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setCount(count+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4.Effect Hook"></a>4.Effect Hook</h6><ol><li>Effect Hook可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</li><li>React中的副作用操作:<br> 发ajax请求数据<br> 获取设置订阅/启动定时器<br> 手动更改真实DOM</li><li>语法和说明:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useEffect(( =&#123;</span><br><span class="line">  <span class="comment">//在此可以执行任何带副作用操作</span></span><br><span class="line">  <span class="keyword">return</span> ( = &#123;[<span class="comment">//在组件卸载前执行</span></span><br><span class="line">  <span class="comment">//在此做一些收尾工作，比如清除定时器/取消订阅等</span></span><br><span class="line">&#125;，[statevalue])<span class="comment">//如果指定的是[]，回调函数只会在第一次render()后执行</span></span><br></pre></td></tr></table></figure></li><li>可以把useEffect Hook看做如下三个函数的组合<br> componentDidMount()<br> componentDidupdate()<br> componentwillUnmount()</li></ol><h6 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5.Ref Hook"></a>5.Ref Hook</h6><ol><li>Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据</li><li>语法: const refcontainer = useRef(O</li><li>作用:保存标签对象,功能与React.createRef()一样</li></ol><h5 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4.Fragment"></a>4.Fragment</h5><p>使用:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Fragment&gt;&lt;Fragment&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br></pre></td></tr></table></figure><p>作用:</p><blockquote><p>可以不用必须有一个真实的DOM根标签了</p></blockquote><h5 id="5-Context"><a href="#5-Context" class="headerlink" title="5.Context"></a>5.Context</h5><p><strong>理解</strong></p><blockquote><p>—种组件间通信方式,常用于【祖组件】与【后代组件】间通信使用</p></blockquote><ol><li>创建context容器对象:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xxxContext = React.createContext()</span><br></pre></td></tr></table></figure></li><li>渲染子组时，外面包裹xxxContext.Provider，通过value属性给后代组件传递数据:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;XXXContext.Provider value=&#123;数据&#125;&gt;</span><br><span class="line">  子组件</span><br><span class="line">&lt;/xxxContext.Provider&gt;</span><br></pre></td></tr></table></figure></li><li>后代组件读取数据:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式:仅适用于类组件</span></span><br><span class="line"><span class="keyword">static</span> contextType = xxxContext<span class="comment">//声明接收context </span></span><br><span class="line"><span class="built_in">this</span>.context <span class="comment">//读取context中的value数据</span></span><br><span class="line"><span class="comment">//第二种方式:丞数组件与类组件都可以</span></span><br><span class="line">&lt;XXXContext.consumer&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span>( <span class="comment">/* value就是context中的value数据要显示的内容 */</span> )</span><br><span class="line">&#125;</span><br><span class="line">&lt;/xxxcontext.Consumer&gt;</span><br></pre></td></tr></table></figure></li></ol><p>示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countContext = React.createContext()</span><br><span class="line"><span class="keyword">const</span> &#123;Provider, Consumer&#125; = countContext</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">999</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>about A</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;count:</span> <span class="attr">this.state.count</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>B</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">C</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">D</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = countContext</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>C</span></span><br><span class="line"><span class="xml">        &#123;this.context.count&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">          value =&gt; (<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6.组件优化"></a>6.组件优化</h5><p>Component的2个问题</p><ol><li>只要执行setState(),即使不改变状态数据,组件也会重新render() ==&gt;效率低</li><li>只当前组件重新render(),就会自动重新render子组件，纵使子组件没有用到父组件的任何数据==&gt;效率低<br>效率高的做法<blockquote><p>只有当组件的state或props数据发生改变时才重新render()<br>原因<br>Component中的shouldComponentUpdate()总是返回true</p></blockquote></li></ol><ul><li>解决办法1:<br> 重写shouldComponentUpdate()方法<br> 比较新旧state或props数据，如果有变化才返回true，如果没有返回fa1se</li><li>办法2:<br>使用PureComponent<br> PureComponent重写了shouldComponentUpdate()，只有state或props数据有变化才返回true注意:<br> 只是进行state和props数据的浅比较，如果只是数据对象内部数据变了，返回false不要直接修改state数据,而是要产生新数据<br>项目中一般使用PureComponent来优化</li></ul><h5 id="7-render-props-相当于vue中的插槽"><a href="#7-render-props-相当于vue中的插槽" class="headerlink" title="7.render props(相当于vue中的插槽)"></a>7.render props(相当于vue中的插槽)</h5><p><strong>如何向组件内部动态传入带内容的结构(标签)?</strong><br>vue中:<br>  使用slot技术，也就是通过组件标签体传入结构<A><B></B></A><br>React中:<br>  使用chi1dren props :通过组件标签体传入结构<br>  使用render props:通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性<br>选择语言<br><strong>children props</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;A&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">B</span>&gt;</span>XXXX<span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">&lt;/A&gt;</span><br><span class="line">&#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">问题:如果B组件需要A组件内的数据，==&gt;做不到</span><br></pre></td></tr></table></figure><p><strong>render props</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;A render=&#123;<span class="function">(<span class="params">data</span>) =&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">c</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span>&#125;&gt;&lt;/A&gt;</span><br><span class="line">A组件: &#123;<span class="built_in">this</span>.props.render(内部state数据)&#125;</span><br><span class="line">c组件:读取A组件传入的数据显示 &#123;<span class="built_in">this</span>.props.data&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">999</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">B</span> <span class="attr">render</span>=<span class="string">&#123;(testB)</span> =&gt;</span> <span class="tag">&lt;<span class="name">C</span> <span class="attr">testB</span>=<span class="string">&#123;testB&#125;/</span>&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">testB</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>B组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.props.render(this.state.testB)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>C组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.props.testB&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8.错误边界"></a>8.错误边界</h5><p><strong>理解:</strong><br>  错误边界(Error boundary):用来捕获后代组件错误，渲染出备用页面<br><strong>特点:</strong><br>  只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误<br><strong>使用方式:</strong><br>  getDerivedStateFromError配合componentDidCatch</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生命周期函数，一旦后台组件报错，就会触发</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">getDerivedstateFromError</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">  <span class="comment">//在render之前触发</span></span><br><span class="line">  <span class="comment">//返回新的state</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">hasError</span> : <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">componentDidcatch</span>(<span class="params">error,info</span>)</span> &#123;</span><br><span class="line">  <span class="comment">//统计页面的错误。发送请求发送到后台去</span></span><br><span class="line">  <span class="built_in">console</span>.log(error, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">hasError</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//用于标识子组件是否产生错误</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//当Parent的子组件出现报错时候，会触发getDerivedStateFromError调用，并携带错误信息</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&#x27;@@@&#x27;</span> ,error);</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">hasError</span> : error&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidCatch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;此处统计错误，反馈给服务器，用于通知编码人员进行bug的解决&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Parent组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.state.hasError ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前网络不稳定，稍后再试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> : <span class="tag">&lt;<span class="name">child</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h5><p><strong>组件间的关系:</strong></p><ul><li>父子组件</li><li>兄弟组件(非嵌套组件)</li><li>祖孙组件(跨级组件)</li></ul><p><strong>几种通信方式:</strong></p><ol><li>props:<br>(1).children props<br>(2).render props</li><li>消息订阅-发布:<br>pubs-sub、event等等</li><li>集中式管理:<br>redux、dva等等</li><li>conText:<br>生产者-消费者模式</li></ol><p><strong>比较好的搭配方式:</strong><br>  父子组件: props<br>  兄弟组件:消息订阅-发布、集中式管理<br>  祖孙组件(跨级组件)∶消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)</p><h4 id="React-Router-6快速上手"><a href="#React-Router-6快速上手" class="headerlink" title="React Router 6快速上手"></a>React Router 6快速上手</h4><blockquote><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5></blockquote><ol><li>React Router以三个不同的包发布到npm上，它们分别为:<ol><li>react-router:路由的核心库，提供了很多的:组件、钩子。</li><li><font color="red"><strong>react-router-dom:包含react-router所有内容，并添加一些专门用于DOM的组件，例如<code>&lt;BrowserRouter&gt;</code>等。</strong></font></li><li>react-router-native:包括react-router所有内容，并添加一些专门用于ReactNative的API，例如: <code>&lt;NativeRouter&gt;</code>等。</li></ol></li><li>与React Router 5.x版本相比，改变了什么?<ol><li>内置组件的变化:移除<code>&lt;Switch/&gt;</code>，新增<code>&lt;Routes/&gt;</code>等。</li><li>语法的变化:<code>component=&#123;About&#125;</code>变为<code>element=&#123;&lt;About/&gt;&#125;</code>等。</li><li>新增多个hook: <code>useParams</code> 、<code>useNavigate</code>、<code>useMatch</code>等。</li><li><font color="red"><strong>官方明确推荐函数式组件了! ! !</strong></font><br>…</li></ol></li></ol><h5 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1.&lt;BrowserRouter&gt;"></a>1.<code>&lt;BrowserRouter&gt;</code></h5><ol><li>说明:<code>&lt;BrowserRouter&gt;</code>用于包裹整个应用。</li><li>示例代码:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span> ;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span> ;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;/*整体结构（通常为App组件）*/&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,root</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. &lt;HashRouter&gt;"></a>2. <code>&lt;HashRouter&gt;</code></h5><ol><li>说明:作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的hash值。</li><li>备注:6.x版本中<code>&lt;HashRouter&gt;</code> 、<code>&lt;BrowserRouter&gt;</code>的用法与5.x相同。</li></ol><h5 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3.&lt;Routes/&gt; 与&lt;Route/&gt;"></a>3.<code>&lt;Routes/&gt;</code> 与<code>&lt;Route/&gt;</code></h5><ol><li>v6版本中移除了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者:<code>&lt;Routes&gt;</code>。</li><li><code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</li><li><code>&lt;Route&gt;</code>相当于一个if语句，如果其路径与当前URL匹配，则呈现其对应的组件。</li><li><code>&lt;Route caseSensitive&gt;</code>属性用于指定:匹配时是否区分大小写（默认为false)。</li><li>当URL发生变化时，<code>&lt;Routes&gt;</code>都会查看其所有子<code>&lt;Route&gt;</code>元素以找到最佳匹配并呈现组件。</li><li><code>&lt;Route&gt;</code>也可以嵌套使用，且可配合useRoutes()配置“路由表”，但需要通过<code>&lt;outlet&gt;</code>组件来渲染其子路由。</li><li>示例代码:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  <span class="comment">/*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*用于定义嵌套路由，home是一级路由，对应的路径/home*/</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;home&quot;</span> <span class="attr">element</span>=<span class="string">f</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">    /*test1和 test2是二级路由,对应的路径是/home/test1或/home/test2*/</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test1&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test2&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test2</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="4-lt-Navigate-gt"><a href="#4-lt-Navigate-gt" class="headerlink" title="4. &lt;Navigate&gt;"></a>4. <code>&lt;Navigate&gt;</code></h5><ol><li>作用:只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。</li><li>replace属性用于控制跳转模式(push 或 replace，默认是push)。</li><li>示例代码:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Navigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    setNum(num + params)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span>about</span></span><br><span class="line"><span class="xml">      &#123;num !== 4 ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>num的值为&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> : <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">replace</span>=<span class="string">&#123;true&#125;/</span>&gt;</span> &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> add(2)&#125;&gt;点击+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="NavLink-高亮"><a href="#NavLink-高亮" class="headerlink" title="NavLink 高亮"></a>NavLink 高亮</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">computedActiveName</span> (<span class="params">&#123;isActive&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isActive ? <span class="string">&#x27;activeLink&#x27;</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">className</span>=<span class="string">&#123;computedActiveName&#125;</span>&gt;</span>去home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">className</span>=<span class="string">&#123;computedActiveName&#125;</span>&gt;</span>去about<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="useRoutes-路由表的使用"><a href="#useRoutes-路由表的使用" class="headerlink" title="useRoutes 路由表的使用"></a>useRoutes 路由表的使用</h5><p>在src下新建一个文件夹routes，routes文件夹下新建文件index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Navigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> /&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure><p>注册路由</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;NavLink, useRoutes&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">computedActiveName</span> (<span class="params">&#123;isActive&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isActive ? <span class="string">&#x27;activeLink link&#x27;</span> : <span class="string">&#x27;link&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> element = useRoutes(routes)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">className</span>=<span class="string">&#123;computedActiveName&#125;</span>&gt;</span>去home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">className</span>=<span class="string">&#123;computedActiveName&#125;</span>&gt;</span>去about<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/* <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="xml">      &#123; element &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h5><p>路由表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;../Home/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../Home/News&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Navigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">News</span> /&gt;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> /&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; NavLink, Outlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span>Home <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;news&#x27;</span> <span class="attr">className</span>=<span class="string">&#x27;news_link&#x27;</span>&gt;</span>news<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;message&#x27;</span> <span class="attr">className</span>=<span class="string">&#x27;news_link&#x27;</span>&gt;</span>message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavLink to=<span class="string">&#x27;/home&#x27;</span> className=&#123;computedActiveName&#125; end&gt;去home&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure><p>备注： </p><ol><li><code>&lt;Outlet /&gt;</code>相当于vue中的<code>&lt;router-view /&gt;</code></li><li>父路由NavLink添加end属性，点击子路由，父路由的高亮消失</li></ol><h5 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h5><h6 id="params"><a href="#params" class="headerlink" title="params"></a>params</h6><p>路由表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title/:content&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="xml"><span class="tag">&lt;<span class="name">Detail</span> /&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>父路由：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link, Outlet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Message</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [messageList] = useState([</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息1&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;锄禾日当午&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息2&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;汗滴禾下土&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息3&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;谁知盘中餐&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息4&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;粒粒皆辛苦&#x27;</span>&#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>message.......<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">          messageList.map(item =&gt; &#123;</span></span><br><span class="line"><span class="xml">            return (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/$&#123;<span class="attr">item.id</span>&#125;/$&#123;<span class="attr">item.title</span>&#125;/$&#123;<span class="attr">item.content</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            )</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子路由</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams, useMatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;id, title, content&#125; = useParams()</span><br><span class="line">  <span class="comment">// const match = useMatch(&#x27;/home/message/detail/:id/:title/:content&#x27;)</span></span><br><span class="line">  <span class="comment">// console.log(match)</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息键值：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="search"><a href="#search" class="headerlink" title="search"></a>search</h6><p>父路由：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>?<span class="attr">id</span>=<span class="string">$&#123;item.id&#125;&amp;title</span>=<span class="string">$&#123;item.title&#125;&amp;content</span>=<span class="string">$&#123;item.content&#125;</span>`&#125;&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>子路由：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams, useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useSearchParams()</span><br><span class="line">  <span class="keyword">const</span> id = search.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = search.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> content = search.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// const x = useLocation()</span></span><br><span class="line">  <span class="comment">// console.log(x)</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      &quot;pathname&quot;: &quot;/home/message/detail&quot;,</span></span><br><span class="line"><span class="comment">      &quot;search&quot;: &quot;?id=007&amp;title=%E6%9B%B4%E6%94%B9search&amp;content=%E6%9B%B4%E6%94%B9search&quot;,</span></span><br><span class="line"><span class="comment">      &quot;hash&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">      &quot;state&quot;: null,</span></span><br><span class="line"><span class="comment">      &quot;key&quot;: &quot;z9khz9rk&quot;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息键值：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setSearch(&#x27;id=007&amp;title=更改search&amp;content=更改search&#x27;)&#125;&gt;更改search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="state"><a href="#state" class="headerlink" title="state"></a>state</h6><p>父路由：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    messageList.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;detail&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">state</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">id:</span> <span class="attr">item.id</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">title:</span> <span class="attr">item.title</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">content:</span> <span class="attr">item.content</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          &gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>子路由：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Detail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">state</span>: &#123;id, title, content&#125;&#125; = useLocation()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息键值：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数式路由跳转"><a href="#函数式路由跳转" class="headerlink" title="函数式路由跳转"></a>函数式路由跳转</h5><p>案例1：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, Outlet, useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> navigator = useNavigate()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seeDetail</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  navigator(<span class="string">&#x27;detail&#x27;</span>, &#123; <span class="comment">// params和search参数在后面拼接detail?id=1&amp;title=2</span></span><br><span class="line">    <span class="attr">replace</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: item.id,</span><br><span class="line">      <span class="attr">title</span>: item.title,</span><br><span class="line">      <span class="attr">content</span>: item.content,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> seeDetail(item)&#125;&gt;查看消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>案例2：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigator = useNavigate()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">forward</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    navigator(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    navigator(-<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;back&#125;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-uselnRouterContext"><a href="#7-uselnRouterContext" class="headerlink" title="7.uselnRouterContext()"></a>7.uselnRouterContext()</h5><p>作用:如果组件在<code>&lt;Router&gt;</code>的上下文中呈现，则useInRouterContext钩子返回true，否则返回false。<br>译：当前组件是否被<code>&lt;BrowserRouter&gt;&lt;/BrowserRouter&gt;</code>或者<code>&lt;HashRouter&gt;&lt;/HashRouter&gt;</code>包裹</p><h5 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. useNavigationType()</h5><ol><li>作用:返回当前的导航类型（用户是如何来到当前页面的)。</li><li>返回值:POP、PUSH、 REPLACE。</li><li>备注:POP是指在浏览器中直接打开了这个路由组件（刷新页面)。</li></ol><h5 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9.useOutlet()"></a>9.useOutlet()</h5><ol><li>作用:用来呈现当前组件中渲染的嵌套路由。</li><li>示例代码:<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = useoutlet()</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">//如果嵌套路由没有挂载,则result为null</span></span><br><span class="line"><span class="comment">//如果嵌套路由已经挂载,则展示嵌套的路由对象</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10.useResolvedPath()"></a>10.useResolvedPath()</h5><p>1.作用:给定一个URL值，解析其中的: path、search、hash值。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端加密方式</title>
      <link href="/2022/10/27/%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/10/27/%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在 HTTP 协议下，数据是明文传输，传输过程中网络嗅探可直接获取其中的数据。 如用户的密码和信用卡相关的资料，一旦被中间人获取，会给用户带来极大的安全隐患。另一方面在非加密的传输过程中，攻击者可更改数据或插入恶意的代码等。那么前端加密的意义: 即在数据发送前将数据进行哈希或使用公钥加密。如果数据被中间人获取，拿到的则不再是明文。当然还有其他一些优点:例如避免后端等打印日志直接暴露明文密码,还可以避免明文撞库等。</p><h4 id="前端加密的几种做法"><a href="#前端加密的几种做法" class="headerlink" title="前端加密的几种做法"></a>前端加密的几种做法</h4><ul><li>JavaScript 加密后传输</li><li>浏览器插件内进行加密传输 (这个用得不是很多,这里暂不细究)</li><li>Https 传输</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>常见加密方式分为以下两类：</p><ol><li>对称加密：采用对称密码编码技术，加/解密使用相同密钥进行，效率较高。</li><li>非对称加密：基于密钥交换协议，拥有公开密钥和私有密钥，使用公钥加密后需使用对应私钥才能进行解密。</li></ol><ul><li>常见对称加密有AES、DES、3DES等，这里选用AES实现。</li><li>常见非对称加密有RSA、ECC等，这里选用RSA实现。</li></ul><h4 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h4><p>不同于哈希(后面会提到)，加密（Encrypt）是将目标文本转换成具有不同长度的、<strong>可逆的密文</strong>。也就是说加密算法是可逆的，而且其加密后生成的密文长度和明文本身的长度有关。所以如果被保护数据在以后需要被还原成明文，则需要使用加密。</p><h5 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h5><blockquote><p>对称加密是最快速、最简单的一种加密方式，加密<strong>（encryption）</strong>与解密<strong>（decryption）</strong>用的是同样的密钥<strong>（secret key）</strong>。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。<br>对称加密通常使用的是相对较小的密钥，一般小于<strong>256 bit</strong>。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用<strong>1bit</strong>来做这个密钥，那黑客们可以先试着用<strong>0</strong>来解密，不行的话就再用<strong>1</strong>解；但如果你的密钥有<strong>1MB</strong>大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个<strong>trade-off</strong>。</p></blockquote><h5 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h5><blockquote><p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥<strong>（public key）</strong>和私钥<strong>（private key）</strong>。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。比如，你向银行请求公钥，银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人–银行才能对你的消息解密。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。</p></blockquote><p>虽然前端可以加密，终归不是安全方式，如果为了更加的安全还是使用https传输，后端加密保存吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端加密方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http3.0解析</title>
      <link href="/2022/10/26/http3-0%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/10/26/http3-0%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>tcp一直以来是http协议的基础，但是从http3.0开始，tcp协议被彻底弃用了。主要因为tcp协议存在以下几个问题：</p><ol><li><p>tcp在传输过程中，会把数据拆分成一个个按照顺序排列的数据包，这些数据包在传输到接收端之后，接收端再按照顺序，将这些数据包组成一个原始数据，这样就完成了数据传输。但如果其中一个数据包没有按照顺序到达的话，接收方会一直等待数据包的返回，这个时候会阻塞后续的请求。这种情况就发生了TCP队头阻塞的问题。而且在http2中引入了多路复用的技术，多个请求是基于一个TCP连接的，影响面积更大。</p></li><li><p>TCP的可靠连接是基于三次握手和四次挥手实现的，三次握手的过程是有时间消耗的，TCP的三次握手是客户端和服务端之间需要有三次交互，需要消耗额外1.5RTT，客户端和服务端比较远的情况下，如果一个RTT达到300~400ms，那么握手的过程就显得很慢了。</p></li></ol><p>TCP一直存在着如上两个无法解决的问题，于是http3.0彻底弃用了TCP，基于UDP + Diffie-Hellman算法实现了QUIC协议，这个协议不仅可以提供像TCP一样的可靠性，还能实现快速握手，也不会发生队头阻塞的问题.</p><p>QUIC 的加密协议采用了 TLS 协议的最新版本 TLS 1.3，相对之前的 TLS 1.1-1.2，TLS1.3 允许客户端无需等待 TLS 握手完成就开始发送应用程序数据的操作，可以支持1 RTT 和 0 RTT，从而达到快速建立连接的效果。</p><p>HTTP/2.0 虽然解决了队头阻塞问题，但是其建立的连接还是基于 TCP，无法解决请求阻塞问题。</p><p>而 UDP 本身没有建立连接这个概念，并且 QUIC 使用的 stream 之间是相互隔离的，不会阻塞其他 stream 数据的处理，所以使用 UDP 并不会造成队头阻塞。</p><p>虽然 QUIC 没有使用 TCP 协议，但是它也保证了可靠性，QUIC 实现可靠性的机制是使用了 Packet Number，这个序列号可以认为是 synchronize sequence number 的替代者，这个序列号也是递增的。与 syn 所不同的是，不管服务器有没有接收到数据包，这个 Packet Number 都会 + 1，而 syn 是只有服务器发送 ack 响应之后，syn 才会 + 1。</p><p>比如有一个 PN = 10 的数据包在发送的过程中由于某些原因迟迟没到服务器，那么客户端会重传一个 PN = 11 的数据包，经过一段时间后客户端收到 PN = 10 的响应后再回送响应报文，此时的 RTT 就是 PN = 10 这个数据包在网络中的生存时间，这样计算相对比较准确。</p><blockquote><p>虽然 QUIC 保证了数据包的可靠性，但是数据的可靠性是如何保证的呢？</p></blockquote><p>QUIC 引入了一个 stream offset 的概念，一个 stream 可以传输多个 stream offset，每个 stream offset 其实就是一个 PN 标识的数据，即使某个 PN 标识的数据丢失，PN + 1 后，它重传的仍旧是 PN 所标识的数据，等到所有 PN 标识的数据发送到服务器，就会进行重组，以此来保证数据可靠性。到达服务器的 stream offset 会按照顺序进行组装，这同时也保证了数据的顺序性。</p><p>众所周知，TCP 协议的具体实现是由操作系统内核来完成的，应用程序只能使用，不能对内核进行修改，随着移动端和越来越多的设备接入互联网，性能逐渐成为一个非常重要的衡量指标。虽然移动网络发展的非常快，但是用户端的更新却非常缓慢，我仍然看见有很多地区很多计算机还仍旧使用 xp 系统，尽管它早已发展了很多年。服务端系统不依赖用户升级，但是由于操作系统升级涉及到底层软件和运行库的更新，所以也比较保守和缓慢。</p><p>QUIC 协议的一个重要特点就是可插拔性，能够动态更新和升级，QUIC 在应用层实现了拥塞控制算法，不需要操作系统和内核的支持，遇到拥塞控制算法切换时，只需要在服务器重新加载一边即可，不需要停机和重启。</p><p>而 QUIC 也实现了流量控制，QUIC 的流量控制也是使用了窗口更新 window_update，来告诉对端它可以接受的字节数。</p><p>TCP 协议头部没有经过加密和认证，所以在传输的过程中很可能被篡改，与之不同的是，QUIC 中的报文头部都是经过认证，报文也经过加密处理。这样只要对 QUIC 的报文有任何修改，接收端都能够及时发现，保证了安全性。</p><p>总的来说，QUIC 具有下面这些优势</p><ul><li>使用 UDP 协议，不需要三次连接进行握手，而且也会缩短 TLS 建立连接的时间。</li><li>解决了队头阻塞问题。</li><li>实现动态可插拔，在应用层实现了拥塞控制算法，可以随时切换。</li><li>报文头和报文体分别进行认证和加密处理，保障安全性。</li><li>连接能够平滑迁移。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> http3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟dom解析</title>
      <link href="/2022/10/17/%E8%99%9A%E6%8B%9Fdom%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/10/17/%E8%99%9A%E6%8B%9Fdom%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="1、什么是虚拟dom"><a href="#1、什么是虚拟dom" class="headerlink" title="1、什么是虚拟dom"></a>1、什么是虚拟dom</h4><p>虚拟dom本质上是javascript对象，是对真实dom的抽象，状态变更时记录新树和旧树的差异，最后把差异更新到真正的dom当中。虚拟dom的作用，是使用原生js或者jquery写页面时，操作dom是一件非常麻烦的事情，往往是dom标签和js逻辑同时写在js文件里，数据交互时，还要写很多的隐藏语，如果没有好的代码规范的话，会显得代码非常臃杂混乱，耦合性很高，而且难以维护；另一方面，浏览器在一遍又一遍渲染dom，是非常消耗性能的，常常会出现页面卡死的情况，所以尽量减少对dom的操作，成为优化前端性能 的必要手段。vdom其实就是将dom的对比，放在了js层，通过对比不同之处来选择渲染dom节点，从而提高了渲染效率。</p><h4 id="2、虚拟dom优缺点"><a href="#2、虚拟dom优缺点" class="headerlink" title="2、虚拟dom优缺点"></a>2、虚拟dom优缺点</h4><ol><li>优点</li></ol><p>保证性能下限，虚拟dom可以经过diff算法找出最小差异，然后批量进行patch。这种操作虽然比不上手动优化，但是比起粗暴的dom操作，性能要好得多。虚拟dom的diff和patch算法，patch都是在一次更新中自动进行的，无需手动操作dom，极大提高了开发效率。另外虚拟dom是是跨平台的，本质上是javascript环境，而dom与平台强相关，相比之下虚拟dom可以更方便进行跨平台操作，例如服务端的渲染、移动端开发等。</p><ol start="2"><li>缺点</li></ol><p>无法进行极致优化，在性能要求很高的应用中，虚拟dom无法进行针对性的极致优化，如vscode采用的直接手动操作dom的方式进行极端的性能优化，这一点是虚拟dom做不到 的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟dom解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中后台前端开发框架</title>
      <link href="/2022/10/17/%E4%B8%AD%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/10/17/%E4%B8%AD%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="1、D2Admin"><a href="#1、D2Admin" class="headerlink" title="1、D2Admin"></a>1、D2Admin</h4><p><a href="https://d2.pub/zh/doc/d2-admin/#/">D2Admin</a>是一个完全 开源免费 的企业中后台产品前端集成方案，使用最新的前端技术栈，小于 60kb 的本地首屏 js 加载，已经做好大部分项目前期准备工作，并且带有大量示例代码，助力管理系统快速开发。</p><h4 id="2、vue-element-admin"><a href="#2、vue-element-admin" class="headerlink" title="2、vue-element-admin"></a>2、vue-element-admin</h4><p><a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/#/">vue-element-admin</a>是一个后台前端解决方案，它基于 vue 和 element-ui实现。它使用了最新的前端技术栈，内置了 i18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。</p><h4 id="3、Vue-Vben-Admin"><a href="#3、Vue-Vben-Admin" class="headerlink" title="3、Vue-Vben-Admin"></a>3、Vue-Vben-Admin</h4><p><a href="https://vvbin.cn/doc-next/guide/introduction.html">Vue-Vben-Admin</a>是一个基于 Vue3.0、Vite、 Ant-Design-Vue、TypeScript 的后台解决方案，目标是为开发中大型项目提供开箱即用的解决方案。包括二次封装组件、utils、hooks、动态菜单、权限校验、按钮级别权限控制等功能。项目会使用前端较新的技术栈，可以作为项目的启动模版，以帮助你快速搭建企业级中后台产品原型。也可以作为一个示例，用于学习 vue3、vite、ts 等主流技术。该项目会持续跟进最新技术，并将其应用在项目中。</p><h4 id="4、Ant-Design-Pro"><a href="#4、Ant-Design-Pro" class="headerlink" title="4、Ant Design Pro"></a>4、Ant Design Pro</h4><p><a href="https://pro.ant.design/zh-CN/docs/getting-started">Ant Design Pro</a>是基于 Ant Design 和 umi 的封装的一整套企业级中后台前端/设计解决方案，致力于在设计规范和基础组件的基础上，继续向上构建，提炼出典型模板/业务组件/配套设计资源，进一步提升企业级中后台产品设计研发过程中的『用户』和『设计者』的体验。</p><h4 id="5、iview-admin"><a href="#5、iview-admin" class="headerlink" title="5、iview admin"></a>5、iview admin</h4><p><a href="https://lison16.github.io/iview-admin-doc/#/">iview admin</a>是iView生态中的成员之一，是一套采用前后端分离开发模式，基于Vue的后台管理系统前端解决方案。iView-admin2.0脱离1.x版本进行重构，换用Webpack4.0 + Vue-cli3.0作为基本开发环境。内置了开发后台管理系统常用的逻辑功能，和开箱即用的业务组件，旨在让开发者能够以最小的成本开发后台管理系统，降低开发量。</p><h4 id="6、Vue-Antd-Admin"><a href="#6、Vue-Antd-Admin" class="headerlink" title="6、Vue Antd Admin"></a>6、Vue Antd Admin</h4><p><a href="https://iczer.gitee.io/vue-antd-admin-docs/">Vue Antd Admin</a>Vue Antd Admin 是 Ant Design Pro 的 Vue 实现版本，是一个开箱即用的中后台前端/设计解决方案。</p><h4 id="7、Geeker-Admin"><a href="#7、Geeker-Admin" class="headerlink" title="7、Geeker Admin"></a>7、Geeker Admin</h4><p><a href="https://gitee.com/laramie/Geeker-Admin">Geeker Admin</a>Geeker Admin 是基于 Vue3.2、TypeScript、Vite2、Pinia、Element-Plus 开源的一套后台管理模板。</p><h4 id="8、Pure-Admin"><a href="#8、Pure-Admin" class="headerlink" title="8、Pure Admin"></a>8、Pure Admin</h4><p><a href="http://yiming_chang.gitee.io/pure-admin-doc/">Pure Admin</a>使用了最新的vue3 vite2 Element-Plus TypeScript等主流技术开发，开箱即用的中后台前端解决方案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 中后台前端开发框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 vite2 封装 SVG 图标组件</title>
      <link href="/2022/10/13/vue3-vite2-%E5%B0%81%E8%A3%85-SVG-%E5%9B%BE%E6%A0%87%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/10/13/vue3-vite2-%E5%B0%81%E8%A3%85-SVG-%E5%9B%BE%E6%A0%87%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在真实的企业级开发中，Element Plus 内置的图标通常很难满足业务需求，项目中需要引入大量的 SVG 图标资源，本文描述如何在 Vue3 + Vite2 环境中使用 SVG 图标，封装一个支持本地 SVG 图标和在线 SVG 图标的组件 svg-icon。</p><h4 id="1-创建组件"><a href="#1-创建组件" class="headerlink" title="1 创建组件"></a>1 创建组件</h4><p>在 src/components/ 目录下创建目录 svg-icon，该在目录中创建 svg-icon 组件 index.vue。</p><h5 id="1-1-输入属性"><a href="#1-1-输入属性" class="headerlink" title="1.1 输入属性"></a>1.1 输入属性</h5><p>该组件需要两个输入属性（props）：</p><ul><li>icon：SVG 图标的名称或在线 URL</li><li>className：动态传递给该组件的样式类名</li></ul><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = defineProps(&#123;</span><br><span class="line">  <span class="comment">// SVG 图标名称或在线URL</span></span><br><span class="line">  <span class="attr">icon</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图标类名</span></span><br><span class="line">  <span class="attr">className</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="1-2-SVG-图标样式"><a href="#1-2-SVG-图标样式" class="headerlink" title="1.2 SVG 图标样式"></a>1.2 SVG 图标样式</h5><p>在 style 中定义 svg-icon 的样式类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.svg-icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在线-SVG-图标"><a href="#2-在线-SVG-图标" class="headerlink" title="2 在线 SVG 图标"></a>2 在线 SVG 图标</h4><p>svg-icon 组件需要支持在线 SVG 图标和本地 SVG 图标。首先实现在线 SVG 图标的显示。如下 URL 为一个在线 SVG 图标，可在浏览器中直接访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.yygnb.com/demo/car.svg</span></span><br></pre></td></tr></table></figure><h5 id="2-1-判断在线图标"><a href="#2-1-判断在线图标" class="headerlink" title="2.1 判断在线图标"></a>2.1 判断在线图标</h5><p>const isOnlineSvg = computed(() =&gt; /^(https?:)/.test(props.icon))</p><h5 id="2-2-模板和样式"><a href="#2-2-模板和样式" class="headerlink" title="2.2 模板和样式"></a>2.2 模板和样式</h5><p>在线 SVG 图标通过 HTML 元素 div 来显示，css3 有个 mask 属性，该属性表示遮罩，可以部分或者完全隐藏一个元素的可见区域，使用方式与 background 很类似。</p><p>template 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isOnlineSvg&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:style</span>=<span class="string">&quot;&#123; &#x27;--svg-icon-url&#x27;: `url($&#123;icon&#125;)` &#125;&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">&quot;svg-icon svg-icon-online&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:class</span>=<span class="string">&quot;className&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>style 追加 svg-icon-online 样式类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.svg-icon-online</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">  <span class="attribute">mask</span>-image: <span class="built_in">var</span>(--svg-icon-url);</span><br><span class="line">  -webkit-<span class="attribute">mask</span>-image: <span class="built_in">var</span>(--svg-icon-url);</span><br><span class="line">  <span class="attribute">mask</span>-size: cover;</span><br><span class="line">  -webkit-<span class="attribute">mask</span>-size: cover;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先在模板中通过 style 属性定义了一个变量 –svg-icon-url，该变量的值为 props 中的 icon 属性。</li><li>在 scss 中设置 mask-image 时，使用 var 函数获取变量 –svg-icon-url 的值。</li></ol><h5 id="3-3-测试在线图标"><a href="#3-3-测试在线图标" class="headerlink" title="3.3 测试在线图标"></a>3.3 测试在线图标</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">&#x27;@/components/svg-icon/index.vue&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">class-name</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;http://www.yygnb.com/demo/car.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加自定义样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: cornflowerblue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中访问 about 页面，可以看到在线 SVG 图标可以成功显示：</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/be71e6a76eb445d0a2a825b46a46759b~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666252043&x-signature=9k+U7vqVunMpcKWXFI8frCa6K3Y="></p><h4 id="3-本地-SVG-图标"><a href="#3-本地-SVG-图标" class="headerlink" title="3 本地 SVG 图标"></a>3 本地 SVG 图标</h4><p>在 webpack 中加载 svg 资源可以使用 svg-sprite-loader，而 vite 中可以使用插件 vite-plugin-svg-icons。</p><h5 id="3-1-安装开发依赖"><a href="#3-1-安装开发依赖" class="headerlink" title="3.1 安装开发依赖"></a>3.1 安装开发依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vite-plugin-svg-icons -D</span><br></pre></td></tr></table></figure><h5 id="3-2-配置-vite"><a href="#3-2-配置-vite" class="headerlink" title="3.2 配置 vite"></a>3.2 配置 vite</h5><p>在 vite.config.ts 中配置该插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-svg-icons&#x27;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...</span><br><span class="line">    createSvgIconsPlugin(&#123;</span><br><span class="line">      <span class="comment">// 要缓存的图标文件夹</span></span><br><span class="line">      <span class="attr">iconDirs</span>: [path.resolve(__dirname, <span class="string">&#x27;src/svg&#x27;</span>)],</span><br><span class="line">      <span class="comment">// 执行 icon name 的格式</span></span><br><span class="line">      <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 createSvgIconsPlugin() 入参指定了svg 文件所在的目录和 symbolId。</p><h5 id="3-3-修改-main-ts"><a href="#3-3-修改-main-ts" class="headerlink" title="3.3 修改 main.ts"></a>3.3 修改 main.ts</h5><p>在 main.ts 中添加如下语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:svg-icons-register&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="3-4-完成-svg-icon-组件"><a href="#3-4-完成-svg-icon-组件" class="headerlink" title="3.4 完成 svg-icon 组件"></a>3.4 完成 svg-icon 组件</h5><p>通过上述步骤，便完成了 vite-plugin-svg-icons 的配置，接下来实现 svg-icon 组件即可。前面已经完成了在线 svg、样式等，现在只需要在 template 中补充本地 svg 的代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">&quot;svg-icon&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:class</span>=<span class="string">&quot;className&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">:xlink:href</span>=<span class="string">&quot;`#icon-$&#123;icon&#125;`&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件<br>components/svg-icon/index.vue 完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;isOnlineSvg&quot;</span><br><span class="line">       :style=&quot;&#123; &#x27;--svg-icon-url&#x27;: `url($&#123;icon&#125;)` &#125;&quot;</span><br><span class="line">       class=&quot;svg-icon svg-icon-online&quot;</span><br><span class="line">       :class=&quot;className&quot;/&gt;</span><br><span class="line">  &lt;svg v-else</span><br><span class="line">       class=&quot;svg-icon&quot;</span><br><span class="line">       :class=&quot;className&quot;</span><br><span class="line">       aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;`#icon-$&#123;icon&#125;`&quot;/&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  // SVG 图标名称或在线URL</span><br><span class="line">  icon: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line">  // 图标类名</span><br><span class="line">  className: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const isOnlineSvg = computed(() =&gt; /^(https?:)/.test(props.icon))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.svg-icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.svg-icon-online &#123;</span><br><span class="line">  background-color: currentColor;</span><br><span class="line">  mask-image: var(--svg-icon-url);</span><br><span class="line">  -webkit-mask-image: var(--svg-icon-url);</span><br><span class="line">  mask-size: cover;</span><br><span class="line">  -webkit-mask-size: cover;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="3-5-测试本地图标"><a href="#3-5-测试本地图标" class="headerlink" title="3.5 测试本地图标"></a>3.5 测试本地图标</h5><p>由于 vite.config.ts 中配置的 svg 目录为 src/svg，首先将 car.svg 拷贝到该目录下。继续在 about.vue 中添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon</span>=<span class="string">&quot;http://www.yygnb.com/demo/car.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon</span>=<span class="string">&quot;car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">class-name</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;http://www.yygnb.com/demo/car.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">class-name</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码分别显示在线图标和本地图标，页面显示结果如下：</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/32f8c930855f44209589826ecb3a89be~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666252043&x-signature=GOzCy6YrXmSbkDCVhxN8dXoAB24="></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 vite2 封装 SVG 图标组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端方案</title>
      <link href="/2022/10/13/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/"/>
      <url>/2022/10/13/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>微前端已经是一个非常成熟的领域了，但开发者不管采用哪个现有方案，在适配成本、样式隔离、运行性能、页面白屏、子应用通信、子应用保活、多应用激活、vite 框架支持、应用共享等用户核心诉求都或存在问题，或无法提供支持。本文提供一种基于 iframe 的全新的微前端方案，完善地解决了这些核心诉求。</p><p>目前较成熟的微前方案有 qiankun、micro-app、EMP 方案，下面分别分析这三个微前端方案：</p><h4 id="qiankun-方案"><a href="#qiankun-方案" class="headerlink" title="qiankun 方案"></a>qiankun 方案</h4><p>qiankun 方案是基于 single-spa 的微前端方案。</p><p><strong>特点</strong></p><ul><li>html entry 的方式引入子应用，相比 js entry 极大地降低了应用改造的成本；</li><li>完备的沙箱方案，js 沙箱做了 SnapshotSandbox、LegacySandbox、ProxySandbox 三套渐进增强方案，css 沙箱做了 strictStyleIsolation、experimentalStyleIsolation 两套适用不同场景的方案；</li><li>做了静态资源预加载能力；</li></ul><p><strong>不足</strong></p><ul><li>适配成本比较高，工程化、生命周期、静态资源路径、路由等都要做一系列的适配工作；</li><li>css 沙箱采用严格隔离会有各种问题，js 沙箱在某些场景下执行性能下降严重；</li><li>无法同时激活多个子应用，也不支持子应用保活；</li><li>无法支持 vite 等 esmodule 脚本运行；</li></ul><h4 id="micro-app-方案"><a href="#micro-app-方案" class="headerlink" title="micro-app 方案"></a>micro-app 方案</h4><p>micro-app 是基于 webcomponent + qiankun sandbox 的微前端方案。</p><p><strong>特点</strong></p><ul><li>使用 webcomponet 加载子应用相比 single-spa 这种注册监听方案更加优雅；</li><li>复用经过大量项目验证过 qiankun 的沙箱机制也使得框架更加可靠；</li><li>组件式的 api 更加符合使用习惯，支持子应用保活；</li><li>降低子应用改造的成本，提供静态资源预加载能力；</li></ul><p><strong>不足</strong></p><ul><li>接入成本较 qiankun 有所降低，但是路由依然存在依赖；</li><li>多应用激活后无法保持各子应用的路由状态，刷新后全部丢失；</li><li>css 沙箱依然无法绝对的隔离，js 沙箱做全局变量查找缓存，性能有所优化；</li><li>支持 vite 运行，但必须使用 plugin 改造子应用，且 js 代码没办法做沙箱隔离；</li><li>对于不支持 webcompnent 的浏览器没有做降级处理；</li></ul><h4 id="EMP-方案"><a href="#EMP-方案" class="headerlink" title="EMP 方案"></a>EMP 方案</h4><p>EMP 方案是基于 webpack 5 module federation 的微前端方案。</p><p><strong>特点</strong></p><ul><li>webpack 联邦编译可以保证所有子应用依赖解耦；</li><li>应用间去中心化的调用、共享模块；</li><li>模块远程 ts 支持；</li></ul><p><strong>不足</strong></p><ul><li>对 webpack 强依赖，老旧项目不友好；</li><li>没有有效的 css 沙箱和 js 沙箱，需要靠用户自觉；</li><li>子应用保活、多应用激活无法实现；</li><li>主、子应用的路由可能发生冲突；</li></ul><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol><li>qiankun 方案对 single-spa 微前端方案做了较大的提升同时也遗留下来了不少问题长时间没有解决；</li><li>micro-app 方案对 qiankun 方案做了较多提升但基于 qiankun 的沙箱也相应会继承其存在的问题；</li><li>EMP 方案基于 webpack 5 联邦编译则约束了其使用范围；<br>目前的微前端方案在用户的核心诉求上都没有很好的满足，有很大的优化提升空间。</li></ol><h4 id="无界方案"><a href="#无界方案" class="headerlink" title="无界方案"></a>无界方案</h4><p>无界微前端方案基于 webcomponent 容器 + iframe 沙箱，能够完善地解决适配成本、样式隔离、运行性能、页面白屏、子应用通信、子应用保活、多应用激活、vite 框架支持、应用共享等用户的核心诉求。</p><p>文档地址，<a href="https://wujie-micro.github.io/demo-main-vue/home">demo 地址</a>，<a href="https://github.com/Tencent/wujie">git 地址</a></p><p>下面就成本、速度、隔离、功能等多个方面进行阐述。</p><h5 id="成本低"><a href="#成本低" class="headerlink" title="成本低"></a>成本低</h5><p>无界微前端的成本非常低，主要体现在主应用的使用成本、子应用的适配成本两个方面。</p><h5 id="主应用使用成本"><a href="#主应用使用成本" class="headerlink" title="主应用使用成本"></a>主应用使用成本</h5><p>主应用使用无界不需要学习额外的知识，无界提供基于 vue 封装的 wujie-vue 和基于 react 封装的 wujie-react，用户可以当初普通组件一样加载子应用，以 wujie-vue 举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;WujieVue</span><br><span class="line">  width=&quot;100%&quot;</span><br><span class="line">  height=&quot;100%&quot;</span><br><span class="line">  name=&quot;xxx&quot;</span><br><span class="line">  url=&quot;xxx&quot;</span><br><span class="line">  :sync=&quot;true&quot;</span><br><span class="line">  :fiber=&quot;true&quot;</span><br><span class="line">  :degrade=&quot;false&quot;</span><br><span class="line">  :fetch=&quot;fetch&quot;</span><br><span class="line">  :props=&quot;props&quot;</span><br><span class="line">  :plugins=&quot;plugins&quot;</span><br><span class="line">  :beforeLoad=&quot;beforeLoad&quot;</span><br><span class="line">  :beforeMount=&quot;beforeMount&quot;</span><br><span class="line">  :afterMount=&quot;afterMount&quot;</span><br><span class="line">  :beforeUnmount=&quot;beforeUnmount&quot;</span><br><span class="line">  :afterUnmount=&quot;afterUnmount&quot;</span><br><span class="line">&gt;&lt;/WujieVue&gt;</span><br></pre></td></tr></table></figure><p>子应用加载和普通 vue 组件加载并无二致，所有配置都收敛到组件的属性上。</p><h5 id="子应用适配成本"><a href="#子应用适配成本" class="headerlink" title="子应用适配成本"></a>子应用适配成本</h5><p>子应用首先需要做支持跨域请求改造，这个是所有微前端框架运行的前提，除此之外子应用可以不做任何改造就可以在无界框架中运行，不过此时运行的方式是重建模式。</p><p>子应用在无界中会根据是否保活、是否做了生命周期适配进入不同的运行模式：</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/aaf5dcf8fb3f4863b71578e4ed82f67f~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=+6vMxNIoM7z4NFrJpgGWkUzL/s8="></p><p>其中保活模式、单例模式、重建模式适用于不同的业务场景，就算复杂点的单例模式用户也只是需要做一点简单的生命周期改造工作，可以说子应用适配成本极低。</p><h5 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h5><p>无界微前端非常快，主要体现在首屏打开快、运行速度快两个方面。</p><h5 id="首屏打开快"><a href="#首屏打开快" class="headerlink" title="首屏打开快"></a>首屏打开快</h5><p>目前大部分微前端只能做到静态资源预加载，但是就算子应用所有资源都预加载完毕，等到子应用打开时页面仍然有不短的白屏时间，这部分白屏时间主要是子应用 js 的解析和执行。</p><p>无界微前端不仅能够做到静态资源的预加载，还可以做到子应用的预执行。</p><p>预执行会阻塞主应用的执行线程，所以无界提供 fiber 执行模式，采取类似 react fiber 的方式间断执行 js，每个 js 文件的执行都包裹在 requestidlecallback 中，每执行一个 js 可以返回响应外部的输入，但是这个颗粒度是 js 文件，如果子应用单个 js 文件过大，可以通过拆包的方式降低体积达到 fiber 执行模式效益最大化。</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/2fb6ea5afba24181869b02106cfb1bbd~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=QrnvkF6lHQUD2vbBQAzMyittx1U="></p><h5 id="运行速度快"><a href="#运行速度快" class="headerlink" title="运行速度快"></a>运行速度快</h5><p>子应用的 js 在 iframe 内运行，由于 iframe 是一个天然的 js 运行沙箱，所以无需采用 with (fakewindow) 这种方式来指定子应用的执行上下文，从而避免由于采用 with 语句执行子应用代码而导致的性能下降，整体的运行性能和原生性能差别不大。</p><h5 id="原生隔离"><a href="#原生隔离" class="headerlink" title="原生隔离"></a>原生隔离</h5><p>无界微前端实现了 css 沙箱和 js 沙箱的原生隔离，子应用不用担心污染问题。</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/ffea040fa9534647a7ee5ff8e1f41272~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=NrXnq9OXuzu5koO5SsLQRoTgGI4="></p><h5 id="css-沙箱隔离"><a href="#css-沙箱隔离" class="headerlink" title="css 沙箱隔离"></a>css 沙箱隔离</h5><p>无界将子应用的 dom 放置在 webcomponent + shadowdom 的容器中，除了可继承的 css 属性外实现了应用之间 css 的原生隔离。</p><h5 id="js-沙箱隔离"><a href="#js-沙箱隔离" class="headerlink" title="js 沙箱隔离"></a>js 沙箱隔离</h5><p>无界将子应用的 js 放置在 iframe（js-iframe）中运行，实现了应用之间 window、document、location、history 的完全解耦和隔离。</p><h5 id="js-沙箱和-css-沙箱连接"><a href="#js-沙箱和-css-沙箱连接" class="headerlink" title="js 沙箱和 css 沙箱连接"></a>js 沙箱和 css 沙箱连接</h5><p>无界在底层采用 proxy + Object.defineproperty 的方式将 js-iframe 中对 dom 操作劫持代理到 webcomponent shadowRoot 容器中，开发者无感知也无需关心。</p><h5 id="功能强大"><a href="#功能强大" class="headerlink" title="功能强大"></a>功能强大</h5><p>无界微前端的功能非常强大，支持子应用保活、子应用内嵌、多应用激活、去中心化通信、生命周期、插件系统、vite 框架支持、兼容 IE9、应用共享。</p><h5 id="子应用保活"><a href="#子应用保活" class="headerlink" title="子应用保活"></a>子应用保活</h5><p>当子应用设置为保活模式，切换子应用后仍然可以保持子应用的状态和路由不会丢失。</p><h5 id="子应用嵌套"><a href="#子应用嵌套" class="headerlink" title="子应用嵌套"></a>子应用嵌套</h5><p>无界支持子应用多层嵌套，嵌套的应用和正常应用一致，支持预加载、保活、同步、通信等能力，需要注意的是内嵌的子应用 name 也需要保持唯一性，否则将复用之前渲染出来的应用</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/71daf1694dae4f1ea8e301a8fd514b7d~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=nrD/u6iPPxvh034NF0BDuTL5Tcs="></p><h5 id="多应用激活"><a href="#多应用激活" class="headerlink" title="多应用激活"></a>多应用激活</h5><p>无界支持一个页面同时激活多个子应用并且保持这些子应用路由同步的能力。</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/2bf22e86467845af994dbb2a20cf206e~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=gUeUmwDdEiWJvtDa77qt4qj9gT0="></p><h5 id="去中心化通信"><a href="#去中心化通信" class="headerlink" title="去中心化通信"></a>去中心化通信</h5><p>无界提供多种通信方式：window.parent 直接通信、props 数据注入、去中心化 EventBus 通信机制：</p><ul><li>子应用 js 在和主应用同域的 iframe 内运行，所以 window.parent 可以直接拿到主应用的 window 对象来进行通信</li><li>主应用可以向子应用注入 props 对象，里面可以注入数据和方法供子应用调用</li><li>内置的 EventBus 去中心化通信方案可以让应用之间方便的直接通信</li></ul><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/16d65f0e456c443689f71dadba9eef7a~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=nBeVw2lFmagK5zlSz2/TymKuIOk="></p><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>无界提供完善的生命周期钩子供主应用调用：</p><ul><li>beforeLoad：子应用开始加载静态资源前触发</li><li>beforeMount：子应用渲染前触发 （生命周期改造专用）</li><li>afterMount：子应用渲染后触发（生命周期改造专用）</li><li>beforeUnmount：子应用卸载前触发（生命周期改造专用）</li><li>afterUnmount：子应用卸载后触发（生命周期改造专用）</li><li>activated：子应用进入后触发（保活模式专用）</li><li>deactivated：子应用离开后触发（保活模式专用）</li></ul><h5 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h5><p>无界提供强大的插件系统，方便用户在运行时去修改子应用代码从而避免将适配代码硬编码到仓库中。</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/7856099893cb46c39ed1bbe02e241bd5~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=zKeoIVyrG7iqItkAifyHg28mCt0="></p><p>无界插件主要能力如下：</p><ul><li>html-loader 可以对子应用 template 进行处理</li><li>js-excludes 和 css-excludes 可以排除子应用特定的 js 和 css 加载</li><li>js-before-loaders、js-loader、js-after-loaders 可以方便的对子应用 js 进行自定义</li><li>css-before-loaders、css-loader、css-after-loaders 可以方便的对子应用 css 进行自定义</li></ul><h5 id="vite-框架支持"><a href="#vite-框架支持" class="headerlink" title="vite 框架支持"></a>vite 框架支持</h5><p>无界子应用运行在 iframe 中原生支持 esm 的脚本，而且不用担心子应用运行的上下文问题，因为子应用读取的就是 iframe 的 window 上下文，所以无界微前端原生支持 vite 框架。</p><h5 id="兼容-IE9"><a href="#兼容-IE9" class="headerlink" title="兼容 IE9"></a>兼容 IE9</h5><p>由于无界采用了 webcomponent + shadowdom + proxy 的方案，在某些低版本浏览器上无法运行时，无界微前端会自动降级。</p><p>降级方案采用：</p><ul><li>webcomponent + shadowdom ⇒ iframe（dom-iframe）</li><li>proxy + Object.defineproperty ⇒ Object.defineproperty</li><li>子应用运行的方式是 dom-iframe + js-iframe + Object.defineproperty，IE9+ 都可以兼容（无界没有 polyfill es6，需用户手动 babel 处理）。</li></ul><p>自动降级后无界依然可以保证子应用的 css 和 js 原生隔离，但是由于 dom-iframe 的限制，弹窗将只能在子应用内部打开</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/7247eaabd1974c4b843623e310c7b6b4~noop.image?_iz=58558&from=article.pc_detail&x-expires=1666247150&x-signature=ayafVnLZ6yrhGaaIT/1L0w+4/tI="></p><h5 id="应用共享"><a href="#应用共享" class="headerlink" title="应用共享"></a>应用共享</h5><p>一个微前端系统可能同时运行多个子应用，不同子应用之间可能存在相同的包依赖，那么这个依赖就会在不同子应用中重复打包、重复执行造成性能和内存的浪费。</p><p>无界提供一种工程上的策略结合无界的插件能力，可以有效的解决这个问题（其他微前端框架也可以做到），这里以一个场景举例：主应用使用到了 ant-design-vue，子应用 A 也使用到了相同版本的 ant-design-vue。</p><p>主应用：</p><ol><li>修改主应用的 index.js，将共享包挂载到主应用的 window 对象上</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Antdv <span class="keyword">from</span> <span class="string">&quot;ant-design-vue&quot;</span>;</span><br><span class="line"><span class="comment">// 将需要共享的包挂载到主应用全局</span></span><br><span class="line"><span class="built_in">window</span>.Antdv = Antdv;</span><br></pre></td></tr></table></figure><ol start="2"><li>加载子应用时注入插件，将主应用的 Antdv 赋值到子应用的 window 对象上</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;WujieVue name=&quot;A&quot; url=&quot;xxxxx&quot; :plugins=&quot;[&#123; jsBeforeLoaders: [&#123; content: &#x27;window.Antdv = window.parent.Antdv&#x27; &#125;] &#125;]&quot;&gt;</span><br><span class="line">&lt;/WujieVue&gt;</span><br></pre></td></tr></table></figure><p>子应用: webpack 设置 externals</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="string">&quot;ant-design-vue&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">root</span>: <span class="string">&quot;Antdv&quot;</span>,</span><br><span class="line">      <span class="attr">commonjs</span>: <span class="string">&quot;Antdv&quot;</span>,</span><br><span class="line">      <span class="attr">commonjs2</span>: <span class="string">&quot;Antdv&quot;</span>,</span><br><span class="line">      <span class="attr">amd</span>: <span class="string">&quot;Antdv&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>子应用需要单独运行可以参考文档</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>无界微前端采用 webcomponent + iframe 的来加载子应用，具有成本低、速度快、原生隔离、功能强大等一系列优点，在满足用户核心诉求的同时让使用微前端的体验就像使用普通组件一样简单，极大的降低了使用门槛。</p>]]></content>
      
      
      <categories>
          
          <category> 微前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微前端方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install 报错 can&#39;t find python</title>
      <link href="/2022/08/25/npm-install-%E6%8A%A5%E9%94%99-can-t-find-python/"/>
      <url>/2022/08/25/npm-install-%E6%8A%A5%E9%94%99-can-t-find-python/</url>
      
        <content type="html"><![CDATA[<h4 id="npm-install-时报错-gyp-ERR-stack-Error-can’t-find-python-executable-“python”-you-can-set-the-PYTHON-env-variable-解决办法"><a href="#npm-install-时报错-gyp-ERR-stack-Error-can’t-find-python-executable-“python”-you-can-set-the-PYTHON-env-variable-解决办法" class="headerlink" title="npm install 时报错 gyp ERR! stack Error : can’t find python executable “python”,you can set the PYTHON env variable.解决办法"></a>npm install 时报错 <font color="red">gyp ERR! stack Error : can’t find python executable “python”,you can set the PYTHON env variable.</font>解决办法</h4><p>1.vue中安装node-sass</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --save-dev</span><br></pre></td></tr></table></figure><p>2.管理员模式下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure><p>3.再执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global node-gyp </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> can&#39;t find python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端代码规范</title>
      <link href="/2022/08/19/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2022/08/19/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>转载自 <a href="https://mp.weixin.qq.com/s/gaYYWwmsTp32J77e0WpbAA">前端代码规范</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-upload集成下载功能</title>
      <link href="/2022/08/17/el-upload%E9%9B%86%E6%88%90%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/08/17/el-upload%E9%9B%86%E6%88%90%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>在一个工作计划模块中，在新增或修改计划单时，要实现一个文件上传的功能，已上传的文件要实现点击下载。</p><p>首先，实现文件上传的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">action=&quot;/uploadApi&quot;</span><br><span class="line">:file-list=&quot;fileList&quot;</span><br><span class="line">:on-success=&quot;uploadSuccess&quot;&gt;</span><br><span class="line">&lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&quot;&gt;上传文件&lt;/el-button&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><p>然后，文件上传成功之后要关联到该计划单，我是这样做的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uploadSuccess (response, file, fileList) &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.code &amp;&amp; response.code === <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;&#125; </span><br><span class="line">    <span class="comment">// 此处关联计划单</span></span><br><span class="line">    api.associationFile(params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message.success(<span class="string">&#x27;上传成功！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 此处做上传失败的处理</span></span><br><span class="line">    <span class="built_in">this</span>.fileList = <span class="built_in">this</span>.fileList.slice(<span class="number">0</span>, <span class="built_in">this</span>.fileList.length - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传失败！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>接着，要实现文件点击下载的功能，这时要做已上传文件的自定义化处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">class=&quot;upload-demo&quot;</span><br><span class="line">action=&quot;/uploadApi&quot;</span><br><span class="line">:file-list=&quot;fileList&quot;</span><br><span class="line">:on-success=&quot;uploadSuccess&quot;&gt;</span><br><span class="line">  &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&quot;&gt;上传文件&lt;/el-button&gt;</span><br><span class="line">  &lt;div slot=&quot;file&quot; slot-scope=&quot;&#123; file &#125;&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;el-upload-list__item is-success&quot;&gt;</span><br><span class="line">      &lt;a @click=&quot;downloadFile(file)&quot; class=&quot;el-upload-list__item-name&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-document&quot;&gt;&lt;/i&gt;&#123;&#123; file.name &#125;&#125;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;label class=&quot;el-upload-list__item-status-label&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-upload-success el-icon-circle-check&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">      &lt;i @click.stop=&quot;deletefile(file)&quot; class=&quot;el-icon-close&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><p>文件的回显和删除很简单，这里不再赘述了。</p><p>那么问题来了，新上传的文件删不掉，原因是新上传的文件在调用删除方法时<font color="blue">deletefile</font>获取的<font color="red">file</font>参数与回显的文件不太一样，是一个带有code值的请求返回参数，而不是带有id和fileName、downloadUrl等参数的对象，因此此时文件删除和下载就出现问题了。</p><p>我的第一想法是，fileList是回显出来的，并没有问题，那我我在上传成功的钩子函数中对fileList做处理，让新上传的文件参数与旧的文件一致，事实上功能实现了，但是出现了新的问题，文件上传成功的动画是在on-success钩子函数之后执行的，我在这个函数里面对fileList做了更改导致了页面闪烁，这样肯定不行。</p><p>那么换一个思路，<font color="blue">deletefile</font>方法参数的来源在哪里，新的文件为什么会是一个请求response，我突然想起来那个on-success钩子函数的第一个参数不正是那个response吗，那么他的第二个参数<font color="red">file</font>会不会直接影响到<font color="blue">deletefile</font>方法的入参呢，果然！就！是！他</p><p>附代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uploadSuccess (response, file, fileList) &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.code &amp;&amp; response.code === <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;&#125; </span><br><span class="line">    <span class="comment">// 此处关联计划单</span></span><br><span class="line">    api.associationFile(params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$set(file, <span class="string">&#x27;id&#x27;</span>, response.id)</span><br><span class="line">        <span class="built_in">this</span>.$set(file, <span class="string">&#x27;downloadUrl&#x27;</span>, response.url)</span><br><span class="line">        <span class="built_in">this</span>.$message.success(<span class="string">&#x27;上传成功！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.fileList = <span class="built_in">this</span>.fileList.slice(<span class="number">0</span>, <span class="built_in">this</span>.fileList.length - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传失败！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>小小bug——……^_^</p>]]></content>
      
      
      
        <tags>
            
            <tag> el-upload集成下载功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2022/07/29/webpack/"/>
      <url>/2022/07/29/webpack/</url>
      
        <content type="html"><![CDATA[<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器，当 webpack 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 bundle。</p><h4 id="1、webpack-的核心概念"><a href="#1、webpack-的核心概念" class="headerlink" title="1、webpack 的核心概念"></a>1、webpack 的核心概念</h4><ul><li>entry: 入口</li><li>output: 输出</li><li>loader: 模块转换器，用于把模块原内容按照需求转换成新内容</li><li>插件(plugins): 扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情</li></ul><h4 id="2、初始化项目"><a href="#2、初始化项目" class="headerlink" title="2、初始化项目"></a>2、初始化项目</h4><p>新建一个文件夹，如: webpack-first (当然，你可以使用任意一个你喜欢的项目名)。推荐大家参考本文一步一步进行配置，不要总是在网上找什么最佳配置，你掌握了webpack之后，根据自己的需求配置出来的，就是最佳配置。</p><p>使用 npm init -y 进行初始化(也可以使用 yarn)。</p><p>要使用 webpack，那么必然需要安装 webpack、webpack-cli:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli</span><br></pre></td></tr></table></figure><p>鉴于前端技术变更迅速，祭出本篇文章基于 webpack 的版本号:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── webpack@4.41.5</span><br><span class="line">└── webpack-cli@3.3.10</span><br></pre></td></tr></table></figure><p>从 wepack V4.0.0 开始， webpack 是开箱即用的，在不引入任何配置文件的情况下就可以使用。</p><p>新建 src/index.js 文件，我们在文件中随便写点什么:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">&#x27;dog&#x27;</span>);</span><br></pre></td></tr></table></figure><p>使用 npx webpack –mode=development 进行构建，默认是 production 模式，我们为了更清楚得查看打包后的代码，使用 development 模式。</p><p>可以看到项目下多了个 dist 目录，里面有一个打包出来的文件 main.js。</p><p>webpack 有默认的配置，如默认的入口文件是 ./src，默认打包到dist/main.js。<br>更多的默认配置可以查看:node_modules/webpack/lib/WebpackOptionsDefaulter.js。</p><p>查看 dist/main.js 文件，可以看到，src/index.js 并没有被转义为低版本的代码，这显然不是我们想要的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;class Animal &#123;\r\n  constructor(name) &#123;\r\n    this.name = name;\r\n  &#125;\r\n  getName() &#123;\r\n    return this.name;\r\n  &#125;\r\n&#125;\r\nconst dog = new Animal(&#x27;dog&#x27;);\n\n//# sourceURL=webpack://demo/./src/index.js?&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="3、将JS转义为低版本"><a href="#3、将JS转义为低版本" class="headerlink" title="3、将JS转义为低版本"></a>3、将JS转义为低版本</h4><p>前面我们说了 webpack 的四个核心概念，其中之一就是 loader，loader 用于对源代码进行转换，这正是我们现在所需要的。</p><p>将JS代码向低版本转换，我们需要使用 babel-loader。</p><h5 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h5><p>首先安装一下 babel-loader</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader</span><br></pre></td></tr></table></figure><p>此外，我们还需要配置 babel，为此我们安装一下以下依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/preset-env @babel/plugin-transform-runtime -Dnpm install @babel/runtime @babel/runtime-corejs3</span><br></pre></td></tr></table></figure><p>新建 webpack.config.js，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">      use: [<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> <span class="comment">//排除 node_modules 目录</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议给 loader 指定 <font color="red">include</font> 或是 <font color="red">exclude</font>，指定其中一个即可，因为 node_modules 目录通常不需要我们去编译，排除后，有效提升编译效率。</p><p>这里，我们可以在 <font color="blue">.babelrc</font> 中编写 babel 的配置，也可以在 webpack.config.js 中进行配置。</p><h5 id="创建一个-babelrc"><a href="#创建一个-babelrc" class="headerlink" title="创建一个 .babelrc"></a>创建一个 .babelrc</h5><p>配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">&quot;corejs&quot;</span>: <span class="number">3</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们重新执行 npx webpack –mode=development，查看 dist/main.js，会发现已经被编译成了低版本的JS代码。</p><h5 id="在webpack中配置-babel"><a href="#在webpack中配置-babel" class="headerlink" title="在webpack中配置 babel"></a>在webpack中配置 babel</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// mode: &#x27;development&#x27;,</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>, &#123;</span><br><span class="line">              <span class="string">&quot;corejs&quot;</span>: <span class="number">3</span></span><br><span class="line">            &#125;]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有几点需要说明：</p><ul><li>loader 需要配置在 module.rules 中，rules 是一个数组。</li><li>loader 的格式为:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>, <span class="comment">//匹配规则</span></span><br><span class="line">  use: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>或者也可以像下面这样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适用于只有一个 loader 的情况</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test 字段是匹配规则，针对符合规则的文件进行处理。</p><p>use 字段有几种写法</p><ul><li>可以是一个字符串，例如上面的 <code>use: &#39;babel-loader&#39;</code></li><li>use 字段可以是一个数组，例如处理CSS文件是，<code>use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</code></li><li>use 数组的每一项既可以是字符串也可以是一个对象，当我们需要在webpack 的配置文件中对 loader 进行配置，就需要将其编写为一个对象，并且在此对象的 options 字段中进行配置，如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rules: [&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><p>上面我们说了如何将JS的代码编译成向下兼容的代码，当然你可以还需要一些其它的 babel 的插件和预设，例如 @babel/preset-react，@<br>babel/plugin-proposal-optional-chaining 等，不过，babel 的配置并非本文的重点，我们继续往下。</p><p>我们在使用 webpack 进行打包的时候，一直运行的都是 npx webpack –mode=development 是否可以将 mode 配置在 webpack.config.js 中呢？显然是可以的。</p><h5 id="4、mode"><a href="#4、mode" class="headerlink" title="4、mode"></a>4、mode</h5><p>将 mode 增加到 webpack.config.js 中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mode 配置项，告知 webpack 使用相应模式的内置优化。</p><p>mode 配置项，支持以下两个配置:</p><ul><li><font color="red">development</font>：将 <font color="blue">process.env.NODE_ENV</font> 的值设置为 <font color="blue">development</font>，启用 <font color="blue">NamedChunksPlugin</font> 和 <font color="green">NamedModulesPlugin</font></li><li><font color="red">production</font>：将 <font color="blue">process.env.NODE_ENV</font> 的值设置为 <font color="blue">production</font>，启用 <font color="blue">FlagDependencyUsagePlugin</font>, <font color="green">FlagIncludedChunksPlugin</font>, <font color="blue">ModuleConcatenationPlugin</font>, <font color="green">NoEmitOnErrorsPlugin</font>, <font color="blue">OccurrenceOrderPlugin</font>, <font color="green">SideEffectsFlagPlugin</font> 和 <font color="blue">UglifyJsPlugin</font></li></ul><p>现在，我们直接使用 npx webpack 进行编译即可。</p><h4 id="5、在浏览器中查看页面"><a href="#5、在浏览器中查看页面" class="headerlink" title="5、在浏览器中查看页面"></a>5、在浏览器中查看页面</h4><p>查看页面，难免就需要 html 文件，有小伙伴可能知道，有时我们会指定打包文件中带有 hash，那么每次生成的 js 文件名会有所不同，总不能让我们每次都人工去修改 html</p><p>我们可以使用 html-webpack-plugin 插件来帮助我们完成这些事情。</p><p>首先，安装一下插件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>新建 public 目录，并在其中新建一个 index.html 文件</p><p>修改 webpack.config.js 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先引入插件</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="comment">//数组 放着所有的webpack插件</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">//打包后的文件名</span></span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="attr">removeAttributeQuotes</span>: <span class="literal">false</span>, <span class="comment">//是否删除属性的双引号</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">false</span>, <span class="comment">//是否折叠空白</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// hash: true //是否加上hash，默认是 false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时执行 npx webpack，可以看到 dist 目录下新增了 index.html 文件，并且其中自动插入了 script 脚本，引入的是我们打包之后的 js 文件。</p><p>这里要多说一点点东西，<font color="blue">HtmlWebpackPlugin</font> 还为我们提供了一个 config 的配置，这个配置可以说是非常有用了。</p><h5 id="html-webpack-plugin-的-config-的妙用"><a href="#html-webpack-plugin-的-config-的妙用" class="headerlink" title="html-webpack-plugin 的 config 的妙用"></a>html-webpack-plugin 的 config 的妙用</h5><p>有时候，我们的脚手架不仅仅给自己使用，也许还提供给其它业务使用，html 文件的可配置性可能很重要，比如：你公司有专门的部门提供M页的公共头部/公共尾部等等，但是不是每个业务都需要这些内容。</p><p>一个功能可能对应多个 js 或者是 css 文件，如果每次都是业务自行修改 public/index.html 文件，也挺麻烦的。首先他们得搞清楚每个功能需要引入的文件，然后才能对 index.html 进行修改。</p><p>此时我们可以增加一个配置文件，业务通过设置 true 或 false 来选出自己需要的功能，我们再根据配置文件的内容，为每个业务生成相应的 html 文件。</p><p>我们在 public 目录下新增一个 config.js ( 文件名你喜欢叫什么就叫什么 )，将其内容设置为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public/config.js 除了以下的配置之外，这里面还可以有许多其他配置，例如,pulicPath 的路径等等</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">dev</span>: &#123;</span><br><span class="line">    <span class="attr">template</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">      <span class="attr">header</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">footer</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">template</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;你好吗&#x27;</span>,</span><br><span class="line">      <span class="attr">header</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">footer</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们修改下我们的 webpack.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./public/config&#x27;</span>)[isDev ? <span class="string">&#x27;dev&#x27;</span> : <span class="string">&#x27;build&#x27;</span>];</span><br><span class="line">modue.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">mode</span>: isDev ? <span class="string">&#x27;development&#x27;</span> : <span class="string">&#x27;production&#x27;</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">//打包后的文件名</span></span><br><span class="line">    <span class="attr">config</span>: config.template</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的，我们需要修改下我们的 public/index.html 文件(嵌入的js和css并不存在，仅作为示意)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  &lt;% if(htmlWebpackPlugin.options.config.header) &#123; %&gt;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//common/css/header.css&quot;</span>&gt;</span> &lt;% &#125; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= (htmlWebpackPlugin.options.config.title) %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;% if(htmlWebpackPlugin.options.config.header) &#123; %&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//common/header.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>process.env 中默认并没有 NODE_ENV，这里配置下我们的 package.json 的 scripts.</p><p>为了兼容Windows和Mac，我们先安装一下 cross-env:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cross-env -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们运行 npm run dev 和 运行 npm run build ，对比下 dist/index.html ，可以看到 npm run build，生成的 index.html 文件中引入了对应的 css 和 js。并且对应的 title 内容也不一样。</p><h5 id="如何在浏览器中实时展示效果"><a href="#如何在浏览器中实时展示效果" class="headerlink" title="如何在浏览器中实时展示效果"></a>如何在浏览器中实时展示效果</h5><p>话不多说，先装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure><p>修改下咱们的 package.json 文件的 scripts：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development webpack-dev-server&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台执行 npm run dev，启动正常，页面上啥也没有，修改下我们的JS代码，往页面中增加点内容，正常刷新(也就是说不需要进行任何配置就可以使用了)。</p><p>原来在配置了 html-webpack-plugin 的情况下， contentBase 不会起任何作用。</p><p>不过呢，我们还是可以在 webpack.config.js 中进行 webpack-dev-server 的其它配置，例如指定端口号，设置浏览器控制台消息，是否压缩等等:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;3000&#x27;</span>, <span class="comment">//默认是8080</span></span><br><span class="line">  <span class="attr">quiet</span>: <span class="literal">false</span>, <span class="comment">//默认不启用</span></span><br><span class="line">  <span class="attr">inline</span>: <span class="literal">true</span>, <span class="comment">//默认开启 inline 模式，如果设置为false,开启 iframe 模式</span></span><br><span class="line">  <span class="attr">stats</span>: <span class="string">&quot;errors-only&quot;</span>, <span class="comment">//终端仅打印 error</span></span><br><span class="line">  <span class="attr">overlay</span>: <span class="literal">false</span>, <span class="comment">//默认不启用</span></span><br><span class="line">  <span class="attr">clientLogLevel</span>: <span class="string">&quot;silent&quot;</span>, <span class="comment">//日志等级</span></span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span> <span class="comment">//是否启用 gzip 压缩</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>启用 quiet 后，除了初始启动信息之外的任何内容都不会被打印到控制台。这也意味着来自 webpack 的错误或警告在控制台不可见 ———— 我是不会开启这个的，看不到错误日志，还搞个锤子</li><li>stats: “errors-only” ， 终端中仅打印出 error，注意当启用了 quiet 或者是 noInfo 时，此属性不起作用。 ————— 这个属性个人觉得很有用，尤其是我们启用了 eslint 或者使用 TS进行开发的时候，太多的编译信息在终端中，会干扰到我们。</li><li>启用 overlay 后，当编译出错时，会在浏览器窗口全屏输出错误，默认是关闭的。<br><img src="https://p3-sign.toutiaoimg.com/pgc-image/dd340a99a9614337bcbac0bc2b43eaeb~noop.image?_iz=58558&from=article.pc_detail&x-expires=1659923060&x-signature=cEW0iPtij+QqBaavKK3MWys+14w=" alt="image.png"></li><li>clientLogLevel: 当使用内联模式时，在浏览器的控制台将显示消息，如：在重新加载之前，在一个错误之前，或者模块热替换启用时。如果你不喜欢看这些信息，可以将其设置为 silent (none 即将被移除)。<br><img src="https://p3-sign.toutiaoimg.com/pgc-image/682389e34eb846b28d0d9be4caf09436~noop.image?_iz=58558&from=article.pc_detail&x-expires=1659923060&x-signature=97CF3tJiZseR8L9cGSuhVdG9IEQ="></li></ul><p>细心的小伙伴可能发现了一个小问题，我们在src/index.js中增加一句 console.log(‘aaa’)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">&#x27;dog&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后通过 npm run dev 查看效果，会发现：</p><p><img src="https://p3-sign.toutiaoimg.com/pgc-image/b70710a068f4460b86ad7916a7da5c48~noop.image?_iz=58558&from=article.pc_detail&x-expires=1659923060&x-signature=9OffqdPHqMOae34SAKkP40sGubY="></p><p>这显然不是我们源码中对应的行号，点进去的话，会发现代码是被编译后的，我当前的代码非常简单，还能看出来，项目代码复杂后，“亲妈”看编译后都费劲，这不利于我们开发调试，不是我们想要的，我们肯定还是希望能够直接对应到源码的。</p><h4 id="6、devtool"><a href="#6、devtool" class="headerlink" title="6、devtool"></a>6、devtool</h4><p>devtool 中的一些设置，可以帮助我们将编译后的代码映射回原始源代码。不同的值会明显影响到构建和重新构建的速度。</p><p>对我而言，能够定位到源码的行即可，因此，综合构建速度，在开发模式下，我设置的 devtool 的值是<br>cheap-module-eval-source-map。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;eval-cheap-module-source-map&#x27;</span> <span class="comment">//开发环境下使用 webpack5严格按照顺序排列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产环境可以使用 none 或者是 source-map，使用 source-map 最终会单独打包出一个 .map 文件，我们可以根据报错信息和此 map 文件，进行错误解析，定位到源代码。</p><p>source-map 和 hidden-source-map 都会打包生成单独的 .map 文件，区别在于，source-map 会在打包出的js文件中增加一个引用注释，以便开发工具知道在哪里可以找到它。hidden-source-map 则不会在打包的js中增加引用注释。</p><p>但是我们一般不会直接将 .map 文件部署到CDN，因为会直接映射到源码，更希望将.map 文件传到错误解析系统，然后根据上报的错误信息，直接解析到出错的源码位置。</p><p>还可以设置其他的devtool值，你可以使用不同的值，构建对比差异。</p><p>现在我们已经说了 html、js 了，并且也可以在浏览器中实时看到效果了，现在就不得不说页面开发三巨头之一的 css 。</p><h4 id="7、如何处理样式文件"><a href="#7、如何处理样式文件" class="headerlink" title="7、如何处理样式文件"></a>7、如何处理样式文件</h4><p>webpack 不能直接处理 css，需要借助 loader。如果是 .css，我们需要的 loader 通常有： style-loader、css-loader，考虑到兼容性问题，还需要 postcss-loader，而如果是 less 或者是 sass 的话，还需要 less-loader 和 sass-loader，这里配置一下 less 和 css 文件(sass 的话，使用 sass-loader即可):</p><p>先安装一下需要使用的依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader less-loader css-loader postcss-loader autoprefixer less -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(le|c)ss$/</span>,</span><br><span class="line">      use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class="line">        <span class="string">&quot;overrideBrowserslist&quot;</span>: [<span class="string">&quot;&gt;0.25%&quot;</span>, <span class="string">&quot;not dead&quot;</span>]</span><br><span class="line">      &#125;)]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下，新建一个 less 文件，src/index.less:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//<span class="attribute">src</span>/index<span class="selector-class">.less</span></span><br><span class="line"><span class="keyword">@color</span>: red;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: @color;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在入口文件中引入此 less:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br></pre></td></tr></table></figure><p>我们修改了配置文件，重新启动一下服务: npm run dev。可以看到页面的背景色变成了红色。</p><p>我们简单说一下上面的配置：</p><ul><li>style-loader 动态创建 style 标签，将 css 插入到 head 中.</li><li>css-loader 负责处理 @import 等语句。</li><li>postcss-loader 和 autoprefixer，自动生成浏览器兼容性前缀</li><li>less-loader 负责处理编译 .less 文件,将其转为 css</li></ul><p>这里，我们之间在 webpack.config.js 写了 autoprefixer 需要兼容的浏览器，仅是为了方便展示。推荐大家在根目录下创建 .browserslistrc，将对应的规则写在此文件中，除了 autoprefixer 使用外，@babel/preset-env、stylelint、eslint-plugin-conmpat 等都可以共用。</p><p><strong>注意：</strong></p><p>loader 的执行顺序是从右向左执行的，也就是后面的 loader 先执行，上面 loader 的执行顺序为: less-loader —&gt; postcss-loader —&gt; css-loader —&gt; style-loader</p><p>当然，loader 其实还有一个参数，可以修改优先级，enforce 参数，其值可以为: pre(优先执行) 或 post (滞后执行)。</p><p>现在，我们已经可以处理 .less 文件啦，.css 文件只需要修改匹配规则，删除 less-loader 即可。</p><p>现在的一切看起来都很完美，但是假设我们的文件中使用了本地的图片，例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/thor.png&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你就会发现，报错啦，那么我们要怎么处理图片或是本地的一些其它资源文件呢。不用想，肯定又需要 loader 出马了。</p><h4 id="8、图片-字体文件处理"><a href="#8、图片-字体文件处理" class="headerlink" title="8、图片/字体文件处理"></a>8、图片/字体文件处理</h4><p>我们可以使用 url-loader 或者 file-loader 来处理本地的资源文件。url-loader 和 file-loader 的功能类似，但是 url-loader 可以指定在文件大小小于指定的限制时，返回 DataURL，因此，个人会优先选择使用 url-loader。</p><p>首先安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader -D</span><br></pre></td></tr></table></figure><p><img src="https://p3-sign.toutiaoimg.com/pgc-image/fd22b385d1ca4d1e9668d2679f286732~noop.image?_iz=58558&from=article.pc_detail&x-expires=1659923060&x-signature=vbu0svOiIBCoXjicPiwlvFI0i4M="></p><p>安装 url-loader 的时候，控制台会提示你，还需要安装下 file-loader</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader -D</span><br></pre></td></tr></table></figure><p>在 webpack.config.js 中进行配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg|webp|svg|eot|ttf|woff|woff2)$/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">limit</span>: <span class="number">10240</span>, <span class="comment">//10K</span></span><br><span class="line">          <span class="attr">esModule</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处设置 limit 的值大小为 10240，即资源大小小于 10K 时，将资源转换为 base64，超过 10K，将图片拷贝到 dist 目录。esModule 设置为 false，否则，&lt;img src={require(‘XXX.jpg’)} /&gt; 会出现 &lt;img src=[Module Object] /&gt;</p><p>将资源转换为 base64 可以减少网络请求次数，但是 base64 数据较大，如果太多的资源是 base64，会导致加载变慢，因此设置 limit 值时，需要二者兼顾。</p><p>默认情况下，生成的文件的文件名就是文件内容的 MD5 哈希值并会保留所引用资源的原始扩展名，例如我上面的图片(thor.jpeg)对应的文件名如下：</p><p><img src="https://p3-sign.toutiaoimg.com/pgc-image/fb0fe839c01d47d6a8ee69f1e0e33f53~noop.image?_iz=58558&from=article.pc_detail&x-expires=1659923060&x-signature=cCiEMn5kc/xFujWj+f4jpiCgZuE="></p><p>当然，你也可以通过 options 参数进行修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="attr">use</span>: [&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">limit</span>: <span class="number">10240</span>, <span class="comment">//10K</span></span><br><span class="line">    <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;[name]_[hash:6].[ext]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>重新编译，在浏览器中审查元素，可以看到图片名变成了: thor_a5f7c0.jpeg。</p><p>当本地资源较多时，我们有时会希望它们能打包在一个文件夹下，这也很简单，我们只需要在 url-loader 的 options 中指定 outpath，如: outputPath: ‘assets’，构建出的目录如下:<br><img src="https://p3-sign.toutiaoimg.com/pgc-image/d392b5fa26224c9fa5b319ecd4180db1~noop.image?_iz=58558&from=article.pc_detail&x-expires=1659923060&x-signature=ek7ezP/jkuJLJgK9/JOYZN+PSkw="></p><p>如果你在 public/index.html 文件中，使用本地的图片，例如，我们修改一下 public/index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./a.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>重启本地服务，虽然，控制台不会报错，但是你会发现，浏览器中根本加载不出这张图片，Why？因为构建之后，通过相对路径压根找不着这张图片呀。</p><h4 id="9、处理-html-中的本地图片"><a href="#9、处理-html-中的本地图片" class="headerlink" title="9、处理 html 中的本地图片"></a>9、处理 html 中的本地图片</h4><p>安装 html-withimg-loader</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-withimg-loader -D</span><br></pre></td></tr></table></figure><p>修改 webpack.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/.html$/</span>,</span><br><span class="line">      use: <span class="string">&#x27;html-withimg-loader&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在我们的 html 中引入一张文件测试一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./thor.jpeg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>重启本地服务，图片并没能加载，审查元素的话，会发现图片的地址显示的是 {“default”:”assets/thor_a5f7c0.jpeg”}</p><p>我当前 file-loader 的版本是 5.0.2，5版本之后，需要增加 esModule 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg|webp|svg|eot|ttf|woff|woff2)$/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">limit</span>: <span class="number">10240</span>, <span class="comment">//10K</span></span><br><span class="line">          <span class="attr">esModule</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再重启本地服务，就搞定啦。</p><p>话说使用 html-withimg-loader 处理图片之后，html 中就不能使用 vm, ejs 的模板了，如果想继续在 html 中使用 &lt;% if(<br>htmlWebpackPlugin.options.config.header) { %&gt; 这样的语法，但是呢，又希望能使用本地图片，可不可以？鱼和熊掌都想要，虽然很多时候，能吃个鱼就不错了，但是这里是可以的哦，像下面这样编写图片的地址，并且删除html-withimg-loader的配置即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= require(&#x27;./thor.jpeg&#x27;) %&gt;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>图片加载OK啦，并且 &lt;% %&gt; 语法也可以正常使用</p><p>虽然，webpack 的默认配置很好用，但是有的时候，我们会有一些其它需要啦，例如，我们不止一个入口文件，这时候，该怎么办呢？</p><h4 id="10、入口配置"><a href="#10、入口配置" class="headerlink" title="10、入口配置"></a>10、入口配置</h4><p>入口的字段为: entry</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span> <span class="comment">//webpack的默认配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entry 的值可以是一个字符串，一个数组或是一个对象。</p><p>字符串的情况无需多说，就是以对应的文件为入口。</p><p>为数组时，表示有“多个主入口”，想要多个依赖文件一起注入时，会这样配置。例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: [</span><br><span class="line">  <span class="string">&#x27;./src/polyfills.js&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>polyfills.js 文件中可能只是简单的引入了一些 polyfill，例如 babel-polyfill，whatwg-fetch 等，需要在最前面被引入（我在 webpack2 时这样配置过）。</p><p>那什么时候是对象呢？不要捉急，后面将多页配置的时候，会说到</p><h4 id="11、出口配置"><a href="#11、出口配置" class="headerlink" title="11、出口配置"></a>11、出口配置</h4><p>配置 output 选项可以控制 webpack 如何输出编译文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">//必须是绝对路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span> <span class="comment">//通常是CDN地址</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，你最终编译出来的代码部署在 CDN 上，资源的地址为: ‘<br><a href="https://aaa/BBB/YourProject/XXX&#39;%EF%BC%8C%E9%82%A3%E4%B9%88%E5%8F%AF%E4%BB%A5%E5%B0%86%E7%94%9F%E4%BA%A7%E7%9A%84">https://AAA/BBB/YourProject/XXX&#39;，那么可以将生产的</a> publicPath 配置为: //AAA/BBB/。</p><p>编译时，可以不配置，或者配置为 /。可以在我们之前提及的 config.js 中指定 publicPath（config.js 中区分了 dev 和 public）， 当然还可以区分不同的环境指定配置文件来设置，或者是根据 isDev 字段来设置。</p><p>除此之外呢，考虑到CDN缓存的问题，我们一般会给文件名加上 hash.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">//必须是绝对路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.[hash].js&#x27;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span> <span class="comment">//通常是CDN地址</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你觉得 hash 串太长的话，还可以指定长度，例如 bundle.[hash:6].js。使用 npm run build 打包看看吧。</p><p>问题出现啦，每次文件修改后，重新打包，导致 dist 目录下的文件越来越多。要是每次打包前，都先清空一下目录就好啦。可不可以做到呢？必须可以！</p><h4 id="12、每次打包前清空dist目录"><a href="#12、每次打包前清空dist目录" class="headerlink" title="12、每次打包前清空dist目录"></a>12、每次打包前清空dist目录</h4><p>反正我是懒得手动去清理的，只要你足够懒，你总是会找到好办法的，懒人推动科技进步。这里，我们需要插件: clean-webpack-plugin</p><p>安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>以前，clean-webpack-plugin 是默认导出的，现在不是，所以引用的时候，需要注意一下。另外，现在构造函数接受的参数是一个对象，可缺省。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="comment">//不需要传参数喔，它可以找到 outputPath</span></span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在你再修改文件，重现构建，生成的hash值和之前dist中的不一样，但是因为每次 clean-webpack-plugin 都会帮我们先清空一波 dist 目录，所以不会出现太多文件，傻傻分不清楚究竟哪个是新生成文件的情况。</p><h5 id="希望dist目录下某个文件夹不被清空"><a href="#希望dist目录下某个文件夹不被清空" class="headerlink" title="希望dist目录下某个文件夹不被清空"></a>希望dist目录下某个文件夹不被清空</h5><p>不过呢，有些时候，我们并不希望整个 dist 目录都被清空，比如，我们不希望，每次打包的时候，都删除 dll 目录，以及 dll 目录下的文件或子目录，该怎么办呢？</p><p>clean-webpack-plugin 为我们提供了参数<font color="pink">cleanOnceBeforeBuildPatterns</font>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> CleanWebpackPlugin(&#123;</span><br><span class="line">    <span class="attr">cleanOnceBeforeBuildPatterns</span>: [<span class="string">&#x27;**/*&#x27;</span>, <span class="string">&#x27;!dll&#x27;</span>, <span class="string">&#x27;!dll/**&#x27;</span>] <span class="comment">//不删除dll目录下的文件</span></span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们算是完成了一个基础配置。</p><p><a href="https://www.toutiao.com/article/6846293171794608653/?log_from=09f8b62908264_1665642047857">带你深度解读Webpack系列(进阶篇)</a></p><p><a href="https://www.toutiao.com/article/6811367006147707406/?log_from=0048b2fbf19d6_1665642286411">带你深度解锁Webpack系列(优化篇)</a></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3中v-model做的升级</title>
      <link href="/2022/07/26/vue3%E4%B8%ADv-model%E5%81%9A%E7%9A%84%E5%8D%87%E7%BA%A7/"/>
      <url>/2022/07/26/vue3%E4%B8%ADv-model%E5%81%9A%E7%9A%84%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<ul><li>在自定义组件上使用时，v-model的prop和event默认名称会更改：prop: value =&gt; modelValue event: input =&gt; update:modelValue</li><li>v-bind的.sync修饰符和组件model选项被删除并替换为v-model</li><li>v-model现在可以在同一个组件上进行多个绑定</li><li>可以自定义v-model修饰符</li></ul><h4 id="vue2-x语法"><a href="#vue2-x语法" class="headerlink" title="vue2.x语法"></a>vue2.x语法</h4><p>在input中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- would be shorthand for: --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&#x27;message&#x27;</span> @<span class="attr">input</span>=<span class="string">&#x27;message=$event.target.value&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent v-model=&quot;message&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- would be shorthand for: --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ChildComponent :value=&quot;message&quot; @input=&quot;message = $event&quot; /&gt;</span><br></pre></td></tr></table></figure><p>如果我们想将 prop 或事件名称更改为不同的名称，我们需要向组件添加一个model选项，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//ParentComponent.vue</span><br><span class="line"></span><br><span class="line">&lt;ChildComponent v-model=&quot;message&quot; /&gt;</span><br><span class="line"></span><br><span class="line">//ChildComponent.vue</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#x27;info&#x27;,</span><br><span class="line">    event: &#x27;change&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-model在这种情况下，就相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent :info=&quot;message&quot; @change=&quot;message = $event&quot; /&gt;</span><br></pre></td></tr></table></figure><h5 id="v-bind-sync"><a href="#v-bind-sync" class="headerlink" title="v-bind.sync"></a>v-bind.sync</h5><p>某些情况下，我们需要实现对组件属性的双向绑定。例如我们在上面这个ChildComponent中，通过某一事件的触发（如点击某一按钮）从而向父组件传达分配新值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;update:info&#x27;</span>, newValue)</span><br></pre></td></tr></table></figure><p>父组件侦听该事件并更新本地数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//ParentComponent.vue</span><br><span class="line">&lt;ChildComponent :info=&quot;message&quot; @update:info=&quot;message = $event&quot; /&gt;</span><br></pre></td></tr></table></figure><p>简写为以下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent :info.sync=&quot;message&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="vue3-x语法"><a href="#vue3-x语法" class="headerlink" title="vue3.x语法"></a>vue3.x语法</h4><p>在 3.x 版本中，组件上使用 v-model相当于传递了一个 modelValue 属性以及触发一个 update:modelValue 事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent v-model=&quot;message&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- would be shorthand for: --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ChildComponent</span><br><span class="line">  :modelValue=&quot;message&quot;</span><br><span class="line">  @update:modelValue=&quot;message = $event&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>如果要改变绑定的属性名，我们可以将参数传递给v-model</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent v-model:info=&quot;message&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- would be shorthand for: --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ChildComponent :info=&quot;message&quot; @update:info=&quot;message = $event&quot; /&gt;</span><br></pre></td></tr></table></figure><p>如果我们想在子组件中用input绑定传递过来的数据，并做实时修改那该怎么操作呢？<br>首先我们不能直接绑定传递过来数据，哪怕绑定了也无法做到实时修改，父组件传递了那就是传递了你如何都影响不到我当前组件的实际数据。而且一般在项目中我们都不会直接对props数据进行绑定修改。我们可以利用个中间值数据去操作，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&#x27;dataDetail&#x27;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    dataDetail: &#123;</span><br><span class="line">      set(value) &#123;</span><br><span class="line">        this.$emit(&#x27;update:modelValue&#x27;,value)</span><br><span class="line">      &#125;,</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.modelValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，它可以进行多个绑定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComponent v-model:info=&quot;message&quot; v-model:content=&quot;cons&quot; /&gt;</span><br><span class="line">&lt;!-- 相当于 --&gt;</span><br><span class="line">&lt;ChildComponent</span><br><span class="line">    :info=&quot;message&quot;</span><br><span class="line">    @update:info=&quot;message = $event&quot;</span><br><span class="line">    :content=&quot;cons&quot;</span><br><span class="line">    @update:content=&quot;cons = $event&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3中v-model做的升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端到底用Nginx来做什么</title>
      <link href="/2022/07/26/%E5%89%8D%E7%AB%AF%E5%88%B0%E5%BA%95%E7%94%A8Nginx%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88/"/>
      <url>/2022/07/26/%E5%89%8D%E7%AB%AF%E5%88%B0%E5%BA%95%E7%94%A8Nginx%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h4 id="location的匹配规则"><a href="#location的匹配规则" class="headerlink" title="location的匹配规则"></a>location的匹配规则</h4><ol><li>= 表示精确匹配。只有请求的url路径与后面的字符串完全相等时，才会命中。</li><li>^~ 表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找。</li><li>~ 表示该规则是使用正则定义的，区分大小写。</li><li>~* 表示该规则是使用正则定义的，不区分大小写。</li></ol><p>注意的是，nginx的匹配优先顺序按照上面的顺序进行优先匹配，而且注意的是一旦某一个匹配命中直接退出，不再进行往下的匹配</p><p>剩下的普通匹配会按照最长匹配长度优先级来匹配，就是谁匹配的越多就用谁。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> website.com;</span><br><span class="line">  <span class="attribute">location</span> /document &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">701</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* ^/docume.*$</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">702</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* ^/document$</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">703</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">curl</span> -I  website.com:<span class="number">8080</span>/document <span class="number">702</span></span><br><span class="line"><span class="comment"># 匹配702 因为正则的优先级更高,而且正则是一旦匹配到就直接退出 所以不会再匹配703</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  <span class="attribute">server_name</span> website.com;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* ^/docume.*$</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">701</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~</span> /doc &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">702</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* ^/document$</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">703</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">curl</span> http://website.com/document</span><br><span class="line">HTTP/<span class="number">1</span>.<span class="number">1</span> <span class="number">702</span></span><br><span class="line"><span class="comment"># 匹配702 因为 ^~精确匹配的优先级比正则高 也是匹配到之后支持退出</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  <span class="attribute">server_name</span> website.com;</span><br><span class="line">  <span class="attribute">location</span> /doc &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">702</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> /docu &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">701</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 701 前缀匹配匹配是按照最长匹配，跟顺序无关</span></span><br></pre></td></tr></table></figure><h4 id="history模式、跨域、缓存、反向代理"><a href="#history模式、跨域、缓存、反向代理" class="headerlink" title="history模式、跨域、缓存、反向代理"></a>history模式、跨域、缓存、反向代理</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># html设置history模式</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">  <span class="comment"># history模式最重要就是这里</span></span><br><span class="line">  <span class="attribute">try_files</span> $uri $uri/ /index.html;</span><br><span class="line">  <span class="comment"># index.html文件不可以设置强缓存 设置协商缓存即可</span></span><br><span class="line">  <span class="attribute">add_header</span> Cache-Control <span class="string">&#x27;no-cache, must-revalidate, proxy-revalidate, max-age=0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接口反向代理</span></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /api/ &#123;</span><br><span class="line">  <span class="comment"># 跨域处理 设置头部域名</span></span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">  <span class="comment"># 跨域处理 设置头部方法</span></span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET,POST,DELETE,OPTIONS,HEAD&#x27;</span>;</span><br><span class="line">  <span class="comment"># 改写路径</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/api/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="comment"># 反向代理</span></span><br><span class="line">  <span class="attribute">proxy_pass</span> http://static_env;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(?:css(\.map)?|js(\.map)?|gif|svg|jfif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$</span> &#123;</span><br><span class="line">  <span class="comment"># 静态资源设置七天强缓存</span></span><br><span class="line">  <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">  <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以目录去区分多个history单文件"><a href="#以目录去区分多个history单文件" class="headerlink" title="以目录去区分多个history单文件"></a>以目录去区分多个history单文件</h4><p>因为不可能每一个项目开启一个域名，仅仅指向通过增加路径来划分多个网站，比如：</p><blockquote><ol><li><a href="http://www.taobao.com/tmall/login%E8%AE%BF%E9%97%AE%E5%A4%A9%E7%8C%AB%E7%9A%84%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2">www.taobao.com/tmall/login访问天猫的登录页面</a></li><li><a href="http://www.taobao.com/alipay/login%E8%AE%BF%E9%97%AE%E6%94%AF%E4%BB%98%E5%AE%9D%E7%9A%84%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2">www.taobao.com/alipay/login访问支付宝的登录页面</a></li></ol></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> taobao.com;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  <span class="comment"># 通过正则来匹配捕获 [tmall|alipay]中间的这个路径</span></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ ^/([^\/]+)/(.*)$</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span> $uri $uri/ /<span class="variable">$1</span>/dist/index.html =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡(???)"></a>负载均衡(???)</h4><p>基于upstream做负载均衡,中间会涉及一些相关的策略比如ip_hash、weight</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver&#123;</span><br><span class="line">  <span class="comment"># 哈希算法，自动定位到该服务器 保证唯一ip定位到同一部机器 用于解决session登录态的问题</span></span><br><span class="line">  ip_hash;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:9090</span> down; (<span class="attribute">down</span> 表示单前的server暂时不参与负载)</span><br><span class="line">  server <span class="number">127.0.0.1:8080</span> weight=<span class="number">2</span>; (<span class="attribute">weight</span> 默认为<span class="number">1</span>.weight越大，负载的权重就越大)</span><br><span class="line">  server <span class="number">127.0.0.1:6060</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:7070</span> backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="灰度部署"><a href="#灰度部署" class="headerlink" title="灰度部署"></a>灰度部署</h4><blockquote><p>如何根据headers头部来进行灰度，下面的例子是用cookie来设置</p></blockquote><p>如何获取头部值在nginx中可以通过$http_xxx来获取变量</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> stable &#123;</span><br><span class="line">  <span class="attribute">server</span> xxx max_fails=<span class="number">1</span> fail_timeout=<span class="number">60</span>;</span><br><span class="line">  <span class="attribute">server</span> xxx max_fails=<span class="number">1</span> fail_timeout=<span class="number">60</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="attribute">upstream</span> canara &#123;</span><br><span class="line">  <span class="attribute">server</span> xxx max_fails=<span class="number">1</span> fail_timeout=<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  xxx;</span><br><span class="line">  <span class="comment"># 设置默认</span></span><br><span class="line">  <span class="attribute">set</span> $group <span class="string">&quot;stable&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 根据cookie头部设置接入的服务</span></span><br><span class="line">  <span class="attribute">if</span> ($http_cookie <span class="regexp">~* &quot;tts_version_id=canara&quot;)</span>&#123;</span><br><span class="line">    <span class="attribute">set</span> $group canara;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">if</span> ($http_cookie <span class="regexp">~* &quot;tts_version_id=stable&quot;)</span>&#123;</span><br><span class="line">    <span class="attribute">set</span> $group stable;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://$group;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>   Host             $host;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>   X-Real-IP        $remote_addr;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h4><blockquote><p>常用于ssr的node服务挂了返回500错误码然后降级到csr的cos桶或者nginx中</p></blockquote><p>优雅降级主要用error_page参数来进行降级指向备用地址</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> ssr &#123;</span><br><span class="line">  <span class="attribute">server</span> xxx max_fails=<span class="number">1</span> fail_timeout=<span class="number">60</span>;</span><br><span class="line">  <span class="attribute">server</span> xxx max_fails=<span class="number">1</span> fail_timeout=<span class="number">60</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="attribute">upstream</span> csr &#123;</span><br><span class="line">  <span class="attribute">server</span> xxx max_fails=<span class="number">1</span> fail_timeout=<span class="number">60</span>;</span><br><span class="line">  <span class="attribute">server</span> xxx max_fails=<span class="number">1</span> fail_timeout=<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /ssr/ &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://ssr;</span><br><span class="line">  <span class="comment"># 开启自定义错误捕获 如果这里不设置为on的话 会走向nginx处理的默认错误页面</span></span><br><span class="line">  <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="comment"># 捕获500系列错误 如果500错误的话降级为下面的csr渲染</span></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">501</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> = @csr_location</span><br><span class="line"></span><br><span class="line">  <span class="comment"># error_page 500 501 502 503 504 = 200 @csr_location</span></span><br><span class="line">  <span class="comment"># 注意这上面的区别 等号前面没有200 表示 最终返回的状态码已 @csr_location为准 加了200的话表示不管@csr_location返回啥都返回200状态码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location @csr_location &#123;</span><br><span class="line">  <span class="comment"># 这时候地址还是带着/ssr/的要去除</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/ssr/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://csr;</span><br><span class="line">  <span class="attribute">rewrite_log</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="webp根据浏览器自动降级为png"><a href="#webp根据浏览器自动降级为png" class="headerlink" title="webp根据浏览器自动降级为png"></a>webp根据浏览器自动降级为png</h5><p>这套方案不像常见的由nginx把png转为webp的方案，而是先经由图床系统（node服务）上传两份图片:</p><ol><li>一份是原图png</li><li>一份是png压缩为webp的图片（使用的是imagemin-webp）</li></ol><p>然后通过nginx检测头部是否支持webp来返回webp图片，不支持的话就返回原图即可。这其中还做了错误拦截，如果cos桶丢失webp图片及时浏览器支持webp也要降级为png</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">  <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置日志格式</span></span><br><span class="line">  <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span></span><br><span class="line">  <span class="string">&#x27;&quot;$proxy_host&quot; &quot;$upstream_addr&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 开启gzip</span></span><br><span class="line">  <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_proxied</span> any;</span><br><span class="line">  <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">gzip_types</span> text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 负载均衡 这里可以是多个cos桶地址即可</span></span><br><span class="line">  <span class="attribute">upstream</span> static_env &#123;</span><br><span class="line">    <span class="attribute">server</span> xxx;</span><br><span class="line">    <span class="attribute">server</span> xxx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># map 设置变量映射 第一个变量指的是要通过映射的key值 Accpet 第二个值的是变量别名</span></span><br><span class="line">  <span class="attribute">map</span> $http_accept $webp_suffix &#123;</span><br><span class="line">    <span class="comment"># 默认为 空字符串</span></span><br><span class="line">    <span class="attribute">default</span>   <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment"># 正则匹配如果Accep含有webp字段 设置为.webp值</span></span><br><span class="line">    &quot;~*webp&quot;  &quot;.webp&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">absolute_redirect</span> <span class="literal">off</span>;    <span class="comment">#取消绝对路径的重定向</span></span><br><span class="line">    <span class="comment">#网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">      <span class="attribute">try_files</span> $uri $uri/ /index.html;</span><br><span class="line">      <span class="attribute">add_header</span> Cache-Control <span class="string">&#x27;no-cache, max-age=0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># favicon.ico</span></span><br><span class="line">    <span class="attribute">location</span> = /favicon.ico &#123;</span><br><span class="line">      <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># robots.txt</span></span><br><span class="line">    <span class="attribute">location</span> = /robots.txt &#123;</span><br><span class="line">      <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* \.(png|jpe?g)$</span> &#123;</span><br><span class="line">      <span class="comment"># Pass WebP support header to backend</span></span><br><span class="line">      <span class="comment"># 如果header头部中支持webp</span></span><br><span class="line">      <span class="attribute">if</span> ($webp_suffix <span class="regexp">~* webp)</span> &#123;</span><br><span class="line">        <span class="comment"># 先尝试找是否有webp格式图片</span></span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)\.(png|jpe?g)$</span> /<span class="variable">$1</span>.webp <span class="literal">break</span>;</span><br><span class="line">        <span class="comment"># 找不到的话 这里捕获404错误 返回原始错误 注意这里的=号 代表最终返回的是@static_img的状态吗</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> = @static_img;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">add_header</span> Vary Accept;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://static_env;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">      <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">      <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> @static_img &#123;</span><br><span class="line">      <span class="comment">#set $complete $schema $server_addr $request_uri;</span></span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/.+$</span> $request_uri <span class="literal">break</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://static_env;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">      <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># assets, media</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* \.(?:css(\.map)?|js(\.map)?|gif|svg|jfif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$</span> &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://static_env;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">      <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">      <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">      <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端到底用Nginx来做什么 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-tree懒加载的回显问题</title>
      <link href="/2022/07/25/el-tree%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%9B%9E%E6%98%BE%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/25/el-tree%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%9B%9E%E6%98%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>给某一用户绑定组织，由于组织数据量比较大，做成懒加载的树结构模式，出于与别的模块进行联动，需要把关联的选中的组织和半选的组织均存到库中，此时存在一个问题，当对该数据编辑时半选组织的回显无法实现。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>弹窗显示前先拿到选中和半选的数据，注意el-tree标签要给node-key属性，然后在树加载的方法中设置选中和半选的节点，示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">loadNode</span>(<span class="params">node, resolve</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(node.level === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 接口请求 data</span></span><br><span class="line">    resolve(data)</span><br><span class="line">    <span class="comment">// 设置选中</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.tree.setCheckedKeys(selectedKeyArr)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 接口请求 data</span></span><br><span class="line">    resolve(data)</span><br><span class="line">    <span class="comment">// 设置选中</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.tree.setCheckedKeys(selectedKeyArr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置半选</span></span><br><span class="line">  halfKeyArr.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="built_in">this</span>.$refs.tree.getNode(key)</span><br><span class="line">    node.indeterminate = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> el-tree懒加载的回显问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise详解</title>
      <link href="/2022/07/21/Promise%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/07/21/Promise%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-含义"><a href="#1-含义" class="headerlink" title="1. 含义"></a>1. 含义</h4><blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。<br>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p></blockquote><h4 id="2-异步和回调"><a href="#2-异步和回调" class="headerlink" title="2. 异步和回调"></a>2. 异步和回调</h4><p>只要有一件异步事情发生时，就会存在两个阶段 unsettled未决阶段和settled已决阶段<br>事情总是从未决阶段走向已决阶段，并且未决阶段拥有控制通往已决阶段的能力，可以决定事情最终走向的结果。</p><p>将程序分为三种状态 pending resolved rejected。<br>pending 等待  处于unsettled阶段,表示事情还在等待最终的结果。<br>resolved 已处理  处于setteled阶段，表示事情已经出现结果，并且可以按照正常的逻辑进行下去的结果。<br>rejected 已拒绝 处于setteled阶段，表示事情已经出现结果，并且不可以按照正常的逻辑进行下去的结果。</p><p>把事情从pending状态推向resolved状态的过程中，可能会传递一些数据，这些数据为真实有效数据。<br>把事情从pending状态推向rejected状态的过程中，可能会传递一些数据，这些数据为错误信息</p><p>无论是在哪个阶段还是那个状态，都是不可逆。</p><p>当事情已经到达已决阶段后，通常用结果数据做一些后续处理，不同的已决结果，可能造成不同的后续处理。<br>resolved 后续处理表示为thenable<br>rejected 后续处理表示为catchable</p><p>后续处理可能有多个，因此会形成任务队列，这些后续处理会按照顺序当到达对应的状态时会依次执行。</p><h4 id="3-promise方法"><a href="#3-promise方法" class="headerlink" title="3. promise方法"></a>3. promise方法</h4><table><thead><tr><th>方法</th><th>类型</th><th>简介</th></tr></thead><tbody><tr><td>then()</td><td>原型方法</td><td>可以处理thenable和catchable</td></tr><tr><td>catch()</td><td>原型方法</td><td>可以处理catchable</td></tr><tr><td>finally()</td><td>原型方法</td><td>用于不管promise最后状态如何，都会执行finally方法</td></tr><tr><td>resolve()</td><td>静态方法</td><td>常见promise成功的实例</td></tr><tr><td>all()</td><td>静态方法</td><td>返回一个promise对象，当数组里面的所有promise对象的状态都为resolve，者新的promise对象的状态为resolve，反之有一个rejected状态，则新的promise对象的状态为resolve</td></tr></tbody></table><p><strong>Promise.all()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises=[<span class="keyword">async</span>(<span class="number">1</span>),<span class="keyword">async</span>(<span class="number">2</span>),<span class="keyword">async</span>(<span class="number">3</span>),<span class="keyword">async</span>(<span class="number">4</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Promise</span>.all(promises)</span><br><span class="line">.then(<span class="function"><span class="params">values</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><p><strong>Promise.case()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises=[<span class="keyword">async</span>(<span class="number">1</span>),<span class="keyword">async</span>(<span class="number">2</span>),<span class="keyword">async</span>(<span class="number">3</span>),<span class="keyword">async</span>(<span class="number">4</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Promise</span>.race(promises)</span><br><span class="line">.then(<span class="function"><span class="params">values</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure><h4 id="4-promise解决了什么问题"><a href="#4-promise解决了什么问题" class="headerlink" title="4. promise解决了什么问题"></a>4. promise解决了什么问题</h4><ol><li><p>回调地狱问题：<br>Promise是回调地狱的解决方案之一，我们使用Promise的语法来解决回调地狱的问题，使代码拥有可读性和可维护性，有时候前端为了能够拿到异步的数据，使用了大量的回调函数，来获取将来异步执行成功之后的数据。从一定程度上来说，回调地狱能解决问题，但是有缺点，或者说不优雅，阅读性非常差，而Promise就解决了这个问题。</p></li><li><p>代码的可读性问题：<br>让代码更加直观优雅精简，让人更容易的去阅读代码，也方便代码bug的寻找。</p></li><li><p>信任问题：<br>回调函数不能保证什么时候去调用回调，以及使用什么方式去调用回调；而Promise一旦被确认成功或失败，就不能再被更改。Promise成功之后仅调用一次resolve()，不会产生回调多次执行的问题。除非Promise再次调用。所以Promise很好地解决了第三方工具导致的回调多次执行（控制反转）的问题。</p></li></ol><h4 id="5-promise有哪几个状态"><a href="#5-promise有哪几个状态" class="headerlink" title="5. promise有哪几个状态"></a>5. promise有哪几个状态</h4><ol><li>pending等待</li><li>resolved已处理</li><li>rejected已拒绝</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题汇总</title>
      <link href="/2022/07/20/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2022/07/20/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="1、vuex的优缺点"><a href="#1、vuex的优缺点" class="headerlink" title="1、vuex的优缺点"></a>1、vuex的优缺点</h4><p>优点：</p><blockquote><p>能够在vuex中,集中管理共享的数据,易于开发和后期维护；</p><p>Vuex 的状态存储是响应式的，当 Vue 组件从 store中读取状态的时候，若 store 中的状态发生变化，能够触发响应式的渲染页面更新 (localStorage就不会)，那么相应的组件也会相应地得到高效更新。</p><p>js 原生的数据对象写法, 比起 localStorage 不需要做转换, 使用方便</p><p>限定了一种可预测的方式改变数据, 避免大项目中, 数据不小心的污染</p></blockquote><p>缺点</p><blockquote><p>刷新浏览器，vuex中的state会重新变为初始状态 ；</p><p>解决方案-插件 vuex-persistedstate</p></blockquote><h4 id="2、如何减少http请求的次数"><a href="#2、如何减少http请求的次数" class="headerlink" title="2、如何减少http请求的次数"></a>2、如何减少http请求的次数</h4><ol><li>能做雪碧图就做雪碧图</li><li>base64编码（把一张小于多少大小的图片变成一种64位编码的形式）<br>因为编码就不用请求，就直接解析成一张图片<br>坏处是增加了数据量，增加了请求时间<br>只建议用内存比较小的图标采取这种方式</li><li>合并脚本与样式表代码<br>HTML/JS/CSS</li><li>缩小CSS和JavaScrit文件<br>你用你的域名在第三方服务器上进行解析，从而生成CDN加速域名（例：七牛云）</li><li>尽量使用浏览器的缓存机制</li><li>实施延迟加载技术</li><li>减少外部脚本的数量</li><li>使用内容分发网络（CDN）<br>CDN是位于世界各地的服务器网络。CDN在您的网站上缓存静态资源，然后用户访问您的网页时，将其提供给缓存的内容。缓存的内容是从服务器交付的，最接近用户的物理位置。<br>是否要使用CDN取决于几件事，最重要的是您的流量是本地流量还是国际流量。如果您的大多数网站访问者是本地访问者，则不需要内容交付网络（CDN加速）</li></ol><h4 id="3、px、em、rem的区别"><a href="#3、px、em、rem的区别" class="headerlink" title="3、px、em、rem的区别"></a>3、px、em、rem的区别</h4><p>一、px是固定的像素，一旦设置了就无法因为适应页面大小而改变。</p><p>二、em和rem相对于px更具有灵活性，他们是相对长度单位，意思是长度不是定死了的，更适用于响应式布局。</p><p>三、em是相对于其父元素来设置字体大小的，一般都是以<body>的“font-size”为基准。这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而Rem是相对于根元素<html>，这样就意味着，我们只需要在根元素确定一个参考值。</html></body></p><p>总之：对于em和rem的区别一句话概括：em相对于父元素，rem相对于根元素。</p><h4 id="4、css优先级算法"><a href="#4、css优先级算法" class="headerlink" title="4、css优先级算法"></a>4、css优先级算法</h4><p>选择器的优先级顺序是由各个选择器的权重决定的。具体如下表：</p><table><thead><tr><th align="left">选择器</th><th align="left">权重值</th></tr></thead><tbody><tr><td align="left">!important</td><td align="left"><a href="https://so.csdn.net/so/search?q=infinity&spm=1001.2101.3001.7020">infinity</a>(无穷大)</td></tr><tr><td align="left">行内样式 style” “</td><td align="left">1000</td></tr><tr><td align="left">id选择器</td><td align="left">100</td></tr><tr><td align="left">class类选择器、属性选择器、伪类选择器</td><td align="left">10</td></tr><tr><td align="left">标签（元素）选择器</td><td align="left">1</td></tr><tr><td align="left">通配符（*）选择器</td><td align="left">0</td></tr></tbody></table><ul><li>优先级就近原则，同权重情况下样式定义最近者为准</li><li>载入样式以最后载入的定位为准</li><li>优先级为: <code>!important &gt; 行内style &gt; id &gt; class &gt; tag</code>; </li></ul><h4 id="5、写出代码打印结果"><a href="#5、写出代码打印结果" class="headerlink" title="5、写出代码打印结果"></a>5、写出代码打印结果</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;AJ&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span> + name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// HiAJ</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeObhProperty</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.siteUrl = <span class="string">&#x27;https://www.ke.com&#x27;</span>;</span><br><span class="line">  o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.siteUrl = <span class="string">&#x27;https://www.lianjia.com&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> webSide = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">changeObhProperty(webSide);</span><br><span class="line"><span class="built_in">console</span>.log(webSide.siteUrl);</span><br><span class="line"><span class="comment">// https://www.ke.com</span></span><br></pre></td></tr></table></figure><h4 id="6、浏览器的重绘与回流"><a href="#6、浏览器的重绘与回流" class="headerlink" title="6、浏览器的重绘与回流"></a>6、浏览器的重绘与回流</h4><p>浏览器的渲染原理：<br>1.解析HTML，生成DOM树，解析CSS，生成CSSOM树<br>2.将DOM树和CSSOM树结合，生成渲染树(Render Tree)</p><p><strong>回流：</strong></p><p>回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。</p><p><strong>重绘：</strong></p><p>重绘是由于节点的几何属性发生改变或者由于样式发生改变但不会影响布局。例如outline, visibility, color、background-color等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性。</p><p><strong>什么时候发生回流</strong></p><ol><li>添加或删除可见的DOM元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li><li>页面一开始渲染的时候（这肯定避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li></ol><p>回流一定会触发重绘，而重绘不一定会回流</p><h5 id="1、CSS优化法"><a href="#1、CSS优化法" class="headerlink" title="1、CSS优化法"></a>1、CSS优化法</h5><ol><li>使用 transform 替代 top</li><li>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局</li><li>避免使用table布局，可能很小的一个小改动会造成整个 table 的重新布局。</li><li>尽可能在DOM树的最末端改变class，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。</li><li>避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多。</li><li>将动画效果应用到position属性为absolute或fixed的元素上，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 requestAnimationFrame。</li><li>避免使用CSS表达式，可能会引发回流。</li><li>将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点，例如will-change、video、iframe等标签，浏览器会自动将该节点变为图层。</li><li>CSS3 硬件加速（GPU加速），使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</li></ol><h5 id="2、JavaScript优化法"><a href="#2、JavaScript优化法" class="headerlink" title="2、JavaScript优化法"></a>2、JavaScript优化法</h5><ol><li>避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。</li><li>避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。 </li><li>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</li></ol><h4 id="7、节流和防抖"><a href="#7、节流和防抖" class="headerlink" title="7、节流和防抖"></a>7、节流和防抖</h4><ol><li>节流</li></ol><p>节流是在一段时间内只运行一次，若在一段时间内重复触发，只有一次生效。(场景示例：点击按钮登录)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fun, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fun.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>防抖</li></ol><p>防抖是在一段时间后再执行操作，若在一段时间内被重复触发，则重新计时。(场景示例：搜索框自动执行模糊匹配)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">antiShake</span>(<span class="params">fun, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fun.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、什么是缓存，及其作用"><a href="#8、什么是缓存，及其作用" class="headerlink" title="8、什么是缓存，及其作用"></a>8、什么是缓存，及其作用</h4><p>缓存其实就是一个临时的存储器。缓存有 ：cookie、session、application、cache、redis</p><p>缓存主要是为了提高数据的读取速度。因为服务器和应用客户端之间存在着流量的瓶颈，所以读取大容量数据时，使用缓存来直接为客户端服务，可以减少客户端与服务器端的数据交互，从而大大提高程序的性能。<br>以前实现数据的缓存有很多种方法，有客户端的Cookie，有服务器端的Session和Application。其中Cookie是保存在客户端的一组数据，主要用来保存用户名等个人信息。Session则保存对话信息。Application则是保存在整个应用程序范围内的信息，相当于全局变量。通常使用最频繁的是Session，缓存也是有限的，会自动清除之前的旧数据。其中redis的读取速度最快，并且是在内存中进行读取，当内存不够时可以扩大内存，还有就是 .net提供的Cache缓存.</p><h4 id="9、封装一个异步加载图片的方法"><a href="#9、封装一个异步加载图片的方法" class="headerlink" title="9、封装一个异步加载图片的方法"></a>9、封装一个异步加载图片的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loadImageAsync(<span class="string">&quot;./loadImg.jpg&quot;</span>).then(<span class="function"><span class="params">image</span> =&gt;</span> <span class="built_in">document</span>.body.appendChild(image))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步加载图片函数封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.src = url;</span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(image);</span><br><span class="line">    &#125;;</span><br><span class="line">    image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Could not load image at &#x27;</span> + url));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10、webpack中loader和plugin的区别"><a href="#10、webpack中loader和plugin的区别" class="headerlink" title="10、webpack中loader和plugin的区别"></a>10、webpack中loader和plugin的区别</h4><p><strong>loader</strong>从字面的意思理解，是加载的意思。由于webpack 本身只能打包js文件，所以，针对css，图片等格式的文件没法打包，就需要引入第三方的模块进行打包。loader虽然是扩展了 webpack ，但是它只专注于转化文件（transform）这一个领域，完成压缩，打包，语言翻译。loader是运行在NodeJS中。仅仅只是为了打包。<br>如：<font color="red">css-loader和style-loader模块是为了打包css的</font><br><font color="red">babel-loader和babel-core模块时为了把ES6的代码转成ES5</font><br><font color="red">url-loader和file-loader是把图片进行打包的。</font><br><strong>plugin</strong>也是为了扩展webpack的功能，但是 plugin 是作用于webpack本身上的。而且plugin不仅只局限在打包，资源的加载上，它的功能要更加丰富。从打包优化和压缩，到重新定义环境变量，功能强大到可以用来处理各种各样的任务。webpack提供了很多开箱即用的插件.</p><h4 id="11、webpack优化配置"><a href="#11、webpack优化配置" class="headerlink" title="11、webpack优化配置"></a>11、webpack优化配置</h4><h5 id="1、开发环境性能优化"><a href="#1、开发环境性能优化" class="headerlink" title="1、开发环境性能优化"></a>1、开发环境性能优化</h5><ul><li>优化打包构建速度</li></ul><ol><li>HMR</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块） 极大提升构建速度</span><br></pre></td></tr></table></figure><ul><li>优化代码调试</li></ul><ol><li>source-map</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一种 提供源代码到构建后代码映射 技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</span><br></pre></td></tr></table></figure><h5 id="2、生产环境性能优化"><a href="#2、生产环境性能优化" class="headerlink" title="2、生产环境性能优化"></a>2、生产环境性能优化</h5><ul><li>优化打包构建速度</li></ul><ol><li><p><strong><font color="red">oneOf</font></strong><br> oneOf提高打包构建速度；<br> 只会匹配一个loader；<br> 类似于数组列表，以前每一个文件需要遍历全部找到处理该文件类型对应loader，而使用oneOf 只需要使用匹配到的loader即可。</p></li><li><p><strong><font color="red">babel缓存</font></strong><br> babel对我们写的js代码做编译处理时，假设有100个js模块，一个模块变，只变这一个模块，其他模块不变。<br> 开启babel缓存，之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。</p></li><li><p><strong><font color="red">多进程打包</font></strong><br> Thread-loader：Webpack 官方出品，以多进程方式运行资源加载逻辑</p></li><li><p><strong><font color="red">externals</font></strong><br> 不想把第三方库打包到bundle中，这就有了externals。</p></li><li><p><strong><font color="red">dll</font></strong><br> dll的作用是将项目中一些不常改变的依赖单独打包</p></li></ol><ul><li>优化代码运行的性能</li></ul><ol><li><p><strong><font color="red">缓存(hash-chunkhash-contenthash)</font></strong><br> 浏览器为了优化体验，会有缓存机制。如果浏览器判断当前资源没有更新，就不会去服务端下载，而是直接使用本地资源。在webpack的构建中，我们通常使用给文件添加后缀值来改名以及提取公共代码到不会改变的lib包中来解决新资源缓存问题。<br> hash:模块标识符，我们知道对于webpack来说，它是一个打包编译的过程，也就是一个 compilation的过程，这个标识符，标识的就是这个打包的过程。这样就很好解释了模块标识符的概念就是在相同编译打包过程中的模块所共有的标识符，也就是说同一过程产出的产物的hash值都是一样的，也就解释了上面的过程。<br> 但是这样会有很大的问题，因为我们不想改变css模块而去影响到js打包出来的名称，这样不利于我们去做缓存。<br> chunkhash:chunk指代的是模块，顾名思义，chunkhash就是模块的hash，也就是根据模块内容计算的hash值。那这边我们css模块的修改和js模块就没有关系。<br> contenthash：从名称上我们可以知道，它是根据文件内容来定义hash所得，所以我们就可以使用插件extract-text-webpack-plugin定义的contenthash来打包。</p></li><li><p><strong><font color="red">tree shaking(摇树)</font></strong><br> 用于描述移除 JavaScript 上下文中的未引用代码<br> Tree Shaking 是一个术语，在计算机中表示消除死代码，依赖于ES Module的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）<br> 在webpack实现Trss shaking有两种不同的方案：</p><ul><li><strong>usedExports</strong>：通过标记某些函数是否被使用，之后通过Terser来进行优化的</li><li><strong>sideEffects</strong>：跳过整个模块/文件，直接查看该文件是否有副作用</li></ul></li><li><p><strong><font color="red">code split（代码拆分 - splitChunksPlugin）</font></strong><br> 将一个文件打包生成多个文件，这样做可以将一个大的文件分割成多个小的文件同时并行加载。同时分割成多个文件还可以实现按需加载的功能</p></li></ol><p>  将代码分离到不同的bundle中，之后我们可以按需加载，或者并行加载这些文件<br>  默认情况下，所有的JavaScript代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页的加载速度<br>  代码分离可以分出出更小的bundle，以及控制资源加载优先级，提供代码的加载性能<br>  这里通过splitChunksPlugin来实现，该插件webpack已经默认安装和集成，只需要配置即可<br>  默认配置中，chunks仅仅针对于异步（async）请求，我们可以设置为initial或者all</p><ol start="4"><li><p><strong><font color="red">懒加载/预加载</font></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒加载或者按需加载，会在文件需要使用时才加载，是一种很好的优化网页或应用的方式。</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 懒加载~：当文件需要使用时才加载~</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27;*/</span><span class="string">&#x27;./test&#x27;</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在声明 import 时，使用webapck的内置指令/* webpackPrefetch: true */就可以对指定资源进行预加载</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 预加载 prefetch：会在使用之前，提前加载js文件 </span></span><br><span class="line">  <span class="comment">// 正常加载可以认为是并行加载（同一时间加载多个文件）  </span></span><br><span class="line">  <span class="comment">// 预加载 prefetch：等其他资源加载完毕，浏览器空闲了，再偷偷加载资源</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27;, webpackPrefetch: true */</span><span class="string">&#x27;./test&#x27;</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color="red">pwa（渐进式网络开发应用程序(离线可访问)</font></strong><br> 它让我们的应用程序可以像 APP 一样，离线也能访问，性能也更好。但是由于兼容性问题，现在还没有大面积推广开来（但是大厂有使用，比如说淘宝）。要在项目中真正使用PWA，我们需要借助 workbox 这个库，而在 webpack 中，我们还需要引入 workbox-webpack-plugin 这个插件。</p></li><li><p><strong><font color="red">JS代码压缩 (terser-webpack-plugin)</font></strong><br> terser是一个JavaScript的解释、绞肉机、压缩机的工具集，可以帮助我们压缩、丑化我们的代码，让bundle更小</p></li><li><p><strong><font color="red">CSS代码压缩 (css-minimizer-webpack-plugin)</font></strong><br> CSS压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等</p></li><li><p><strong><font color="red">Html文件代码压缩 (HtmlWebpackPlugin)</font></strong><br> 使用HtmlWebpackPlugin插件来生成HTML的模板时候，通过配置属性minify进行html优化</p></li><li><p><strong><font color="red">文件大小压缩 (compression-webpack-plugin)</font></strong><br> 对文件的大小进行压缩，减少http传输过程中宽带的损耗</p></li><li><p><strong><font color="red">图片压缩 (image-webpack-loader)</font></strong><br>一般来说在打包之后，一些图片文件的大小是远远要比 js 或者 css 文件要来的大，所以图片压缩较为重要</p></li><li><p><strong><font color="red">内联chunk (InlineChunkHtmlPlugin)</font></strong><br>可以通过InlineChunkHtmlPlugin插件将一些chunk的模块内联到html，如runtime的代码（对模块进行解析、加载、模块信息相关的代码），代码量并不大，但是必须加载的</p><h4 id="12、地址栏输入url-发生了什么"><a href="#12、地址栏输入url-发生了什么" class="headerlink" title="12、地址栏输入url 发生了什么"></a>12、地址栏输入url 发生了什么</h4></li></ol><p>1.在浏览器中输入一个url<br>2.根据域名解析出ip地址（dns的过程）<br>（1）先检查浏览器缓存，如果有，返回，没有，下一步<br>（2）检查系统缓存，hosts文件<br>（3）检查网络中路由器的dns缓存<br>（4）递归查询，不优先查找浏览器所在的本地域名服务器，先查找其他域名服务器，看有没有，如果没有，再查找本地域名服务器，本地域名服务器用迭代查询来查找<br>（5）迭代查询，不断向上访问，查找<br>3.根据找到的ip地址建立tcp连接<br>三次握手<br>4.发送http请求<br>5.如果发生重定向，状态码是3开头，那么返回第一步，继续匹配重定向的服务器<br>6.向重定向的服务器发送http请求<br>7.服务器处理请求，并且服务器发送html响应<br>8.浏览器收到http响应，tcp断开连接<br>9.如果得到的资源(静态)可以缓存，进行缓存<br>10.读取页面内容，浏览器渲染，解析html源码<br>11.生成Dom树、解析css样式、js交互<br>12.显示页面(html解析过程中会逐步显示页面)</p><ul><li>首先获取 html 文件，构建 DOM 树，这个过程是边下载边解析，并不是等 html 文件全部下载完了，再去解析 html，这样比较浪费时间，而是下载一点解析一点</li><li>好了解析到 html 头部时候，又会出现一种问题，css,js 放到哪里了？不同的位置会造成渲染的不同，此时就会出现另一个需要关注的问题”css,js 位置应该放哪里?为什么”，我们先按照正确的位置来说明(css 放头部,js 放尾部)</li><li>解析到了 html 头部发现有 css 文件，此时下载 css 文件，css 文件也是一边下载一边解析的，构建的是 CSSOM 树，当 DOM 树和 CSSOM 树全部构建完之后，浏览器会把 DOM 树和 CSSOM 树构建成渲染树。</li><li>样式计算, 上面最后一句”DOM 树和 CSSOM 树会一起构建成渲染树”说的有点笼统，其实还有更细一点的操作，但是一般回答到上面应该就可以了，我们现在接上面说一下构造渲染树的时候还做了哪些事情。第一个就是样式计算，DOM树 和 CSSOM树有了之后，浏览器开始样式计算，主要是为 DOM 树上的节点找到对应的样式</li><li>构建布局树，样式计算完之后就开始构建布局树。主要是为 DOM 树上的节点找到页面上对应位置以及一些”display:none”元素的隐藏。</li><li>构建分层树，布局树完成后浏览器还需要建立分层树，主要是为了满足滚动条，z-index，position 这些复杂的分层操作</li><li>将分层树图块化，利用光栅找到视图窗口下的对应的位图。主要是因为一个页面可能有几屏那么长，一下渲染出来比较浪费，所以浏览器会找到视图窗口对应的图块，将这部分的图块进行渲染</li><li>最终渲染进程将整个页面渲染出来，在渲染的过程中会还出现重排和重绘。</li><li>以上过程大概讲解了一下从 url 到页面渲染的整个过程。</li></ul><h4 id="13、js-css-顺序对前端优化影响"><a href="#13、js-css-顺序对前端优化影响" class="headerlink" title="13、js css 顺序对前端优化影响"></a>13、js css 顺序对前端优化影响</h4><p>渲染树的构成必须要 DOM 树和 CSSOM 树的，所以尽快的构建 CSSOM 树是一个重要的优化手段，如果 css 文件放在尾部，那么整个过程就是一个串行的过程先解析了 dom，再去解析 css。所以 css 我们一般都是放在头部，这样 DOM 树和 CSSOM 树的构建是同步进行的。</p><p>再来看 js，因为 js 的运行会阻止 DOM 树的渲染的，所以一旦我们的 js 放在了头部，而且也没有异步加载这些操作的话，js 一旦一直在运行，DOM 树就一直构建不出来，那么页面就会一直出现白屏界面，所以一般我们会把 js 文件放在尾部。当然放到尾部也不是就没有问题了，只是问题相对较小，放到尾部的 js 文件如果过大，运行时间长，代码加载时，就会有大量耗时的操作造成页面不可点击，这就是另一个问题，但这肯定比白屏要好，白屏是什么页面都没有，这种是页面有了只是操作不流畅。</p><p>js 脚本放在尾部还有一个原因，有时候 js 代码会有操作 dom 节点的情况，如果放在头部执行，DOM树还没有构建，拿不到 DOM 节点但是你又去使用就会出现报错情况，错误没处理好的话页面会直接崩掉。</p><h4 id="14、js事件循环机制"><a href="#14、js事件循环机制" class="headerlink" title="14、js事件循环机制"></a>14、js事件循环机制</h4><p>javascript是单线程执行的程序，也就是它只有一条主线，所有的程序都是逐行“排队”执行，在这种情况下可能存在一些问题，比如说setTimeout、ajax等待执行的时间较长，就会阻塞后续代码的执行，使得整个程序执行的耗时非常久，那么为了应对这样一个问题，javascript代码在执行的时候，是有几个“通道”的。</p><p>首先是调用栈，执行耗时较短的操作，耗时较长的操作先放置到任务队列中，任务队列又分为宏任务（macro-task）和微任务（micro-task），微任务中队列中放置的是 promise.then、async、await 这样操作，宏任务队列中放置的是 setTimeout、ajax、onClick事件，等调用栈的任务执行完成再轮询微任务队列，微任务队列中任务执行完成之后再执行宏任务。</p><p>这里提到了栈和队列，简单说一下这两种数据结构，栈是一种后进先出的结构，只能从尾部进入，从尾部删除，拿生活中的场景来打比方，就好像自助餐的餐盘，最先放的盘子在最底下，最后放的盘子在最上面，需要把最上面的盘子一个个拿走，才能拿到最下面的盘子。</p><p>而队列，是一种先进先出的结构，从尾部进入，从头部删除，就像我们去排队买东西，先去的同学可以先买到。</p><p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v2c5b0e68379fb478faced4898d04cf184.png" alt="image.png"></p><p>再回到事件循环机制（event loop），不阻塞主进程的程序放入调用栈中，压入栈底，执行完了就会弹出，如果是函数，那么执行完函数里所有的内容才会弹出，而阻塞主进程的程序放入任务队列中，他们需要“排队”依次执行。</p><p>判断执行顺序可以记住以下几个重点</p><ol><li>promise中的回调函数立刻执行，then中的回调函数会推入微任务队列中，等待调用栈所有任务执行完才执行</li><li>async函数里的内容是放入调用栈执行的，await的下一行内容是放入微任务执行的</li><li>调用栈执行完成后，会不断的轮询微任务队列，即使先将宏任务推入队列，也会先执行微任务</li></ol><h4 id="15、new操作符工作原理"><a href="#15、new操作符工作原理" class="headerlink" title="15、new操作符工作原理"></a>15、new操作符工作原理</h4><ol><li>创建空对象，作为将要返回对象的实例</li><li>将空对象的<code>__proto__</code>指向构造函数的prototype属性</li><li>将空对象赋值给函数中的this</li><li>开始执行构造函数,返回一个object</li></ol><h4 id="16、vue中Diff算法、key的作用原理"><a href="#16、vue中Diff算法、key的作用原理" class="headerlink" title="16、vue中Diff算法、key的作用原理"></a>16、vue中Diff算法、key的作用原理</h4><ol><li>Diff算法步骤：</li></ol><ul><li>用js对象结构（虚拟DOM）表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</li><li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li><li>把所记录的差异应用到所构建的真正的DOM树上，视图就更新了</li></ul><ol start="2"><li>key的作用原理：</li></ol><ul><li>唯一标识，为了高效的更新虚拟DOM</li><li>transition过渡时，使用key属性，可以区分它们是否变化，否则vue只会替换其内部属性而不会触发过渡效果</li></ul><blockquote><p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p></blockquote><h4 id="17、CSRF攻击的原理及解决方案"><a href="#17、CSRF攻击的原理及解决方案" class="headerlink" title="17、CSRF攻击的原理及解决方案"></a>17、CSRF攻击的原理及解决方案</h4><ul><li><p>csrf攻击原理：<br>攻击者利用xss方式注入一段脚本，当受害者在浏览器中运行该脚本时，脚本仿冒受害者，向合法的web系统发送一个请求，这个请求会被web系统当做受害者主动提出的合法请求，进而利用合法用户的身份执行攻击者指定的操作。</p></li><li><p>csrf攻击解决方法：<br>目前，防御CSRF攻击主要有三种策略：<br>1、验证HTTP Referer 字段；<br>2、在请求地址中添加token并验证；<br>3、HTTP头中自定义属性并验证。</p></li></ul><h4 id="18、MVVM和MVC的区别"><a href="#18、MVVM和MVC的区别" class="headerlink" title="18、MVVM和MVC的区别"></a>18、MVVM和MVC的区别</h4><p><strong>MVC</strong></p><ul><li>   <strong>M</strong>：模型层，是应用程序中用于处理应用程序数据逻辑的部分，模型对象负责在数据库中存取数据。</li><li>   <strong>V</strong>：视图层，是应用程序中处理数据显示的部分，视图是依据模型数据创建的</li><li>   <strong>C</strong>(Controller): 控制层，是应用程序中处理用户交互的部分，控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理，它只是接收请求并决定调用那个模型构建去处理请求，然后在确定用哪个视图来显示返回的数据。</li></ul><p><strong>MVVM</strong></p><ul><li>   <strong>M</strong>：模型层，就是业务逻辑相关的数据对象，通常从数据库映射而来，我们可以说是与数据库对应的model。</li><li>   <strong>V</strong>：视图层。展示出来的用户界面。</li><li>   <strong>VM</strong>： 视图模型层，连接view 和 model 的桥梁。因为 model层中的数据往往是不能直接跟 view 中的控件一一对应上的，所以需要在定义一个数据对象专门对应 view 上的控件，而 viewModel 就是把 model 对象封装成可以显示和接受输入的界面数据对象。</li></ul><p>view 和 viewModel 之间通过双向数据绑定建立联系，这样当 view 变化时，会自动更新到 viewModel，反之亦然</p><p><strong>mvvm的优势：</strong></p><ol><li>mvc和 mvvm 都是一种设计思想，主要就是 mvc 中 controller 演变成 mvvm 中的 viewModel。mvvm 主要解决了 mvc 中大量 dom 操作使页面 渲染性能降低，加载速度变慢的问题</li><li>mvvm 和 mvc 最大的区别就是：它实现了 view 和 Model 的自动同步，当 model 的属性改变时，我们不用在手动操作 dom 元素来改变 view 的显示，它会自动变化</li></ol><p>备注：MVC是<strong>Model-View-Controller</strong>的简写。即模型-视图-控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。使用MVC的目的就是将M和V的代码分离。MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。MVC和MVVM的区别并不是VM完全取代了C，只是在MVC的基础上增加了一层VM，只不过是弱化了C的概念，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重用，使开发更高效，结构更清晰，增加代码的复用性。</p><h4 id="19、前端性能优化方法"><a href="#19、前端性能优化方法" class="headerlink" title="19、前端性能优化方法"></a>19、前端性能优化方法</h4><h5 id="加载优化"><a href="#加载优化" class="headerlink" title="加载优化"></a>加载优化</h5><ol start="3"><li>第三方模块使用CDN方式</li><li>大模块异步加载，require.ensure</li><li>零散的小模块合并一起加载<br>使用entry指定文件入口，或者头部用import/require建立依赖关系</li><li>使用预加载Prefetch，适用于分步场景</li></ol><h5 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h5><ol><li>小图片用Sprite（图片精灵技术）整合成一张图片，减少并发次数，base64内联。</li><li>图片懒加载</li><li>使用webp格式</li><li>压缩图片（<code>image-minimizer-webpack-plugin</code>:用来压缩图片的插件）</li><li>使用srcset，配置不一样的分辨率对应不同的图片大小，能精准对应不同的尺寸用户</li></ol><h5 id="css优化"><a href="#css优化" class="headerlink" title="css优化"></a>css优化</h5><ol><li>css写在头部<br>假如css写在底部，浏览器会一直等待css全部加载完毕，才能开始解析。<br>而且下载解析css完毕后，已经呈现的文字和图片需要根据新的样式重绘。</li><li>避免css表达式</li><li>移除没用的css规则</li><li>减少行内样式</li></ol><h5 id="js优化"><a href="#js优化" class="headerlink" title="js优化"></a>js优化</h5><ol><li>js放在body底部<br>这样做无需担心页面未完成加载获取不到dom，也能避免脚本运行缓慢造成页面卡死。</li><li>js用defer放在头部，不会阻塞dom解析<br>只对外部脚本文件有效，外部js文件和当前html页面同时加载（异步加载），但只在当前页面解析完成之后执行js代码</li></ol><h5 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h5><ol><li>减少回流和重绘</li></ol><h4 id="20、函数柯里化"><a href="#20、函数柯里化" class="headerlink" title="20、函数柯里化"></a>20、函数柯里化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化，利用递归和闭包实现</span></span><br><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = fn.length; <span class="comment">// 获取初始函数fn的形参个数</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// curry返回改造后的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> innerLength = <span class="built_in">arguments</span>.length; <span class="comment">// 获取t的实参个数</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将类数组arguments对象转为真正的数组（类数组arguments对象是函数传入的实际参数，类似数组，拥有数组属性，但不是数组）</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (innerLength &gt;= len) &#123; <span class="comment">// 递归出口，如果t实参个数已经大于fn形参个数,则终止递归</span></span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="literal">undefined</span>, args) <span class="comment">// 执行改造后的函数</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果t的实参个数少于fn的形参个数，说明柯里化并没有完成，则继续执行柯里化</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将类数组arguments对象转为真正的数组（类数组arguments对象是函数传入的实际参数，类似数组，拥有数组属性，但不是数组）</span></span><br><span class="line">        <span class="keyword">const</span> allArgs = args.concat(innerArgs);</span><br><span class="line">        <span class="keyword">return</span> t.apply(<span class="literal">undefined</span>, allArgs)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">num1, num2, num3, num4, num5</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2 + num3 + num4 + num5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> finalFun = curry(add);</span><br><span class="line"><span class="keyword">const</span> result1 = finalFun(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = finalFun(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> result3 = finalFun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> result4 = finalFun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1, result2, result3, result4); <span class="comment">// 15 15 15 15</span></span><br></pre></td></tr></table></figure><h4 id="21、AST树"><a href="#21、AST树" class="headerlink" title="21、AST树"></a>21、AST树</h4><p>AST树主要是用来做语法抽象的，然后把语法按照树形结构抽象出来，标记出来个各节点，知道节点有什么好处，可以根据自己的需要，比如要对dom节点，或者test节点，或一些方法节点做一些操作时，通过AST，再结合一些线程插件，生成一个.json文件，通过这个文件对整个项目进行分析。<br>第一可以优化项目，或者做一些loader或者plagin时，可以用到AST。<br>再者做一些文件的转换、代码的转编译，也可以用到AST。<br>一些bug的底层或者webpack的底层，都是通过这么一个方式去做的。</p><h4 id="22、为什么mutation必须是同步函数，actions-可以处理异步函数"><a href="#22、为什么mutation必须是同步函数，actions-可以处理异步函数" class="headerlink" title="22、为什么mutation必须是同步函数，actions 可以处理异步函数"></a>22、为什么mutation必须是同步函数，actions 可以处理异步函数</h4><p>如果我们在mutation中写了异步，commit在触发mutation事件时，异步的回调函数不知道是什么时候执行的，所以在devtools中难以追踪变化。<br>actions 可以做异步操作，但是并不是直接修改数据，而是通过提交mutations 里面的方法。<br>这样在devetools就可以追踪到状态的变化。</p><h4 id="23、vue中-set的原理"><a href="#23、vue中-set的原理" class="headerlink" title="23、vue中$set的原理"></a>23、vue中$set的原理</h4><p>当$set所设置的目标对象为数组时，则调用目标对象的splice方法将修改的数据变为响应式。<br>当$set所设置的目标对象为对象时，首先判断这个属性是否在这个对象上，如果存在则设置属性为对应的属性值后直接返回val，然后判断目标对象是否为Vue实例或者根数据对象，如果是则warn警告后返回，再去判断这个目标对象是否是响应式的，如果不是响应式对象则直接赋值返回。最后在给目标对象的属性添加响应式，通知dep实例的所有订阅者进行更新。</p><h4 id="24、AMD和CMD的区别"><a href="#24、AMD和CMD的区别" class="headerlink" title="24、AMD和CMD的区别"></a>24、AMD和CMD的区别</h4><p><strong>最主要的是：</strong></p><p>AMD是预加载，CMD是懒加载。AMD是提前执行，CMD是延迟执行。<br>amd (在对应的加载之前导入)，cmd（在用的时候导入）。</p><p><strong>以下为相关补充：</strong></p><p><strong>AMD</strong><br>AMD 即Asynchronous Module Definition，中文名是异步模块定义的意思。<br>它是一个在浏览器端模块化开发的规范由于不是JavaScript原生支持，使用AMD规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎RequireJS，实际上AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p><p>requireJS主要解决两个问题：<br>1、多个js文件可能有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器<br>2、js加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应时间越长</p><p><strong>CMD</strong><br>CMD 即Common Module Definition通用模块定义，CMD规范是国内发展出来的，就像AMD有个requireJS，CMD有个浏览器的实现SeaJS，SeaJS要解决的问题和requireJS一样，只不过在模块定义方式和模块加载（可以说运行、解析）时机上有所不同。<br>因为CMD推崇一个文件一个模块，所以经常就用文件名作为模块id</p><p>CMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写。<br>factory是一个函数，有三个参数，function(require, exports, module)<br>1.require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口：require(id)<br>2.exports 是一个对象，用来向外提供模块接口<br>3.module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</p><h4 id="25、loader"><a href="#25、loader" class="headerlink" title="25、loader"></a>25、loader</h4><p>loader主要导出一个函数，它接收三个参数：content、sourceMap、meta，content代表文件处理的信息，基本去用loader处理一些scss、es6，第一个就代表文件信息，这个文件信息也可以通过指定row-loader把它变成原文件的形式。经常使用的是loader中的this，因为this里面存着一些webpack内置的方法，快速的实现一些功能。</p><h4 id="26、vue双向数据绑定"><a href="#26、vue双向数据绑定" class="headerlink" title="26、vue双向数据绑定"></a>26、vue双向数据绑定</h4><p>底层是通过object.definedPropoty实现的，中间做了一个监听的机制，发布订阅的模式，结合他的一个dep，更新的模式去实现的。<br>当数据发生改变时，set方法会调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图</p><h4 id="27、跨域"><a href="#27、跨域" class="headerlink" title="27、跨域"></a>27、跨域</h4><p>跨域问题是出于浏览器的安全策略考虑的，跨域它首先有三点：第一点需要在浏览器当中，第二点需要请求后端接口，第三点是触发了同源策略，同源策略是浏览器的一种自我保护机制，它要求三点：域名、协议、端口号，三点一旦触发任何一种不同，都会出现跨域问题。<br>解决方案：1. 通过后端配置请求头； 2. 本地服务器开启一个代理； 前者在实际项目当中，后者在本地开发当中。</p><h4 id="28、纯函数"><a href="#28、纯函数" class="headerlink" title="28、纯函数"></a>28、纯函数</h4><p>对于函数式编程，所引申出来的一个概念。他要求函数一个单独的入参同时有一个单独的返回值，对于函数体外部的内容，没有任何影响。函数式编程也是编程的一个常见的编程范式，同时还有面向对象、面向过程。纯函数它的函数是作为一个一等公民，他是第一位的，另外建议你去使用表达式，不使用函数语句，同时纯函数里的内容不可修改，引用的时候清晰透明。好处是容易维护，对外界的影响小。</p><h4 id="29、强制缓存和协商缓存"><a href="#29、强制缓存和协商缓存" class="headerlink" title="29、强制缓存和协商缓存"></a>29、强制缓存和协商缓存</h4><p>区别：</p><ol><li>强制缓存在缓存有效的情况下不会去请求服务器， 其数据来源则是浏览缓存的本地磁盘。而协商缓存会向服务器请求，但是在协商缓存成功的情况下， 服务器只会返回一个不带响应体的报文</li><li>强制缓存在浏览器强制刷新的情况下不会生效， 而协商缓存则不受影响。（调试代码测试时候，要注意）</li><li>强制缓存返回的报文状态码为 200， 协商缓存返回的报文状态码为 304 （前端使用fetch请求的情况， 协商缓存的 状态码304 会转成 200）</li><li>强制缓存发生在浏览器端， 协商缓存发生在服务器端</li></ol><h4 id="30、如何给SPA做SEO"><a href="#30、如何给SPA做SEO" class="headerlink" title="30、如何给SPA做SEO"></a>30、如何给SPA做SEO</h4><p>下面给出基于Vue的SPA如何实现SEO的三种方式</p><ol><li>SSR服务端渲染<br>将组件或页面通过服务器生成html，再返回给浏览器，如nuxt.js</li><li>静态化<br>目前主流的静态化主要有两种：<br>（1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中<br>（2）另外一种是通过WEB服务器的 URL Rewrite的方式，它的原理是通过web服务器内部模块按一定规则将外部的URL请求转化为内部的文件地址，一句话来说就是把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。<br>这两种方法都达到了实现URL静态化的效果</li><li>使用Phantomjs针对爬虫处理<br>原理是通过Nginx配置，判断访问来源是否为爬虫，如果是则搜索引擎的爬虫请求会转发到一个node server，再通过PhantomJS来解析完整的HTML，返回给爬虫。下面是大致流程图<br><img src="https://static.vue-js.com/25be6630-3ac7-11eb-ab90-d9ae814b240d.png"></li></ol><h4 id="31、vue实例挂载的过程"><a href="#31、vue实例挂载的过程" class="headerlink" title="31、vue实例挂载的过程"></a>31、vue实例挂载的过程</h4><ul><li>new Vue的时候调用会调用_init方法<ul><li>定义 $set、$get 、$delete、$watch 等方法</li><li>定义 $emit、$on、$off等事件</li><li>定义 _update、$forceUpdate、$destroy生命周期</li></ul></li><li>调用$mount进行页面的挂载</li><li>挂载的时候主要是通过mountComponent方法</li><li>定义updateComponent更新函数</li><li>执行render生成虚拟DOM</li><li>_update将虚拟DOM生成真实DOM结构，并且渲染到页面中</li></ul><h4 id="32、首屏加载速度慢解决方案"><a href="#32、首屏加载速度慢解决方案" class="headerlink" title="32、首屏加载速度慢解决方案"></a>32、首屏加载速度慢解决方案</h4><ul><li>减小入口文件体1积</li><li>静态资源本地缓存</li><li>UI框架按需加载</li><li>图片资源的压缩</li><li>组件重复打包</li><li>开启GZip压缩</li><li>使用SSR</li></ul><h4 id="33、vue中给对象添加新属性界面不刷新"><a href="#33、vue中给对象添加新属性界面不刷新" class="headerlink" title="33、vue中给对象添加新属性界面不刷新"></a>33、vue中给对象添加新属性界面不刷新</h4><ul><li>如果为对象添加少量的新属性，可以直接采用Vue.set()</li><li>如果需要为新对象添加大量的新属性，则通过Object.assign()创建新对象</li><li>如果你实在不知道怎么操作时，可采取$forceUpdate()进行强制刷新 (不建议)</li></ul><h4 id="34、Vue-observable"><a href="#34、Vue-observable" class="headerlink" title="34、Vue.observable"></a>34、Vue.observable</h4><p><code>Vue.observable</code>，让一个对象变成响应式数据。Vue 内部会用它来处理 data 函数返回的对象</p><h4 id="35、vue中的修饰符"><a href="#35、vue中的修饰符" class="headerlink" title="35、vue中的修饰符"></a>35、vue中的修饰符</h4><ol><li>表单修饰符</li></ol><ul><li>lazy(在我们填完信息，光标离开标签的时候，才会将值赋予给value，也就是在change事件之后再进行信息同步)</li><li>trim</li><li>number</li></ul><ol start="2"><li>事件修饰符</li></ol><ul><li>stop</li><li>prevent</li><li>self</li><li>once</li><li>capture(使事件触发从包含这个元素的顶层开始往下触发)</li><li>passive(在移动端，当我们在监听元素滚动事件的时候，会一直触发onscroll事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符)</li><li>native(让组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件—使用.native修饰符来操作普通HTML标签是会令事件失效的)</li></ul><ol start="3"><li>鼠标按钮修饰符</li></ol><ul><li>left 左键点击</li><li>right 右键点击</li><li>middle 中键点击</li></ul><ol start="4"><li>键盘修饰符<br>键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的<br>还可以通过以下方式自定义一些全局的键盘码别名<code>Vue.config.keyCodes.f2 = 113</code></li><li>v-bind修饰符</li></ol><ul><li>sync</li><li>prop(设置自定义标签属性，避免暴露数据，防止污染HTML结构)</li><li>camel(将命名变为驼峰命名法，如将view-Box属性名转换为 viewBox)</li></ul><h4 id="36、vue自定义指令"><a href="#36、vue自定义指令" class="headerlink" title="36、vue自定义指令"></a>36、vue自定义指令</h4><p>注册一个自定义指令有全局注册与局部注册<br>全局注册主要是通过Vue.directive方法进行注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()  <span class="comment">// 页面加载完成之后自动让输入框获取到焦点的小功能</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>局部注册通过在组件options选项中设置directive属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  <span class="attr">focus</span>: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      el.focus() <span class="comment">// 页面加载完成之后自动让输入框获取到焦点的小功能</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义指令也像组件那样存在钩子函数：</strong></p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li><li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新</li><li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用</li><li>unbind：只调用一次，指令与元素解绑时调用</li></ul><p><strong>所有的钩子函数的参数都有以下：</strong></p><ul><li>el：指令所绑定的元素，可以用来直接操作 DOM</li><li>binding：一个对象，包含以下 property：<ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li><li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }</li></ul></li><li>vnode：Vue 编译生成的虚拟节点</li><li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用</li></ul><h4 id="37、vue3相对于vue2做的优化"><a href="#37、vue3相对于vue2做的优化" class="headerlink" title="37、vue3相对于vue2做的优化"></a>37、vue3相对于vue2做的优化</h4><ol><li>编译阶段</li></ol><ul><li>diff算法优化<br>vue3在diff算法中相比vue2增加了静态标记<br>关于这个静态标记，其作用是为了会发生变化的地方添加一个flag标记，下次发生变化的时候直接找该地方进行比较</li><li>静态提升<br>Vue3中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用<br>这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用</li><li>事件监听缓存<br>默认情况下绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化<br>开启了缓存后，没有了静态标记。也就是说下次diff算法的时候直接使用</li><li>SSR优化<br>当静态内容大到一定量级时候，会用createStaticVNode方法在客户端去生成一个static node，这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染</li></ul><ol start="2"><li><p>源码体积<br>相比Vue2，Vue3整体体积变小了，除了移出一些不常用的API，再重要的是Tree shanking<br>任何一个函数，如ref、reavtived、computed等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小</p></li><li><p>响应式系统<br>vue2中采用 defineProperty来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加getter和setter，实现响应式<br>vue3采用proxy重写了响应式系统，因为proxy可以对整个对象进行监听，所以不需要深度遍历</p></li></ol><ul><li>可以监听动态属性的添加</li><li>可以监听到数组的索引和数组length属性</li><li>可以监听删除属性</li></ul><h4 id="38、Typescript数据类型"><a href="#38、Typescript数据类型" class="headerlink" title="38、Typescript数据类型"></a>38、Typescript数据类型</h4><ul><li>boolean（布尔类型）</li><li>number（数字类型）</li><li>string（字符串类型）</li><li>array（数组类型）</li><li>tuple（元组类型）</li><li>enum（枚举类型）</li><li>any（任意类型）</li><li>null 和 undefined 类型</li><li>void 类型</li><li>never 类型</li><li>object 对象类型</li></ul><h4 id="39、this指向"><a href="#39、this指向" class="headerlink" title="39、this指向"></a>39、this指向</h4><ul><li>全局函数：普通模式，普通函数中的this指向顶级对象window<br>严格模式，普通函数中的this指向undefined</li><li>在对象的方法中，this指向的是该对象</li><li>在构造函数中，this指向构造函数的实例</li><li>在事件中，this指向事件源</li></ul><h4 id="40、call、apply、bind"><a href="#40、call、apply、bind" class="headerlink" title="40、call、apply、bind"></a>40、call、apply、bind</h4><ul><li>call<br>call方法的第一个参数也是this的指向，后面传入的是一个参数列表<br>跟apply一样，改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次</li><li>apply<br>apply接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入<br>改变this指向后原函数会立即执行，且此方法只是临时改变this指向一次</li><li>bind<br>bind方法和call很相似，第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)<br>改变this指向后不会立即执行，而是返回一个永久改变this指向的函数</li></ul><p><strong>小结</strong></p><ul><li>三者都可以改变函数的<code>this</code>对象指向</li><li>三者第一个参数都是<code>this</code>要指向的对象，如果如果没有这个参数或参数为<code>undefined</code>或<code>null</code>，则默认指向全局<code>window</code></li><li>三者都可以传参，但是<code>apply</code>是数组，而<code>call</code>是参数列表，且<code>apply</code>和<code>call</code>是一次性传入参数，而<code>bind</code>可以分为多次传入</li><li><code>bind</code>是返回绑定this之后的函数，<code>apply</code>、<code>call</code> 则是立即执行</li></ul><h4 id="41、react生命周期函数"><a href="#41、react生命周期函数" class="headerlink" title="41、react生命周期函数"></a>41、react生命周期函数</h4><ul><li>创建阶段<ul><li>constructor</li><li>getDerivedStateFromProps</li><li>render</li><li>componentDidMount</li></ul></li><li>更新阶段<ul><li>getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>render</li><li>getSnapshotBeforeUpdate</li><li>componentDidMount</li></ul></li></ul><h4 id="42、nextick使用场景和原理"><a href="#42、nextick使用场景和原理" class="headerlink" title="42、nextick使用场景和原理"></a>42、nextick使用场景和原理</h4><p>使用场景：如果想要在修改数据后立刻得到更新后的DOM结构，可以使用Vue.nextTick()</p><p>原理：</p><ol><li>把回调函数放入callbacks等待执行</li><li>将执行函数放到微任务或者宏任务中</li><li>事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调</li></ol><h4 id="43、组件给name属性的优点"><a href="#43、组件给name属性的优点" class="headerlink" title="43、组件给name属性的优点"></a>43、组件给name属性的优点</h4><p>增加 name 属性，可以实现组件递归调⽤自身，调用的时候用的就是 name 名字 可以表示组件的具体名称，⽅便调试和查找对应的组件 比如说 keep-alive 的 include 和 exclude 就是通过组件的 name 属性区分谁缓存谁不缓存的</p><h4 id="44、keep-alive实现原理"><a href="#44、keep-alive实现原理" class="headerlink" title="44、keep-alive实现原理"></a>44、keep-alive实现原理</h4><blockquote><p>具体实现上，keep-alive在内部维护了一个key数组和一个缓存对象</p></blockquote><blockquote><p>key数组记录目前缓存的组件key值，如果组件没有指定key值，会自动生成一个唯一的key值<br>cache对象会以key值为键，vnode为值，用于缓存组件对应的虚拟DOM<br>在keep-alive的渲染函数中，其基本逻辑是判断当前渲染的vnode是否有对应的缓存，如果有，会从缓存中读取到对应的组件实例，如果没有就会把它缓存。<br>当缓存的数量超过max设置的数值时，keep-alive会移除key数组中的第一个元素</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端面试题汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.2语法糖</title>
      <link href="/2022/07/20/vue3-2%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
      <url>/2022/07/20/vue3-2%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3-2-版本开始才能使用语法糖！"><a href="#vue3-2-版本开始才能使用语法糖！" class="headerlink" title="vue3.2 版本开始才能使用语法糖！"></a>vue3.2 版本开始才能使用语法糖！</h3><p>在 Vue3.0 中变量必须 return 出来， template 中才能使用；而在 Vue3.2 中只需要在 script 标签上加上 setup 属性，无需 return ， template 便可直接使用，非常的香啊！</p><h4 id="1、如何使用setup语法糖"><a href="#1、如何使用setup语法糖" class="headerlink" title="1、如何使用setup语法糖"></a>1、如何使用setup语法糖</h4><p>只需在 script 标签上写上 setup 代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、data数据的使用"><a href="#2、data数据的使用" class="headerlink" title="2、data数据的使用"></a>2、data数据的使用</h4><p>由于 setup 不需写 return ，所以直接声明数据即可 代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; ref, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> data = reactive(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">patternVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">debugVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">aboutExeVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> content = ref(<span class="string">&#x27;content&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">//使用toRefs解构</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> &#123; patternVisible, debugVisible, aboutExeVisible &#125; = toRefs(data)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、method方法的使用"><a href="#3、method方法的使用" class="headerlink" title="3、method方法的使用"></a>3、method方法的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onClickHelp&quot;</span>&gt;</span>系统帮助<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> data = reactive(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">aboutExeVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 点击帮助</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> onClickHelp = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">`系统帮助`</span>)</span></span><br><span class="line"><span class="javascript">  data.aboutExeVisible = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、watchEffect的使用"><a href="#4、watchEffect的使用" class="headerlink" title="4、watchEffect的使用"></a>4、watchEffect的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> sum = ref(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">watchEffect(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> x1 = sum.value</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect所指定的回调执行了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5、watch的使用"><a href="#5、watch的使用" class="headerlink" title="5、watch的使用"></a>5、watch的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> sum = ref(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> msg = ref(<span class="string">&#x27;你好啊&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> person = reactive(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">job</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">j1</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">salary</span>:<span class="number">20</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 两种监听格式</span></span></span><br><span class="line"><span class="javascript">  watch([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;sum或msg变了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="javascript">  &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="javascript">  &#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6、computed计算属性的使用"><a href="#6、computed计算属性的使用" class="headerlink" title="6、computed计算属性的使用"></a>6、computed计算属性的使用</h4><p>computed 计算属性有两种写法(简写和考虑读写的完整写法) 代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//数据</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> person = reactive(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">firstName</span>:<span class="string">&#x27;小&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">lastName</span>:<span class="string">&#x27;叮当&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 计算属性简写</span></span></span><br><span class="line"><span class="javascript">  person.fullName = computed(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 完整写法</span></span></span><br><span class="line"><span class="javascript">  person.fullName = computed(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> nameArr = value.split(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      person.firstName = nameArr[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">      person.lastName = nameArr[<span class="number">1</span>]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-、props父子传值的使用"><a href="#7-、props父子传值的使用" class="headerlink" title="7 、props父子传值的使用"></a>7 、props父子传值的使用</h4><p>子组件代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;props.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明props</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> props = defineProps(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="string">&#x27;11&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 或者</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//const props = defineProps([&#x27;name&#x27;])</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">:name</span>=<span class="string">&#x27;name&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 引入子组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> name= ref(<span class="string">&#x27;小叮当&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-、emit子父传值的使用"><a href="#8-、emit子父传值的使用" class="headerlink" title="8 、emit子父传值的使用"></a>8 、emit子父传值的使用</h4><p>子组件代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a-button</span> @<span class="attr">click</span>=<span class="string">&quot;isOk&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// emit</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> emit = defineEmits([<span class="string">&#x27;aboutExeVisible&#x27;</span>])</span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> * 方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> */</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 点击确定按钮</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> isOk = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  emit(<span class="string">&#x27;aboutExeVisible&#x27;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">AdoutExe</span> @<span class="attr">aboutExeVisible</span>=<span class="string">&quot;aboutExeHandleCancel&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 导入子组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> AdoutExe <span class="keyword">from</span> <span class="string">&#x27;../components/AdoutExeCom&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> data = reactive(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">aboutExeVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// content组件ref</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 关于系统隐藏</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> aboutExeHandleCancel = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  data.aboutExeVisible = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9、获取子组件ref变量和defineExpose暴露"><a href="#9、获取子组件ref变量和defineExpose暴露" class="headerlink" title="9、获取子组件ref变量和defineExpose暴露"></a>9、获取子组件ref变量和defineExpose暴露</h4><p>即 vue2 中的获取子组件的 ref ，直接在父组件中控制子组件方法和变量的方法</p><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, toRefs, defineExpose &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> * 数据部分</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> * */</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> data = reactive(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">modelVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">historyVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">reportVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">defineExpose(&#123;</span></span><br><span class="line"><span class="javascript">  ...toRefs(data),</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onClickSetUp&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Content</span> <span class="attr">ref</span>=<span class="string">&quot;content&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// content组件ref</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> content = ref(<span class="string">&#x27;content&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 点击设置</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> onClickSetUp = <span class="function">(<span class="params">&#123; key &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">   content.value.modelVisible = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10、路由useRoute和useRouter的使用"><a href="#10、路由useRoute和useRouter的使用" class="headerlink" title="10、路由useRoute和useRouter的使用"></a>10、路由useRoute和useRouter的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; useRoute, useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> route = useRoute()</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = useRouter()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 获取query</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(route.query)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 获取params</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(route.params)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 路由跳转</span></span></span><br><span class="line"><span class="javascript">  router.push(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">path</span>: <span class="string">`/index`</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="11、store仓库的使用"><a href="#11、store仓库的使用" class="headerlink" title="11、store仓库的使用"></a>11、store仓库的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; num &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/index&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> store = useStore(num)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 获取Vuex的state</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(store.state.number)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 获取Vuex的getters</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(store.state.getNumber)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 提交mutations</span></span></span><br><span class="line"><span class="javascript">  store.commit(<span class="string">&#x27;fnName&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 分发actions的方法</span></span></span><br><span class="line"><span class="javascript">  store.dispatch(<span class="string">&#x27;fnName&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12、await的支持"><a href="#12、await的支持" class="headerlink" title="12、await的支持"></a>12、await的支持</h4><p>setup 语法糖中可直接使用 await ，不需要写 async ， setup 会自动变成 async setup</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;../api/Api&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> data = <span class="keyword">await</span> Api.getData()</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13、provide-和-inject-祖孙传值"><a href="#13、provide-和-inject-祖孙传值" class="headerlink" title="13、provide 和 inject 祖孙传值"></a>13、provide 和 inject 祖孙传值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">AdoutExe</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; ref, provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> AdoutExe <span class="keyword">from</span> <span class="string">&#x27;@/components/AdoutExeCom&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> name = ref(<span class="string">&#x27;Jerry&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 使用provide</span></span></span><br><span class="line"><span class="javascript">  provide(<span class="string">&#x27;provideState&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    name,</span></span><br><span class="line"><span class="javascript">    <span class="attr">changeName</span>: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      name.value = <span class="string">&#x27;小叮当&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件代码如下（示例）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> provideState = inject(<span class="string">&#x27;provideState&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  provideState.changeName()</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3.2语法糖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽奖插件</title>
      <link href="/2022/07/18/%E6%8A%BD%E5%A5%96%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/07/18/%E6%8A%BD%E5%A5%96%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="NutUI-Bingo-基于-Vue-3-0-的移动端抽奖组件，由京东前端团队打造"><a href="#NutUI-Bingo-基于-Vue-3-0-的移动端抽奖组件，由京东前端团队打造" class="headerlink" title="NutUI Bingo - 基于 Vue 3.0 的移动端抽奖组件，由京东前端团队打造"></a>NutUI Bingo - 基于 Vue 3.0 的移动端抽奖组件，由京东前端团队打造</h3><p>京东出品的抽奖组件，12个常用抽奖场景，基于新的Vue3/ts技术构建。</p><h4 id="关于-NutUI-Bingo"><a href="#关于-NutUI-Bingo" class="headerlink" title="关于 NutUI Bingo"></a>关于 NutUI Bingo</h4><p>NutUI Bingo 是由京东 NutUI 前端团队出品的一款基于 NutUI + Vue 3 的抽奖组件库，用于快速开发营销活动和小游戏场景的抽奖玩法。<br><img src="https://pic.rmb.bdstatic.com/bjh/5a0cb63ebc52fba36be3c5c6fa4df655.png" alt="image.png"></p><h4 id="NutUI-Bingo-抽奖组件技术特性"><a href="#NutUI-Bingo-抽奖组件技术特性" class="headerlink" title="NutUI Bingo 抽奖组件技术特性"></a>NutUI Bingo 抽奖组件技术特性</h4><ul><li>一共包含 12 种抽奖组件</li><li>UI 设计基于京东 APP 10.0 视觉规范</li><li>官网提供详尽的文档和充足的代码示例</li><li>基于 Vue 3.0，也支持 TypeScript，支持按需引入</li><li>便捷灵活的自定义设置</li></ul><p>覆盖12种常见的抽奖组件</p><ol><li>TurnTable 大转盘抽奖</li><li>Marquee 跑马灯抽奖</li><li>SquareNine 九宫格抽奖</li><li>ScratchCard 刮刮卡抽奖</li><li>GiftBox 神秘大礼盒</li><li>LottoRoll 摇奖机</li><li>Hiteggs 砸金蛋</li><li>GiftRain 红包雨</li><li>LuckShake 摇一摇</li><li>DollMachine 娃娃机</li><li>ShakeDice 摇骰子</li><li>GuessGift 你藏我猜<br><img src="https://pic.rmb.bdstatic.com/bjh/fe64c8a41433b742e544c434a4e2eeaa.png" alt="image.png"></li></ol><h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @nutui/nutui-bingo</span><br></pre></td></tr></table></figure><h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> NutBig <span class="keyword">from</span> <span class="string">&quot;@nutui/nutui-bingo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@nutui/nutui-bingo/dist/style.css&quot;</span>;</span><br><span class="line">createApp(App).use(NutBig).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="快速开发一个抽奖大转盘"><a href="#快速开发一个抽奖大转盘" class="headerlink" title="快速开发一个抽奖大转盘"></a>快速开发一个抽奖大转盘</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Turntable &#125; <span class="keyword">from</span> <span class="string">&#x27;@nutui/nutui-bingo&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp();</span><br><span class="line">app.use(Turntable);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在页面中使用</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">nutbig-turntable</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">class</span>=<span class="string">&quot;turntable&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">:prize-list</span>=<span class="string">&quot;prizeList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">:turns-number</span>=<span class="string">&quot;turnsNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">nutbig-turntable</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽奖插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组转树</title>
      <link href="/2022/07/18/js%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91/"/>
      <url>/2022/07/18/js%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">val</span>: <span class="string">&quot;学校&quot;</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">val</span>: <span class="string">&quot;班级1&quot;</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">val</span>: <span class="string">&quot;班级2&quot;</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">val</span>: <span class="string">&quot;学生1&quot;</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">val</span>: <span class="string">&quot;学生2&quot;</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">val</span>: <span class="string">&quot;学生3&quot;</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildTree</span>(<span class="params">arr, parentId, childrenArray</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.parentId === parentId) &#123;</span><br><span class="line">      item.children = [];</span><br><span class="line">      buildTree(arr, item.id, item.children);</span><br><span class="line">      childrenArray.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayToTree</span>(<span class="params">input, parentId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> array = [];</span><br><span class="line">  buildTree(input, parentId, array);</span><br><span class="line">  <span class="keyword">return</span> array.length &gt; <span class="number">0</span> ? (array.length &gt; <span class="number">1</span> ? array : array[<span class="number">0</span>]) : &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = arrayToTree(input, <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tempArr = [&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">parentId</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayToTree</span>(<span class="params">sourceArr</span>) </span>&#123;</span><br><span class="line">  sourceArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> parentId = item.parentId;</span><br><span class="line">    <span class="keyword">if</span> (parentId !== <span class="number">0</span>) &#123;</span><br><span class="line">      sourceArr.forEach(<span class="function"><span class="params">subitem</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (subitem.id == parentId) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!subitem.children) &#123;</span><br><span class="line">            subitem.children = [];</span><br><span class="line">          &#125;</span><br><span class="line">          subitem.children.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> sourceArr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.parentId === <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arrayToTree(tempArr));</span><br></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = null;</span></span><br><span class="line"><span class="comment"> *     this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> root = <span class="keyword">new</span> TreeNode(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        root.left = sortedArrayToBST(nums.splice(<span class="number">0</span>, nums.length / <span class="number">2</span>))</span><br><span class="line">    &#125;;</span><br><span class="line">    root.val = nums[<span class="number">0</span>];</span><br><span class="line">    root.right = sortedArrayToBST(nums.splice(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;部门A&#x27;</span>, <span class="attr">parentId</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;部门C&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;部门D&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&#x27;部门E&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">&#x27;部门F&#x27;</span>, <span class="attr">parentId</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&#x27;部门G&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">&#x27;部门H&#x27;</span>, <span class="attr">parentId</span>: <span class="number">4</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = list.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> &#123;</span><br><span class="line">    acc[item.id] = item</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = map[key]</span><br><span class="line">    <span class="keyword">if</span> (item.parentId === <span class="number">0</span>) &#123;</span><br><span class="line">      result.push(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.parentId]</span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.children = parent.children || []</span><br><span class="line">        parent.children.push(item)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = convert(list)Buy and Sell Domain Namesvar list = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;部门A&#x27;</span>, <span class="attr">parentId</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;部门C&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;部门D&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&#x27;部门E&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">&#x27;部门F&#x27;</span>, <span class="attr">parentId</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&#x27;部门G&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">&#x27;部门H&#x27;</span>, <span class="attr">parentId</span>: <span class="number">4</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = list.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> &#123;</span><br><span class="line">    acc[item.id] = item</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = map[key]</span><br><span class="line">    <span class="keyword">if</span> (item.parentId === <span class="number">0</span>) &#123;</span><br><span class="line">      result.push(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.parentId]</span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.children = parent.children || []</span><br><span class="line">        parent.children.push(item)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = convert(list)</span><br></pre></td></tr></table></figure><h4 id="方法五"><a href="#方法五" class="headerlink" title="方法五 *"></a>方法五 <strong><font color="red">*</font></strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertStr</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        map.set(list[i].id, list[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.parentId == <span class="literal">null</span>) &#123;</span><br><span class="line">            res.push(item);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> pItem = map.get(item.parentId);</span><br><span class="line">            pItem.children = pItem.children || [];</span><br><span class="line">            pItem.children.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法六"><a href="#方法六" class="headerlink" title="方法六"></a>方法六</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;部门A&#x27;</span>, <span class="attr">parentId</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;部门C&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;部门D&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&#x27;部门E&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">&#x27;部门F&#x27;</span>, <span class="attr">parentId</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&#x27;部门G&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">&#x27;部门H&#x27;</span>, <span class="attr">parentId</span>: <span class="number">4</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = list.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> &#123;</span><br><span class="line">    acc[item.id] = item</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = map[key]</span><br><span class="line">    <span class="keyword">if</span> (item.parentId === <span class="number">0</span>) &#123;</span><br><span class="line">      result.push(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.parentId]</span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.children = parent.children || []</span><br><span class="line">        parent.children.push(item)</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        result.push(item) <span class="comment">// 要加上else，否则，5，7就被抛弃了</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = convert(list)</span><br></pre></td></tr></table></figure><h4 id="方法七"><a href="#方法七" class="headerlink" title="方法七"></a>方法七</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">rankId</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;BeiJing&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">      <span class="attr">parentId</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">rankId</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;jiangsu&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;江苏&#x27;</span>,</span><br><span class="line">      <span class="attr">parentId</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">rankId</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;gugong&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;故宫&#x27;</span>,</span><br><span class="line">      <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">rankId</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;tiantan&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;天坛&#x27;</span>,</span><br><span class="line">      <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">rankId</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;zhengyangmen&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;正阳门&#x27;</span>,</span><br><span class="line">      <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTreeData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cloneData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))    <span class="comment">// 对源数据深度克隆</span></span><br><span class="line">    <span class="keyword">let</span> tree = cloneData.filter(<span class="function">(<span class="params">father</span>) =&gt;</span> &#123;              <span class="comment">//循环所有项</span></span><br><span class="line">        <span class="keyword">let</span> branchArr = cloneData.filter(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> father.rankId == child.parentId      <span class="comment">//返回每一项的子级数组</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (branchArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            father.children = branchArr;    <span class="comment">// 如果存在子级，则给父级添加一个children属性，并赋值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> father.parentId == <span class="number">0</span>;      <span class="comment">//返回第一层</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> tree     <span class="comment">//返回树形数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;setTreeData&#x27;</span>, setTreeData(data));</span><br></pre></td></tr></table></figure><h4 id="方法八"><a href="#方法八" class="headerlink" title="方法八"></a>方法八</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学校&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;班级1&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;班级2&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学生1&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学生2&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学生3&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学校2&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;班级1&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">7</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;班级2&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">7</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学生1&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">8</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学生2&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">9</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&quot;学生3&quot;</span>,</span><br><span class="line">        <span class="attr">parentId</span>: <span class="number">8</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToTree</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tree = []</span><br><span class="line">    <span class="keyword">let</span> temp = &#123;&#125;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        item.children = []</span><br><span class="line">        temp[item.id] = item</span><br><span class="line">        <span class="keyword">if</span>(!item.parentId)&#123;</span><br><span class="line">            tree.push(item)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp[item.parentId].children.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(listToTree(input))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">tree</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">treeToList</span>(<span class="params">tree</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> list = []</span><br><span class="line">    <span class="keyword">let</span> temp = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">children</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> node <span class="keyword">of</span> children)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!temp[node.id])&#123;</span><br><span class="line">                list.push(node)</span><br><span class="line">                temp[node.id] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            dfs(node.children)</span><br><span class="line">            <span class="keyword">delete</span> node.children</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(tree)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(treeToList(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(listToTree(input)))))</span><br></pre></td></tr></table></figure><h4 id="方法九"><a href="#方法九" class="headerlink" title="方法九 *"></a>方法九 <strong><font color="red">*</font></strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组转树形结构,时间复杂度O(n)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>list 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>idKey 元素id键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>parIdKey 元素父id键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>parId 第一级根节点的父id值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToTree</span> (<span class="params">list,idKey,parIdKey,parId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">let</span> len = list.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建map</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)</span></span><br><span class="line">map[list[i][idKey]] = list[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建树形数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> itemParId = list[i][parIdKey];</span><br><span class="line"><span class="comment">// 顶级节点</span></span><br><span class="line"><span class="keyword">if</span>(itemParId === parId) &#123;</span><br><span class="line">result.push(list[i]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 孤儿节点，舍弃(不存在其父节点)</span></span><br><span class="line"><span class="keyword">if</span>(!map[itemParId])&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）</span></span><br><span class="line"><span class="keyword">if</span>(map[itemParId].children) &#123;</span><br><span class="line">map[itemParId].children.push(list[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map[itemParId].children = [list[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js数组转树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瀑布流</title>
      <link href="/2022/07/15/%E7%80%91%E5%B8%83%E6%B5%81/"/>
      <url>/2022/07/15/%E7%80%91%E5%B8%83%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="瀑布流布局"><a href="#瀑布流布局" class="headerlink" title="瀑布流布局"></a>瀑布流布局</h4><h5 id="纵向瀑布流"><a href="#纵向瀑布流" class="headerlink" title="纵向瀑布流"></a>纵向瀑布流</h5><p>实现方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colCount <span class="comment">//定义列数</span></span><br><span class="line"><span class="keyword">var</span> colHeightArry = [] <span class="comment">//定义列高度数组</span></span><br><span class="line"><span class="keyword">var</span> imgWidth = $(<span class="string">&#x27;.waterfall img&#x27;</span>).outerWidth(<span class="literal">true</span>) <span class="comment">//单张图片的宽度</span></span><br><span class="line">colCount = <span class="built_in">parseInt</span>($(<span class="string">&#x27;.waterfall&#x27;</span>).width() / imgWidth) <span class="comment">//计算出列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colCount; i++) &#123;</span><br><span class="line">  colHeightArry[i] = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[0,0,0]</span></span><br><span class="line">$(<span class="string">&#x27;.waterfall img&#x27;</span>).on(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> minValue = colHeightArry[<span class="number">0</span>] <span class="comment">//定义最小的高度</span></span><br><span class="line">  <span class="keyword">var</span> minIndex = <span class="number">0</span> <span class="comment">//定义最小高度的下标</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colCount; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (colHeightArry[i] &lt; minValue) &#123; <span class="comment">//如果最小高度组数中的值小于最小值</span></span><br><span class="line">      minValue = colHeightArry[i] <span class="comment">//那么认为最小高度数组中的值是真正的最小值</span></span><br><span class="line">      minIndex = i <span class="comment">//最小下标为当前下标</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $(<span class="built_in">this</span>).css(&#123;</span><br><span class="line">    <span class="attr">left</span>: minIndex * imgWidth,</span><br><span class="line">    <span class="attr">top</span>: minValue</span><br><span class="line">  &#125;)</span><br><span class="line">  colHeightArry[minIndex] += $(<span class="built_in">this</span>).outerHeight(<span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//当窗口大小重置之后，重新执行</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  reset()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//当窗口加载完毕，执行瀑布流</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  reset()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义reset函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> colHeightArry = []</span><br><span class="line">  colCount = <span class="built_in">parseInt</span>($(<span class="string">&#x27;.waterfall&#x27;</span>).width() / imgWidth)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colCount; i++) &#123;</span><br><span class="line">    colHeightArry[i] = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  $(<span class="string">&#x27;.waterfall img&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> minValue = colHeightArry[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colCount; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (colHeightArry[i] &lt; minValue) &#123;</span><br><span class="line">        minValue = colHeightArry[i]</span><br><span class="line">        minIndex = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="built_in">this</span>).css(&#123;</span><br><span class="line">      <span class="attr">left</span>: minIndex * imgWidth,</span><br><span class="line">      <span class="attr">top</span>: minValue</span><br><span class="line">    &#125;)</span><br><span class="line">    colHeightArry[minIndex] += $(<span class="built_in">this</span>).outerHeight(<span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结瀑布流布局原理"><a href="#总结瀑布流布局原理" class="headerlink" title="总结瀑布流布局原理"></a>总结瀑布流布局原理</h5><ul><li>设置图片宽度一致</li><li>根据浏览器宽度以及每列宽度计算出列表个数，列表默认为0</li><li>当图片加载完成，所有图片依次放置在最小的列数下面</li><li>父容器高度取列表数组的最大值</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瀑布流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2022/07/14/%E9%97%AD%E5%8C%85/"/>
      <url>/2022/07/14/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h4 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么"></a>闭包是什么</h4><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p><p>函数执行后返回结果是一个内部函数，并被外部变量所引用，如果内部函数持有被执行函数作用域的变量，即形成了闭包。</p><p>可以在内部函数访问到外部函数作用域。使用闭包，一可以读取函数中的变量，二可以将函数中的变量存储在内存中，保护变量不被污染。而正因闭包会把函数中的变量值存储在内存中，会对内存有消耗，所以不能滥用闭包，否则会影响网页性能，造成内存泄漏。当不需要使用闭包时，要及时释放内存，可将内层函数对象的变量赋值为null。</p><p>在 JavaScript中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p><p>下面给出一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>; <span class="comment">// name 是一个被 init 创建的局部变量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123; <span class="comment">// displayName() 是内部函数，一个闭包</span></span><br><span class="line">        alert(name); <span class="comment">// 使用了父函数中声明的变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>displayName() 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量</p><h4 id="闭包原理"><a href="#闭包原理" class="headerlink" title="闭包原理"></a>闭包原理</h4><p>函数执行分成两个阶段(预编译阶段和执行阶段)。</p><ul><li><p>在预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个“闭包”对象并保存对应变量值，如果已存在“闭包”，则只需要增加对应属性值即可。</p></li><li><p>执行完后，函数执行上下文会被销毁，函数对“闭包”对象的引用也会被销毁，但其内部函数还持用该“闭包”的引用，所以内部函数可以继续使用“外部函数”中的变量</p></li></ul><p>利用了函数作用域链的特性，一个函数内部定义的函数会将包含外部函数的活动对象添加到它的作用域链中，函数执行完毕，其执行作用域链销毁，但因内部函数的作用域链仍然在引用这个活动对象，所以其活动对象不会被销毁，直到内部函数被烧毁后才被销毁。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>可以从内部函数访问外部函数的作用域中的变量，且访问到的变量长期驻扎在内存中，可供之后使用</li><li>避免变量污染全局</li><li>把变量存到独立的作用域，作为私有成员存在</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>对内存消耗有负面影响。因内部函数保存了对外部变量的引用，导致无法被垃圾回收，增大内存使用量，所以使用不当会导致内存泄漏</li><li>对处理速度具有负面影响。闭包的层级决定了引用的外部变量在查找时经过的作用域链长度</li><li>可能获取到意外的值(captured value)</li></ol><h4 id="闭包使用场景"><a href="#闭包使用场景" class="headerlink" title="闭包使用场景"></a>闭包使用场景</h4><p><strong>场景一：</strong> 典型应用是模块封装，在各模块规范出现之前，都是用这样的方式防止变量污染全局。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Yideng = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这样声明为模块私有变量，外界无法直接访问</span></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Yideng</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    Yideng.prototype.bar = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Yideng;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p><strong>场景二：</strong> 在循环中创建闭包，防止取到意外的值。<br>如下代码，无论哪个元素触发事件，都会弹出 3。因为函数执行后引用的 i 是同一个，而 i 在循环结束后就是 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span> + i).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可用闭包解决</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCallback</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span> + i).onfocus = makeCallback(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何闭包的使用场景都离不开这两点:</p><ul><li>创建私有变量</li><li>延长变量的生命周期</li></ul><blockquote><p>一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的</p></blockquote><p>下面举个例子：</p><p>在页面上添加一些可以调整字号的按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSizer</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.fontSize = size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> size12 = makeSizer(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> size14 = makeSizer(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">var</span> size16 = makeSizer(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;size-12&#x27;</span>).onclick = size12;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;size-14&#x27;</span>).onclick = size14;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;size-16&#x27;</span>).onclick = size16;</span><br></pre></td></tr></table></figure><h5 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h5><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设我们有一个求长方形面积的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们碰到的长方形的宽老是10</span></span><br><span class="line"><span class="keyword">const</span> area1 = getArea(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">const</span> area2 = getArea(<span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line"><span class="keyword">const</span> area3 = getArea(<span class="number">10</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以使用闭包柯里化这个计算面积的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">height</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTenWidthArea = getArea(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 之后碰到宽度为10的长方形就可以这样计算面积</span></span><br><span class="line"><span class="keyword">const</span> area1 = getTenWidthArea(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></span><br><span class="line"><span class="keyword">const</span> getTwentyWidthArea = getArea(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h5 id="使用闭包模拟私有方法"><a href="#使用闭包模拟私有方法" class="headerlink" title="使用闭包模拟私有方法"></a>使用闭包模拟私有方法</h5><p>在JavaScript中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法</p><p>下面举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Counter1 = makeCounter();</span><br><span class="line"><span class="keyword">var</span> Counter2 = makeCounter();</span><br><span class="line"><span class="built_in">console</span>.log(Counter1.value()); <span class="comment">/* logs 0 */</span></span><br><span class="line">Counter1.increment();</span><br><span class="line">Counter1.increment();</span><br><span class="line"><span class="built_in">console</span>.log(Counter1.value()); <span class="comment">/* logs 2 */</span></span><br><span class="line">Counter1.decrement();</span><br><span class="line"><span class="built_in">console</span>.log(Counter1.value()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="built_in">console</span>.log(Counter2.value()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure><p>上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式</p><p>两个计数器 Counter1 和 Counter2 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量</p><h5 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h5><p>例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期</p><h4 id="闭包注意事项"><a href="#闭包注意事项" class="headerlink" title="闭包注意事项"></a>闭包注意事项</h4><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响</p><p>例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。</p><p>原因在于每个对象的创建，方法都会被重新赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name.toString();</span><br><span class="line">  <span class="built_in">this</span>.message = message.toString();</span><br><span class="line">  <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.getMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name.toString();</span><br><span class="line">  <span class="built_in">this</span>.message = message.toString();</span><br><span class="line">&#125;</span><br><span class="line">MyObject.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line">MyObject.prototype.getMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java入门</title>
      <link href="/2022/06/26/java%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/26/java%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css常用样式大全</title>
      <link href="/2022/06/08/css%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F%E5%A4%A7%E5%85%A8/"/>
      <url>/2022/06/08/css%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="字体属性-font"><a href="#字体属性-font" class="headerlink" title="字体属性: (font)"></a>字体属性: (font)</h4><p><code>大小&#123;font-size: x-large;&#125;(特大) xx-small;(极小) 一般中文用不到，只要用数值就可以，单位: PX、 PD</code><br><code>样式&#123;font-style: oblique;&#125;(偏斜体) italic;(斜体) normal;(正常)</code><br><code>行高&#123;line-height: normal;&#125;(正常)单位: PX. PD、EM</code><br><code>粗细&#123;font-weight: bold;&#125;(粗体) lighter;(细体) normal;(正常)</code><br><code>变体&#123;font-variant: small-caps;&#125;(小型大写字母) normal;(正常)</code><br><code>大小写&#123;text- transform: capitalize;&#125;(首字母大写) uppercase;(大写) lowercase;(小写) none;(无)</code><br><code>修饰&#123;text-decoration: underline;&#125;(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)</code></p><h4 id="常用字体-font-family"><a href="#常用字体-font-family" class="headerlink" title="常用字体: (font-family)"></a>常用字体: (font-family)</h4><p><code>&quot;Courier New&quot;, Courier, monospace, &quot;Times New Roman&quot;, Times, serif, Arial, Helvetica, sans-serif, Verdana</code></p><h4 id="背景属性-background"><a href="#背景属性-background" class="headerlink" title="背景属性: (background)"></a>背景属性: (background)</h4><p><code>色彩&#123;background-color: #FFFFFF;&#125;</code><br><code>图片&#123;background-image: url();&#125;</code><br><code>重复&#123;background-repeat: no-repeat;&#125;</code><br><code>滚动&#123;background-attachment: fixed;(固定) scroll;(滚动)</code><br><code>位置&#123;background position: left;&#125;(水平) top(垂直);</code><br><code>简写方法&#123;background:#000 url(..) repeat fixed left top;&#125; 简写</code></p><h4 id="区块属性-Block"><a href="#区块属性-Block" class="headerlink" title="区块属性: (Block)"></a>区块属性: (Block)</h4><p><code>字间距&#123;letter-spacing: normal;&#125; 数值</code><br><code>对齐&#123;text-align: justify;&#125;(两端对齐) left;(左对齐) right;(右对齐) center;(居中)</code><br><code>缩进&#123;text-indent:数值px;&#125;</code><br><code>垂直对齐&#123;vertical-align: baseline;(基线) sub;(下标) super;(下标) top; text-top; middle; bottom; text-bottom;</code><br><code>词间距word-spacing: normal; 数值</code><br><code>空格white-space: pre;(保留) nowrap;(不换行)</code><br><code>显示&#123;display:block;&#125;(块) inline;(内嵌) list-item;(列表项) run-in;(追加部分) compact; (紧凑) marker;(标记) table; inline-table; table-raw-group; table-header-group; table-footer-group; table-raw; table-column-group; table-column; table-cell; table-caption; (表格标题) </code></p><h4 id="方框属性-Box"><a href="#方框属性-Box" class="headerlink" title="方框属性: (Box)"></a>方框属性: (Box)</h4><p><code>width; height; float;; clear:both; margin;; padding;顺序:上右下左</code></p><h4 id="边框属性-Border"><a href="#边框属性-Border" class="headerlink" title="边框属性: (Border)"></a>边框属性: (Border)</h4><p><code>border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inse;(凹陷) outset;</code><br><code>border-width;边框宽度</code><br><code>border-color:#000;</code><br><code>简写方法border: width style color; </code></p><h4 id="列表属性-List-style"><a href="#列表属性-List-style" class="headerlink" title="列表属性: (List-style)"></a>列表属性: (List-style)</h4><p><code>类型list-style-type: disc;(圆点) circle;(圆圈) square; (方块) decimal;(数字) lower-roman; (小罗码数字) upper-roman; lower. alpha; upper-alpha; 位置list-style-position: outside;(外) inside; 图像list-style-image: ur();</code></p><h4 id="定位属性-Position"><a href="#定位属性-Position" class="headerlink" title="定位属性: (Position)"></a>定位属性: (Position)</h4><p><code>position: absolute; relative; static;</code><br><code>visibility: inherit; visible; hidden;</code><br><code>overflow: visible; hidden; scroll; auto;</code><br><code>clip: rect(12px,auto,12px,auto) (裁切)</code></p><h3 id="css属性代码大全"><a href="#css属性代码大全" class="headerlink" title="css属性代码大全"></a>css属性代码大全</h3><h4 id="一、CSS文字属性"><a href="#一、CSS文字属性" class="headerlink" title="一、CSS文字属性:"></a>一、CSS文字属性:</h4><p><code>color : #99999; /文字颜色/</code><br><code>font-family :宋体,sans-serif;/文字字体/</code><br><code>font-size :9pt;/文字大小/</code><br><code>font-style:itelic; /文字斜体/</code><br><code>font-variant:small-caps; /小字体/</code><br><code>letter-spacing: 1pt; /字间距离/</code><br><code>line-height : 200%; /设置行高/</code><br><code>font-weight:bold; /文字粗体/</code><br><code>vertical-align:sub;/下标字/</code><br><code>vertical-align:super;/上标字/</code><br><code>text-decoration:line-through; /加删除线/</code><br><code>text-decoration: overline; /加顶线/</code><br><code>text-decoration:underline; /加下划线/</code><br><code>text-decoration:none; /删除链接下划线/</code><br><code>text-transform : capitalize;/首字大写/</code><br><code>text-transform : uppercase;/英文大写/</code><br><code>text-transform : lowercase;/英文小写/</code><br><code>text-align:right;/文字右对齐/</code><br><code>text-align:left;/文字左对齐/</code><br><code>text-align:center; /文字居中对齐/</code><br><code>text- align:justify; /文字分散对齐/</code><br><code>vertical-align:top; /垂直向上对齐/</code><br><code>vertical-align:bottom; /垂直向下对齐/</code><br><code>vertical-align:middle; /垂直居中对齐/</code><br><code>vertical- align:text-top;/文字垂直向上对齐/</code><br><code>vertical- align:text- bottom; /文字垂直向下对齐/</code></p><h4 id="二、CSS符号属性"><a href="#二、CSS符号属性" class="headerlink" title="二、CSS符号属性:"></a>二、CSS符号属性:</h4><p><code>list-style-type:none; /不编号/</code><br><code>list-style-type:decimal; /阿拉伯数字/</code><br><code>list-style-type:lower-roman; /小写罗马数字/</code><br><code>list-style-type:upper-roman; /大写罗马数字/</code><br><code>list-style-type:lower-alpha; /小写英文字母/</code><br><code>list-style-type:upper-alpha;/大写英文字母/</code><br><code>list-style-type:disc; /实心圆形符号/</code><br><code>list-style-type:circle; /空心圆形符号/</code><br><code>list-style-type:square; /实心方形符号/</code><br><code>list-style-image:url(/dot.gif); /图片式符号/</code><br><code>list-style-position: outside; /凸排/</code><br><code>list-style-position:inside; /缩进/</code></p><h4 id="四、CSS背景样式"><a href="#四、CSS背景样式" class="headerlink" title="四、CSS背景样式:"></a>四、CSS背景样式:</h4><p><code>background-color:#F5E2EC;/背景颜色/</code><br><code>background:transparent; /透视背景/</code><br><code>background-image : ur(/image/bg.gif);/背景图片/</code><br><code>background-attachment : fixed; /浮水印固定背景/</code><br><code>background-repeat : repeat; /重复排列网页默认/</code><br><code>background-repeat : no-repeat; /不重复排列/</code><br><code>background-repeat : repeat-x; /在x轴重复排列/</code><br><code>background-repeat : repeat-y; /在y轴重复排列/</code></p><p><strong>指定背景位置</strong><br><code>background-position : 90% 90%; /背景图片x与y轴的位置/</code><br><code>background-position: top; /向上对齐/</code><br><code>background-position : buttom; /向下对齐/</code><br><code>background-position : left; /向左对齐/</code><br><code>background-position : right; /向右对齐/</code><br><code>background-position: center; /居中对齐/</code></p><h4 id="五、CSS连接属性"><a href="#五、CSS连接属性" class="headerlink" title="五、CSS连接属性:"></a>五、CSS连接属性:</h4><p><code>a /所有超链接/</code><br><code>a:link /超链接文字格式/</code><br><code>a:visited /浏览过的链接文字格式/</code><br><code>a:active /按下链接的格式/</code><br><code>a:hover /鼠标转到链接/</code></p><p><strong>鼠标光标样式:</strong></p><p><code>链接手指cursor: hand/pointer</code><br><code>十字体cursor:crosshair</code><br><code>箭头朝下cursor:s-resize</code><br><code>十字箭头cursor:move</code><br><code>箭头朝右cursor:move</code><br><code>加一问号cursor:help</code><br><code>箭头朝左cursor:w-resize</code><br><code>箭头朝_上cursor:n-resize</code><br><code>箭头朝右.上cursor:ne-resize</code><br><code>箭头朝左上cursor:nw-resize</code><br><code>文字|型cursor:text</code><br><code>箭头斜右下cursor:se-resize</code><br><code>箭头斜左下cursor:sw-resize</code><br><code>漏斗cursor:wait</code><br><code>光标图案(IE6) p &#123;cursor:ur(&quot;光标文件名.cur&quot;),text;&#125;</code></p><h4 id="六、CSS框线-览表"><a href="#六、CSS框线-览表" class="headerlink" title="六、CSS框线- 览表:"></a>六、CSS框线- 览表:</h4><p><code>border-top : 1px solid #6699c;/上框线/</code><br><code>border-bottom : 1px solid #6699c;/下框线/</code><br><code>border-left : 1px solid #6699cc; /左框线/</code><br><code>border-right : 1px solid #6699cc; /右框线/</code><br>以上是建议书写方式,但也可以使用常规的方式如下:<br><code>border-top-color : #369 /设置上框线top颜色/</code><br><code>border-top-width :1px /设置上框线top宽度/</code><br><code>border-top-style : solid/设置上框线top样式/</code></p><p><strong>其他框线样式</strong><br><code>solid /实线框/</code><br><code>dotted /虚线框/</code><br><code>double /双线框/</code><br><code>groove /立体内凸框/</code><br><code>ridge /立体浮雕框/</code><br><code>inset/凹框/</code><br><code>outset/凸框/</code></p><h4 id="CSS属性-字体样式-Font-style"><a href="#CSS属性-字体样式-Font-style" class="headerlink" title="CSS属性:字体样式(Font style)"></a>CSS属性:字体样式(Font style)</h4><p><code>序号中文说明标记语法</code><br><code>1、字体样式&#123;font:font-style font-variant font-weight font-size font-family&#125;</code><br><code>2、字体类型&#123;font-family:&quot;字体1&quot;字体2&quot;,&quot;字体3..&#125;</code><br><code>3、字体大小&#123;font-size:数值|inherit| medium| large| larger| x-large| x-large| small | smaller| x-small xx-small&#125;</code><br><code>4、字体风格&#123;font-style:inherit|italic|normal|oblique&#125;</code><br><code>5、字体粗细&#123;font-weight:100-900|bold|bolder|lighter|normal;&#125;</code><br><code>6、字体颜色&#123;color:数值;&#125;</code><br><code>7、阴影颜色&#123;text-shadow:16位色值&#125;</code><br><code>8、字体行高&#123;line-height:数值|inherit|normal;&#125;</code><br><code>9、字间距&#123;letter-spacing:数值|inherit|normal&#125;</code><br><code>10、单词间距&#123;word-spacing:数值|inherit|normal&#125;</code><br><code>11、字体变形&#123;font-variant:inherit|normal|small-cps &#125;</code><br><code>12、英文转换&#123;text-transform:inherit|none|capitalize|uppercase|lowercase&#125;</code><br><code>13、字体变形&#123;font size-adjust:inherit|none&#125;</code><br><code>14、字体&#123;font-stretch:condensed|expanded|extra-condensed|extra-expanded|inherit|narrower|normall|semi-condensed|semi-expanded|ultra-condensed|ultra-expanded|wider&#125;</code></p><h4 id="文本样式-Text-Style"><a href="#文本样式-Text-Style" class="headerlink" title="文本样式(Text Style)"></a>文本样式(Text Style)</h4><p><code>1、行间距&#123;line-height:数值|inherit|normal;&#125;</code><br><code>2、文本修饰&#123;text-decoration:inherit|none|underline|overline|line-through|blink&#125;</code><br><code>3、段首空格&#123;text- indent:数值linherit&#125;</code><br><code>4、水平对齐&#123;text align:eftrightlcenterljustify&#125;</code><br><code>5、垂直对齐&#123;vertical-align:inherit|top|bottom|text-top|text-bottom|baseline|middle|sublsuper&#125;</code><br><code>6书写方式&#123;writing-mode:lr-tb|tb-rI&#125;</code></p><h4 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h4><p><code>1、背景颜色&#123;background-color:数值&#125;</code><br><code>2、背景图片&#123;background-image: url(URL)|none&#125;</code><br><code>3、背景重复&#123;background-repeat:inherit(no-repeat|repeat|repeat-x|repeat-y&#125;</code><br><code>4、背景固定&#123;background-attachment:fixed|scroll&#125;</code><br><code>5、背景定位&#123;background-position:数值top|bottom|left|right|center&#125;</code><br><code>6、背影样式&#123;background:背景颜色|背景图象|背景重复|背景附件背景位置&#125;</code></p><h4 id="框架样式-Box-style"><a href="#框架样式-Box-style" class="headerlink" title="框架样式(Box style)"></a>框架样式(Box style)</h4><p><code>序号中文说明标记语法</code><br><code>1、边界留白&#123;margin:margin-top margin-right margin-bottom margin-left&#125;</code><br><code>2、补白 &#123;padding:padding top padding-right padding: bottom padding-eft&#125;</code><br><code>3、边框宽度&#123;border-width:border-top-width border-right-width border-bottom-width border-left-width&#125;</code><br><code>宽度值: thin|medium|thick|数值</code><br><code>4、边框颜色&#123;border-color;数值数值数值数值&#125;数值: 分别代表top、right、bottom、left颜色值</code><br><code>5、边框风格&#123;border-style:none|hidden|inherit|dashed|solid|double|inset|outset|ridge|groove&#125;</code><br><code>6、边框&#123;border:border width border-style color&#125;</code><br><code>上边框&#123;border-top:border.top-width border-style color&#125;</code><br><code>右边框&#123;border-right:border-right-width border-style color&#125;</code><br><code>下边框&#123;border-bottom:border-bottom-width border-style color&#125;</code><br><code>左边框&#123;border-left:border-left-width border-style color&#125;</code><br><code>7、宽度 &#123;width:长度|百分比| auto&#125;</code><br><code>8、高度&#123;height:数值|auto&#125;</code><br><code>9、漂浮&#123;float:left|right|none&#125;</code><br><code>10、清除 &#123;clear:none|left|right|both&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css常用样式大全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack打包缓存问题</title>
      <link href="/2022/05/30/webpack%E6%89%93%E5%8C%85%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/30/webpack%E6%89%93%E5%8C%85%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>因为浏览器缓存原因导致打包的文件偶尔会出现不能及时更新最新代码。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>对于每次打包后的文件加上一个时间戳，使浏览器的缓存失效 找到vue.config.js文件下的chainWebpack 并加入以下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">chainWebpack</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">   <span class="comment">// 略......</span></span><br><span class="line">   <span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">   <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">     <span class="comment">// 给js和css配置版本号</span></span><br><span class="line">     config.output.filename(<span class="string">`js/[name].<span class="subst">$&#123;timestamp&#125;</span>.js`</span>).end()</span><br><span class="line">     config.output.chunkFilename(<span class="string">`js/[name].<span class="subst">$&#123;timestamp&#125;</span>.js`</span>).end()</span><br><span class="line">     config.plugin(<span class="string">&#x27;extract-css&#x27;</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> [&#123;</span><br><span class="line">       <span class="attr">filename</span>: <span class="string">`css/[name].<span class="subst">$&#123;timestamp&#125;</span>.css`</span>,</span><br><span class="line">       <span class="attr">chunkFilename</span>: <span class="string">`css/[name].<span class="subst">$&#123;timestamp&#125;</span>.css`</span></span><br><span class="line">     &#125;])</span><br><span class="line">      <span class="comment">// 注意 此处由坑</span></span><br><span class="line">     <span class="comment">//当我们配置了 打包后静态文件输出为 assetsDir:&#x27;static&#x27; 后</span></span><br><span class="line">     <span class="comment">// 那么下面的路径也应该加上static</span></span><br><span class="line">     <span class="comment">/*  config.output.filename(`static/js/[name].$&#123;timestamp&#125;.js`).end()</span></span><br><span class="line"><span class="comment">       config.output.chunkFilename(`static/js/[name].$&#123;timestamp&#125;.js`).end()</span></span><br><span class="line"><span class="comment">       config.plugin(&#x27;extract-css&#x27;).tap(args =&gt; [&#123;</span></span><br><span class="line"><span class="comment">       filename: `static/css/[name].$&#123;timestamp&#125;.css`,</span></span><br><span class="line"><span class="comment">       chunkFilename: `static/css/[name].$&#123;timestamp&#125;.css`</span></span><br><span class="line"><span class="comment">         &#125;]) */</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 略......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack打包缓存问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gzip配置</title>
      <link href="/2022/05/30/gzip%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/30/gzip%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>一、安装插件（compression-webpack-plugin）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>可能出现的错误：</p><p>Unsupported URL Type: npm:vue-loader@^16.1.0</p><p>原因：npm版本过低</p><p>解决：更新npm版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><p>二、配置vue.config.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const CompressionPlugin = require(&#x27;compression-webpack-plugin&#x27;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // productionSourceMap: false,</span><br><span class="line">  publicPath: &#x27;/&#x27;,</span><br><span class="line">  // 打包输出路径</span><br><span class="line">  outputDir: &#x27;dist&#x27;,</span><br><span class="line">  // 打包静态资源输出路径</span><br><span class="line">  assetsDir: &#x27;static&#x27;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: true,</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8082</span><br><span class="line">  &#125;,</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      sass: &#123;</span><br><span class="line">        prependData: `@import &quot;./src/assets/scss/theme.scss&quot;;`</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      new CompressionPlugin(&#123;</span><br><span class="line">        algorithm: &#x27;gzip&#x27;, // 使用gzip压缩</span><br><span class="line">        test: /\.js$|\.html$|\.css$/, // 匹配文件名</span><br><span class="line">        // filename: &#x27;[path].gz[query]&#x27;, // 压缩后的文件名(保持原文件名，后缀加.gz)</span><br><span class="line">        minRatio: 1, // 压缩率小于1才会压缩</span><br><span class="line">        threshold: 10240, // 对超过10k的数据压缩</span><br><span class="line">        deleteOriginalAssets: false // 是否删除未压缩的源文件，谨慎设置，如果希望提供非gzip的资源，可不设置或者设置为false（比如删除打包后的gz后还可以加载到原始资源文件）</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gzip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuiapp踩坑指南</title>
      <link href="/2022/05/30/nuiapp%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2022/05/30/nuiapp%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h4 id="1-主动调用uni-hideKeyboard-收起键盘后点击屏幕任意区域键盘重新抬起的问题。"><a href="#1-主动调用uni-hideKeyboard-收起键盘后点击屏幕任意区域键盘重新抬起的问题。" class="headerlink" title="1.主动调用uni.hideKeyboard()收起键盘后点击屏幕任意区域键盘重新抬起的问题。"></a>1.主动调用uni.hideKeyboard()收起键盘后点击屏幕任意区域键盘重新抬起的问题。</h4><p>解决方案:给input的focus绑一个flag(false)，聚焦赋true，失焦赋flase即可解决</p><h4 id="2-日历组件选择时间域时-input显示的时间与点击同步修改，预期为点击完成时才进行值变更"><a href="#2-日历组件选择时间域时-input显示的时间与点击同步修改，预期为点击完成时才进行值变更" class="headerlink" title="2. 日历组件选择时间域时 input显示的时间与点击同步修改，预期为点击完成时才进行值变更"></a>2. 日历组件选择时间域时 input显示的时间与点击同步修改，预期为点击完成时才进行值变更</h4><p>原因: 传递给子组件的时一个数组，由于传入的是一个引用赋值时未进行深拷贝导致此问题出现 解决方案: 对象或者数组传递时需要进行深拷贝 可以使用扩展运算符 …</p><h4 id="3-ios系统-浏览器div可编辑属性-contenteditable-quot-true-quot-不生效"><a href="#3-ios系统-浏览器div可编辑属性-contenteditable-quot-true-quot-不生效" class="headerlink" title="3. ios系统 浏览器div可编辑属性 contenteditable``=``&quot;true&quot; 不生效"></a>3. ios系统 浏览器div可编辑属性 <code>contenteditable``=``&quot;true&quot; 不生效</code></h4><p>解决方案: 加入css -webkit-user-select:text;</p><h4 id="4-对象中用新的字段绑定v-model时输入框修改不变化的问题"><a href="#4-对象中用新的字段绑定v-model时输入框修改不变化的问题" class="headerlink" title="4.对象中用新的字段绑定v-model时输入框修改不变化的问题"></a>4.对象中用新的字段绑定v-model时输入框修改不变化的问题</h4><p>data.info.key = ‘’ {} = data.info</p><p>解决方案：在赋值给对象前将该字段添加至对象中，如果是赋值后在添加该字段还是无效</p><h4 id="5-预加载后从登录页跳转到首页-快速点击其他tabbar-控制台报错-手机无反应"><a href="#5-预加载后从登录页跳转到首页-快速点击其他tabbar-控制台报错-手机无反应" class="headerlink" title="5.预加载后从登录页跳转到首页  快速点击其他tabbar 控制台报错 手机无反应"></a>5.预加载后从登录页跳转到首页  快速点击其他tabbar 控制台报错 手机无反应</h4><p>原因：预加载API错误  在成功后 页面并未加载到队列中 解决方案 ： 在预加载成功后 适当延迟 或者看下commonjs中得isPreloadPageOK方法</p><h4 id="6-二级页面出现底部tabbar-渲染闪烁"><a href="#6-二级页面出现底部tabbar-渲染闪烁" class="headerlink" title="6.二级页面出现底部tabbar 渲染闪烁"></a>6.二级页面出现底部tabbar 渲染闪烁</h4><p>原因: nvue所有组件默认背景色都是透明的 可能出现类似情况 解决方案 ： 在页面最外层容器加上背景色</p><h4 id="7-全屏加载页会覆盖顶部导航栏-出现闪烁情况"><a href="#7-全屏加载页会覆盖顶部导航栏-出现闪烁情况" class="headerlink" title="7.全屏加载页会覆盖顶部导航栏 出现闪烁情况"></a>7.全屏加载页会覆盖顶部导航栏 出现闪烁情况</h4><p>原因: 不明 解决方案 ：给loading组件加上边框 解决。</p><h4 id="8-nvue-在巨力pda上阴影样式异常以及如何设置阴影"><a href="#8-nvue-在巨力pda上阴影样式异常以及如何设置阴影" class="headerlink" title="8.nvue 在巨力pda上阴影样式异常以及如何设置阴影"></a>8.nvue 在巨力pda上阴影样式异常以及如何设置阴影</h4><p>原因: Android平台weex对阴影样式(box-shadow)支持不完善<br>具体官方有说明 <a href="https://uniapp.dcloud.io/nvue-css?id=android%E5%B9%B3%E5%8F%B0%EF%BC%9A%E9%98%B4%E5%BD%B1elevation">https://uniapp.dcloud.io/nvue-css?id=android%e5%b9%b3%e5%8f%b0%ef%bc%9a%e9%98%b4%e5%bd%b1elevation</a><br>解决方案 ：使用 elevation</p><h4 id="9-首页刷新权限-应用卡死"><a href="#9-首页刷新权限-应用卡死" class="headerlink" title="9.首页刷新权限 应用卡死"></a>9.首页刷新权限 应用卡死</h4><p>原因：在鉴权组件中 判断是否显示 使用的是方法 v-if=”xxx()” 直接在页面上使用方法在页面重绘就会调用一次 一次数据改变 可能会重绘多次页面<br>———–  在以后开发中发 尽可能不在页面上直接调用方法 ——————-<br>解决方案： 使用computed来进行条件判断</p><h4 id="10-数据刷新-页面内容未被撑开"><a href="#10-数据刷新-页面内容未被撑开" class="headerlink" title="10.数据刷新 页面内容未被撑开"></a>10.数据刷新 页面内容未被撑开</h4><p>解决方案：给其加上key 在数据改变时 修改key</p><h4 id="11-ios下滚动组件list、scroller组件内容过少无法触发下拉刷新"><a href="#11-ios下滚动组件list、scroller组件内容过少无法触发下拉刷新" class="headerlink" title="11.ios下滚动组件list、scroller组件内容过少无法触发下拉刷新"></a>11.ios下滚动组件list、scroller组件内容过少无法触发下拉刷新</h4><p>解决方案：加上属性 alwaysScrollableVertical=”true” <a href="https://uniapp.dcloud.io/use-weex?id=ios%E5%B9%B3%E5%8F%B0%E4%B8%8B%E6%8B%89%E7%BB%84%E4%BB%B6refresh%E7%BB%84%E4%BB%B6%E6%B3%A8%E6%84%8F%E9%97%AE%E9%A2%98">https://uniapp.dcloud.io/use-weex?id=ios平台下拉组件refresh组件注意问题</a></p><h4 id="12-关闭NVUE滚动组件得回弹效果"><a href="#12-关闭NVUE滚动组件得回弹效果" class="headerlink" title="12.关闭NVUE滚动组件得回弹效果"></a>12.关闭NVUE滚动组件得回弹效果</h4><p>为其加上属性 :bounce=”false” 即可</p><h4 id="13-swiper-中得swiper如需做循环滚动-swiper-item-key直接给index即可"><a href="#13-swiper-中得swiper如需做循环滚动-swiper-item-key直接给index即可" class="headerlink" title="13.swiper 中得swiper如需做循环滚动 swiper-item key直接给index即可"></a>13.swiper 中得swiper如需做循环滚动 swiper-item key直接给index即可</h4><p>** **否则 key发生变化 会自动回到第一页</p><h4 id="14-NVUE-中view绑定tap事件失效"><a href="#14-NVUE-中view绑定tap事件失效" class="headerlink" title="14.NVUE 中view绑定tap事件失效"></a>14.NVUE 中view绑定tap事件失效</h4><p>将view标签改为div标签</p><h4 id="15-NVUE-中picker组件无法弹出"><a href="#15-NVUE-中picker组件无法弹出" class="headerlink" title="15.NVUE 中picker组件无法弹出"></a>15.NVUE 中picker组件无法弹出</h4><p>为其子标签绑定上tap事件</p><h4 id="16-NVUE中-使用-transform-translateY-position-fixed-制作底部弹出层-样式无法生效"><a href="#16-NVUE中-使用-transform-translateY-position-fixed-制作底部弹出层-样式无法生效" class="headerlink" title="16.NVUE中 使用 transform: translateY + position: fixed; 制作底部弹出层 样式无法生效"></a>16.NVUE中 使用 transform: translateY + position: fixed; 制作底部弹出层 样式无法生效</h4><p>为弹出部分加上背景色问题解决</p><h4 id="17-ios使用list可能会出现-熄屏一段时间后不能滚动的问题"><a href="#17-ios使用list可能会出现-熄屏一段时间后不能滚动的问题" class="headerlink" title="17.ios使用list可能会出现 熄屏一段时间后不能滚动的问题"></a>17.ios使用list可能会出现 熄屏一段时间后不能滚动的问题</h4><p>可以采用scroller标签代替list</p><h4 id="18-ios-点击输入框-键盘会将页面上推-在自定义头部时不希望这种情况出现"><a href="#18-ios-点击输入框-键盘会将页面上推-在自定义头部时不希望这种情况出现" class="headerlink" title="18.ios 点击输入框 键盘会将页面上推 在自定义头部时不希望这种情况出现"></a>18.ios 点击输入框 键盘会将页面上推 在自定义头部时不希望这种情况出现</h4><p>在 输入框上 加入属性 :adjust-position=”false”</p><h4 id="19-ios如需开启下拉刷新-不可关闭滚动组件的回弹效果"><a href="#19-ios如需开启下拉刷新-不可关闭滚动组件的回弹效果" class="headerlink" title="19.ios如需开启下拉刷新 不可关闭滚动组件的回弹效果"></a>19.ios如需开启下拉刷新 不可关闭滚动组件的回弹效果</h4><p>应该设置 ** **:bounce=”true” 或者不设置 默认为true</p><h4 id="20-安卓下-子节点绑定点击事件且内容为占满scroller的情况下-按住子节点无法下拉问题"><a href="#20-安卓下-子节点绑定点击事件且内容为占满scroller的情况下-按住子节点无法下拉问题" class="headerlink" title="20. 安卓下 子节点绑定点击事件且内容为占满scroller的情况下 按住子节点无法下拉问题"></a>20. 安卓下 子节点绑定点击事件且内容为占满scroller的情况下 按住子节点无法下拉问题</h4><p>使用list组件代替scroller组件 为了兼容ios 可以根据操作系统来选择组件 因为ios端的list可能会出现滚不动的现象 具体操作凡是 参照 evol-lazy-list 组件</p><h4 id="21-编写云上医护日历选择器时-点击遮罩-视图无法检测到变量变化-进行样式更新"><a href="#21-编写云上医护日历选择器时-点击遮罩-视图无法检测到变量变化-进行样式更新" class="headerlink" title="21. 编写云上医护日历选择器时 点击遮罩 视图无法检测到变量变化 进行样式更新"></a>21. 编写云上医护日历选择器时 点击遮罩 视图无法检测到变量变化 进行样式更新</h4><p>解决方案: 在方法中阻止事件冒泡  e.stopPropagation()</p><h4 id="22-nvue需要进行页面元素动态切换时-受其渲染速度影响会出现闪烁情况"><a href="#22-nvue需要进行页面元素动态切换时-受其渲染速度影响会出现闪烁情况" class="headerlink" title="22. nvue需要进行页面元素动态切换时 受其渲染速度影响会出现闪烁情况"></a>22. nvue需要进行页面元素动态切换时 受其渲染速度影响会出现闪烁情况</h4><p>解决方案: 使用样式控制元素的隐藏 例如 margin-left：-750upx;width:0upx;</p><h4 id="23-递归组件的使用"><a href="#23-递归组件的使用" class="headerlink" title="23. 递归组件的使用"></a>23. 递归组件的使用</h4><p>解决方案: 如果需要进行组件递归 需要在export中写上name属性 否则递归组件会被忽略</p><h4 id="24-nvue中text无法撑开父容器"><a href="#24-nvue中text无法撑开父容器" class="headerlink" title="24. nvue中text无法撑开父容器"></a>24. nvue中text无法撑开父容器</h4><p>解决方案: 给text加上宽度即可</p><h4 id="25-nvue-在ios上要注意节点的加载顺序-先出现的节点无法覆盖后出现的"><a href="#25-nvue-在ios上要注意节点的加载顺序-先出现的节点无法覆盖后出现的" class="headerlink" title="25. nvue 在ios上要注意节点的加载顺序 先出现的节点无法覆盖后出现的"></a>25. nvue 在ios上要注意节点的加载顺序 先出现的节点无法覆盖后出现的</h4><p>解决方案: 使用v-if来控制加载的时机</p><h4 id="26-在uniapp中使用webview时打开非常慢"><a href="#26-在uniapp中使用webview时打开非常慢" class="headerlink" title="26.在uniapp中使用webview时打开非常慢"></a>26.在uniapp中使用webview时打开非常慢</h4><p> 解决方案: 对页面进行预加载 参数通过evaljs进行传递 具体解决方案参考云上医护 病区上报功能  this.$refs.webview.evalJS(setParams(‘${this.pending}’))</p><h4 id="27-nvue预加载页面-在ios上左滑会销毁页面"><a href="#27-nvue预加载页面-在ios上左滑会销毁页面" class="headerlink" title="27.nvue预加载页面 在ios上左滑会销毁页面"></a>27.nvue预加载页面 在ios上左滑会销毁页面</h4><p>解决方案: 在onLoad中 使用 以下代码来放防止在iOS上左滑页面被销毁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(uni.getSystemInfoSync().platform==<span class="string">&#x27;ios&#x27;</span>)&#123;     plus.webview.currentWebview().setStyle(&#123;<span class="attr">popGesture</span>:<span class="string">&#x27;hide&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="28-解决安卓第一次按住有tap事件的dom-滚动会触发刷新问题"><a href="#28-解决安卓第一次按住有tap事件的dom-滚动会触发刷新问题" class="headerlink" title="28. 解决安卓第一次按住有tap事件的dom 滚动会触发刷新问题"></a>28. 解决安卓第一次按住有tap事件的dom 滚动会触发刷新问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在scroller顶部放入节点</span></span><br><span class="line">&lt;view ref=<span class="string">&quot;dom&quot;</span> /&gt;</span><br><span class="line"><span class="comment">//延迟调用</span></span><br><span class="line"><span class="function"><span class="title">scrollFixed</span>(<span class="params"></span>)</span> &#123; <span class="comment">// 解决安卓第一次按住有tap事件的dom 滚动会触发刷新问题</span></span><br><span class="line">  dom.scrollToElement(<span class="built_in">this</span>.$refs.dom, &#123; <span class="attr">offset</span>: <span class="number">1</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="29-keyboardheightchange获取的键盘高度不对"><a href="#29-keyboardheightchange获取的键盘高度不对" class="headerlink" title="29.keyboardheightchange获取的键盘高度不对"></a>29.keyboardheightchange获取的键盘高度不对</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手机存在虚拟键位获取差值后即可获取正确高度</span></span><br><span class="line"><span class="function"><span class="title">keyboardheightchange</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _sysInfo = uni.getSystemInfoSync()</span><br><span class="line">　　<span class="keyword">const</span> _heightDiff = _sysInfo.screenHeight - _sysInfo.windowHeight</span><br><span class="line">　　<span class="built_in">this</span>.keyHeight = e.detail.height - _heightDiff</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="30-安卓下-scroller-使用refresh-首次点击到元素会出现抖动"><a href="#30-安卓下-scroller-使用refresh-首次点击到元素会出现抖动" class="headerlink" title="30. 安卓下 scroller 使用refresh 首次点击到元素会出现抖动"></a>30. 安卓下 scroller 使用refresh 首次点击到元素会出现抖动</h4><p>在加载完数据后 进行滚动偏移即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   dom.scrollToElement(<span class="built_in">this</span>.$refs.yyRefresh, &#123; <span class="attr">offset</span>: <span class="number">1</span>,<span class="attr">animated</span>:<span class="literal">false</span>  &#125;)</span><br><span class="line">&#125;,<span class="number">40</span>)</span><br></pre></td></tr></table></figure><h4 id="30-uni-previewImage-API-会缓存图片"><a href="#30-uni-previewImage-API-会缓存图片" class="headerlink" title="30. uni.previewImage API 会缓存图片"></a>30. uni.previewImage API 会缓存图片</h4><p>当两次打开的图片url一致时,就算图片内容发生变化 使用previewImage 看到的图片还是第一次的<br>解决方案 : 使用uuid算法使图片名随机</p><h4 id="30-uniapp云打包失败"><a href="#30-uniapp云打包失败" class="headerlink" title="30. uniapp云打包失败"></a>30. uniapp云打包失败</h4><p>错误详情：API fatal error handler returned after process out of memory<br>原因：node内存溢出<br>解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局安装increase-memory-limit</span></span><br><span class="line">cnpm install -g increase-memory-limit</span><br><span class="line"><span class="comment">// 进入工程目录，执行：</span></span><br><span class="line">increase-memory-limit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuiapp踩坑指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现响应式原理</title>
      <link href="/2022/03/30/JavaScript%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2022/03/30/JavaScript%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>为什么前端框架Vue能够做到响应式？当依赖数据发生变化时，会对页面进行自动更新，其原理还是在于对响应式数据的获取和设置进行了监听，一旦监听到数据发生变化，依赖该数据的函数就会重新执行，达到更新的效果。那么我们如果想监听对象中的属性被设置和获取的过程，可以怎么做呢？</p><h4 id="1、Object-defineProperty"><a href="#1、Object-defineProperty" class="headerlink" title="1、Object.defineProperty"></a>1、Object.defineProperty</h4><blockquote><p>在ES6之前，如果想监听对象属性的获取和设置，可以借助Object.defineProperty方法的存取属性描述符来实现，具体怎么用呢？我们来看一下。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;curry&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.拿到obj所有的key</span></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.遍历obj所有的key，并设置存取属性描述符</span></span><br><span class="line">keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value = obj[key]</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`obj对象的<span class="subst">$&#123;key&#125;</span>属性被访问啦！`</span>)</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`obj对象的<span class="subst">$&#123;key&#125;</span>属性被设置啦！`</span>)</span><br><span class="line">      value = newValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置：</span></span><br><span class="line">obj.name = <span class="string">&#x27;kobe&#x27;</span> <span class="comment">// obj对象的name属性被设置啦！</span></span><br><span class="line">obj.age = <span class="number">24</span> <span class="comment">// obj对象的age属性被设置啦！</span></span><br><span class="line"><span class="comment">// 访问：</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// obj对象的name属性被访问啦！</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.age) <span class="comment">// obj对象的age属性被访问啦！</span></span><br></pre></td></tr></table></figure><p>在Vue2.x中响应式原理实现的核心就是使用的<font color="red">Object.defineProperty</font>，而在Vue3.x中响应式原理的核心被换成了<font color="red">Proxy</font>，为什么要这样做呢？主要是Object.defineProperty用来监听对象属性变化，有以下缺点：</p><ul><li><p>首先，Object.defineProperty设计的初衷就不是为了去监听对象属性的，因为它的主要使用功能就是用来定义对象属性的；</p></li><li><p>其次，Object.defineProperty在监听对象属性功能上有所缺陷，如果想监听对象新增属性、删除属性等等，它是无能为力的；</p></li></ul><h4 id="2、Proxy"><a href="#2、Proxy" class="headerlink" title="2、Proxy"></a>2、Proxy</h4>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript实现响应式原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex固化</title>
      <link href="/2022/03/30/vuex%E5%9B%BA%E5%8C%96/"/>
      <url>/2022/03/30/vuex%E5%9B%BA%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>前段时间写项目遇到一个问题，更改代码时页面自动刷新，vuex中的数据丢失，导致需要重新返回赋值的页面，开发起来影响效率，于是想到了vuex的持久化处理。</p><p>起初我是这样用的</p><p>先下载插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex-persistedstate --save</span><br></pre></td></tr></table></figure><p>引入插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在vuex初始化时导入插件</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"><span class="comment">//并使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"> <span class="attr">state</span>: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">mutations</span>: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">actions</span>: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">modules</span>: &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">plugins</span>: [</span><br><span class="line">   <span class="keyword">new</span> persist(&#123;</span><br><span class="line">     <span class="attr">storage</span>: <span class="built_in">window</span>.localStorage,</span><br><span class="line">   &#125;),</span><br><span class="line"> ],</span><br><span class="line"> <span class="comment">//会自动保存状态，刷新时不会丢失</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>奈何不知道出于什么原因，插件未生效，于是拿起我的百度大法</p><p>更换了另一种写法</p><p>在App.vue文件里做处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">//在页面加载时读取sessionStorage里的状态信息</span></span><br><span class="line">  <span class="keyword">if</span> (sessionStorage.getItem(<span class="string">&quot;store&quot;</span>)) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.replaceState(<span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.$store.state, <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&quot;store&quot;</span>))))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//在页面刷新时将vuex里的信息保存到sessionStorage里</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">&quot;store&quot;</span>, <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.$store.state))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，它成了，百度大法好啊</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuex固化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js一些实用方法</title>
      <link href="/2022/03/03/js%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/03/js%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="采用合理的数据处理算法"><a href="#采用合理的数据处理算法" class="headerlink" title="采用合理的数据处理算法"></a>采用合理的数据处理算法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组转树形结构,时间复杂度O(n)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>list 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>idKey 元素id键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>parIdKey 元素父id键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>parId 第一级根节点的父id值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">listToTree</span> (<span class="params">list,idKey,parIdKey,parId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> len = list.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建map</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)</span></span><br><span class="line">        map[list[i][idKey]] = list[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建树形数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> itemParId = list[i][parIdKey];</span><br><span class="line">        <span class="comment">// 顶级节点</span></span><br><span class="line">        <span class="keyword">if</span>(itemParId === parId) &#123;</span><br><span class="line">            result.push(list[i]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 孤儿节点，舍弃(不存在其父节点)</span></span><br><span class="line">        <span class="keyword">if</span>(!map[itemParId])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）</span></span><br><span class="line">        <span class="keyword">if</span>(map[itemParId].children) &#123;</span><br><span class="line">            map[itemParId].children.push(list[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map[itemParId].children = [list[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判断一个json字符串"><a href="#判断一个json字符串" class="headerlink" title="判断一个json字符串"></a>判断一个json字符串</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&#123;&#x27;   retmsg&#x27;:&#x27;success   &#x27;,\n&#x27;  trans_date&#x27;:&#x27;   20170906&#x27;&#125;&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//&quot;&#123;&#x27;   retmsg&#x27;:&#x27;success   &#x27;,</span></span><br><span class="line"><span class="comment">//&#x27;  trans_date&#x27;:&#x27;   20170906&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>去掉空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = str.replace(<span class="regexp">/\ +/g</span>,<span class="string">&quot;&quot;</span>);   </span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//&quot;&#123;&#x27;retmsg&#x27;:&#x27;success&#x27;,</span></span><br><span class="line"><span class="comment">//&#x27;trans_date&#x27;:&#x27;20170906&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>去掉回车换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = str.replace(<span class="regexp">/[\r\n]/g</span>,<span class="string">&quot;&quot;</span>);        </span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//&quot;&#123;&#x27;retmsg&#x27;:&#x27;success&#x27;,&#x27;trans_date&#x27;:&#x27;20170906&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>判断是否json字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">isJSON (str) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(str)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES7~ES12知识点总结</title>
      <link href="/2022/02/23/ES7-ES12%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2022/02/23/ES7-ES12%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><h5 id="解构赋值-重命名"><a href="#解构赋值-重命名" class="headerlink" title="解构赋值+重命名"></a>解构赋值+重命名</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:&#123;<span class="attr">b</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;a&#125; = obj; <span class="comment">//传统解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">a</span>:&#123;&#123;b&#125;&#125; = obj;<span class="comment">//连续解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">a</span>:&#123;<span class="attr">b</span>:value&#125;&#125; = obj;<span class="comment">//连续解构赋值+重命名</span></span><br></pre></td></tr></table></figure><h4 id="ES2017-ES8"><a href="#ES2017-ES8" class="headerlink" title="ES2017(ES8)"></a>ES2017(ES8)</h4><h5 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h5><p>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">188</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// [ &#x27;jimmy&#x27;, 18, 188 ]</span></span><br></pre></td></tr></table></figure><h5 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h5><p>Object.entries() 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值对数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">188</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [ [ &#x27;name&#x27;, &#x27;jimmy&#x27; ], [ &#x27;age&#x27;, 18 ], [ &#x27;height&#x27;, 188 ] ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])); <span class="comment">// [ [ &#x27;0&#x27;, 1 ], [ &#x27;1&#x27;, 2 ], [ &#x27;2&#x27;, 3 ] ]</span></span><br></pre></td></tr></table></figure><h5 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h5><p>Object.getOwnPropertyDescriptors() 方法用来获取一个对象的所有自身属性的描述符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj);</span><br><span class="line"><span class="built_in">console</span>.log(desc);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;jimmy&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">   <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">   <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面打印结果中的</p><ul><li>value表示当前对象的默认值</li><li>writable表示对象属性是否可以修改</li><li>enumerable表示当前这个属性是否可以出现在对象的枚举属性中</li><li>configurable表示当前对象的属性能否用delete删除</li></ul><p>那这些对象的属性我们怎么设置和修改他们呢，我们可以使用es5的 Object.defineProperty()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">34</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: &#x27;jimmy&#x27;, age: 34 &#125;</span></span><br></pre></td></tr></table></figure><p>接下来我们演示下，一些属性设置为false的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: &#x27;jimmy&#x27; &#125;</span></span><br><span class="line">obj.name = <span class="string">&quot;chimmy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: &#x27;jimmy&#x27; &#125;</span></span><br><span class="line"><span class="keyword">delete</span> obj.name</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: &#x27;jimmy&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>我们可以看到设置 <strong>writable: false</strong>和<strong>configurable: false</strong>时，对象的name对象的值不能改变和不能被删除，打印出来还是原来的对象。</p><p><strong>设置enumerable为false时</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; &#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); <span class="comment">// &quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当设置<strong>enumerable: false</strong>时，表示对象的属性不可被枚举，这时打印对象为空，遍历对象的键也为空。</p><h5 id="String-prototype-padStart"><a href="#String-prototype-padStart" class="headerlink" title="String.prototype.padStart"></a>String.prototype.padStart</h5><p>把指定字符串填充到字符串头部，返回新字符串。</p><p><strong>语法</strong></p><p>str.padStart(targetLength [, padString])</p><ul><li>targetLength</li></ul><p>当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</p><ul><li>padString 可选</li></ul><p>填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 “ “</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>);         <span class="comment">// &quot;       abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&quot;foo&quot;</span>);  <span class="comment">// &quot;foofoofabc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">6</span>,<span class="string">&quot;123465&quot;</span>); <span class="comment">// &quot;123abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">8</span>, <span class="string">&quot;0&quot;</span>);     <span class="comment">// &quot;00000abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">1</span>);          <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><p>日期格式化：yyyy-mm-dd的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> year = now.getFullYear()</span><br><span class="line"><span class="comment">// 月份和日期 如果是一位前面给它填充一个0</span></span><br><span class="line"><span class="keyword">const</span> month = (now.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> day = (now.getDate()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(year, month, day)</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span>`</span> ) <span class="comment">//输入今天的日期 2021-12-31</span></span><br></pre></td></tr></table></figure><p>数字替换(手机号，银行卡号等）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tel = <span class="string">&#x27;18781268679&#x27;</span></span><br><span class="line"><span class="keyword">const</span> newTel = tel.slice(-<span class="number">4</span>).padStart(tel.length, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(newTel) <span class="comment">// *******5678</span></span><br></pre></td></tr></table></figure><h5 id="String-prototype-padEnd"><a href="#String-prototype-padEnd" class="headerlink" title="String.prototype.padEnd"></a>String.prototype.padEnd</h5><p>把指定字符串填充到字符串尾部，返回新字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padEnd(<span class="number">10</span>);          <span class="comment">// &quot;abc       &quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padEnd(<span class="number">10</span>, <span class="string">&quot;foo&quot;</span>);   <span class="comment">// &quot;abcfoofoof&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padEnd(<span class="number">6</span>, <span class="string">&quot;123456&quot;</span>); <span class="comment">// &quot;abc123&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padEnd(<span class="number">1</span>);           <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><p>在JS前端我们处理时间戳的时候单位是ms毫秒，但是，后端同学返回的时间戳则不一样是毫秒，可能只有10位，以s秒为单位。所以，我们在前端处理这个时间戳的时候，保险起见，要先做一个13位的补全，保证单位是毫秒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) <span class="comment">// 时间戳 13位的</span></span><br><span class="line">timestamp = +<span class="built_in">String</span>(timestamp).padEnd(<span class="number">13</span>, <span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="尾逗号-Trailing-commas"><a href="#尾逗号-Trailing-commas" class="headerlink" title="尾逗号 Trailing commas"></a>尾逗号 Trailing commas</h5><p>ES8 允许函数的最后一个参数有尾逗号（Trailing comma）。此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clownsEverywhere</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    param1,</span></span></span><br><span class="line"><span class="params"><span class="function">    param2</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clownsEverywhere(</span><br><span class="line">    <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面代码中，如果在param2或bar后面加一个逗号，就会报错。</p><p>如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数clownsEverywhere添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接可以加上一个逗号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clownsEverywhere</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    param1,</span></span></span><br><span class="line"><span class="params"><span class="function">    param2,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clownsEverywhere(</span><br><span class="line">    <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。</p><h5 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h5><p>详情见<a href="https://binstar-hb.github.io/hb-myblog.github.io/tags/async-await/">async/await</a></p><p><strong>async/await的缺陷</strong></p><p>了解Async/await是非常有用的，但还有一些缺点需要考虑。</p><p>Async/await 让你的代码看起来是同步的，在某种程度上，也使得它的行为更加地同步。 await 关键字会阻塞其后的代码，直到promise完成，就像执行同步操作一样。它确实可以允许其他任务在此期间继续运行，但您自己的代码被阻塞。</p><p>这意味着您的代码可能会因为大量await的promises相继发生而变慢。每个await都会等待前一个完成，而你实际想要的是所有的这些promises同时开始处理（就像我们没有使用async/await时那样）。</p><p>有一种模式可以缓解这个问题——通过将 Promise 对象存储在变量中来同时开始它们，然后等待它们全部执行完毕。</p><h4 id="ES2018-ES9"><a href="#ES2018-ES9" class="headerlink" title="ES2018(ES9)"></a>ES2018(ES9)</h4><h5 id="Object-Rest-amp-Spread"><a href="#Object-Rest-amp-Spread" class="headerlink" title="Object Rest &amp; Spread"></a>Object Rest &amp; Spread</h5><p>在 ES9 新增 Object 的 Rest &amp; Spread 方法，直接看下示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  ...input,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output) <span class="comment">// &#123;a: 1, b: 2, c: 4&#125;</span></span><br></pre></td></tr></table></figure><p>这块代码展示了 spread 语法，可以把 input 对象的数据都拓展到 output 对象，这个功能很实用。需要注意的是，<strong>如果存在相同的属性名，只有最后一个会生效</strong>。</p><p><strong>注意点</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: &#123; <span class="attr">y</span>: <span class="number">10</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> copy1 = &#123; ...obj &#125;;</span><br><span class="line"><span class="keyword">const</span> copy2 = &#123; ...obj &#125;;</span><br><span class="line">obj.x.y = <span class="string">&quot;jimmy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(copy1, copy2); <span class="comment">// x: &#123;y: &quot;jimmy&quot;&#125; x: &#123;y: &quot;jimmy&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(copy1.x === copy2.x); <span class="comment">// → true</span></span><br></pre></td></tr></table></figure><p>如果属性的值是一个对象的话，该对象的引用会被拷贝，而不是生成一个新的对象。</p><p>我们再来看下 Object rest 的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...rest &#125; = input</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, rest) <span class="comment">// 1 &#123;b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><p>当对象 key-value 不确定的时候，把必选的 key 赋值给变量，用一个变量收敛其他可选的 key 数据，这在之前是做不到的。注意，<strong>rest 属性必须始终出现在对象的末尾</strong>，否则将抛出错误。</p><h5 id="for-await-of"><a href="#for-await-of" class="headerlink" title="for await of"></a>for await of</h5><p>异步迭代器(for-await-of)：循环等待每个Promise对象变为resolved状态才进入下一步。</p><p>我们知道 for…of 是同步运行的，看如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TimeOut</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [TimeOut(<span class="number">2000</span>), TimeOut(<span class="number">1000</span>), TimeOut(<span class="number">3000</span>)]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now(),item.then(<span class="built_in">console</span>.log))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>上面打印结果如下图</p><p><img src="https://ae05.alicdn.com/kf/H0e581f3686424e91ae9b0aed689a3180K.png" alt="image.png"></p><p>上述代码证实了 for of 方法不能遍历异步迭代器，得到的结果并不是我们所期待的，于是 for await of 就粉墨登场啦！</p><p><strong>ES9 中可以用 for…await…of 的语法来操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TimeOut</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [TimeOut(<span class="number">2000</span>), TimeOut(<span class="number">1000</span>), TimeOut(<span class="number">3000</span>)]</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now(), item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">// 1560092345730 2000</span></span><br><span class="line"><span class="comment">// 1560092345730 1000</span></span><br><span class="line"><span class="comment">// 1560092346336 3000</span></span><br></pre></td></tr></table></figure><p>for await of 环等待每个Promise对象变为resolved状态才进入下一步。所有打印的结果为 2000，1000，3000</p><h5 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h5><p>Promise.prototype.finally() 方法返回一个Promise，在promise执行结束时，无论结果是fulfilled或者是rejected，在执行then()和catch()后，都会执行finally指定的回调函数。这为指定执行完promise后，无论结果是fulfilled还是rejected都需要执行的代码提供了一种方式，避免同样的语句需要在then()和catch()中各写一次的情况。</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        <span class="comment">// reject(&#x27;fail&#x27;)</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;).finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong></p><p>loading关闭</p><p>需要每次发送请求，都会有loading提示，请求发送完毕，就需要关闭loading提示框，不然界面就无法被点击。不管请求成功或是失败，这个loading都需要关闭掉，这时把关闭loading的代码写在finally里再合适不过了</p><h5 id="String-扩展"><a href="#String-扩展" class="headerlink" title="String 扩展"></a>String 扩展</h5><p>放松对标签模板里字符串转义的限制, 遇到不合法的字符串转义会返回undefined，并且从raw上可获取原字符串。</p><p>ES9开始，模板字符串允许嵌套支持常见转义序列，移除对ECMAScript在带标签的模版字符串中转义序列的语法限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在标签函数中使用</span></span><br><span class="line"><span class="comment">// unicode字符\u&#123;61&#125; 对应的值为 a</span></span><br><span class="line"><span class="comment">// unicode字符\u&#123;62&#125; 对应的值为 b</span></span><br><span class="line"><span class="comment">// \unicode 是一个无效的unicode字符</span></span><br><span class="line">foo <span class="string">`\u&#123;61&#125; and \u&#123;62&#125;`</span></span><br><span class="line">foo <span class="string">`\u&#123;61&#125; and \unicode`</span></span><br></pre></td></tr></table></figure><p><img src="https://ae05.alicdn.com/kf/Hf0feae4c467145b68218579fbfb0e8a7f.png" alt="image.png"></p><p><strong>注意点</strong></p><p>在模板字符串中，如果输入无效的unicode字符，还是会报错。只有在便签模板中 从es9开始才不会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">`\u&#123;61&#125; and \unicode`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string); <span class="comment">// Uncaught SyntaxError: Invalid Unicode escape sequence</span></span><br></pre></td></tr></table></figure><h4 id="ES2019-ES10"><a href="#ES2019-ES10" class="headerlink" title="ES2019(ES10)"></a>ES2019(ES10)</h4><h5 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h5><p>方法 Object.fromEntries() 把键值对列表转换为一个对象，这个方法是和 Object.entries() 相对的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries([</span><br><span class="line">    [<span class="string">&#x27;foo&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="string">&#x27;bar&#x27;</span>, <span class="number">2</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123;foo: 1, bar: 2&#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例1：Object 转换操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jimmy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> entries = <span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="built_in">console</span>.log(entries)</span><br><span class="line"><span class="comment">// [Array(2), Array(2)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES10</span></span><br><span class="line"><span class="keyword">const</span> fromEntries = <span class="built_in">Object</span>.fromEntries(entries)</span><br><span class="line"><span class="built_in">console</span>.log(fromEntries)</span><br><span class="line"><span class="comment">// &#123;name: &quot;jimmy&quot;, age: 18&#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例2：Map 转 Object</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jimmy&#x27;</span>)</span><br><span class="line">map.set(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(map) <span class="comment">// &#123;&#x27;name&#x27; =&gt; &#x27;jimmy&#x27;, &#x27;age&#x27; =&gt; 18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(map)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="comment">// &#123;name: &quot;jimmy&quot;, age: 18&#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例3：过滤</strong></p><p>course表示所有课程，想请求课程分数大于80的课程组成的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> course = &#123;</span><br><span class="line">    <span class="attr">math</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">english</span>: <span class="number">85</span>,</span><br><span class="line">    <span class="attr">chinese</span>: <span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="built_in">Object</span>.entries(course).filter(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> val &gt; <span class="number">80</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// [ [ &#x27;english&#x27;, 85 ], [ &#x27;chinese&#x27;, 90 ] ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.fromEntries(res)) <span class="comment">// &#123; english: 85, chinese: 90 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例4：url的search参数转换</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let url = &quot;https://www.baidu.com?name=jimmy&amp;age=18&amp;height=1.88&quot;</span></span><br><span class="line"><span class="comment">// queryString 为 window.location.search</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="string">&quot;?name=jimmy&amp;age=18&amp;height=1.88&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> queryParams = <span class="keyword">new</span> URLSearchParams(queryString);</span><br><span class="line"><span class="keyword">const</span> paramObj = <span class="built_in">Object</span>.fromEntries(queryParams);</span><br><span class="line"><span class="built_in">console</span>.log(paramObj); <span class="comment">// &#123; name: &#x27;jimmy&#x27;, age: &#x27;18&#x27;, height: &#x27;1.88&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h5 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h5><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = arr.flat([depth])</span><br></pre></td></tr></table></figure><ul><li>depth 可选</li></ul><p>指定要提取嵌套数组的结构深度，默认值为 1。</p><p><strong>示例</strong></p><p>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.flat());  <span class="comment">//  [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [[[<span class="number">3</span>, <span class="number">4</span>]]]];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat(<span class="number">2</span>));  <span class="comment">//  [0, 1, 2, [3, 4]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]];</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `flat()` 方法会移除数组中的空项:</span></span><br><span class="line"><span class="keyword">var</span> arr5 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr5.flat(); <span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h5 id="Array-prototype-flatMap"><a href="#Array-prototype-flatMap" class="headerlink" title="Array.prototype.flatMap()"></a>Array.prototype.flatMap()</h5><p>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。从方法的名字上也可以看出来它包含两部分功能一个是 map，一个是 flat（深度为1）。</p><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.flatMap(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回新数组的元素</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure><ul><li><font color="blue">callback</font></li></ul><p>可以生成一个新数组中的元素的函数，可以传入三个参数</p><p><font color="blue">currentValue</font></p><p>当前正在数组中处理的元素</p><p><font color="blue">index</font></p><p>可选 数组中正在处理的当前元素的索引。</p><p><font color="blue">array</font></p><p>可选 被调用的 map 数组</p><ul><li><font color="blue">thisArg</font>可选</li></ul><p>执行 callback 函数时 使用的this 值。</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">numbers.map(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>]) <span class="comment">// [[2], [4], [6]]</span></span><br><span class="line">numbers.flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>]) <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>这个示例可以简单对比下 map 和 flatMap 的区别。当然还可以看下下面的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;今天天气不错&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;早上好&#x27;</span>]</span><br><span class="line">arr.map(<span class="function"><span class="params">s</span> =&gt;</span> s.split(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment">// [[&quot;今&quot;, &quot;天&quot;, &quot;天&quot;, &quot;气&quot;, &quot;不&quot;, &quot;错&quot;],[&quot;&quot;],[&quot;早&quot;, &quot;上&quot;, &quot;好&quot;]]</span></span><br><span class="line">arr.flatMap(<span class="function"><span class="params">s</span> =&gt;</span> s.split(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment">// [&quot;今&quot;, &quot;天&quot;, &quot;天&quot;, &quot;气&quot;, &quot;不&quot;, &quot;错&quot;, &quot;&quot;, &quot;早&quot;, &quot;上&quot;, &quot;好&quot;]</span></span><br></pre></td></tr></table></figure><p>flatMap 方法与 map 方法和深度depth为1的 flat 几乎相同。</p><h5 id="String-prototype-trimStart"><a href="#String-prototype-trimStart" class="headerlink" title="String.prototype.trimStart()"></a>String.prototype.trimStart()</h5><p>trimStart() 方法从字符串的开头删除空格，trimLeft()是此方法的别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;   foo  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">// 8</span></span><br><span class="line">str = str.trimStart() <span class="comment">// 或str.trimLeft()</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h5 id="String-prototype-trimEnd"><a href="#String-prototype-trimEnd" class="headerlink" title="String.prototype.trimEnd()"></a>String.prototype.trimEnd()</h5><p>trimEnd() 方法从一个字符串的右端移除空白字符，trimRight 是 trimEnd 的别名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;   foo  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">// 8</span></span><br><span class="line">str = str.trimEnd() <span class="comment">// 或str.trimRight()</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h5 id="可选的Catch-Binding"><a href="#可选的Catch-Binding" class="headerlink" title="可选的Catch Binding"></a>可选的Catch Binding</h5><p>在 ES10 之前我们都是这样捕获异常的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// tryCode</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// catchCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里 err 是必须的参数，在 ES10 可以省略这个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Foobar&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;Bar&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><blockquote><p>验证参数是否为json格式</p></blockquote><p>这个需求我们只需要返回true或false，并不关心catch的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validJSON = <span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">JSON</span>.parse(json)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h5><p>我们知道，Symbol 的描述只被存储在内部的 Description ，没有直接对外暴露，我们只有调用 Symbol 的 toString() 时才可以读取这个属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="built_in">Symbol</span>(<span class="string">&#x27;es&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(name.toString()) <span class="comment">// Symbol(es)</span></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// Symbol(es)</span></span><br><span class="line"><span class="built_in">console</span>.log(name === <span class="string">&#x27;Symbol(es)&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(name.toString() === <span class="string">&#x27;Symbol(es)&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>现在可以通过 description 方法获取 Symbol 的描述:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="built_in">Symbol</span>(<span class="string">&#x27;es&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(name.description) <span class="comment">// es</span></span><br><span class="line">name.description = <span class="string">&quot;es2&quot;</span> <span class="comment">// 只读属性 并不能修改描述符</span></span><br><span class="line"><span class="built_in">console</span>.log(name.description === <span class="string">&#x27;es&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 如果没有描述符 输入undefined</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="built_in">console</span>.log(s2.description) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h5 id="JSON-stringify-增强能力"><a href="#JSON-stringify-增强能力" class="headerlink" title="JSON.stringify() 增强能力"></a>JSON.stringify() 增强能力</h5><p>JSON.stringify 在 ES10 修复了对于一些超出范围的 Unicode 展示错误的问题。因为 JSON 都是被编码成 UTF-8，所以遇到 0xD800–0xDFFF 之内的字符会因为无法编码成 UTF-8 进而导致显示错误。在 ES10 它会用转义字符的方式来处理这部分字符而非编码的方式，这样就会正常显示了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \uD83D\uDE0E  emoji 多字节的一个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="string">&#x27;\uD83D\uDE0E&#x27;</span>)) <span class="comment">// 打印出笑脸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们只去其中的一部分  \uD83D 这其实是个无效的字符串</span></span><br><span class="line"><span class="comment">// 之前的版本 ，这些字符将替换为特殊字符，而现在将未配对的代理代码点表示为JSON转义序列</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="string">&#x27;\uD83D&#x27;</span>)) <span class="comment">// &quot;\ud83d&quot;</span></span><br></pre></td></tr></table></figure><h5 id="修订-Function-prototype-toString"><a href="#修订-Function-prototype-toString" class="headerlink" title="修订 Function.prototype.toString()"></a>修订 Function.prototype.toString()</h5><p>以前函数的toString方法来自Object.prototype.toString(),现在的 Function.prototype.toString() 方法返回一个表示当前函数源代码的字符串。以前只会返回这个函数，不包含注释、空格等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// es10新特性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;imooc&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.toString())</span><br><span class="line"><span class="comment">// 打印如下</span></span><br><span class="line"><span class="comment">// function foo() &#123;</span></span><br><span class="line"><span class="comment">//  // es10新特性</span></span><br><span class="line"><span class="comment">//  console.log(&quot;imooc&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="ES2020-ES11"><a href="#ES2020-ES11" class="headerlink" title="ES2020(ES11)"></a>ES2020(ES11)</h4><h5 id="空值合并运算符（Nullish-coalescing-Operator）"><a href="#空值合并运算符（Nullish-coalescing-Operator）" class="headerlink" title="空值合并运算符（Nullish coalescing Operator）"></a>空值合并运算符（Nullish coalescing Operator）</h5><p>空值合并操作符（ ?? ）是一个逻辑操作符，当左侧的操作数为 null或者undefined时，返回其右侧操作数，否则返回左侧操作数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="literal">undefined</span> ?? <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="literal">null</span> ?? <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(bar) <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>与逻辑或操作符（||）不同，逻辑或操作符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 || 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如’’,0,NaN,false）时。见下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&quot;&quot;</span> ?? <span class="string">&#x27;default string&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> foo2 = <span class="string">&quot;&quot;</span> || <span class="string">&#x27;default string&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(foo2); <span class="comment">// &quot;default string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = <span class="number">0</span> ?? <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> baz2 = <span class="number">0</span> || <span class="number">42</span>;</span><br><span class="line"><span class="built_in">console</span>.log(baz); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(baz2); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><p>将 ?? 直接与 AND（&amp;&amp;）和 OR（||）操作符组合使用是不可取的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> || <span class="literal">undefined</span> ?? <span class="string">&quot;foo&quot;</span>; <span class="comment">// 抛出 SyntaxError</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">undefined</span> ?? <span class="string">&quot;foo&quot;</span>; <span class="comment">// 抛出 SyntaxError</span></span><br></pre></td></tr></table></figure><h5 id="可选链-Optional-chaining"><a href="#可选链-Optional-chaining" class="headerlink" title="可选链 Optional chaining"></a>可选链 Optional chaining</h5><p><strong>可选链</strong>操作符( ?. )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为 <font color="blue">null</font> 或者 <font color="blue">undefined</font> 的情况下不会引起错误，该表达式短路返回值是 <font color="blue">undefined</font>。与函数调用一起使用时，如果给定的函数不存在，则返回 <font color="blue">undefined</font>。</p><p>当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链操作符也是很有帮助的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">street</span>: <span class="string">&#x27;xx街道&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">getNum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;80号&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前的语法中，想获取到深层属性或方法，不得不做前置校验，否则很容易命中 Uncaught TypeError: Cannot read property… 这种错误，这极有可能让你整个应用挂掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> street = user &amp;&amp; user.address &amp;&amp; user.address.street</span><br><span class="line"><span class="keyword">const</span> num = user &amp;&amp; user.address &amp;&amp; user.address.getNum &amp;&amp; user.address.getNum()</span><br><span class="line"><span class="built_in">console</span>.log(street, num)</span><br></pre></td></tr></table></figure><p>用了 Optional Chaining ，上面代码会变成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> street2 = user?.address?.street</span><br><span class="line"><span class="keyword">const</span> num2 = user?.address?.getNum?.()</span><br><span class="line"><span class="built_in">console</span>.log(street2, num2)</span><br></pre></td></tr></table></figure><p>可选链中的 ? 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。</p><p><strong>常见用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象中使用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> property = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> name = obj?.name;</span><br><span class="line"><span class="keyword">let</span> age = obj?.age;</span><br><span class="line"><span class="keyword">let</span> ages = obj?.[property];</span><br><span class="line"><span class="keyword">let</span> sex = obj?.sex;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// jimmy</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(ages); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(sex); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组中使用</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arrayItem = arr?.[<span class="number">42</span>]; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数中使用</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">func</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;I am func&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj?.func(); <span class="comment">// I am func</span></span><br></pre></td></tr></table></figure><p><strong>与空值合并操作符一起使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> customer = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">  <span class="attr">details</span>: &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> customerCity = customer?.city ?? <span class="string">&quot;成都&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(customerCity); <span class="comment">// &quot;成都&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><blockquote><p>可选链不能用于赋值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123;&#125;;</span><br><span class="line">object?.property = <span class="number">1</span>; <span class="comment">// Uncaught SyntaxError: Invalid left-hand side in assignment</span></span><br></pre></td></tr></table></figure><h5 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h5><p>在以前，从不同的 JavaScript 环境中获取全局对象需要不同的语句。在 Web 中，可以通过 window、self 取到全局对象，在 Node.js 中，它们都无法获取，必须使用 global。</p><p>在松散模式下，可以在函数中返回 this 来获取全局对象，但是在严格模式和模块环境下，this 会返回 undefined。</p><p>以前想要获取全局对象，可通过一个全局函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getGlobal = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">global</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">global</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;无法找到全局对象&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> globals = getGlobal()</span><br><span class="line"><span class="built_in">console</span>.log(globals)</span><br></pre></td></tr></table></figure><p>现在globalThis 提供了一个标准的方式来获取不同环境下的全局 this 对象（也就是全局对象自身）。不像 window 或者 self 这些属性，它确保可以在有无窗口的各种环境下正常工作。所以，你可以安心的使用 globalThis，不必担心它的运行环境。</p><p>为便于记忆，你只需要记住，全局作用域中的 this 就是globalThis。以后就用globalThis就行了。</p><h5 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h5><p>BigInt 是一种内置对象，它提供了一种方法来表示大于 2的53次方 - 1 的整数。这原本是 Javascript中可以用 Number 表示的最大数字。BigInt 可以表示任意大的整数。</p><p><strong>使用 BigInt 有两种方式:</strong></p><ul><li><strong>方式一：数字后面增加n</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigInt = <span class="number">9007199254740993n</span></span><br><span class="line"><span class="built_in">console</span>.log(bigInt)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> bigInt) <span class="comment">// bigint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `BigInt` 和 [`Number`]不是严格相等的，但是宽松相等的。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1n</span> == <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1n</span> === <span class="number">1</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `Number` 和 `BigInt` 可以进行比较。</span></span><br><span class="line"><span class="number">1n</span> &lt; <span class="number">2</span> <span class="comment">// ↪ true</span></span><br><span class="line"><span class="number">2n</span> &gt; <span class="number">1</span> <span class="comment">// ↪ true</span></span><br></pre></td></tr></table></figure><ul><li><strong>方式二：使用 BigInt 函数</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigIntNum = <span class="built_in">BigInt</span>(<span class="number">9007199254740993n</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bigIntNum)</span><br></pre></td></tr></table></figure><p><strong>运算</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="built_in">BigInt</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> a = number + <span class="number">2n</span>; <span class="comment">// 4n</span></span><br><span class="line"><span class="keyword">let</span> b = number * <span class="number">10n</span>; <span class="comment">// 20n</span></span><br><span class="line"><span class="keyword">let</span> c = number - <span class="number">10n</span>; <span class="comment">// -8n</span></span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><p>BigInt不能用于 [Math] 对象中的方法；不能和任何 [Number] 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 BigInt 变量在转换成 [Number] 变量时可能会丢失精度。</p><h5 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll()"></a>String.prototype.matchAll()</h5><p><strong><font color="blue">matchAll()</font></strong> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regexp = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;test1test2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...str.matchAll(regexp)];</span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="number">0</span>]);  <span class="comment">// [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="number">1</span>]); <span class="comment">// [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;]</span></span><br></pre></td></tr></table></figure><h5 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h5><p>我们都知道 Promise.all() 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入reject 状态。</p><p>场景：现在页面上有三个请求，分别请求不同的数据，如果一个接口服务异常，整个都是失败的，都无法渲染出数据</p><p>我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态，这就是Promise.allSettled的作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">      <span class="comment">//   reject(&quot;error promise1 &quot;);</span></span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">      <span class="comment">//   reject(&quot;error promise2 &quot;);</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//   resolve(&quot;promise3&quot;);</span></span><br><span class="line">      reject(<span class="string">&quot;error promise3 &quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Promise.all 会走到catch里面</span></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1(), promise2(), promise3()])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>, error); <span class="comment">// error promise3</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.allSettled 不管有没有错误，三个的状态都会返回</span></span><br><span class="line"><span class="built_in">Promise</span>.allSettled([promise1(), promise2(), promise3()])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="comment">// [</span></span><br><span class="line">    <span class="comment">//    &#123;status: &#x27;fulfilled&#x27;, value: &#x27;promise1&#x27;&#125;,</span></span><br><span class="line">    <span class="comment">//    &#123;status: &#x27;fulfilled&#x27;,value: &#x27;promise2&#x27;&#125;,</span></span><br><span class="line">    <span class="comment">//    &#123;status: &#x27;rejected&#x27;, reason: &#x27;error promise3 &#x27;&#125;</span></span><br><span class="line">    <span class="comment">// ]</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h5 id="Dynamic-Import（按需-import）"><a href="#Dynamic-Import（按需-import）" class="headerlink" title="Dynamic Import（按需 import）"></a>Dynamic Import（按需 import）</h5><p>import()可以在需要的时候，再加载某个模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./dialogBox.js&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">dialogBox</span> =&gt;</span> &#123;</span><br><span class="line">    dialogBox.open();</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* Error handling */</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，import()方法放在click事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。</p><h4 id="ES2021-ES12"><a href="#ES2021-ES12" class="headerlink" title="ES2021(ES12)"></a>ES2021(ES12)</h4><h5 id="逻辑运算符和赋值表达式（-amp-amp-，-，-）"><a href="#逻辑运算符和赋值表达式（-amp-amp-，-，-）" class="headerlink" title="逻辑运算符和赋值表达式（&amp;&amp;=，||=，??=）"></a>逻辑运算符和赋值表达式（&amp;&amp;=，||=，??=）</h5><h5 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;="></a>&amp;&amp;=</h5><p>逻辑与赋值 x &amp;&amp;= y等效于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &amp;&amp; (x = y);</span><br></pre></td></tr></table></figure><p>上面的意思是，当x为真时，x=y。具体请看下面的示例:</p><h5 id><a href="#" class="headerlink" title="||="></a>||=</h5><p>逻辑或赋值（x ||= y）运算仅在 x 为false时赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">duration</span>: <span class="number">50</span>, <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">a.duration ||= <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.duration); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line">a.title ||= <span class="string">&#x27;title is empty.&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.title); <span class="comment">// &quot;title is empty&quot;</span></span><br></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title="??="></a>??=</h5><p>逻辑空赋值运算符 (x ??= y) 仅在 x 是 nullish[3] (null 或 undefined) 时对其赋值。</p><p>x ??= y 等价于：x ?? (x = y);</p><p><strong>示例一</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">duration</span>: <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">a.duration ??= <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.duration); <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line">a.speed ??= <span class="number">25</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.speed); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><p><strong>示例二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options.duration ??= <span class="number">100</span>;</span><br><span class="line">  options.speed ??= <span class="number">25</span>;</span><br><span class="line">  <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config(&#123; <span class="attr">duration</span>: <span class="number">125</span> &#125;); <span class="comment">// &#123; duration: 125, speed: 25 &#125;</span></span><br><span class="line">config(&#123;&#125;); <span class="comment">// &#123; duration: 100, speed: 25 &#125;</span></span><br></pre></td></tr></table></figure><h5 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll()"></a>String.prototype.replaceAll()</h5><p><strong>介绍</strong></p><p>replaceAll() 方法返回一个新字符串，新字符串中所有满足 pattern 的部分都会被replacement 替换。pattern可以是一个字符串或一个RegExp，replacement可以是一个字符串或一个在每次匹配被调用的函数。</p><p>原始字符串保持不变。</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.replaceAll(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;.&#x27;</span>); <span class="comment">// &#x27;aa..cc&#x27;</span></span><br></pre></td></tr></table></figure><p>使用正则表达式搜索值时，它必须是全局的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.replaceAll(<span class="regexp">/b/</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="built_in">TypeError</span>: replaceAll must be called <span class="keyword">with</span> a <span class="built_in">global</span> <span class="built_in">RegExp</span></span><br></pre></td></tr></table></figure><p>这将可以正常运行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.replaceAll(<span class="regexp">/b/g</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="string">&quot;aa..cc&quot;</span></span><br></pre></td></tr></table></figure><h5 id="数字分隔符"><a href="#数字分隔符" class="headerlink" title="数字分隔符"></a>数字分隔符</h5><p>欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，1000可以写作1,000。</p><p>ES2021中允许 JavaScript 的数值使用下划线（_）作为分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> budget = <span class="number">1_000_000_000_000</span>;</span><br><span class="line">budget === <span class="number">10</span> ** <span class="number">12</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这个数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123_00</span> === <span class="number">12_300</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345_00</span> === <span class="number">123_4500</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">12345_00</span> === <span class="number">1_234_500</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>小数和科学计数法也可以使用数值分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小数</span></span><br><span class="line"><span class="number">0.000_001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 科学计数法</span></span><br><span class="line"><span class="number">1e10_000</span></span><br></pre></td></tr></table></figure><p>数值分隔符有几个使用注意点。</p><ul><li>不能放在数值的最前面（leading）或最后面（trailing）。</li><li>不能两个或两个以上的分隔符连在一起。</li><li>小数点的前后不能有分隔符。</li><li>科学计数法里面，表示指数的e或E前后不能有分隔符。</li></ul><h5 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h5><p>方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">      <span class="comment">//  reject(&quot;error promise1 &quot;);</span></span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">      <span class="comment">// reject(&quot;error promise2 &quot;);</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;promise3&quot;</span>);</span><br><span class="line">      <span class="comment">// reject(&quot;error promise3 &quot;);</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Promise</span>.any([promise1(), promise2(), promise3()])</span><br><span class="line">  .then(<span class="function">(<span class="params">first</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 只要有一个请求成功 就会返回第一个请求成功的</span></span><br><span class="line">    <span class="built_in">console</span>.log(first); <span class="comment">// 会返回promise2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 所有三个全部请求失败 才会来到这里</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。</p><p>Promise.any()跟Promise.race()方法很像，只有一点不同，就是Promise.any()不会因为某个 Promise 变成rejected状态而结束，必须等到所有参数 Promise 变成rejected状态才会结束。</p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6~ES12知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用postcss</title>
      <link href="/2022/02/22/vue%E4%B8%AD%E4%BD%BF%E7%94%A8postcss/"/>
      <url>/2022/02/22/vue%E4%B8%AD%E4%BD%BF%E7%94%A8postcss/</url>
      
        <content type="html"><![CDATA[<h4 id="一、vue2-x中使用postcss"><a href="#一、vue2-x中使用postcss" class="headerlink" title="一、vue2.x中使用postcss"></a>一、vue2.x中使用postcss</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-plugin-px2rem -D</span><br></pre></td></tr></table></figure><h5 id="vue-config-js配置项"><a href="#vue-config-js配置项" class="headerlink" title="vue.config.js配置项"></a>vue.config.js配置项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">&quot;postcss-plugin-px2rem&quot;</span>)(&#123;</span><br><span class="line">            <span class="attr">rootValue</span>: <span class="number">32</span>, <span class="comment">//换算基数， 默认100  ，这样的话把根标签的字体规定为1rem为50px,这样就可以从设计稿上量出多少个px直接在代码中写多上px了。</span></span><br><span class="line">            <span class="comment">// unitPrecision: 5, //允许REM单位增长到的十进制数字。</span></span><br><span class="line">            <span class="comment">//propWhiteList: [],  //默认值是一个空数组，这意味着禁用白名单并启用所有属性。</span></span><br><span class="line">            <span class="comment">// propBlackList: [], //黑名单</span></span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/(node_module)/</span>, <span class="comment">//默认false，可以（reg）利用正则表达式排除某些文件夹的方法，例如/(node_module)/ 。如果想把前端UI框架内的px也转换成rem，请把此属性设为默认值</span></span><br><span class="line">            <span class="comment">// selectorBlackList: [], //要忽略并保留为px的选择器</span></span><br><span class="line">            <span class="comment">// ignoreIdentifier: false,  //（boolean/string）忽略单个属性的方法，启用ignoreidentifier后，replace将自动设置为true。</span></span><br><span class="line">            <span class="comment">// replace: true, // （布尔值）替换包含REM的规则，而不是添加回退。</span></span><br><span class="line">            mediaQuery: <span class="literal">false</span>, <span class="comment">//（布尔值）允许在媒体查询中转换px。</span></span><br><span class="line">            <span class="attr">minPixelValue</span>: <span class="number">3</span>, <span class="comment">//设置要替换的最小像素值(3px会被转rem)。 默认 0</span></span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="utils文件夹下创建rem-js"><a href="#utils文件夹下创建rem-js" class="headerlink" title="utils文件夹下创建rem.js"></a>utils文件夹下创建rem.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rem等比适配配置文件</span></span><br><span class="line"><span class="comment">// 基准大小</span></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">32</span></span><br><span class="line">    <span class="comment">// 设置 rem 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当前页面宽度相对于 1920宽的缩放比例，可根据自己需要修改。</span></span><br><span class="line">    <span class="keyword">const</span> scale = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">320</span></span><br><span class="line">        <span class="comment">// 设置页面根节点字体大小（“Math.min(scale, 2)” 指最高放大比例为2，可根据实际业务需求调整）</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement.style.fontSize = baseSize * <span class="built_in">Math</span>.min(scale, <span class="number">3</span>) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">setRem()</span><br><span class="line">    <span class="comment">// 改变窗口大小时重新设置 rem</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setRem()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="main-js配置项"><a href="#main-js配置项" class="headerlink" title="main.js配置项"></a>main.js配置项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/utils/rem.js&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="二、vue3-x中使用postcss"><a href="#二、vue3-x中使用postcss" class="headerlink" title="二、vue3.x中使用postcss"></a>二、vue3.x中使用postcss</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-pxtorem -D</span><br></pre></td></tr></table></figure><h5 id="与package-json同级目录创建postcss-config-js文件"><a href="#与package-json同级目录创建postcss-config-js文件" class="headerlink" title="与package.json同级目录创建postcss.config.js文件"></a>与package.json同级目录创建postcss.config.js文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;</span><br><span class="line">      <span class="attr">overrideBrowserslist</span>: [</span><br><span class="line">        <span class="string">&quot;Android 4.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iOS 7.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Chrome &gt; 31&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ff &gt; 31&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ie &gt;= 8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;last 10 versions&quot;</span>, <span class="comment">// 所有主流浏览器最近10版本用</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">grid</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="这里只实现了-px转rem，还要安装-amfe-flexible"><a href="#这里只实现了-px转rem，还要安装-amfe-flexible" class="headerlink" title="这里只实现了 px转rem，还要安装 amfe-flexible"></a>这里只实现了 px转rem，还要安装 amfe-flexible</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i amfe-flexible autoprefixer -D</span><br></pre></td></tr></table></figure><h5 id="main-ts配置项"><a href="#main-ts配置项" class="headerlink" title="main.ts配置项"></a>main.ts配置项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;amfe-flexible/index.js&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postcss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建vue3项目</title>
      <link href="/2022/02/22/%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/02/22/%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="一、使用vite快速创建脚手架"><a href="#一、使用vite快速创建脚手架" class="headerlink" title="一、使用vite快速创建脚手架"></a>一、使用vite快速创建脚手架</h4><p>1.使用yarn运行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">yarn命令安装</span></span><br><span class="line">yarn create @vitejs/app vue3_ts_vite_pinia</span><br></pre></td></tr></table></figure><p>2.选择vue vue-ts 完成安装</p><p><img src="https://p9.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/471ff2abc4a44ca4b221fd3a0c548b21.png?from=pc" alt="Vu3+Ts+Vite2+Pinia 搭建开发脚手架"></p><p><img src="https://p9.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/c5c25a2a2a8a4e969a66e1f962df309f?from=pc" alt="Vu3+Ts+Vite2+Pinia 搭建开发脚手架"></p><p>3.进入vue3_ts_vite_pinia项目，使用yarn命令安装依赖,依赖安装完成后，使用yarn dev启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装依赖 yarn</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动项目 yarn dev</span></span><br></pre></td></tr></table></figure><p><img src="https://p9.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/b68f21e8c80b419fa2959e1e9a331b7c?from=pc" alt="Vu3+Ts+Vite2+Pinia 搭建开发脚手架"></p><h4 id="二、路由配置（vue-router-4）"><a href="#二、路由配置（vue-router-4）" class="headerlink" title="二、路由配置（vue-router@4）"></a>二、路由配置（vue-router@4）</h4><h5 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h5><p>1.使用yarn安装vue-router@4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">yarn命令安装</span></span><br><span class="line">yarn add vue-router@4</span><br></pre></td></tr></table></figure><p>2.src文件夹下新建router文件夹,router文件夹下新建index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: RouteRecordRaw[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/index/Index.vue&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">    routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><blockquote><p>注:RouteRecordRaw为内置类型</p></blockquote><p>3.在main.ts中，引入router并注册</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line">app.use(router)</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4.在App.vue中设置路由展现出口 <router-view></router-view></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h5><p>1.路由守卫，告别next，在router/index.ts中添加全局路由守卫</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: RouteRecordRaw[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/index/Index.vue&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    <span class="attr">history</span>: createWebHistory(),</span><br><span class="line">    routes,</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pass)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">          <span class="comment">// 不再使用next()放行</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>2.组件内路由守卫</p><blockquote><p>新增组合式api可以替代原有的组件内守卫，onBeforeRouteLeave(离开当前页面路由时触发)、onBeforeRouteUpdate(路由更新时触发)</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onBeforeRouteLeave(<span class="function">(<span class="params">to,form</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter,useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> go=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">const</span> Router=useRouter()</span><br><span class="line">     <span class="keyword">const</span> Route=useRoute()</span><br><span class="line">     Router.push(&#123;</span><br><span class="line">         <span class="attr">name</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">         <span class="attr">query</span>:&#123;</span><br><span class="line">             <span class="attr">id</span>:<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="三、状态管理（Pinia配置）"><a href="#三、状态管理（Pinia配置）" class="headerlink" title="三、状态管理（Pinia配置）"></a>三、状态管理（Pinia配置）</h4><blockquote><p>Pinia 是 Vue.js 的轻量级状态管理库,也是Vue核心团队推荐的状态管理库，由于Pinia也是Vuex研发团队的产品，以及尤大大的加持，极大可能会替代Vuex，即使pinia的推广不太顺利也并不用过多担心，其许多使用方式很有可能会移植到Vuex5中。相较于Vuex,Pinia上手更简单，mutations，并且actions支持同步或异步。</p></blockquote><h5 id="基本配置-1"><a href="#基本配置-1" class="headerlink" title="基本配置"></a>基本配置</h5><p>1.使用yarn安装 pinia@next</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">yarn命令安装</span></span><br><span class="line">yarn add pinia@next</span><br></pre></td></tr></table></figure><p>2.src文件夹下新建store文件夹,store文件夹下新建main.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">nameLength</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.name.length,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">updataUser</span>(<span class="params">data: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.在main.ts中，引入createPinia</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line">app.use(createPinia())</span><br><span class="line">app.use(router)</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>1.获取state</p><ul><li>直接获取</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;userStore.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useUserStore &#125; from &quot;@/store/user.ts&quot;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>computed获取</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useUserStore &#125; from &quot;@/store/user.ts&quot;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const name=computed(()=&gt;&#123;</span><br><span class="line">    userStore.name</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结构获取，但会失去响应式，需要使用storeToRefs</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useUserStore &#125; from &quot;@/store/user.ts&quot;</span><br><span class="line">import &#123;storeToRefs&#125; from &#x27;pinia&#x27;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const name=storeToRefs(userStore)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.设置state</p><ul><li>直接修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;userStore.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;updateName&quot;&gt;修改名字&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useUserStore &#125; from &quot;@/store/user.ts&quot;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const updateName = () =&gt; &#123;</span><br><span class="line">    userStore.name = &#x27;直接修改后名字&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>$patch 修改 store 中的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;userStore.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;updateName&quot;&gt;修改名字&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useUserStore &#125; from &quot;@/store/user.ts&quot;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const updateName = () =&gt; &#123;</span><br><span class="line">    userStore.$patch(&#123;</span><br><span class="line">       name: &#x27;$patch修改后名字&#x27;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>actions 修改 store 中的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;userStore.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;updateName&quot;&gt;修改名字&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useUserStore &#125; from &quot;@/store/user.ts&quot;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const updateName = () =&gt; &#123;</span><br><span class="line">    userStore.updataUser(&#x27;actions修改后名字&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>actions中使用this修改state数据</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">nameLength</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.name.length,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">updataUser</span>(<span class="params">newName: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.name=newName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.Getters使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">nameLength</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.name.length,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;userStore.nameLength&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>4.Actions使用</p><ul><li>同步actions使用</li></ul><p>如设置state中使用方式相同，可以直接使用this设置state中数据</p><ul><li>异步actions使用</li></ul><blockquote><p>支持async await ,支持同一个store中action之间可以用this调用，不同store中action之间可以用hooks引入方式调用</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;userOtherStore&#125; <span class="keyword">from</span> <span class="string">&#x27;./otherStore&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;data&#125;=<span class="keyword">await</span> api.login(params)</span><br><span class="line">            <span class="built_in">this</span>.updataUser(data) <span class="comment">//同一个store中action之间可以用this调用</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">updataUser</span>(<span class="params">newName: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.name=newName</span><br><span class="line">           <span class="keyword">const</span> otherStore=userOtherStore() <span class="comment">//不同store中action之间可以用hooks引入方式调用</span></span><br><span class="line">           otherStore.setName(newName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、统一请求封装（Axios封装）"><a href="#四、统一请求封装（Axios封装）" class="headerlink" title="四、统一请求封装（Axios封装）"></a>四、统一请求封装（Axios封装）</h4><p>1.使用yarn安装 axios</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">yarn命令安装</span></span><br><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>2.src文件夹下新建service文件夹,service文件夹下新建http.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 设置请求头和请求路径</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;/api&#x27;</span>;</span><br><span class="line"><span class="comment">// 现在，所有使用此实例的请求都将等待2.5秒，然后才会超时</span></span><br><span class="line">axios.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>): <span class="title">AxiosRequestConfig</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    config.headers.token = <span class="string">&#x27;your token&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">interface</span> ResType&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">    data?: T</span><br><span class="line">    <span class="attr">msg</span>: <span class="built_in">string</span></span><br><span class="line">    err?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Http &#123;</span><br><span class="line">    get&lt;T&gt;(url: <span class="built_in">string</span>, params?: unknown): <span class="built_in">Promise</span>&lt;ResType&lt;T&gt;&gt;</span><br><span class="line">    post&lt;T&gt;(url: <span class="built_in">string</span>, params?: unknown): <span class="built_in">Promise</span>&lt;ResType&lt;T&gt;&gt;</span><br><span class="line">    upload&lt;T&gt;(url: <span class="built_in">string</span>, <span class="attr">params</span>: unknown): <span class="built_in">Promise</span>&lt;ResType&lt;T&gt;&gt;</span><br><span class="line">    download(url: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> http: Http = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">url, params</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            axios</span><br><span class="line">                .get(url, &#123; params &#125;)</span><br><span class="line">                .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    resolve(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    reject(err.data)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">post</span>(<span class="params">url, params</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            axios</span><br><span class="line">                .post(url, <span class="built_in">JSON</span>.stringify(params))</span><br><span class="line">                .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    resolve(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    reject(err.data)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">upload</span>(<span class="params">url, file</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            axios</span><br><span class="line">                .post(url, file, &#123;</span><br><span class="line">                    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span> &#125;,</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    resolve(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    reject(err.data)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">download</span>(<span class="params">url</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">        iframe.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        iframe.src = url</span><br><span class="line">        iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(iframe)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(iframe)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></table></figure><p>3.service文件夹下新建api文件夹，做请求统一管理，api下新建login,login下新建login.ts、type.ts</p><p><img src="https://p9.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/1f73a90a6ae3455aa3dfca98b234c0bb.png?from=pc" alt="Vu3+Ts+Vite2+Pinia 搭建开发脚手架"></p><ul><li>login.ts</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;@/service/http&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ILoginApi &#125; <span class="keyword">from</span> <span class="string">&#x27;./type&#x27;</span></span><br><span class="line"><span class="keyword">const</span> loginApi: ILoginApi = &#123;</span><br><span class="line">    <span class="function"><span class="title">login</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> http.post(<span class="string">&#x27;/login&#x27;</span>, params)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>type.ts</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> DataType &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ResType&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">    data?: T</span><br><span class="line">    <span class="attr">msg</span>: <span class="built_in">string</span></span><br><span class="line">    err?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ILoginApiParams &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ILoginApi &#123;</span><br><span class="line">    <span class="attr">login</span>: <span class="function">(<span class="params">params: ILoginApiParams</span>) =&gt;</span> <span class="built_in">Promise</span>&lt;ResType&lt;DataType&gt;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、UI组件库（Naive-UI、Ant-Design-Vue、Element-Plus）"><a href="#五、UI组件库（Naive-UI、Ant-Design-Vue、Element-Plus）" class="headerlink" title="五、UI组件库（Naive UI、Ant Design Vue、Element Plus）"></a>五、UI组件库（Naive UI、Ant Design Vue、Element Plus）</h4><blockquote><p>UI组件库目前选择比较多，Naive UI是尤大大推荐的组件库，内容样式比较美观新颖，但毕竟是新组件库，Ant Design Vue是Ant Design 的 Vue 实现，用户人数较多，比较成熟，像一些目前比较厉害的开源后台vben-admin等都是使用Ant Design Vue，至于Element Plus也是刚刚开发完成，因此还是选择Ant Design Vue较为靠谱。</p></blockquote><h5 id="基本配置-2"><a href="#基本配置-2" class="headerlink" title="基本配置"></a>基本配置</h5><p>1.使用yarn安装 ant-design-vue@next</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yarn命令安装</span></span><br><span class="line">yarn add ant-design-vue@next</span><br></pre></td></tr></table></figure><p>2.main.ts中全局注册</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Antd <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/antd.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line">app.use(createPinia())</span><br><span class="line">app.use(router)</span><br><span class="line">app.use(Antd);</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3.组件内使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :style=&quot;&#123; background: &#x27;rgb(190, 200, 200)&#x27;, padding: &#x27;26px 16px 16px&#x27; &#125;&quot;&gt;</span><br><span class="line">        &lt;a-button type=&quot;primary&quot; ghost&gt;Primary&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button ghost&gt;Default&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type=&quot;dashed&quot; ghost&gt;Dashed&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button danger ghost&gt;Danger&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type=&quot;link&quot; ghost&gt;Link&lt;/a-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; /&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Hello Vue 3 + TypeScript + Vite&quot; /&gt;--&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="六、环境变量配置及vite基本配置"><a href="#六、环境变量配置及vite基本配置" class="headerlink" title="六、环境变量配置及vite基本配置"></a>六、环境变量配置及vite基本配置</h4><h5 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h5><p>1.最外层文件位置新建.env.development及.env.production文件</p><ul><li>.env.development</li></ul><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=development</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= <span class="string">&#x27;YOUR WEB URL&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>.env.production</li></ul><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line"></span><br><span class="line">VITE_APP_WEB_URL= <span class="string">&#x27;YOUR WEB URL&#x27;</span></span><br></pre></td></tr></table></figure><p>2.组件内使用环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(import.meta.env.VITE_APP_WEB_URL)</span><br></pre></td></tr></table></figure><h5 id="Vite环境配置"><a href="#Vite环境配置" class="headerlink" title="Vite环境配置"></a>Vite环境配置</h5><p>1.配置类型别名</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [vue()],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如果path报错，安装@types/node即可</p></blockquote><p>2.引入如scss等的全局样式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [vue()],</span><br><span class="line">    <span class="attr">css</span>: &#123;</span><br><span class="line">        <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">            <span class="attr">scss</span>: &#123;</span><br><span class="line">                <span class="attr">additionalData</span>: <span class="string">&#x27;@import &quot;@/assets/style/main.scss&quot;;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.代理配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">  <span class="attr">port</span>: VITE_PORT,</span><br><span class="line">    <span class="comment">// Load proxy configuration from .env</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>4.在预构建中强制排除的依赖项。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">optimizeDeps: &#123;</span><br><span class="line">  <span class="comment">// @iconify/iconify: The dependency is dynamically and virtually loaded by @purge-icons/generated, so it needs to be specified explicitly</span></span><br><span class="line">  <span class="attr">include</span>: [</span><br><span class="line">    <span class="string">&#x27;@iconify/iconify&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ant-design-vue/es/locale/zh_CN&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;moment/dist/locale/zh-cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ant-design-vue/es/locale/en_US&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;moment/dist/locale/eu&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">    <span class="attr">exclude</span>: [<span class="string">&#x27;vue-demi&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.build打包</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;es2015&#x27;</span>,</span><br><span class="line">    <span class="attr">outDir</span>: OUTPUT_DIR,</span><br><span class="line">      <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">        <span class="attr">compress</span>: &#123;</span><br><span class="line">          <span class="attr">keep_infinity</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 生产环境去除 `console` `debugger` 值为布尔值</span></span><br><span class="line">            <span class="attr">drop_console</span>: VITE_DROP_CONSOLE,</span><br><span class="line">              <span class="attr">drop_debugger</span>: VITE_DROP_DEBUGGER</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">        <span class="comment">// Turning off brotliSize display can slightly reduce packaging time</span></span><br><span class="line">        <span class="attr">brotliSize</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">chunkSizeWarningLimit</span>: <span class="number">1500</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速搭建vue3项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3动态路由和动态侧边菜单</title>
      <link href="/2022/02/22/vue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%92%8C%E5%8A%A8%E6%80%81%E4%BE%A7%E8%BE%B9%E8%8F%9C%E5%8D%95/"/>
      <url>/2022/02/22/vue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%92%8C%E5%8A%A8%E6%80%81%E4%BE%A7%E8%BE%B9%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>在做Vue管理系统的时候，都会遇到的一个需求：每个用户的权限是不一样的，那么他可以访问的页面(路由)，可以操作的菜单选项是不一样的，如果由后端控制，我们前端需要去实现动态路由，动态渲染侧边菜单栏。</p><h4 id="实现动态路由api"><a href="#实现动态路由api" class="headerlink" title="实现动态路由api"></a>实现动态路由api</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.addRoute() <span class="comment">//应用程序已经运行的时候添加路由</span></span><br><span class="line">router.removeRoute() <span class="comment">// 应用程序已经运行的时候删除路由</span></span><br></pre></td></tr></table></figure><h4 id="定义共用的页面路由-无论哪个用户都会有的"><a href="#定义共用的页面路由-无论哪个用户都会有的" class="headerlink" title="定义共用的页面路由(无论哪个用户都会有的)"></a>定义共用的页面路由(无论哪个用户都会有的)</h4><p>如无论什么用户都可访问登录页login，错误页面404。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/login&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/404&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/home&#x27;</span>),</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/welcome&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,    <span class="comment">// 捕获所有路由或 404 Not found 路由</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/welcome&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">  <span class="attr">routes</span>: publicRoutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="接口数据："><a href="#接口数据：" class="headerlink" title="接口数据："></a>接口数据：</h4><p>这里模拟接口的路由数据(这里进行数据精简，便于演示，实际情况可能要进行数据结构格式的转换)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">navigationList : [</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;icon-jurassic_user&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;icon-jurassic_user&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/role&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;icon-shebei&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;设备管理&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/device&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="添加动态路由进去的时机-router-beforeEach"><a href="#添加动态路由进去的时机-router-beforeEach" class="headerlink" title="添加动态路由进去的时机(router.beforeEach)"></a>添加动态路由进去的时机(router.beforeEach)</h4><p>利用全局前置守卫router.beforeEach,在跳转路由前先判断是否已经添加过动态路由了，如果没有，则先获取数据进行添加路由。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="comment">//这里我用vuex的一个变量 asyncRoutestMark 来标识是否拼接过路由</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!store.state.asyncRoutestMark) &#123;</span><br><span class="line">        <span class="comment">// navigationList 是上面模拟接口返回的数据</span></span><br><span class="line">        <span class="comment">// 这里将新的路由都作为 home 的子路由(实际开发根据情况)</span></span><br><span class="line">        <span class="comment">// meta 是存储一些信息，可以用于权限校验或其他</span></span><br><span class="line">        navigationList.forEach( <span class="function"><span class="params">navigation</span> =&gt;</span> &#123;</span><br><span class="line">          router.addRoute(<span class="string">&#x27;home&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">path</span>: navigation.url,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">name</span>: navigation.name, <span class="attr">isAsync</span>: <span class="literal">true</span>, <span class="attr">icon</span>: navigation.icon &#125;,</span><br><span class="line">            <span class="attr">name</span>: menu.url,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">`../views/<span class="subst">$&#123;menu.url&#125;</span>`</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(router.getRoutes(), <span class="string">&#x27;查看现有路由&#x27;</span>)</span><br><span class="line">        store.commit(<span class="string">&#x27;setAsyncRoutestMark&#x27;</span>, <span class="literal">true</span>) <span class="comment">// 添加路由后更改标识为true</span></span><br><span class="line">        next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)     <span class="comment">//路由进行重定向放行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>利用router.getRoutes()方法查看现有路由，我们将会看到根据新的路由添加进去了。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3动态路由和动态侧边菜单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端框架MicroApp</title>
      <link href="/2022/02/17/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6MicroApp/"/>
      <url>/2022/02/17/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6MicroApp/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这几年后端的微服务是比较火爆，我们公司目前只要是新项目，基本上都是基于微服务去架构的，那么微前端是什么呢？</p><p>微前端是借鉴了微服务的架构理念，核心在于将一个庞大的前端应用拆分成多个独立灵活的小型应用，每个应用都可以独立开发、独立运行、独立部署，再将这些小型应用融合为一个完整的应用，或者将原本运行已久、没有关联的几个应用融合为一个应用。微前端既可以将多个项目融合为一，又可以减少项目之间的耦合，提升项目扩展性，相比一整块的前端仓库，微前端架构下的前端仓库倾向于更小更灵活</p><h4 id="为什么不用iframe"><a href="#为什么不用iframe" class="headerlink" title="为什么不用iframe"></a>为什么不用iframe</h4><p>以前我们为了把几个独立运行的小型应用合并成一个应用都是通过iframe的方式去实现的，如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。</p><p>iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题</p><h4 id="micro-app的优势"><a href="#micro-app的优势" class="headerlink" title="micro-app的优势"></a>micro-app的优势</h4><p>micro-app不是基于iframe架构的</p><h5 id="1、使用简单"><a href="#1、使用简单" class="headerlink" title="1、使用简单"></a>1、使用简单</h5><p>micro-app提供了js沙箱、样式隔离、元素隔离、预加载、数据通信、静态资源补全等一系列完善的开箱即用功能</p><h5 id="2、零依赖"><a href="#2、零依赖" class="headerlink" title="2、零依赖"></a>2、零依赖</h5><p>micro-app没有任何依赖</p><h5 id="3、兼容所有框架"><a href="#3、兼容所有框架" class="headerlink" title="3、兼容所有框架"></a>3、兼容所有框架</h5><p>为了保证各个业务之间独立开发、独立部署的能力，micro-app做了诸多兼容，在任何技术框架中都可以正常运行。</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>下面讲一下如何在Vue中使用micro-app</p><h5 id="1、初始化一个基座应用"><a href="#1、初始化一个基座应用" class="headerlink" title="1、初始化一个基座应用"></a>1、初始化一个基座应用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 初始化一个vue应用</span><br><span class="line">// 大家可以理解这是一个基座应用</span><br><span class="line">// 就是把其它的应用都向它身上集成</span><br><span class="line">vue create main-app</span><br><span class="line"></span><br><span class="line">// 安装micro-app 依赖</span><br><span class="line">npm i @micro-zoe/micro-app --save</span><br></pre></td></tr></table></figure><h5 id="2、基座应用的文件修改"><a href="#2、基座应用的文件修改" class="headerlink" title="2、基座应用的文件修改"></a>2、基座应用的文件修改</h5><p>main.js修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="comment">// 路由信息</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router.js&quot;</span>;</span><br><span class="line"><span class="comment">// 引入微前端</span></span><br><span class="line"><span class="keyword">import</span> microApp <span class="keyword">from</span> <span class="string">&quot;@micro-zoe/micro-app&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微前端基座应用启动</span></span><br><span class="line">microApp.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>router.js修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js 文件如下</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> mainPage <span class="keyword">from</span> <span class="string">&quot;../views/main-page.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 非严格匹配，/main-page/* 都指向 mainPage 页面</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/main-page/*&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;main-page&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: mainPage,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  <span class="comment">// 设置主应用基础路由为main-page</span></span><br><span class="line">  <span class="comment">// 子应用基础路由为/main-page/xxx</span></span><br><span class="line">  <span class="attr">base</span>:<span class="string">&#x27;main-page&#x27;</span>,</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h5 id="3、main-page-vue页面"><a href="#3、main-page-vue页面" class="headerlink" title="3、main-page.vue页面"></a>3、main-page.vue页面</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    // 下面就是要接入的子应用url</span><br><span class="line">    &lt;h1&gt;子应用&lt;/h1&gt;</span><br><span class="line">    // name(必传)：应用名称</span><br><span class="line">    // url(必传)：应用地址，会被自动补全为http://localhost:3000/index.html</span><br><span class="line">    // baseroute(可选)：基座应用分配给子应用的基础路由，就是上面的 `/main-page`</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;micro-app name=&#x27;app1&#x27; url=&#x27;http://localhost:3000/&#x27; baseroute=&#x27;/main-page&#x27;&gt;&lt;/micro-app&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="4、创建一个子应用"><a href="#4、创建一个子应用" class="headerlink" title="4、创建一个子应用"></a>4、创建一个子应用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 初始化一个vue应用</span><br><span class="line">vue create child-app</span><br></pre></td></tr></table></figure><h5 id="5、子应用的router-js文件修改"><a href="#5、子应用的router-js文件修改" class="headerlink" title="5、子应用的router.js文件修改"></a>5、子应用的router.js文件修改</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  <span class="comment">// __MICRO_APP_BASE_ROUTE__ 为micro-app传入的基础路由</span></span><br><span class="line">  <span class="attr">base</span>: <span class="built_in">window</span>.__MICRO_APP_BASE_ROUTE__ || process.env.BASE_URL,</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="6、src目录下新建public-path-js"><a href="#6、src目录下新建public-path-js" class="headerlink" title="6、src目录下新建public-path.js"></a>6、src目录下新建public-path.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// __MICRO_APP_ENVIRONMENT__和__MICRO_APP_PUBLIC_PATH__</span></span><br><span class="line"><span class="comment">// 是由micro-app注入的全局变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.__MICRO_APP_ENVIRONMENT__) &#123;</span><br><span class="line">  __webpack_public_path__ = <span class="built_in">window</span>.__MICRO_APP_PUBLIC_PATH__</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、main-js-引入public-path-js"><a href="#7、main-js-引入public-path-js" class="headerlink" title="7、main.js 引入public-path.js"></a>7、main.js 引入public-path.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./public-path&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听卸载操作</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;unmount&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  app.$destroy();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到此这个简单的微应用就搭好了!</p>]]></content>
      
      
      <categories>
          
          <category> vue插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微前端框架MicroApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript知识点</title>
      <link href="/2022/02/16/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/02/16/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h5 id="1-严格模式"><a href="#1-严格模式" class="headerlink" title="1.严格模式"></a>1.严格模式</h5><ul><li>使用严格模式，可以在函数内部进行较为严格的全局和局部的错误条件检查</li><li>严格模式的编译指示，”use strict”</li><li>创建全局变量，未声明变量，非严格模式下为创建全局变量；严格模式下为抛出ReferenceError</li><li>对变量调用delete操作符，删除变量，非严格模式下为静默失败；严格模式下为抛出ReferenceError</li><li>操作对象情况下：a，只读属性赋值会抛出TypeError；b，对不可配置的属性使用delete操作符会抛出TypeError；c，为不可扩展的对象添加属性会抛出TypeError。</li><li>重名属性情况：a，非严格模式下没有错误，以第二个属性为准；b，严格模式下会抛出语法错误。</li><li>函数参数必须唯一，重名参数，在非严格模式下没有错误，只能访问第二个参数；严格模式下，会抛出错误。</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用js工具库</title>
      <link href="/2022/02/15/%E5%B8%B8%E7%94%A8js%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
      <url>/2022/02/15/%E5%B8%B8%E7%94%A8js%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="Day-js"><a href="#Day-js" class="headerlink" title="Day.js"></a>Day.js</h4><p>Day.js是一个轻量化的JavaScript库，文件大小仅有2KB左右，且浏览器的兼容性好，可以为浏览器解析、验证、操作时间和日期。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install dayjs</span></span><br></pre></td></tr></table></figure><h4 id="Flv-js"><a href="#Flv-js" class="headerlink" title="Flv.js"></a>Flv.js</h4><p>Flv.js是由 bilibili 网站开源的HTML5 视频中播放 FLV 格式视频的 JavaScript 库。flv.js 实现了在 HTML5 上播放 FLV 格式视频。由于flash性能安全和可靠性的问题是长期以来深受诟病，Flv.js可以利用html5的video标签将http-flv直播流实时播放的一个js版的播放器来代替flash。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install flv.js</span></span><br></pre></td></tr></table></figure><h4 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h4><p>lodash.js是一个简单实用模块化、高性能的 JavaScript 实用工具库，lodash是对各种方法、函数的封装，使得使用更加方便，可以让开发变得更加的简单。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i --save lodash</span></span><br></pre></td></tr></table></figure><h4 id="FileSaver-js"><a href="#FileSaver-js" class="headerlink" title="FileSaver.js"></a>FileSaver.js</h4><p>FileSaver.js 是一个在客户端保存文件的一个js库，Api简单易用，非常适合需要生成文件，或者保存不应该发送到外部服务器的敏感信息的 web App。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-saver --save</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存文本</span></span><br><span class="line"><span class="comment">// 生成blob文本</span></span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([<span class="string">&quot;您好!&quot;</span>], &#123;<span class="attr">type</span>: <span class="string">&quot;text/plain;charset=utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">// 第二个参数指定保存的文件名</span></span><br><span class="line">saveAs(blob, <span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存文件流(url链接)</span></span><br><span class="line"><span class="comment">// 比如后台传过来的文件流</span></span><br><span class="line">saveAs(<span class="string">&quot;https://httpbin.org/image&quot;</span>, <span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把canvas保存成一个图片</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">    saveAs(blob, <span class="string">&quot;image.png&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存纯文件</span></span><br><span class="line"><span class="keyword">const</span> file = <span class="keyword">new</span> File([<span class="string">&quot;您好!&quot;</span>], <span class="string">&quot;hello.txt&quot;</span>, &#123;<span class="attr">type</span>: <span class="string">&quot;text/plain;charset=utf-8&quot;</span>&#125;);</span><br><span class="line">saveAs(file);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js工具库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件代理和事件委托</title>
      <link href="/2022/02/14/js%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2022/02/14/js%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p><strong>事件委托</strong>是指借用 事件冒泡 或者 事件捕获 机制，如果我们有许多以类似方式处理的元素，那么就不必为每个元素都分配一个事件处理程序 —— 而是将单个处理程序放在它们的共同祖先上。</p><p>举个通俗的例子：比如一个宿舍的同学同时快递到了，一种方法就是他们一个个去领取，还有一种方法就是把这件事情委托给宿舍长，让一个人出去拿好所有快递，然后再根据收件人一 一分发给每个宿舍同学；<br>在这里，取快递就是一个事件，每个同学指的是需要响应事件的 DOM 元素，而出去统一领取快递的宿舍长就是代理的元素，所以真正绑定事件的是这个元素，按照收件人分发快递的过程就是在事件执行中，需要判断当前响应的事件应该匹配到被代理元素中的哪一个或者哪几个。</p><p>一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。<br>（1）捕获阶段：从window对象传导到目标节点（上层传到底层）称为“捕获阶段”（capture phase），捕获阶段不会响应任何事件；<br>（2）目标阶段：在目标节点上触发，称为“目标阶段”<br>（3）冒泡阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层。</p><p><img src="https://ae02.alicdn.com/kf/Hdb3fd50b3284491e83212427192368bcU.png" alt="image.png"></p><p>使用事件代理之前为每个 li 添加 click 事件的方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ae02.alicdn.com/kf/H47de685542db477d9d5f15140d5a27735.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取所有的li</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">// 挨个绑定事件</span></span><br><span class="line">lis.forEach(<span class="function"><span class="params">li</span> =&gt;</span> &#123;</span><br><span class="line">    li.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.innerText&#125;</span>被点击了`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们需要获取所有的 li ，然后为其所有元素添加事件。这有两个缺点：</p><ul><li>新添加的 li 标签需要再次为其绑定事件<strong>let</strong> newLi = document.createElement(“li”); newLi.innerText = ‘5’; ul.appendChild(newLi); <em>// 点击5不会触发事件</em> 复制代码</li><li>每一个 li 标签都需单独绑定事件</li></ul><p>当我们使用事件代理的思路来为其添加事件处理函数时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="comment">// 事件绑定到其公共的祖先元素ul上</span></span><br><span class="line">ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这里this是ul，event.target 才是li</span></span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;event.target.innerText&#125;</span>被点击了`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">newLi.innerText = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">ul.appendChild(newLi);</span><br></pre></td></tr></table></figure><p>现在还有一个问题：当点击 ul 中其他元素时也会触发事件，但我们只想在点击 ul 下的第一层 li 标签才触发事件，其他标签被点击不触发。</p><p>可以通过判断 event.target 的标签类型来判断被点击的是不是 li 标签，然后判断其父元素是否是 ul 来判断其是不是 ul 下的第一层 li 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> target = event.target</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 标签为li标签 而且 父元素为ul</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(target.tagName === <span class="string">&#x27;LI&#x27;</span> &amp;&amp; target.parentNode === <span class="built_in">this</span>)&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">`<span class="subst">$&#123;target.innerText&#125;</span>被点击了`</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们解决了刚刚的问题，但是又遇到一个新的问题就是当我们点击 4 时不会触发事件，原因是 4 包裹在一个 div 标签中，所以本次事件的 target 的 div 而不是 li。但是按理我们同样需要处理点击 li 的事件处理函数（因为冒泡机制）</p><p>我们可以通过获取 target 的祖先节点，如果我们需要被代理事件的 li 为其祖先节点，则表示我们需要执行处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target = event.target</span><br><span class="line">    <span class="comment">// 获取到被点击节点的祖先节点，直到其父节点为ul</span></span><br><span class="line">    <span class="keyword">while</span> (target &amp;&amp; target.parentNode !== <span class="built_in">this</span>)&#123;</span><br><span class="line">        target = target.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(target.tagName === <span class="string">&#x27;LI&#x27;</span> &amp;&amp; target.parentNode === <span class="built_in">this</span>)&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;target.innerText&#125;</span>被点击了`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样一个简单版的事件代理就实现了，他有什么好处：</p><ul><li>只需要绑定一个事件到ul上，占用的内存更小</li><li>可以为动态添加的元素监听事件，不需要每添加一个元素就重新绑定一次。</li></ul><h5 id="事件委托-1"><a href="#事件委托-1" class="headerlink" title="事件委托"></a>事件委托</h5><p>事件委托是一个叫法，例如上面的例子，ul 为 li 代理 click 事件，这就叫做事件代理。也可以说是 li 将 click 事件委托给 ul，这就叫做事件委托。</p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件委托 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.draggable拖拽插件</title>
      <link href="/2022/02/14/vue-draggable%E6%8B%96%E6%8B%BD%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/02/14/vue-draggable%E6%8B%96%E6%8B%BD%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>vue.draggable.next是一款Vue3支持拖放的插件，并且拖放完后会与数据自动同步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// github官方地址</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//github.com/SortableJS/vue.draggable.next</span></span><br></pre></td></tr></table></figure><p><img src="https://p3.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/f86f8f0e932843aaa080b03312c23186?from=pc" alt="image.png"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>基于 Sortable.js 封装</li><li>完全支持PC端和移动端</li><li>支持不同列表之间的拖放</li><li>没有 jQuery 依赖</li><li>列表变化和数据同步</li><li>兼容 Vue.js 3.0</li><li>支持取消动作</li><li>各种监听事件提供</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S vuedraggable@next</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// v-model是一个数组</span><br><span class="line">// item就是数组的其中一项</span><br><span class="line">// item-key唯一性，一般为子项其中的一个唯一属性</span><br><span class="line">// @start开始拖动事件</span><br><span class="line">// @end结束拖动事件</span><br><span class="line">&lt;draggable</span><br><span class="line">  v-model=&quot;myArray&quot;</span><br><span class="line">  @start=&quot;drag=true&quot;</span><br><span class="line">  @end=&quot;drag=false&quot;</span><br><span class="line">  item-key=&quot;id&quot;&gt;</span><br><span class="line">  &lt;template #item=&quot;&#123;element&#125;&quot;&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;element.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/draggable&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;draggable</span><br><span class="line">  element=&quot;div&quot;</span><br><span class="line">  :list=&quot;list&quot;</span><br><span class="line">  v-bind=&quot;&#123;group:&#x27;title&#x27;, animation:150&#125;&quot;</span><br><span class="line">  :no-transition-on-drag=&quot;true&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;transition-group type=&quot;transition&quot; :css=&quot;true&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;list&quot; v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/transition-group&gt;</span><br><span class="line">&lt;/draggable&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import draggable from &#x27;vuedraggable&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    draggable,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      myArray:[</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;:1,</span><br><span class="line">          &quot;name:&quot;张三&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;:2,</span><br><span class="line">          &quot;name:&quot;李四&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;:3,</span><br><span class="line">          &quot;name:&quot;王五&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      drag: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想要动画效果的话，加上一个tag属性，值为transition-group，component-data为过渡的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;draggable</span><br><span class="line">    v-model=&quot;myArray&quot;</span><br><span class="line">    tag=&quot;transition-group&quot;</span><br><span class="line">    :component-data=&quot;&#123; name: &#x27;fade&#x27; &#125;&quot;</span><br><span class="line">    item-key=&quot;id&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;template #item=&quot;&#123; element &#125;&quot;&gt;</span><br><span class="line">     &lt;div&gt;&#123;&#123; element.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/draggable&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.draggable拖拽插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的底层响应原理</title>
      <link href="/2022/01/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BA%95%E5%B1%82%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/"/>
      <url>/2022/01/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BA%95%E5%B1%82%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>对于面试的大部分前端开发者来说，对浏览器的了解也算是一知半解，因为我们一开始前端觉得，我们开发中通常使用浏览器来显示和调试页面用的，不会涉入到太过的相关浏览器工作原理知识。</p><p>这你就大错特错了，虽然浏览器默默的为我们工作，但是有关浏览器的工作原理不但在你就业前端面试中属于重中之重，也是在前端优化中占有很大比重。作为一个前端开发如果不了解浏览器的工作原理，只能永远停留在前端“切图仔”水平。</p><p>学习浏览器工作原理是为了能够运用到实际项目中，比如前端的性能优化以及错误排查，都会涉及到浏览器相关的知识，所以掌握浏览器的工作原理是必不可缺的，相信你学完之后，能够对你的个人能力和见识会有很大的提升。</p><p>浏览器涉及到的知识点非常多而且非常重要，文章中可能其中有不足和错误的地方，也欢迎各位指出！</p><p><img src="https://ae02.alicdn.com/kf/H36ec9e3a547445fbb65d841f05d7db2fE.png" alt="image.png"></p><h4 id="1、浏览器的职责"><a href="#1、浏览器的职责" class="headerlink" title="1、浏览器的职责"></a>1、浏览器的职责</h4><p>我们由浅入深的去了解浏览器的工作原理。首先学习一个事物要知道它是什么，它要完成一个什么样的事情，也就是拥有什么样的职责。</p><p>对于浏览器来说，表面上看来，我们输入了 URL，然后等待几秒浏览器就展现出我们想要访问的网址内容了。对没错，这就是浏览器的职责所在。这只是停留在了表面，要想深入知道浏览器在这个阶段发生了什么？需要我们进一步探索浏览器的工作原理。</p><p>所以说，无论是面试还是实际工作中，浏览器无时不刻和我们打交道。那我们就要从在浏览器输入 URL 开始说起，直到浏览器最后展现出网站内容，这个过程浏览器做了哪些工作，又是如何工作的呢？</p><p>我们会详细分为以下几大模块进行系统的讲解：</p><p><strong>1、DNS 解析</strong></p><p><strong>2、TCP 连接</strong></p><p><strong>3、HTTP 请求</strong></p><p><strong>4、构建 DOM 树</strong></p><p><strong>5、构建 CSSOM 树</strong></p><p><strong>6、生成渲染树</strong></p><p><strong>7、合成、绘制</strong></p><p><img src="https://ae05.alicdn.com/kf/H3b9e2b0342234b14a4abfc0fa05e5c73y.png" alt="image.png"></p><h4 id="2、DNS-解析"><a href="#2、DNS-解析" class="headerlink" title="2、DNS 解析"></a>2、DNS 解析</h4><p>要想得到接收方的 MAC 地址，需要通过对方的 IP 地址获取，对方的 IP 需要通过 DNS 解析。</p><h5 id="2-1-为什么进行-DNS-解析？"><a href="#2-1-为什么进行-DNS-解析？" class="headerlink" title="2.1 为什么进行 DNS 解析？"></a>2.1 为什么进行 DNS 解析？</h5><p>所谓的 DNS 解析就是将我们输入在网页地址栏的 URL 通过 DNS 解析成 IP 地址。DNS 就是将域名转化成 ip 地址的过程。</p><h5 id="2-2-系统缓存查询"><a href="#2-2-系统缓存查询" class="headerlink" title="2.2 系统缓存查询"></a>2.2 系统缓存查询</h5><p>首先浏览器会调用一个库函数，检测本地的 hosts 文件（可以认为是电脑本地的一个地址映射文件），从该文件中查看是否有对应的该域名的 IP 地址，这个过程是在系统缓存中查找是否存在该域名对应的 IP 地址。</p><h5 id="2-3-路由器缓存、ISP-缓存"><a href="#2-3-路由器缓存、ISP-缓存" class="headerlink" title="2.3 路由器缓存、ISP 缓存"></a>2.3 路由器缓存、ISP 缓存</h5><p>如果系统缓存没有，就会向 DNS 服务器发送请求，而网络服务一般都会先经过路由器以及网络服务商（电信），所以会先查询路由器缓存，然后再查询 ISP 的 DNS 缓存。</p><blockquote><p>PS：ISP缓存，本身是一种宽带接入提供商给网页批量访问加速的技术。ISP会将当前访问量较大的网页内容放到ISP服务器的缓存中，当有新的用户请求相同内容时，可以直接从缓存中发送相关信息，不必每次都去访问真正的网站，从而加快了不同用户对相同内容的访问速度，同时也能节省网间流量结算成本。</p></blockquote><h5 id="2-4-DNS-递归查询"><a href="#2-4-DNS-递归查询" class="headerlink" title="2.4 DNS 递归查询"></a>2.4 DNS 递归查询</h5><p>如果路由器缓存和 ISP 的 DNS 缓存还是没有的话，我们就进行 DNS 递归查询。从根域名服务器开始查询，然后再到顶级域名服务器，最后到主域名服务器依次查询。</p><p>但是这里有两种查询方式，不仅仅有递归查询一种方式，还有一个查询方式是迭代查询，两种查询方式的区别是什么呢？</p><blockquote><p>迭代查询：DNS 收到请求时，而不是直接返回查询结果，而是告诉客户端另一台 DNS 服务器地址。然后客户端再向这台的 DNS 服务器提交请求，依次循环。</p></blockquote><p><img src="https://ae04.alicdn.com/kf/He6caa51acd904131863c5de3a7606827J.png" alt="image.png"></p><blockquote><p>递归查询：当 DNS 服务器收到请求时，就会检查 DNS 缓存，如果没有就会询问其他服务器，并将返回的查询结果返回客户端。</p></blockquote><p><img src="https://ae04.alicdn.com/kf/Hd5a2e06daab14487bd8c2059abe95912Y.png" alt="image.png"></p><p>我们前端会在性能优化的使用用到 DNS 的相关知识，我们在这稍微提一下，如何进行 DNS 优化呢？</p><p>DNS 查询经历很多步骤，查询很慢。浏览器获取到 IP 地址后，一般都会加到浏览器的缓存中，本地的 DNS 缓存服务器，也可以去记录。</p><p>另外使用 DNS 负载均衡，通常我们的网站应用各种云服务，DNS 系统根据每台机器的负载量，地理位置的限制等等，去提供高效快速的 DNS 解析服务。</p><h4 id="3、TCP-连接"><a href="#3、TCP-连接" class="headerlink" title="3、TCP 连接"></a>3、TCP 连接</h4><p>我们通过 DNS 查询到 IP 地址之后，我们就开始打算与服务器建立连接，为接下来的数据传输做准备，这部分在之前的文章中写的非常详细，记得看一看。</p><h4 id="4、HTTP-请求"><a href="#4、HTTP-请求" class="headerlink" title="4、HTTP 请求"></a>4、HTTP 请求</h4><p>我们客户端与服务端通过 TCP 的三次握手建立连接之后，客户端开始向服务器主动发起请求。</p><p>服务端接收到客户端发送的信息，就返回响应信息和文件。客户端如何判断服务端是否成功返回了呢？就需要下列的一些状态码来识别，同样前端做的工作也是通过状态码来判断当前响应状态。</p><ul><li>1XX（信息性状态码） : 服务器正在处理请求中。</li><li>2XX （成功状态码）: 请求处理完毕。</li><li>3XX （重定向状态码）: 需要附加操作以完成请求。301：永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后使用该资源，使用现在所指 URI。302：临时性重定向。表示该状态码被分配了新的 URI，希望用户本次能够使用新的 URI 访问。304：服务器资源未改变，可直接使用客户端未过期的缓存。</li><li>4XX （客户端错误状态码）: 服务器无法处理请求。400：该请求报文中有语法错误。403：没有资源的访问权限。404：找不到资源。</li><li>5XX （服务端错误状态码）: 服务器处理请求出错。500：服务器发生错误503：服务器超荷载或正在维护。</li></ul><p>远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。</p><h4 id="5、浏览器的渲染原理"><a href="#5、浏览器的渲染原理" class="headerlink" title="5、浏览器的渲染原理"></a>5、浏览器的渲染原理</h4><h5 id="5-1-构建-DOM"><a href="#5-1-构建-DOM" class="headerlink" title="5.1 构建 DOM"></a>5.1 构建 DOM</h5><p>服务器将 HTML、CSS、JS文件转化为 0,1字节数据在网络中传输给浏览器，浏览器通过判断状态码开始接收、解析文件，这开始运用到浏览器的渲染原理。</p><p>首先浏览器要做的就是获取 HTTP 的 Request 的 body 中字符串（字符流）的 HTML 文本，进行解析并构建 DOM 树。</p><p>将字符流转化为字符串之后，浏览器开始进行词法分析，虽然这个名词我们不熟悉，但是我们要知道，一个 HTML 字符串我们要拆分开才能构建 DOM 树，词法分析就是将字符串拆分成的过程。将字符串转化为的 token（标记） —— token 作为代码的最小单位，也就是拆分后的结果，这个过程我们称为标记化。</p><p><img src="https://ae04.alicdn.com/kf/H5614ba0370284291b319c531347a0bb32.png" alt="image.png"></p><p>我们将字符串拆解之后，然后将这些标记转化为 Node 结点，浏览器根据不同的结点开始构建一棵 DOM 树。这就是整个 DOM 树构建的过程，其中还涉及到很多的细节，比如词法分析是如何一个过程（状态机），有兴趣的小伙伴可以详细查看英文文档，在文章底部。</p><p><img src="https://ae04.alicdn.com/kf/H448b546f41ed439fb040758fa0b47f7cX.png" alt="image.png"></p><h5 id="5-2-构建-CSSOM-树"><a href="#5-2-构建-CSSOM-树" class="headerlink" title="5.2 构建 CSSOM 树"></a>5.2 构建 CSSOM 树</h5><p>浏览器已经把 HTML 文件转化为了 DOM 树，下面就对 CSS 样式文件进行解析，构建成 CSSOM 树。这个过程和上述构建 DOM 树的过程有点相似，但是其中 CSSOM 树的构建更加的耗时。下面我们来看看如何耗时的？</p><p>浏览器通过递归的方式 DOM 树为结点设置样式。通过先找到具体的标签，然后递归找到设置的上级标签，最后确定选择器选择的所选标签的样式。</p><p>比如下边的例子，浏览器是如何确定结点的样式的呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跟着IT技术管理学技术<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，IT技术管理！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">div span p&#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">background:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在 HTML 中找到 p 标签，一共有两个地方，然后按照样式的继续递归中找具有父节点的 p，我们只好把第二个 p 过滤掉，然后继续向上找父节点 div，匹配成功，然后将样式设置到结点上。</p><p>构建 CSSOM 树可以说是非常耗时了，我们在写代码的时候可以做出优化，所以应该避免书写过于具体的 CSS 选择器，少一些添加无意义的 HTML 标签，有利于提高习页面的性能。</p><h5 id="5-3-构建渲染树"><a href="#5-3-构建渲染树" class="headerlink" title="5.3 构建渲染树"></a>5.3 构建渲染树</h5><p>我们分别将上边生成的 DOM 和 CSSOM 树进行合并，生成我们的渲染树。但是在合并的时候，并不是两者简单的进行结合，因为有些结点我们并不需要显示，还记得有一个 display:none 属性吗？如果某结点的样式有这个属性，就不会出现在渲染树中。</p><p><img src="https://ae01.alicdn.com/kf/Hae00eb342cc5463b8f6961a8733c3124x.png" alt="image.png"></p><p>浏览器在生成渲染树的时候，就会根据渲染树进行布局，调用 GPU 进行绘制，然后合成图层，最后显示在屏幕上。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过上边的对浏览器工作原理的介绍，相信你对浏览器有了新的认识和简介，但是只看上边的知识还完全不能深入到底层，如果还想要进行深入的对浏览器的工作原理进行研究，可以研究研究英文文档《How Browsers Work》。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器的底层响应原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态管理工具 Pinia 从入门到精通</title>
      <link href="/2022/01/26/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Pinia-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2022/01/26/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Pinia-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是Pinia"><a href="#什么是Pinia" class="headerlink" title="什么是Pinia"></a>什么是Pinia</h4><p>Pinia.js 是新一代的状态管理器，由 Vue.js团队中成员所开发的，因此也被认为是下一代的 Vuex，即 Vuex5.x，在 Vue3.0 的项目中使用也是备受推崇。</p><p>Pinia.js 有如下特点：</p><ul><li>完整的 typescript 的支持；</li><li>足够轻量，压缩后的体积只有1.6kb;</li><li>去除 mutations，只有 state，getters，actions（这是我最喜欢的一个特点）；</li><li>actions 支持同步和异步；</li><li>没有模块嵌套，只有 store 的概念，store 之间可以自由使用，更好的代码分割；</li><li>无需手动添加 store，store 一旦创建便会自动添加；</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia --save</span><br></pre></td></tr></table></figure><h4 id="创建-Store"><a href="#创建-Store" class="headerlink" title="创建 Store"></a>创建 Store</h4><hr><p>新建 src/store 目录并在其下面创建 index.ts，导出 store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createPinia()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>在 main.ts 中引入并使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line">app.use(store)</span><br></pre></td></tr></table></figure><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><hr><h5 id="定义State"><a href="#定义State" class="headerlink" title="定义State"></a>定义State</h5><p>在 src/store 下面创建一个user.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/store/user.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>, <span class="comment">// id必填，且需要唯一</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="获取-state"><a href="#获取-state" class="headerlink" title="获取 state"></a>获取 state</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; userStore.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/user&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> userStore = useUserStore()</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以结合 computed 获取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = computed(<span class="function">() =&gt;</span> userStore.name)</span><br></pre></td></tr></table></figure><p>state 也可以使用解构，但使用解构会使其失去响应式，这时候可以用 pinia 的 <strong>storeToRefs</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; name &#125; = storeToRefs(userStore)</span><br></pre></td></tr></table></figure><h5 id="修改-state"><a href="#修改-state" class="headerlink" title="修改 state"></a>修改 state</h5><p>可以像下面这样直接修改 state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userStore.name = <span class="string">&#x27;李四&#x27;</span></span><br></pre></td></tr></table></figure><p>但一般不建议这么做，建议通过 actions 去修改 state，action 里可以直接通过 this 访问。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">updateName</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/user&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> userStore = useUserStore()</span></span><br><span class="line"><span class="javascript">userStore.updateName(<span class="string">&#x27;李四&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h4><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line"> <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line"> <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">getters</span>: &#123;</span><br><span class="line">   <span class="attr">fullName</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> state.name + <span class="string">&#x27;丰&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userStore.fullName <span class="comment">// 张三丰</span></span><br></pre></td></tr></table></figure><h4 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h4><hr><h5 id="异步-action"><a href="#异步-action" class="headerlink" title="异步 action"></a>异步 action</h5><p>action 可以像写一个简单的函数一样支持 async/await 的语法，让你愉快的应付异步处理的场景。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">account, pwd</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> api.login(account, pwd)</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="action-间相互调用"><a href="#action-间相互调用" class="headerlink" title="action 间相互调用"></a>action 间相互调用</h5><p>action 间的相互调用，直接用 this 访问即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">account, pwd</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> api.login(account, pwd)</span><br><span class="line">      <span class="built_in">this</span>.setData(data) <span class="comment">// 调用另一个 action 的方法</span></span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setData</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 action 里调用其他 store 里的 action 也比较简单，引入对应的 store 后即可访问其内部的方法了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/user.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useAppStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = defineStore(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">account, pwd</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> api.login(account, pwd)</span><br><span class="line">      <span class="keyword">const</span> appStore = useAppStore()</span><br><span class="line">      appStore.setData(data) <span class="comment">// 调用 app store 里的 action 方法</span></span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/app.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAppStore = defineStore(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">setData</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><hr><p>插件 pinia-plugin-persist 可以辅助实现数据持久化功能。</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia-plugin-persist --save</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persist&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createPinia()</span><br><span class="line">store.use(piniaPluginPersist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>接着在对应的 store 里开启 persist 即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export const useUserStore = defineStore(&#123;</span><br><span class="line">  id: &#x27;user&#x27;,</span><br><span class="line"></span><br><span class="line">  state: () =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;张三&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 开启数据缓存</span><br><span class="line">  persist: &#123;</span><br><span class="line">    enabled: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>数据默认存在 sessionStorage 里，并且会以 store 的 id 作为 key。</p><h5 id="自定义-key"><a href="#自定义-key" class="headerlink" title="自定义 key"></a>自定义 key</h5><p>你也可以在 strategies 里自定义 key 值，并将存放位置由 sessionStorage 改为 localStorage。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">persist: &#123;</span><br><span class="line">  <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">strategies</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;my_user&#x27;</span>,</span><br><span class="line">      <span class="attr">storage</span>: <span class="built_in">localStorage</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="持久化部分-state"><a href="#持久化部分-state" class="headerlink" title="持久化部分 state"></a>持久化部分 state</h5><p>默认所有 state 都会进行缓存，你可以通过 paths 指定要持久化的字段，其他的则不会进行持久化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">state: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">persist</span>: &#123;</span><br><span class="line">  <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">strategies</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">storage</span>: <span class="built_in">localStorage</span>,</span><br><span class="line">      <span class="attr">paths</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们只持久化 name 和 age，并将其改为localStorage, 而 gender 不会被持久化，如果其状态发送更改，页面刷新时将会丢失，重新回到初始状态，而 name 和 age 则不会。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><hr><p>以上就是关于 Pinia.js 用法的一些介绍，Pinia.js 的内容还远不止这些，更多内容及使用有待大家自己探索。<a href="https://segmentfault.com/a/1190000040373313?utm_source=sf-similar-article">Piana文档</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pinia状态管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http缓存机制</title>
      <link href="/2022/01/25/http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/01/25/http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>我们每时每刻使用的互联网、移动手机APK，都是由各种各样的资源拼成的HTML（JS、CSS）页面。这些资源绝大多数是静态资源，他们大多数都是不需要实时更新的。比如图片，CSS样式，JS库，这些静态资源构成了互联网的框架。</p><p>这些资源文件都很小，但是由于往往需要每次刷新页面时候都会重新下载，如果有什么方法可以减少对这些图像、样式等固定文件的下载，只获取必须API实时的数据然后渲染页面则用户访问肯定会更快更流畅。其实上HTTP协议本身就提供一个强大的机制来解决这个问题，这就是今天要给大家介绍的HTTP Cache缓存。作为一个Web开发者必须熟练掌握HTTP的缓存机制，它可以帮我们节省大量的带宽、服务器硬件，极大的优化我们网站和APP的性能改善用户体验。</p><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。</p><p>我们使用 HTTP 缓存，通过复用缓存资源，减少了客户端等待时间和网络流量，同时也能缓解服务器端的压力。可以显著的提升我们网站和应用的性能。</p><p>虽然 HTTP 缓存不是必须的，但重用缓存的资源通常是必要的，HTTP 缓存是一个 web 性能优化的重要手段。</p><h4 id="缓存基础知识"><a href="#缓存基础知识" class="headerlink" title="缓存基础知识"></a>缓存基础知识</h4><p>我们首先从概述缓存基本概念讲起。如果我们知道一些资源（图片，CSS样式文件等）在一段时间内会不改变，则可以用缓存保存这些资源。在设置的时间内，资源被认为是新鲜（fresh），过了这段时间后设置它的状态为过期（stale）。</p><p>缓存允许客户端（例如浏览器）尽可能长时间地保留住资源，然后过期后丢弃它再从服务器获取新版本。为了使缓存机制能生效，需要一种方法来发送资源的过期时间。</p><p>为了解决这个问题，HTTP提供了两种主要方式。下面我们首先讨论第一种方法。</p><p><img src="https://ae01.alicdn.com/kf/Ha63d64c619264ee3bd102582b4899216e.png" alt="image.png"></p><h5 id="HTTP-缓存的类型"><a href="#HTTP-缓存的类型" class="headerlink" title="HTTP 缓存的类型"></a>HTTP 缓存的类型</h5><p>通常 HTTP 缓存策略分为两种：</p><ul><li>强缓存</li><li>协商缓存。</li></ul><p>从字面意思我们可以很直观的看到它们的差别：</p><ul><li>强缓存即强制直接使用缓存。</li><li>协商缓存就得和服务器协商确认下这个缓存能不能用。</li></ul><h5 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h5><p>强缓存不会向服务器发送请求，直接从缓存中读取资源，在 chrome 控制台的 network 选项中可以看到该请求返回 200 的状态码，并且size显示from disk cache或from memory cache；</p><h5 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h5><p>协商缓存会先向服务器发送一个请求，服务器会根据这个请求的 request header 的一些参数来判断是否命中协商缓存，如果命中，则返回 304 状态码并带上新的 response header 通知浏览器从缓存中读取资源。</p><h5 id="HTTP-缓存控制"><a href="#HTTP-缓存控制" class="headerlink" title="HTTP 缓存控制"></a>HTTP 缓存控制</h5><p>在 HTTP 中，我们可以通过设置响应头以及请求头来控制缓存策略。</p><p>强缓存可以通过设置Expires和Cache-Control 两种响应头实现。如果同时存在，Cache-Control优先级高于Expires。</p><h4 id="缓存过期Expires和HTTP-1-0缓存的源起"><a href="#缓存过期Expires和HTTP-1-0缓存的源起" class="headerlink" title="缓存过期Expires和HTTP/1.0缓存的源起"></a>缓存过期Expires和HTTP/1.0缓存的源起</h4><h5 id="缓存过期Expires"><a href="#缓存过期Expires" class="headerlink" title="缓存过期Expires"></a>缓存过期Expires</h5><p>Expires是在HTTP/1.0协议中引入的，它与Pragma，Last-Modified和If-Modified-Since共同构成了HTTP缓存体系。Expires也是我们可以使用的最简单的HTTP缓存标识头，表示给定资源过期的时间。我们来看一个例子：</p><p><img src="https://ae03.alicdn.com/kf/H9410b0890a644644aef783045d7b8352l.png" alt="image.png"></p><p>上图中这个logo的过期时间为”Expires: wed, 15 May 2019 88:07:42 GMT”。如果超过Expires指定的日期，浏览器就会尝试重新获这个资源取。到期之前浏览器都会缓存这个资源，刷新页面时候并不会再从服务下载。</p><h4 id="使用Last-Modified和If-Modified-Since验证"><a href="#使用Last-Modified和If-Modified-Since验证" class="headerlink" title="使用Last-Modified和If-Modified-Since验证"></a>使用Last-Modified和If-Modified-Since验证</h4><p>要做到完美的缓存，就要做到仅仅在确定资源更新时候才重新下载它。实现这个目标的一种方法是允许浏览器根据这个资源去询问服务端。浏览器怎么确定目前资源的更新版本呢？有一个HTTP请求If-Modified-Since标识。</p><p>假设我们在该资源过期日期5月16日请求该资源，客户端浏览器会发起请求：</p><p><img src="https://ae03.alicdn.com/kf/Hf78c4503b8434ba091227977ed50aefav.png" alt="image.png"></p><p>请求头总包含”If-Modified-Since”，它表示浏览器已经下载过服务器18年12月25日修改过的版本。收到该请求后，服务器会判断，这个日期之后，图像是否已经更新，如果是，则服务器会响应下载新的图像下载。否则响应”304 Not Modified”</p><p><img src="https://ae03.alicdn.com/kf/H71e6086ff970444799a03b5238f07323L.png" alt="image.png"></p><p>收到此这个响应，浏览器就从浏览器缓存中读取资源，不再从服务器下载。通过使用Last-Modified和If-Modified-Since可以确保客户端不会重复下载资源，也可以确保服务器端有变化时候，客户端可以及时更新到最新的资源。</p><h4 id="用Pragma更新缓存"><a href="#用Pragma更新缓存" class="headerlink" title="用Pragma更新缓存"></a>用Pragma更新缓存</h4><p>虽然HTTP/1.0没方法让服务器告诉客户端不缓存特定资源，但通过客户端请求可以设置HTTP请求头，不为该资源请求缓存，这个头方法叫Pragma：</p><p>Firefox的调试工具中，有个”禁用缓存”的复选框，选择后，HTTP请求就会自动在请求头中增加”Cache-Control: no-cache”</p><p><img src="https://ae04.alicdn.com/kf/H5cd49c7d2ab44225abc01a4b2365f16fs.png" alt="image.png"></p><p>该请求就不会使用缓存直接从服务器请求该资源，如下图，HTTP状态码返回为200而非之前的304。</p><p>Pragma最初设计可能为了抓取标题所用。后续的HTTP/1.1为兼容也严格支持该选项。</p><h4 id="HTTP-1-1和cache-control"><a href="#HTTP-1-1和cache-control" class="headerlink" title="HTTP/1.1和cache-control"></a>HTTP/1.1和cache-control</h4><p>为了克服Expires的局限性，HTTP/1.1中引入了cache-control，极大地增强了开发人员管理缓存资源的灵活性。cache-control不严格依赖日期，而通过一些指令来完成对缓存的管理。</p><h4 id="输入max-age指令"><a href="#输入max-age指令" class="headerlink" title="输入max-age指令"></a>输入max-age指令</h4><p>我们可以将max-age指令看成是对Expires的简单替代方法。比如上面对应于5月15号，一个月过期的日期（259200s），对应的cache-control头进行响应：</p><p><img src="https://ae03.alicdn.com/kf/Hfc4ef39e6be04d8f8256e56391c2224c9.png" alt="image.png"></p><p>注意，max-age是对应于请求的时间的，所以在缓存生成时开始计算。单位为持续的秒数，由于不用考虑时区等因素，这种方法更加简单准确。</p><p>max-age指令可以支持的最多一年的持久时间，可以满足绝大多数情况的需求。</p><h4 id="使用Etag和If-None-Match更新缓存"><a href="#使用Etag和If-None-Match更新缓存" class="headerlink" title="使用Etag和If-None-Match更新缓存"></a>使用Etag和If-None-Match更新缓存</h4><p>HTTP/1.1还引入一种新的Etag缓存更新策略，用来补充If-Modified-Since。我们将实体标记视为服务器唯一标识Etag，响应标头中使用带有字母数字ID的资源版本表示方法：</p><p><img src="https://ae05.alicdn.com/kf/H26cc208e0b2f44679dde9dd019504162p.png" alt="image.png"></p><p>客户端下次请求时候，会使用”If-None-Match”头通知服务器端目前缓存的资源版本的ID特定版本的资源：</p><p><img src="https://ae01.alicdn.com/kf/H584a967472624ec8a17d58141efe858ck.png" alt="image.png"></p><p>如果资源的最新版本与上面的实体标签 ID”5c2209c2-14d05”不匹配，则服务器会响应新版本的ID。否则响应”304 Not Modified”。</p><p><img src="https://ae03.alicdn.com/kf/H712755c4ec3649048b3c7b1f342e86baB.png" alt="image.png"></p><p>为了防止ID名重名，一般会使用散列（比如MD5）来表示正Etag的ID，通过对资源进行计算散列可以保证文件变更和验证，也能防止资源被篡改。</p><h4 id="通过私有和公共方式确保缓存隐私"><a href="#通过私有和公共方式确保缓存隐私" class="headerlink" title="通过私有和公共方式确保缓存隐私"></a>通过私有和公共方式确保缓存隐私</h4><p>上面我们讨论了，基于浏览器的本地HTTP缓存，他在第一次请求时候在本地缓存资源。现实中，我们请求的资源在被下载到本地之前通过一个或多个缓存或”共享”缓存（CDN）。这些缓存或者代理由ISP供应商或者或服务商IT部门提供。在HTTP访问中，各级中间缓存都会缓存并且浏览这些资源。</p><p>为了解决这个问题，HTTP/1.1引入了私有缓存和公共缓存控制指令。尽管这些指令还不十分完善，但是，我们可以使用它来设置，某些资源不会被在公共代理中被缓存。</p><p>如果多个人共享电脑，他们则可以共享一个缓存。如果资源指定了私有缓存指令，那么浏览器只会让请求他用户可以使用它。</p><h4 id="使用no-store和no-cache限制缓存"><a href="#使用no-store和no-cache限制缓存" class="headerlink" title="使用no-store和no-cache限制缓存"></a>使用no-store和no-cache限制缓存</h4><p>HTTP/1.1纠正了HTTP/1.0的Pragma头的不足，并为Web开发人员提供了一种可以完全禁用缓存的方法。第一个指令<strong>no-cache</strong>强制缓存在重用之前重新验证。与must-revalidate不同，no-cache强制浏览器在必须重新验证。</p><p>第二个指令，no-store 表示资源在任何情况下都不会被缓存。</p><h4 id="限制特定请求的缓存"><a href="#限制特定请求的缓存" class="headerlink" title="限制特定请求的缓存"></a>限制特定请求的缓存</h4><p>如果我们想要申请至少在一定时间内刷新的资源，该怎么办？也没有问题！缓存控制不仅仅可以通过服务器控制客户端的缓存，相应地客户端也可以用来指示对某些缓存的限制。</p><p><strong>max-age，no-cach</strong>e和<strong>no-store</strong>指令都支持在客户端请求头中使用。但是注意具体的意义可能是相反的。例如，在请求中指定max-age标头会通知代理服务器它们不能使用任何早于该标头指定的持续时间的缓存响应。</p><p>除上面的三个指令外，我们还可以使用四个仅在请求头中使用的缓存控制指令。</p><p>第一个是<strong>min-fres</strong>： 它允许客户请求在设定时间秒数内会更新的资源。</p><p><img src="https://ae02.alicdn.com/kf/Hfed6678218b44d589e8c0db6d9aebe424.png" alt="image.png"></p><p><strong>max-stale</strong>指令通知缓存服务器，客户端愿意接受过期的资源，且过期不超过设定秒数的缓存。</p><p><img src="https://ae02.alicdn.com/kf/Hed9db8c1b93747e097f4d8c7278d2bd7a.png" alt="image.png"></p><p><strong>no-transform</strong>指令通知缓存服务器客户端不希望请求任何版已经被修改该过的资源的缓存。</p><p>最后一个指令<strong>only-if-cached</strong>通知缓存服务器客户端只需要一个缓存的响应，且不需要直接请求服务器获得缓存状态。如果缓存无法满足请求，则应返回504网关超时响应。</p><h4 id="Vary头和服务器协商的响应"><a href="#Vary头和服务器协商的响应" class="headerlink" title="Vary头和服务器协商的响应"></a>Vary头和服务器协商的响应</h4><p>我们最后要说明的浏览器如何识别缓存资源，以及服务器协商怎么进行。</p><p>浏览器缓存实际上只查看URL和方法，由于几乎所有可缓存的请求都是GET请求，所以浏览器通过URL就能识别资源。客户端服务器用于协商的HTTP头标识，服务器通过Vary标头传送给客户端。例如，客户端发出以下请求：</p><p><img src="https://ae04.alicdn.com/kf/Hac13b9577c2541dda9351096e15436185.png" alt="image.png"></p><p>Accept-Encoding头表示在服务器端支持的情况下允Web服务器采用gzip对响应的资源进行压缩传输。服务器需要响应协商请求头时候会使用Vary标识头，它会将其附加到其响应头的Vary标头中，如下图所示：</p><p><img src="https://ae01.alicdn.com/kf/H01e573bcd9544ee2beb9318cba6e9737D.png" alt="image.png"></p><p>这样，对资源缓存时候不仅应该使用URL的值来缓存响应，而且加上使用请求头的Accept-Encoding值来进一步限定缓存的键。因此使用不同Accept-Encoding标识头的请求（例如deflate），则其缓存就不用gzip。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>缓存是增强Web服务和应用APP性能的一种非常强大的方法，本文旨在指导Web开发者和相关码农了解HTTP缓存，并将其作为一们必须的工具来学习。如果你想需要更深入的学习，可以参考MDN的文档学习。</p><p>转自<a href="https://www.toutiao.com/a6680079212524601864/?log_from=2b50a753def3d_1643120288254">每一个Web开发者需要掌握的HTTP缓存知识</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http缓存机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript从入门到精通</title>
      <link href="/2022/01/15/typeScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2022/01/15/typeScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h4 id="typescript简介"><a href="#typescript简介" class="headerlink" title="typescript简介"></a>typescript简介</h4><p>typescript是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持,它是由微软开发，并且在 github上开源。</p><p>没错，它是由微软出的，在typescript中能找到很多.net的影子。比如接口，泛型，面向对象等。像当前比较流行的angular，Vue都是基于typescript开发的。所以学习typescript已是迫在眉睫了。</p><p>众所周知，前端的核心技术javascript是一个弱类型的解释型的语言,那么既然前端有了js，为何又出现了typescript呢？</p><p>由于javascript是弱类型的语言，我们通过var定义的变量可以去赋值成任意类型的值。这就难免会出现以下这种情况。</p><p><img src="https://ae04.alicdn.com/kf/H37f9c75a13a64151ba204da39a431908r.png" alt="image.png"></p><p>这里我通过原生的js实现了一个简单的加法计算，从效果图上可以看出来，它计算的结果好像有些问题， 1+1=11？</p><p>这个问题其实也很好理解，稍等有点基础的童鞋就应该能看出来，这是因为在input中的value值是一个字符串类型的，两个字符串相加，结果显而易见肯定是 1+1=11了。</p><p>其实我们的需求很明确，需要做两个数的相加。返回它们的类型为一个浮点型。那么这时候就已经带了我们接下来的一个知识点。</p><h4 id="typescript中的类型"><a href="#typescript中的类型" class="headerlink" title="typescript中的类型"></a>typescript中的类型</h4><p>要使用typescript，我们需要在nodejs环境下全局安装typescript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><p>安装完成后，我们可能使用tsc（typescript compile）命令来编译typescript，我们可以使用tsc -v来查看typescript的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><p>typescript的后缀名为.ts，我们先来写一个typescript文件先看看它的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str:<span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">var</span> num:<span class="built_in">Number</span> = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>我分别定义了字符串类型的number类型的两个变量，在变量的后面 :type 我们可以给一个变量去规定它的类型。</p><p>再来看一个错误的写法</p><p><img src="https://ae02.alicdn.com/kf/Hff27da5ce13a496e95bd191b0888e5bc2.png" alt="image.png"></p><p>我定义的变量是number类型，然后却像Js中给了任意类型的，结果，可以看到，typescript在还未编译的时候就开始抛出异常了。提示我们要给num值为number类型的值。</p><p>其实这些在一些强类型的语言(java,C#,C++等)中都有这种语法提示。</p><p>我们再来编译一下这个ts文件，看看编译后的文件长什么样</p><p><img src="https://ae01.alicdn.com/kf/Hf608b0687ae74c04890d634368029d008.png" alt="image.png"></p><p>生成了demo1.js，看到demo1.js就是我们熟知的Js了。</p><p>在typescript中，如果一个变量可以是多个类型，比如这样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anything: <span class="built_in">Number</span> | <span class="built_in">string</span> = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="keyword">var</span> anything1: <span class="built_in">Number</span> | <span class="built_in">string</span> = <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>我们可以通过 | 来设置多个类型。</p><p>当然如果我们不知道具体的类型是什么，我们还可以使用any</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> any1 :<span class="built_in">any</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> any2 :<span class="built_in">any</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> any3 :<span class="built_in">any</span> = [];</span><br><span class="line"><span class="keyword">var</span> any4 :<span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> any5 :<span class="built_in">any</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h5 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h5><p><img src="https://ae04.alicdn.com/kf/Hed929ca20edb4afd993df2cea2caccc5I.png" alt="image.png"></p><p>我定义了一个变量 s 没有指定类型，但是赋值了一个 字符串，然后，继续将这个s赋值为一个数字的时候，会发现有语法错误。</p><p>在typescript中，如果没有指定变量类型，第一次给变量赋值的类型默认就是这个变量的类型，后面如果改这个个类型，就是抛出语法错误，编译也不会通过。</p><h5 id="void"><a href="#void" class="headerlink" title="void"></a>void</h5><p>值得注意的是在JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：比如这样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;my name is bin&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>void同样可以申明在变量中，但也只能赋值null或者undefined，好像没什么用~~</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable :<span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> unusable1 :viod = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在我的印象中,JS中也用到了void这个关键字，一般用在两个地方<br>1、<a href="javascript:void(0)"></a><br>2、if(a === void 0 ) {} 这个是用来判断a 是否是undefined</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="number">0</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>值得注意的是：通过null和underfined定义的变量，可以直接赋值给number，string这些类型。但是void却不行，举个例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过void来定义的变量</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> unusable1: <span class="built_in">void</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> num1: <span class="built_in">number</span> = unusable; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> num2: <span class="built_in">number</span> = unusable1; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> un: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> num3: <span class="built_in">number</span> = un; <span class="comment">// 不报错</span></span><br></pre></td></tr></table></figure><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li><p>typescript是js的一个超集，它是一种类似java、C# 强类型的语言，typescript本身不能在浏览器中运行，所以它需要经过编译成js后才可以。</p></li><li><p>typescript可以为变量指定一个或多个类型。</p></li><li><p>void关键字在typescript中的使用和注意事项。</p></li></ul><h4 id="深入理解typescript中的类型"><a href="#深入理解typescript中的类型" class="headerlink" title="深入理解typescript中的类型"></a>深入理解typescript中的类型</h4><h5 id="1、自定义类型"><a href="#1、自定义类型" class="headerlink" title="1、自定义类型"></a>1、自定义类型</h5><p>当然，我们可以任意去扩展类型。比如像这样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p:Person = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>这里我们可以指定p的类型是一个Person，所以P后面只能是Person类的实例对象</p><p>当然，我们指定类型的时候不仅仅可以给变量定义，同样，我们可以给函数的参数定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">number</span></span>) :<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a +b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们给形参a,b分别设置了number类型，并且给了这个函数的返回值也规定了Number类型，所以在这个add方法的最后，必须返回一个number类型的结果出来。否则编译不通过。</p><h5 id="2、规定数组元素的类型"><a href="#2、规定数组元素的类型" class="headerlink" title="2、规定数组元素的类型"></a>2、规定数组元素的类型</h5><p>比如，我要创建一个number类型的数组，我们可以这样来做</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr :<span class="built_in">number</span> [] = [<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>很明显，我定义了一个number类型的数组，里面只能存储Number类型的数据。比如1 ，2，3，NaN等。举个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr :number [] = [];</span><br><span class="line"></span><br><span class="line">arr.push(1);</span><br><span class="line">arr.push(NaN);</span><br><span class="line">arr.push(&#x27;123&#x27;); // 提示错误</span><br></pre></td></tr></table></figure><p>我们定义了一个number类型的数组，当我们往里面push数值类型的值的时候，语法正常通过，当我们push一个字符串的时候，很明显，编辑器已经检测到了语法的错误。</p><p>阅读过vue源码的小伙伴不难看出，vue2.X也是基于typescript编写的</p><h4 id="函数的特性"><a href="#函数的特性" class="headerlink" title="函数的特性"></a>函数的特性</h4><p>其实上面我已经列举了一个函数的基本特性了，它可以针对形参和返回值进行类型控制。接来我们看下函数的其它特性</p><h5 id="1、默认参数和可选参数"><a href="#1、默认参数和可选参数" class="headerlink" title="1、默认参数和可选参数"></a>1、默认参数和可选参数</h5><p>先来看一个简单的示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span> (<span class="params">name = <span class="string">&#x27;张三&#x27;</span></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line">showName()</span><br></pre></td></tr></table></figure><p>没错，这一点和ES6完全一样，但是还没完，继续往下看</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName ?: <span class="built_in">string</span></span>) :<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say(<span class="string">&#x27;憨憨的斌哥&#x27;</span>);</span><br><span class="line">say(<span class="string">&#x27;张&#x27;</span>, <span class="string">&#x27;三&#x27;</span>);</span><br></pre></td></tr></table></figure><p>第二个参数lastName这里我把它定义成了一个可选参数，也就是说这个参数我传可不传，我们只需要在形参后面跟一个小问号即可，这一点在C#语言中也经常被使用到。</p><p>你可能会有疑问，难道我不加问号，就像JS中一样只填一个参数不行吗？我们来验证一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function say(firstName: string, lastName: string) :string &#123;</span><br><span class="line">  return firstName + lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say(&#x27;憨憨的斌哥&#x27;); // 报语法错误</span><br><span class="line">say(&#x27;张&#x27;, &#x27;三&#x27;);</span><br></pre></td></tr></table></figure><p>很明显，编辑器已经报语法错误了，所以这样不行。下面划重点</p><blockquote><p><strong>注意：由于可选参数可传可不传，所以它必须放在最后。也就是说，在可选参数后面，不可以有必填参数，否则也报语法错误</strong></p></blockquote><h5 id="2、剩余参数"><a href="#2、剩余参数" class="headerlink" title="2、剩余参数"></a>2、剩余参数</h5><p>为了匹配形参和实参数量可能不一样的情况，typescript给我们提供了一个叫剩余参数的特性。</p><p>我们要对一组数组求和，这是具体是多少个我们不确定。也就是说，我们可以这样调用</p><p>sum(1,2,3) //针对1+2+3</p><p>sum(1,2,3,4)//针对1+2+3+4</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x1:<span class="built_in">number</span>, ...args:<span class="built_in">number</span> []</span>) :<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res:<span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">  res = args.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + next</span><br><span class="line">  &#125;, x1)</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>定义了一个sum函数，…args就是我们所说的剩余参数了，可以看到它是一个number类型的数组然后将这个数组进行累加。</p><p>先编译ts成js文件，然后通过node环境直接输出正常结果。</p><h5 id="3、函数的重载"><a href="#3、函数的重载" class="headerlink" title="3、函数的重载"></a>3、函数的重载</h5><p>这个概念在微软的C#中会被经常用到，什么意思呢？就是说，一个函数可以被多次定义，但是每次定义的参数都不一样。我们称之为函数的重载。</p><p>特点：</p><ol><li>函数名相同</li><li>参数不相同</li></ol><p>这在js中是完全不可能的，如果同一个函数名在同一作用域下被多次定义，不论参数，那么后定义的函数一定会得覆盖先定义的函数，也就是说同名函数只能存在一个。</p><p>但是JavaScript本身是个动态语言。 JavaScript里函数根据传入不同的参数而返回不同类型的数据是很常见的。</p><p>在typescript中，我们可这样来定义函数的重载</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">str: <span class="built_in">String</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">num: <span class="built_in">number</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">obj:<span class="built_in">any</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj**<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getInfo(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">getInfo(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>前可以定义多个同名函数，且没有方法体，在最后一个函数的方法体中，我们可以针对各种不同类型的参数做不同的处理以达到方法的重载。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol><li>我们给函数定义类型的时候，不仅仅可以是ES中的基本类型，也可以是我们定的类，对象。</li><li>在typescript中，类比一下ES6，其实有很多相同的地方，但是更多微软采用了.net的编码风格，像函数的可选参数和方法的重载。在C#中都能找到相应的概念。</li></ol><h4 id="typescript中的接口"><a href="#typescript中的接口" class="headerlink" title="typescript中的接口"></a>typescript中的接口</h4><h5 id="1、typescript定义接口"><a href="#1、typescript定义接口" class="headerlink" title="1、typescript定义接口"></a>1、typescript定义接口</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line"> <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line"> lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过interface关键字来声明接口的定义，后面紧跟着的是接口的名称。一般来说有一个不成文的规定，为了增加辨识度，接口名称一般用大写的 <strong>I</strong> 来作为首字母，表示我这定义的是一个接口。</p><p>接口定义好了以后，就是去使用这个接口了。来看示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: IPerson</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person.firstName + <span class="string">&quot; &quot;</span> + person.lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们定义好了接口后，后续在使用接口的时候，typescript会给你们相应的提示了，这完全和C#一个亚子。</p><p>当然，如果我们不按照常理出牌，看看会发生什么？</p><p><img src="https://ae04.alicdn.com/kf/H2123cf961f0a4884a5de07aa50bcc242Z.png" alt="image.png"></p><p>我添加一个age属性，typescript就迫不及待的给我一个大大的中文提示。所以，还是得按规矩办事呀。</p><h5 id="2、接口的继承"><a href="#2、接口的继承" class="headerlink" title="2、接口的继承"></a>2、接口的继承</h5><p>说到继承，那么首先肯定得有一个类，那么在typescript中的类，它包涵了ES6中的类的所有语法。</p><p>来看示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// 这里面的public表示定义的属性为公有的，能被类的外部所访问到</span></span><br><span class="line">  <span class="comment">// private为私有的，只能在类的内部访问</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;eat something.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在typescript中，类是可以继承自接口的，这里需要注意的是，继承接口和继承类不一样，继承类我们是通过extends关键字，而继承接口，在typescript中使用的是 <strong>implements</strong> 来实现的。来看示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface IAnaimal&#123;</span><br><span class="line">  walk(): <span class="keyword">void</span>;</span><br><span class="line">  weight: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="title">implements</span> <span class="title">IAnaimal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  public name: string;</span><br><span class="line">  private age: number;</span><br><span class="line"></span><br><span class="line">  public weight: number;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:string, age:number</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>类继承了接口，类中必须得有接口中的属性，比如这里面的weight</li><li>接口中定义的方法不用去写具体的实现，我们只需要定义即可。</li><li>类继承了接口，那么在类中必需要实现接口中的方法（所以上面的语法不能通过）</li></ul><p><img src="https://ae03.alicdn.com/kf/H1489c963ac9a4763b5a96fb248334b68f.png" alt="image.png"></p><p>把鼠标移到报错的类名上，提示出我们的类继承了接口，而没有实现接口中的方法。</p><p>所以我们只需要在类中实现walk方法即可。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><ol><li>接口是用来定义规范的，里面可以有方法和属性，方法本身没有方法体</li><li>类继承了接口的则必须要实现接口中的方法</li></ol><h4 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h4><p>我们知道，在typescript中， 我们可以通过类型来约束一个函数的参数和返回值。比如这样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params">val:<span class="built_in">string</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我定义了一个函数getVal要求参数是一个string类型，返回值也是一个string类型，假设有这样一个需要，我还需要同样的一个函数，我传入一个number类型，那么结果也给我返回一个number类型。</p><p>那么这个时候，我们只能通过再定义一个方法，去单独实现这个功能了,我们可能这样去写</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal1</span>(<span class="params">val:<span class="built_in">number</span></span>) :<span class="title">number</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写肯定没毛病，那我如果还需要一个boolean类型的呢，我还要一个object类型的呢？难道一个个的去定义吗？</p><p>很明显造成了代码的冗余，同样的方法，我们要定义多次。</p><p>这时候有人可能会说，我们可以把这个类型定义成any呀，的确，好像确实可以，但是，这时候我们的返回值也是一个any,也就是说，我的参数和返回值的类型可能不一致。也就失去了约束的意义了。</p><p>为了解决类似的问题，typescript为我们提供一个叫泛型的概念。</p><p>也就是说我们可以将这个参数和返回值的类型定义成一个动态的，语法是这样的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>&lt;<span class="title">T</span>&gt;(<span class="params">val:T</span>) :<span class="title">T</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将这个动态的类型定义成泛型，具体的类型只能通过调用该函数的时候才能确定</p><p>我们应该这样去调用该函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>&lt;<span class="title">T</span>&gt;(<span class="params">val:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getVal&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">getVal&lt;<span class="built_in">number</span>&gt;(<span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">getVal&lt;<span class="built_in">boolean</span>&gt;(<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">getVal&lt;<span class="built_in">object</span>&gt;(<span class="built_in">Object</span>.create(<span class="literal">null</span>))</span><br></pre></td></tr></table></figure><p>这时候，我们可以去调用任意类型的数据了。这个类型将由函数调用的时候所决定。</p><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><p>可以看出来，上面的示例我们实际上写了一个泛型方法，那么同理，泛型类的定义也是一样的，来看示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> list: T[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">val: T</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">reduce</span>(<span class="params">index: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getList(): T[]&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">p.add(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">p2.add(<span class="literal">NaN</span>)</span><br></pre></td></tr></table></figure><p>我们可以在类名或者方法名的后面紧跟泛型<T>,且我们在实例化的时候，在类的后面需要紧跟具体的类型。如上图</T></p><p>最后我们在调用 add方法的时候，就只能传对应的类型进去了</p><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPrint&#123;</span><br><span class="line">  &lt;T&gt;(val:T):T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getData:IPrint = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">val:T</span>) :<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="literal">NaN</span>)</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>这种写法可能有点难得理解，没关系，我们再换种写写吧</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPrint&lt;T&gt;&#123;</span><br><span class="line">  (val:T):T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getData&lt;T&gt;(val:T) :T&#123;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val1: IPrint&lt;<span class="built_in">string</span>&gt; = getData;</span><br><span class="line">val1(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val2: IPrint&lt;<span class="built_in">number</span>&gt; = getData;</span><br><span class="line">val2(<span class="literal">NaN</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val3: IPrint&lt;<span class="built_in">object</span>&gt; = getData;</span><br><span class="line">val3(<span class="built_in">Object</span>.create(<span class="literal">null</span>))</span><br></pre></td></tr></table></figure><p>我们可以直接将类型定义到接口名的后面,然后我们在拿到getData函数的引用的时候去约束类型为一个泛型接口的类型即可。最终在调用的时候，我们只需要传入对应的类型的值即可。</p><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><ul><li>泛型接口可以看成是一个动态的类型，这种类型只能通过我们在最终的调用的时候去来确定它，作用就是可以避免代码冗余</li></ul><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><h4 id="基于webpack4-x从0开始搭建ts的开发环境"><a href="#基于webpack4-x从0开始搭建ts的开发环境" class="headerlink" title="基于webpack4.x从0开始搭建ts的开发环境"></a>基于webpack4.x从0开始搭建ts的开发环境</h4><p>webpack4.x已经问世好久了，0配置是一大亮点，but，在配置ts的开发环境时，才明白这就只是一个噱头而已。下我们一步步的来搭建我们的项目吧</p><h5 id="一、创建工程目录和基本目录"><a href="#一、创建工程目录和基本目录" class="headerlink" title="一、创建工程目录和基本目录"></a>一、创建工程目录和基本目录</h5><blockquote><p>mkdir ts<br>cd ts</p></blockquote><p>初始化项目目录后，我们需要初始化我们的项目配置文件package.json文件。我们在ts目录下运行</p><blockquote><p>npm init -y</p></blockquote><p>后会生成一个默认的package.json配置文件。</p><p>接下来，我们创建ts的配置文件，tsconfig.json，我们运行</p><blockquote><p>tsc –init</p></blockquote><p>即可，在package.json相同目录会生成一个tsconfig.json文件，这里面默认是对ts的基本配置。</p><p>两个配置文件完成了以后，我们创建一个src目录</p><blockquote><p>mkdir src<br>cd src</p></blockquote><p>这里创建了ts的工程目录，以及webpack4.x默认的目录src,在src中，我们创建一个<strong>index.ts</strong>文件，注意这里是**.ts**文件哦，它将将是我们的程序的主入口文件</p><h5 id="二、安装依赖和基本配置"><a href="#二、安装依赖和基本配置" class="headerlink" title="二、安装依赖和基本配置"></a>二、安装依赖和基本配置</h5><p>我们要编译ts，我们需要在当前目录下安装typescript 、ts-loader和webpack</p><blockquote><p>cnpm install typescript ts-loader webpack -D</p></blockquote><p>安装完成后，我们还不能直接运行webpack命令，因为webpack默认会去找src下的index.js文件为入口文件，而我们创建的是ts文件，并且我们需要手动配置我们的ts-loader</p><p>创建webpack.config.js文件。</p><p>手动指定我们的入口文件</p><blockquote><p>entry : ‘./src/index.ts’</p></blockquote><p>同时，我们需要将.ts结尾的文件通过ts-loader来处理它。我们需要在module下配置ts的编译配置，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们的开发环境就配置好了，接下来我们来打包看下效果</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello typescript...&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// ts</span><br><span class="line">webpack --mode development</span><br><span class="line">// cd dist</span><br><span class="line">node .\main.js</span><br></pre></td></tr></table></figure><h5 id="三、ts中的装饰器的基本使用"><a href="#三、ts中的装饰器的基本使用" class="headerlink" title="三、ts中的装饰器的基本使用"></a>三、ts中的装饰器的基本使用</h5><p>环境配置完后以后，我们再来看看ts中的装饰器。先来看下什么是装饰器？</p><p>顾名思义，装饰器就是用来修饰其它的事物的。</p><p>在ts中，装饰器就是函数,它可以用来装饰类。类的属性，方法以及方法的参数等。这样说好像有点抽象，没关系，我先来举个栗子</p><p>我们先来申明一个装饰器。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申明一个装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">target:<span class="built_in">any</span></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@say</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// ts</span><br><span class="line">webpack -<span class="literal">-mode</span> development</span><br><span class="line">// <span class="built_in">cd</span> dist</span><br><span class="line">node .\main.js</span><br></pre></td></tr></table></figure><p><strong>这里要注意的是ts中默认不支持装饰器的语法解析，我们需要手动更新其配置文件tsconfigs.json</strong></p><p><strong>我们需要将experimentalDecorators设置为true,默认被注释掉了，只需要将注释去掉即可。</strong></p><p>申明了一个say的装饰器，然后我将它修饰在一个类上面，注意，我们通过 <strong>@+装饰器名</strong> 直接加在类的前面即可。最后在执行的时候，我们打印了装饰器中的第一个参数target。结果是[Function Person]</p><p>说明了，当前的装饰器中的第一个参数target 就是我们的要修饰的类对象。</p><h5 id="四、装饰器传参和应用"><a href="#四、装饰器传参和应用" class="headerlink" title="四、装饰器传参和应用"></a>四、装饰器传参和应用</h5><p>要想让装饰器能够传参，我们在定义装饰器的时候，内部必须是返回一个函数。像这样</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Say</span>(<span class="params">name: <span class="built_in">any</span></span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里的name就是来接收装饰器传过来的实参</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target:<span class="built_in">any</span></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// target是我们的要修饰的对象。这里是类</span></span><br><span class="line">    target.prototype.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="meta">@Say</span>(<span class="string">&#x27;hell0 ts&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p: <span class="built_in">any</span> = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，这里调用的时候我们传入了hello ts 参数，我们在装饰器函数内部可以接收到这个函数。传参的目的达到了。</p><p>我们在Person类中并没有定义name属性，我们接下来打印一下最终的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// ts</span><br><span class="line">webpack --mode development</span><br><span class="line">// cd dist</span><br><span class="line">node .\main.js</span><br><span class="line">// hello ts</span><br></pre></td></tr></table></figure><p>从执行结果可以看出来，最终打印出来了 hello ts , 它是我们通过装饰器传入的，在装饰器内部，我们给类的原型对象上添加了一个name属性，并且赋值为我们传入的参数 。</p><p><strong>也就是说：我们可以不改变类的内部代码逻辑，通过装饰器可能实现动态修改类的内部逻辑</strong></p><p><strong>同样的道理，我们也可以在装饰器中去重写类的方法成员</strong></p><h5 id="五、属性装饰器"><a href="#五、属性装饰器" class="headerlink" title="五、属性装饰器"></a>五、属性装饰器</h5><p>和类的装饰器一样，通过函数的方式去申明，只不过我们需要将装饰器加在对应的属性上面</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target:<span class="built_in">any</span>, attr:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params, target, attr);</span><br><span class="line"></span><br><span class="line">    target[attr] = params</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="meta">@logProperty</span>(<span class="string">&#x27;我是属性装饰器&#x27;</span>)</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">any</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// ts</span><br><span class="line">webpack -<span class="literal">-mode</span> development</span><br><span class="line">// <span class="built_in">cd</span> dist</span><br><span class="line">node .\main.js</span><br><span class="line">// 我是属性装饰器 Person&#123;&#125; name</span><br></pre></td></tr></table></figure><ul><li>params是我们动态传入的装饰器的参数</li><li>target是我们修饰的属性对象</li><li>attr是我们要修饰的属性名</li></ul><p>最后我们可以通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target[attr] = params;</span><br></pre></td></tr></table></figure><p>来改变类的属性值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let p1 = new Person();</span><br><span class="line"></span><br><span class="line">console.log(&#x27;p1.name =&gt;&#x27;, p1.name)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node .\main.js</span><br><span class="line">// p1.name =&gt; 我是属性装饰器</span><br></pre></td></tr></table></figure><p>可以看到我们已经通过装饰器修改了类的属性。</p><h5 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h5><ol><li>如何从0-1配置webpack编译ts的项目</li><li>ts中的使用装饰器需要修改默认配置</li><li>类装饰器和属性装饰器的基本用法和传参</li></ol><h4 id="类及其高级应用"><a href="#类及其高级应用" class="headerlink" title="类及其高级应用"></a>类及其高级应用</h4><h5 id="在ES中的类的基本使用"><a href="#在ES中的类的基本使用" class="headerlink" title="在ES中的类的基本使用"></a>在ES中的类的基本使用</h5><p>在ES6之前，前端开发者想要使用面向对象编程，不得不用function 来模拟类，然后通过原型prototype去编写类的方法。</p><p>自从ES6出现了，我们终于可以像后端php,java,python他们那样通过class关键字来定义类了。</p><h5 id="ts中的类"><a href="#ts中的类" class="headerlink" title="ts中的类"></a>ts中的类</h5><h6 id="一、类的方法和属性成员私有化"><a href="#一、类的方法和属性成员私有化" class="headerlink" title="一、类的方法和属性成员私有化"></a>一、类的方法和属性成员私有化</h6><p>我们在ES6中定义的类的属性和方法默认都是公共的，也就是说，实例化类的对象可以访问到类的所有的属性和方法。</p><p>从某种意义上来说，js中的类和java，C#中的类还有是一些差距的，好在typescript完美的帮我们解决了这个问题。</p><p>在typescript中，我们可以使用private 和public关键字来定义类的方法和属性成员。像这样</p><p><img src="https://ae04.alicdn.com/kf/Haca096d0537643899f22a630408e38a2D.png" alt="image-20220117222259860.png"></p><p>我们实例化一个Person类的时候，然后通过类的对象去访问类的私有属性时，ts的语法已经通不过了。提示信息已经说的很清楚。</p><h6 id="二、类的属性的存取器（getter-setter）"><a href="#二、类的属性的存取器（getter-setter）" class="headerlink" title="二、类的属性的存取器（getter,setter）"></a>二、类的属性的存取器（getter,setter）</h6><p>了解过java和C#的都知道，在类中可以给属性添加get和set方法，当我们获取和设置属性的时候，可以触发对应的方法。</p><p>那么刁的功能，typescript肯定也不能落下。于是它也搞了一个出来，我们来看下它怎么用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//private定义私有变量</span></span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//public定义公共变量</span></span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>(): <span class="title">number</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getter trigger&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setter trigger&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>._age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;asd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.age);</span><br><span class="line"></span><br><span class="line">p.age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc .\class.ts</span><br><span class="line">// error: Accesscrs are only available when targeting ECMAScript 5 and highter.</span><br></pre></td></tr></table></figure><p>这是因为默认ts会将它编译成es3，这里我们在编译的时候需要指定一下target参数。我们需要这样去编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tsc .\class.ts --target es5</span><br><span class="line">node .\class.js</span><br><span class="line">// getter trigger</span><br><span class="line">// 18</span><br><span class="line">// setter trigger</span><br></pre></td></tr></table></figure><p>可以看到，当我们获取和设置了age 属性的时候，对应的get和set方法都被触发了</p><p>一看到这个get和set,很容易联想到vue的数据劫持也有一个get 和set方法，功能类似，我们不妨去看看ts编译后的代码吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="comment">/** <span class="doctag">@class </span>*/</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// private定义私有变量</span></span><br><span class="line">    <span class="built_in">this</span>._age = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;getter trigger&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>._age;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;setter trigger&#x27;</span>);</span><br><span class="line">      <span class="built_in">this</span>._age = age;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;asd&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.age);</span><br><span class="line">p.age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>看到这段代码，熟悉vue原理的都能明白，它就是这么干的。</p><p>不得不说typescript 厉害呀</p><h5 id="泛型类-1"><a href="#泛型类-1" class="headerlink" title="泛型类"></a>泛型类</h5><p>前面我说到了泛型的基本用法，普通的ts约束只能限制变量为某一种类型，而这种往往不能满足一些特有的需求，还好有泛型来救场</p><p>泛型类的定义，我们只需要在类名后加了泛型即可，像这样</p><p><img src="https://ae01.alicdn.com/kf/H8d63c82ee9f84676b471b69d15f9202f5.png" alt="image.png"></p><p>我们定义了一个泛型类，并且在实例化的时候指定类型为number 当我们add 一个字符串的时候，编辑器已经给我们详细的提示了。</p><h5 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h5><ul><li><p>typescript针对es6中的类做了一些功能增强。</p></li><li><p>typescript中的class 中的get 和set的使用，内部原理其实就是使用的ES5的Object.defineProperty来实现的。</p></li><li><p>泛型类的基本使用</p></li></ul><p>typescript专题<br>转自<a href="https://www.toutiao.com/a6734282037391262219/?log_from=79f8b2c28766f_1642469215977">typescript专题(一)</a></p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端程序员必须知道的 Web 漏洞</title>
      <link href="/2022/01/14/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84-Web-%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/01/14/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84-Web-%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>随着互联网的发展，早已经不是仅限于简单的网页或是社交，电商购物、银行转账、企业管理等等。 Web 安全也是非常值得注意的。</p><h5 id="什么是-Web-安全？"><a href="#什么是-Web-安全？" class="headerlink" title="什么是 Web 安全？"></a>什么是 Web 安全？</h5><p>黑客利用网络操作系统的漏洞和 Web 服务器的 SQL 注入漏洞等，得到 Web 服务器的控制权，轻则篡改、删除、添加数据，重则窃取重要的商业信息、转账等，更严重的就是在网页中植入恶意代码，使网站受到不可预期的侵害。</p><p>常见的攻击可分为三类：XSS、CSRF、SQL注入。</p><h5 id="1、XSS-攻击"><a href="#1、XSS-攻击" class="headerlink" title="1、XSS 攻击"></a>1、XSS 攻击</h5><p>Cross Site Scripting 跨站脚本攻击，为了与 CSS 区分，所以简写为 XSS 。</p><p>恶意攻击给 Web 页面植入恶意的 Script 代码，当用户浏览该网页的时候，嵌入 Web 里面的 script 代码会被执行，从而达到攻击的效果。</p><p>讲直白点，就是恶意攻击者通过在输入框处添加恶意 script 代码，用户浏览网页的时候执行 script 代码，从而达到恶意攻击用户的目的。</p><h6 id="1-1、XSS-的危害"><a href="#1-1、XSS-的危害" class="headerlink" title="1.1、XSS 的危害"></a>1.1、XSS 的危害</h6><ul><li>盗用各类账号，然后进行数据各种任意操作。</li><li>控制企业数据，包括删除、添加、篡改敏感信息等。</li><li>盗取具有商业价值信息。</li><li>强制发送电子邮件，获取验证码。</li><li>控制受害者的机器向其他网站发起攻击。</li></ul><h6 id="1-2、XSS-的攻击类型"><a href="#1-2、XSS-的攻击类型" class="headerlink" title="1.2、XSS 的攻击类型"></a>1.2、XSS 的攻击类型</h6><ul><li>反射型 XSS 跨站脚本攻击</li></ul><p>发出请求时，XSS代码会出现在 url 中，作为输入提交到服务器端，服务器再返回给浏览器，然后浏览器解析执行 XSS 代码，这一过程像一次反射，所以称之为反射型。</p><p>这种类型的攻击，通常是把 XSS 攻击代码放入请求地址的 数据传输部分，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com?q=&lt;script&gt;alert(&quot;恶意脚本&quot;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">http://www.xxx.com?n=&lt;img src=&quot;1 onerror=alert(&#x27;恶意代码&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>存储型 XSS 跨站脚本攻击</li></ul><p>提交的 XSS 代码会存储在服务器端，如数据库、内存、文件系统内，下次请求目标页面时不再提交 XSS 代码。</p><p>如在留言板输入框位置添加 script 代码或 html、css 代码，把代码为转义，直接存入数据库。</p><ul><li>文档型 XSS 跨站脚本攻击</li></ul><p>文档型的 XSS 攻击不会经过服务器，作为中间人的角色，在数据传输过程中劫持到网络数据包，然后修改里面的 html 文档。</p><h6 id="1-3、XSS-的防御措施"><a href="#1-3、XSS-的防御措施" class="headerlink" title="1.3、XSS 的防御措施"></a>1.3、XSS 的防御措施</h6><p>措施1：编码。</p><p>对这些数据进行 html entity 编码。客户端和服务器端都需要进行转义编码。</p><p>措施2：过滤。</p><p>移除用户上传的 DOM 属性，如上边的 onerror。</p><p>移除用户上传的 style、script、iframe 节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 如</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123; <span class="attribute">display</span>:none &#125; </span></span><br><span class="line"><span class="css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>措施3：利用 CSP</p><p>浏览器中的内容安全策略，就是决策浏览器加载哪些资源。</p><h5 id="2、CSRF-攻击"><a href="#2、CSRF-攻击" class="headerlink" title="2、CSRF 攻击"></a>2、CSRF 攻击</h5><p>Cross site request forgery 跨站点请求伪造。</p><p>攻击者诱导受害者进入第三方网站，向被攻击网站发送跨站请求，利用被攻击者在被攻击网站已经获取的注册凭证，绕过后台的用户验证达到冒充用户对攻击网站进行的某种操作。</p><h6 id="CSRF-攻击特点："><a href="#CSRF-攻击特点：" class="headerlink" title="CSRF 攻击特点："></a>CSRF 攻击特点：</h6><ul><li>并没有劫持 cookie，只是伪造受害者的身份。</li><li>攻击一般发起在第三方网站，被攻击网站无法防止攻击发生。</li><li>跨站请求可以是各种方式，如：图片url、超链接、CORS、form提交。</li></ul><h6 id="2-1、CSRF-的危害"><a href="#2-1、CSRF-的危害" class="headerlink" title="2.1、CSRF 的危害"></a>2.1、CSRF 的危害</h6><ul><li>在社交网络，网站被劫持之后，点击会自动关注 + 分享。</li><li>银行系统，被攻击以后可以查询余额，也可以自动转账。</li><li>电商类系统，如果被攻击可以添加、删除、清空购物车。</li></ul><h6 id="2-2、CSRF-的攻击类型"><a href="#2-2、CSRF-的攻击类型" class="headerlink" title="2.2、CSRF 的攻击类型"></a>2.2、CSRF 的攻击类型</h6><ul><li>GET 类型攻击</li></ul><p>使用非常简单，只需要一个 http 请求。</p><p>比如页面中的一个图片添加链接，还有 iframe、script ，最容易完成 CSFR 攻击，且不易被用户发现，隐蔽性超强。</p><p>由于 get 接口是最常见的一种 CSRF 攻击类型，所以很多重要的接口不适用 get 方式，使用 post 一定程度上可以防止 CSRF 攻击。</p><ul><li>POST 类型攻击</li></ul><p>这种类型的 SCRF 攻击，通常使用的是一个自动提交的表单。简单讲就是伪造一个自动提交的表单，一旦访问页面时，表单就会自动提交。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://xxx.com/widthdraw&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;web&quot;</span> /&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;psd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="built_in">document</span>.forms[<span class="number">0</span>].submit()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>链接类型的攻击</li></ul><p>比起前两个，这个类型的比较少见，链接类型的攻击必须要用户点击链接，才能触发。</p><p>通常在论坛中发布的图片嵌入恶意的链接，或以广告的形式诱导用户点击中招。所以我们在邮箱中看到乱七八糟的广告，尽量别点击，防止遇到三方攻击。</p><ul><li>登录 CSRF 攻击方式</li></ul><p>伪造一种新型的攻击方式，用户误以为是在网站正常登录，实际上是使用账户和密码登录到了黑客网站，这样黑客可以监听到用户的所有操作，甚至知道用户的账户信息。</p><h6 id="2-3、CSRF-的防御措施"><a href="#2-3、CSRF-的防御措施" class="headerlink" title="2.3、CSRF 的防御措施"></a>2.3、CSRF 的防御措施</h6><p><strong>措施</strong>1：检查 http 头部的 referer 信息</p><p>referer 包含在请求头内，表示请求接口的页面来源。</p><p>服务端通过检查 referer 信息，发现来源于外域时，就可以拦截请求，通过阻止不明外域的访问，一定程度上可以减少攻击。</p><p><strong>措施</strong>2：使用一次性令牌</p><p>使用一次性令牌做身份识别，黑客是无法通过跨域拿到一次性令牌的，所以服务端可以通过判断是否携带一次性令牌，就可以排除一部分的非法操作者。</p><p><strong>措施</strong>3：使用验证图片</p><p>服务端生成一些文本和数字，在服务端保存这份信息，同时以图片的形式在客户端展现，让用户去合法填写信息，当 CSRF 攻击时，拿不到这个验证码的时候，无法向服务器提供这个信息，导致匹配失败，从而识别它是非法攻击者。</p><p>这个应用非常常见，登录的时候，需要填写图形验证码。</p><p>现在滑动图片验证也非常常见。</p><h5 id="3、SQL注入"><a href="#3、SQL注入" class="headerlink" title="3、SQL注入"></a>3、SQL注入</h5><p>SQL 注入，一般发生在注册、评论、添加等，只有有用户输入的地方，就有可能发生 SQL 注入。SQL 注入是一种常见的 Web 安全漏洞，攻击者会利用这个漏洞，可以访问或修改数据，利用潜在的数据库漏洞进行攻击。</p><p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将(恶意的)SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入(恶意)SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击.</p><h6 id="3-1、SQL-注入危害"><a href="#3-1、SQL-注入危害" class="headerlink" title="3.1、SQL 注入危害"></a>3.1、SQL 注入危害</h6><p>任意的账号都可以登录，可以进行任意的操作，粗暴点讲，就是随便来。</p><h6 id="3-2、-SQL注入分类"><a href="#3-2、-SQL注入分类" class="headerlink" title="3.2、 SQL注入分类"></a>3.2、 SQL注入分类</h6><ul><li>数字型注入</li></ul><p>当输入的参数为整数时，则有可能存在数字型漏洞。</p><ul><li>字符型注入</li></ul><p>当输入参数为字符串时，则可能存在字符型注入漏洞。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符型一般需要使用单引号来闭合。</p><p>字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码。</p><ul><li>其他类型</li></ul><p>其实我觉得 SQL 注入只有两种类型：数字型与字符型。很多人可能会说还有如：Cookie 注入、POST 注入、延时注入等。</p><p>的确如此，但这些类型的注入归根结底也是数字型和字符型注入的不同展现形式或者注入的位置不同罢了</p><p>以下是一些常见的注入叫法：</p><ul><li>POST注入：注入字段在 POST 数据中</li><li>Cookie注入：注入字段在 Cookie 数据中</li><li>延时注入：使用数据库延时特性注入</li><li>搜索注入：注入处为搜索的地方</li><li>base64注入：注入字符串需要经过 base64 加密</li></ul><h6 id="3-3、SQL注入的防范措施"><a href="#3-3、SQL注入的防范措施" class="headerlink" title="3.3、SQL注入的防范措施"></a>3.3、SQL注入的防范措施</h6><p>凡是用户输入的地方，我们都应该防止黑客攻击，永远不要相信用户的输入。所以对应的防御措施分别有：</p><ul><li>添加正则验证，使用正则表达式过滤传入的参数。</li><li>屏蔽敏感词汇。</li><li>字符串过滤。</li></ul><h5 id="4、接口加密"><a href="#4、接口加密" class="headerlink" title="4、接口加密"></a>4、接口加密</h5><p>前后端分离之后，前端每天都会接触到很多接口。发送网络请求的时候，有些接口就会使用 get 方法。最常见的传参方式就是，直接在 url 地址后面加参数。</p><p>直接采用这种方式传输数据，如果数据被劫持或抓包工具偷走之后，就会直接被人盗取走，特别危险。若是采用接口加密，如下：</p><p>接口加密就是将接口请求调用中传递的参数进行加密，目的就是为了保证接口请求中传递参数和返回的结果的安全性，一般比较敏感数据，如身份证、电话号码、账号、密码等需要进行加密。</p><p>常见的加密方式：</p><ul><li>md5 加密</li><li>base64 加密</li><li>RSA 加密</li><li>对称加密算法</li><li>bcryptjs</li></ul><p>加密方式较多，可以根据自己具体的需要和项目语言选择其中一种。</p><p>加密之后的数据更安全，那我们能不能将接口所有的数据都进行加密呢？加密是非常消耗资源的，如果有大批量的数据都进行加密时，返回数据需要的时间就更长，会直接影响用户体验。所以我们进行加密时，只需要对敏感的重要的信息进行加密。</p>]]></content>
      
      
      <categories>
          
          <category> 前端安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite构建工具的使用</title>
      <link href="/2022/01/14/Vite/"/>
      <url>/2022/01/14/Vite/</url>
      
        <content type="html"><![CDATA[<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>极速的服务启动，使用原生 ESM 文件，无需打包!</li><li>轻量快速的热重载，无论应用程序大小如何，都始终极快的模块热重载（HMR）</li><li>丰富的功能，对 TypeScript、JSX、CSS 等支持开箱即用。</li><li>优化的构建，可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建</li><li>通用的插件，在开发和构建之间共享 Rollup-superset 插件接口。</li><li>完全类型化的API，灵活的 API 和完整 TypeScript 类型。</li></ul><h5 id="为什么选-Vite"><a href="#为什么选-Vite" class="headerlink" title="为什么选 Vite"></a>为什么选 Vite</h5><p>直接点说，现市面上的构建工具太慢了（webpack、Rollup 和、Parcel等），Vite直接利用浏览器原生的ES模块使构建速度更快</p><h5 id="搭建第一个-Vite-项目"><a href="#搭建第一个-Vite-项目" class="headerlink" title="搭建第一个 Vite 项目"></a>搭建第一个 Vite 项目</h5><p>使用 npm:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><p>使用 yarn:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><p>然后按照提示操作即可！</p><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># npm <span class="number">6.</span>x</span><br><span class="line">npm init vite@latest my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"># npm <span class="number">7</span>+, 需要额外的双横线：</span><br><span class="line">npm init vite@latest my-vue-app -- --template vue</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure><h5 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h5><p>在安装了 Vite 的项目中，可以在 npm scripts 中使用 vite 可执行文件，或者直接使用 npx vite 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>, <span class="comment">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>, <span class="comment">// 为生产环境构建产物</span></span><br><span class="line">    <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span> <span class="comment">// 本地预览生产构建产物</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以指定额外的命令行选项，如 –port 或 –https。运行 npx vite –help 获得完整的命令行选项列表。</p><h5 id="配置文件解析（常用配置）"><a href="#配置文件解析（常用配置）" class="headerlink" title="配置文件解析（常用配置）"></a>配置文件解析（常用配置）</h5><p>当以命令行方式运行 vite 时，Vite 会自动解析 项目根目录 下名为 vite.config.js 的文件。</p><p>最基础的配置文件是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 配置选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：即使项目没有在 package.json 中开启 type: “module”，Vite 也支持在配置文件中使用 ESM 语法。这种情况下，配置文件会在被加载前自动进行预处理。</p><p>你可以显式地通过 –config 命令行选项指定一个配置文件（相对于 cwd 路径进行解析）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vite --config my-config.js</span><br></pre></td></tr></table></figure><h5 id="配置智能提示"><a href="#配置智能提示" class="headerlink" title="配置智能提示"></a>配置智能提示</h5><p>因为 Vite 本身附带 Typescript 类型，所以你可以通过 IDE 和 jsdoc 的配合来实现智能提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;import(&#x27;vite&#x27;).UserConfig&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config</span><br></pre></td></tr></table></figure><p>另外你可以使用 defineConfig 工具函数，这样不用 jsdoc 注解也可以获取类型提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vite 也直接支持 TS 配置文件。你可以在 vite.config.ts 中使用 defineConfig 工具函数。</p><h5 id="情景配置"><a href="#情景配置" class="headerlink" title="情景配置"></a>情景配置</h5><p>如果配置文件需要基于（dev/serve 或 build）命令或者不同的 模式 来决定选项，则可以选择导出这样一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (command === <span class="string">&#x27;serve&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// dev 独有配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// command === &#x27;build&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// build 独有配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是，在 Vite 的 API 中，在开发环境下 command 的值为 serve（在 CLI 中， vite dev 和 vite serve 是 vite 的别名），而在生产环境下为 build（vite build）。</p><h5 id="异步配置"><a href="#异步配置" class="headerlink" title="异步配置"></a>异步配置</h5><p>如果配置需要调用一个异步函数，也可以转而导出一个异步函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="keyword">async</span> (&#123; command, mode &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> asyncFunction()</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 构建模式所需的特有配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="共享配置"><a href="#共享配置" class="headerlink" title="共享配置"></a>共享配置</h5><h6 id="root"><a href="#root" class="headerlink" title="root"></a>root</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> process.cwd()项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。</li></ul><h6 id="base"><a href="#base" class="headerlink" title="base"></a>base</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> /开发或生产环境服务的公共基础路径。合法的值包括以下几种：绝对 URL 路径名，例如 /foo/完整的 URL，例如 <a href="https://foo.com/%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%96">https://foo.com/空字符串或</a> ./（用于开发环境）</li></ul><h6 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> ‘development’（开发模式），’production’（生产模式）在配置中指明将会把 <strong>serve 和 build</strong> 时的模式 <strong>都</strong> 覆盖掉。也可以通过命令行 –mode 选项来重写。</li></ul><h6 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h6><ul><li><strong>类型：</strong> (Plugin | Plugin[])[]需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。</li></ul><h6 id="publicDir"><a href="#publicDir" class="headerlink" title="publicDir"></a>publicDir</h6><ul><li><strong>类型：</strong> string | false</li><li><strong>默认：</strong> “public”作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目的根目录的相对路径。将 publicDir 设定为 false 可以关闭此项功能。</li></ul><h5 id="开发服务器选项"><a href="#开发服务器选项" class="headerlink" title="开发服务器选项"></a>开发服务器选项</h5><h6 id="server-host"><a href="#server-host" class="headerlink" title="server.host"></a>server.host</h6><ul><li><strong>类型：</strong> string | boolean</li><li><strong>默认：</strong> ‘127.0.0.1’指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。也可以通过 CLI 使用 –host 0.0.0.0 或 –host 来设置。</li></ul><h6 id="server-port"><a href="#server-port" class="headerlink" title="server.port"></a>server.port</h6><ul><li><strong>类型：</strong> number</li><li><strong>默认值：</strong> 3000指定开发服务器端口。注意：如果端口已经被使用，Vite 会自动尝试下一个可用的端口，所以这可能不是开发服务器最终监听的实际端口</li></ul><h6 id="server-https"><a href="#server-https" class="headerlink" title="server.https"></a>server.https</h6><ul><li><strong>类型：</strong> boolean | https.ServerOptions启用 TLS + HTTP/2。注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS。这个值也可以是一个传递给 https.createServer() 的 选项对象。</li></ul><h6 id="server-open"><a href="#server-open" class="headerlink" title="server.open"></a>server.open</h6><ul><li><strong>类型：</strong> boolean | string在开发服务器启动时自动在浏览器中打开应用程序。当此值为字符串时，会被用作 URL 的路径名。若你想指定喜欢的浏览器打开服务器，你可以设置环境变量 process.env.BROWSER（例如：firefox）。示例：**export default defineConfig({ server: { open: ‘/docs/index.html’ } })</li></ul><h6 id="server-proxy"><a href="#server-proxy" class="headerlink" title="server.proxy"></a>server.proxy</h6><ul><li><strong>类型：</strong> Record&lt;string, string | ProxyOptions&gt;为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。如果 key 值以 ^ 开头，将会被解释为 RegExp。configure 可用于访问 proxy 实例。使用 http-proxy。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 字符串简写写法</span></span><br><span class="line">      <span class="string">&#x27;/foo&#x27;</span>: <span class="string">&#x27;http://localhost:4567&#x27;</span>,</span><br><span class="line">      <span class="comment">// 选项写法</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 正则表达式写法</span></span><br><span class="line">      <span class="string">&#x27;^/fallback/.*&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\/fallback/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 使用 proxy 实例</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configure</span>: <span class="function">(<span class="params">proxy, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// proxy 是 &#x27;http-proxy&#x27; 的实例</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="构建选项"><a href="#构建选项" class="headerlink" title="构建选项"></a>构建选项</h5><h6 id="build-target"><a href="#build-target" class="headerlink" title="build.target#"></a>build.target#</h6><ul><li><strong>类型：</strong> string | string[]</li><li><strong>默认：</strong> ‘modules’</li><li><strong>相关内容：:</strong> 浏览器兼容性设置最终构建的浏览器兼容目标。默认值是一个 Vite 特有的值——‘modules’，这是指 支持原生 ES 模块的浏览器。另一个特殊值是 “esnext” —— 即假设有原生动态导入支持，并且将会转译得尽可能小：如果 build.minify 选项为 ‘terser’， ‘esnext’ 将会强制降级为 ‘es2019’。其他情况下将完全不会执行转译。转换过程将会由 esbuild 执行，并且此值应该是一个合法的 esbuild 目标选项。自定义目标也可以是一个 ES 版本（例如：es2015）、一个浏览器版本（例如：chrome58）或是多个目标组成的一个数组。注意：如果代码包含不能被 esbuild 安全地编译的特性，那么构建将会失败。查看 esbuild 文档 获取更多细节。</li></ul><h6 id="build-outDir"><a href="#build-outDir" class="headerlink" title="build.outDir"></a>build.outDir</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> dist指定输出路径（相对于 项目根目录).</li></ul><h6 id="build-assetsDir"><a href="#build-assetsDir" class="headerlink" title="build.assetsDir"></a>build.assetsDir</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> assets指定生成静态资源的存放路径（相对于 build.outDir）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官方地址：https://vitejs.cn/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3对比vue2</title>
      <link href="/2021/11/02/vue3%E5%AF%B9%E6%AF%94vue2/"/>
      <url>/2021/11/02/vue3%E5%AF%B9%E6%AF%94vue2/</url>
      
        <content type="html"><![CDATA[<h5 id="使用vue-cli4-0创建项目"><a href="#使用vue-cli4-0创建项目" class="headerlink" title="使用vue-cli4.0创建项目"></a>使用vue-cli4.0创建项目</h5><p>先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0</p><p><strong>安装</strong>vue-cli npm install -g @vue/cli</p><p><strong>更新</strong>vue-cli npm update -g @vue/cli</p><p><strong>创建项目：</strong></p><p>vue create vue3-demo</p><p>cd vue3-demo</p><p>yarn serve</p><p><strong>升级vue2项目</strong></p><p>yarn add vue-next</p><h5 id="创建vue3项目-vite方式"><a href="#创建vue3项目-vite方式" class="headerlink" title="创建vue3项目-vite方式"></a>创建vue3项目-vite方式</h5><p>npm init vite-app <project-name></project-name></p><p>cd <project-name></project-name></p><p>yarn</p><p>yarn dev</p><p><strong>vite</strong>是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动</p><ul><li>快速的冷启动，不需要等待打包操作</li><li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li><li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变</li></ul><h5 id="生命周期的变化"><a href="#生命周期的变化" class="headerlink" title="生命周期的变化"></a>生命周期的变化</h5><table><thead><tr><th>vue2.x</th><th>vue3.x</th></tr></thead><tbody><tr><td>beforeCreate</td><td>移除(setup)</td></tr><tr><td>created</td><td>移除(setup)</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmounte</td><td>onBeforeUnmounte</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>renderTriggered</td><td>onRenderTriggered</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">impor &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;component is mounted&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="main-js中变化-新增全局API-createApp"><a href="#main-js中变化-新增全局API-createApp" class="headerlink" title="main.js中变化 新增全局API: createApp()"></a>main.js中变化 新增全局API: createApp()</h5><p>vue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;);</span><br></pre></td></tr></table></figure><h5 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h5><p>vue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;homepage&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/homepage&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/homepage/index.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line"><span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h5 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h5><p>vue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.config-&gt;app.config</span><br><span class="line"></span><br><span class="line">Vue.config.ignoredElements-&gt;app.config.ignoredElements</span><br><span class="line"></span><br><span class="line">Vue.component-&gt;app.component</span><br><span class="line"></span><br><span class="line">Vue.directive-&gt;app.directive</span><br><span class="line"></span><br><span class="line">Vue.mixin-&gt;app.mixin</span><br><span class="line"></span><br><span class="line">Vue.use-&gt;app.use</span><br></pre></td></tr></table></figure><p>config: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;);</span><br><span class="line">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure><ol><li><p>devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true</p></li><li><p>errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) =&gt; {}</p></li><li><p>warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) =&gt; {};</p></li><li><p>globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2.x</span></span><br><span class="line">Vue.prototype.name = <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line"><span class="comment">// Vue3.x</span></span><br><span class="line">app.config.globalProperties.name = <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line">app.component(<span class="string">&#x27;child-component&#x27;</span>, &#123;</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>isCustomElement (类型: (tag: string) =&gt; boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag =&gt; tag.startsWith(‘ion’);</p></li></ol><h5 id="挂载应用程序"><a href="#挂载应用程序" class="headerlink" title="挂载应用程序"></a>挂载应用程序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>; </span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.mount( #app<span class="string">&#x27;); </span></span><br></pre></td></tr></table></figure><h5 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;);</span><br><span class="line"><span class="comment">// myComponent为组件实例</span></span><br><span class="line">app.component(<span class="string">&#x27;my-component, myComponent);</span></span><br><span class="line"><span class="string">//重置组件</span></span><br><span class="line"><span class="string">const MyComponent = app.component(&#x27;</span>my-component<span class="string">&#x27;, &#123;&#125;);</span></span><br></pre></td></tr></table></figure><h5 id="新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取"><a href="#新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取" class="headerlink" title="新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)"></a>新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)</h5><p>参数: Object | () =&gt; Object.</p><p>概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。</p><p>用例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> ;</span><br><span class="line"><span class="comment">//全局注入数据</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line"><span class="attr">procide</span>: &#123;</span><br><span class="line"><span class="attr">user</span>: <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line">app.component(‘my-component<span class="string">&#x27;, &#123;</span></span><br><span class="line"><span class="string">inject: [ &#x27;</span>user<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">data() &#123;...&#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h5 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2.x</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">Vue.nextTick(<span class="function">()=&gt;</span>&#123; ... &#125;)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123; ... &#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">...</span><br><span class="line">nextTick(<span class="function">()=&gt;</span>&#123; ... &#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义指令：directive"><a href="#自定义指令：directive" class="headerlink" title="自定义指令：directive"></a>自定义指令：directive</h5><p>Vue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）</p><ol><li>bind                            -&gt;    beforeMount（挂载前）</li><li>inserted                        -&gt;    mounted（挂载后）</li><li>​                                        -&gt;    beforeUpdate（新增，更新前）</li><li>update                            -&gt;    删除</li><li>componentUpdate        -&gt;    update（更新后）</li><li>​                                        -&gt;    beforeUnmounted（新增，卸载前）</li><li>unbind                            -&gt;    unmounted（卸载后）</li></ol><h5 id="跨组件通讯"><a href="#跨组件通讯" class="headerlink" title="跨组件通讯"></a>跨组件通讯</h5><p>vue2.x eventBus</p><p>Vue3.x 中全局事件总成将使用mitt来实现跨组件通讯。</p><p>使用<strong>mitt</strong>之前先安装mitt模块<strong>npm install –save mitt</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> VueEvent = mitt()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueEvent;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doLogin&quot;</span>&gt;</span>父子组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VueEvent <span class="keyword">from</span> <span class="string">&#x27;../model/event&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">doLogin</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">VueEvent.emit(<span class="string">&#x27;login&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">用户登录组件</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VueEvent <span class="keyword">from</span> <span class="string">&#x27;../model/event&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">VueEvent.on(<span class="string">&#x27;login&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&#x27;doLogin&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="Vue3-x组件自定义事件验证"><a href="#Vue3-x组件自定义事件验证" class="headerlink" title="Vue3.x组件自定义事件验证"></a>Vue3.x组件自定义事件验证</h5><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">login</span> @<span class="attr">submit</span>=<span class="string">&quot;getChild&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;./Login&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">Login</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">getChild</span>(<span class="params">data</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(data)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">emits</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">submit</span> :<span class="function">(<span class="params">&#123;</span></span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="javascript"><span class="xml">username,</span></span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="javascript"><span class="xml">password</span></span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="javascript"><span class="xml">&#125;</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">if</span> (username &amp;&amp; password) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.warn(<span class="string">&quot;传入的参数不能为空&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">username</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.$emit(<span class="string">&#x27;submit&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">username</span>: <span class="built_in">this</span>.username,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">password</span>: <span class="built_in">this</span>.password</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="Vue3-x过滤器"><a href="#Vue3-x过滤器" class="headerlink" title="Vue3.x过滤器"></a>Vue3.x过滤器</h5><p>在3.x中，过滤器被删除，不再受支持。建议用方法调用或计算属性替换它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bank Account Balance<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; accountBalance | currencyUSD &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">accountBalance</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">require</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">filters</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">currencyUSD</span>(<span class="params">value</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span> + value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bank Account Balance<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; currencyUSD &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">accountBalance</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">require</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">currencyUSD</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span> + <span class="built_in">this</span>.accountBalance</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="多根节点组件"><a href="#多根节点组件" class="headerlink" title="多根节点组件"></a>多根节点组件</h5><p>Vue2.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>Vue3.x中可以使用多个根节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><p>Vue2.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup<span class="number">.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">Vue.config.keyCode= &#123; f1: 112 &#125;</span></span><br></pre></td></tr></table></figure><p>Vue3.x 别名支持任意键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.delete=<span class="string">&quot;cancel&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.f1</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="渲染功能render函数"><a href="#渲染功能render函数" class="headerlink" title="渲染功能render函数"></a>渲染功能render函数</h5><p>Vue2.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>&#125;, <span class="string">&#x27;hello, Vue3.x!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Vue3更好用的v-model指令"><a href="#Vue3更好用的v-model指令" class="headerlink" title="Vue3更好用的v-model指令"></a>Vue3更好用的v-model指令</h5><p>1、概述：数据双向绑定</p><p>2、回顾：在Vue2.x中，v-model进行数据双向绑定（语法糖）的原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-model=<span class="string">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg=$event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-components</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中接收绑定数据和触发数据改变</span></span><br><span class="line">props:&#123; <span class="attr">msg</span>: <span class="built_in">String</span> &#125; <span class="comment">// 获取数据</span></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br></pre></td></tr></table></figure><p>用于自定义组件时，v-model的prop和事件默认名称已更改：</p><p>prop: value -&gt; modelValue</p><p>event: input -&gt; update:modelValue</p><p>即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxComponent v-model=<span class="string">&quot;varA&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxComponent :modelValue=<span class="string">&quot;varA&quot;</span> @update:modelValue=<span class="string">&quot;varA = $event&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>且在Vue2.x中不能绑定多个v-model</p><p>3、用例：Vue3.x重写了v-model的实现方式以适用绑定多个v-model</p><p>①：单个数据实现数据双向绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-model=<span class="string">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">myComponent</span> <span class="attr">:modelValue</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">update:modelValue</span>=<span class="string">&quot;msg = $event&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中接收绑定数据和触发数据改变</span></span><br><span class="line">props:&#123; <span class="attr">modelValue</span>: <span class="built_in">String</span> &#125; <span class="comment">// 获取数据</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class="line">  emit(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②：多个数据实现数据双向绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-model:msg=<span class="string">&quot;msg&quot;</span> v-model:name=<span class="string">&quot;name&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">myComponent</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">update:msg</span>=<span class="string">&quot;msg = $event&quot;</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">update:name</span>=<span class="string">&quot;name = $event&quot;</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中接收绑定数据和触发数据改变</span></span><br><span class="line">props:&#123; <span class="attr">msg</span>: <span class="built_in">String</span>, <span class="attr">name</span>: <span class="built_in">String</span> &#125; <span class="comment">// 获取数据</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class="line">  emit(<span class="string">&#x27;update:msg&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br><span class="line">  emit(<span class="string">&#x27;update:name&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h6><p>支持vue2.x的所有修饰符</p><ul><li>.lazy 取代input监听change事件</li><li>.number 输入字符串转为有效的数字</li><li>.trim 输入首尾空格过滤</li></ul><h6 id="支持自定义修饰符"><a href="#支持自定义修饰符" class="headerlink" title="支持自定义修饰符"></a>支持自定义修饰符</h6><p>例子：自定义prop名+自定义修饰符</p><p><strong>父组件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;zi v-model:content.camelCase=&quot;word&quot; /&gt;</span><br></pre></td></tr></table></figure><p>子组件较复杂，用组合式API来演示。</p><p>defineProps函数的写法就是这样，先写content，然后写contentModifiers，这是Vue的规定，必须是prop名跟Modefiers字串。contentModifiers必须是这样一个函数。</p><p>useContext和getCurrentInstance在开发中会经常用到。useContext()能拿到几个变量，包括props变量。getCurrentInstance()能拿到组件实例this，用来执行.emit()</p><p>content必须是计算变量，否则传入prop新值之后，子组件无法感知</p><p>emitCamelCase方法里，if语句是为了确认修饰符正确</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;content&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;emitCamelCase&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; useContext, getCurrentInstance, defineProps, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">defineProps(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">content</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">contentModifiers</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> ctx = useContext()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> instance = getCurrentInstance()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> content = computed(<span class="function">() =&gt;</span> &#123; ctx.props.content &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">emitCamelCase</span>(<span class="params">e</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (ctx.props.contentModifiers.camelCase) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    instance.emit(<span class="string">&quot;update:content&quot;</span>, e.target.value.replace(<span class="regexp">/_./g</span>, <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> a[<span class="number">1</span>].toUpperCase()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="vue3-v-is指令"><a href="#vue3-v-is指令" class="headerlink" title="vue3 v-is指令"></a>vue3 v-is指令</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue的动态组件中使用is</span></span><br><span class="line">&lt;component is=<span class="string">&quot;foo&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line"><span class="comment">// vue2.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class="line"><span class="comment">// vue3.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般组件中使用is</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">user-edit</span> <span class="attr">is</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-edit</span>&gt;</span></span></span><br><span class="line"><span class="comment">// vue2.x --&gt; is的值指的是要江染的组件的名称;渲染foo组件</span></span><br><span class="line"><span class="comment">// vue3.x --&gt; 渲染user- edit组件; is将作为组件的prop进行值的传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般元素中使用is</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;val&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="comment">// vue2.x ---&gt; is的值会被编译为boolean; 且元素会被动态加载或销毁(会触发transition效果)</span></span><br><span class="line"><span class="comment">// vue3.x ---&gt; is的值为any; 值的变化不会造成元素任何变化(丢失了vue2中元素上使用的s的功能，因此vue3中引入了新的指令v-is)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3.x的新指令 v-is</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-is</span>=<span class="string">&quot;val&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 与vue2. x中-般元素上使用is的效果-致</span></span><br></pre></td></tr></table></figure><h5 id="v-for中使用ref"><a href="#v-for中使用ref" class="headerlink" title="v-for中使用ref"></a>v-for中使用ref</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2.x </span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=”item <span class="keyword">in</span> renderData<span class="string">&quot; :key=&quot;</span>item.name<span class="string">&quot; ref=”nodes&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.nodes) <span class="comment">// 返回所有循环的p元素节点</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue3.x</span></span><br><span class="line"><span class="comment">//如果还是按照Vue2.x的方式</span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">&quot;item in renderData&quot;</span> :key= <span class="string">&quot;item.name&quot;</span> ref=<span class="string">&quot;nodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.nodes) <span class="comment">//此时只能得到循环后最后一个P元素节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3.x中，使用函数处理v-for中的ref;且用变量单独存储。</span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">&quot;item in renderData&quot;</span> :key=<span class="string">&quot; item.name&quot;</span> ref=<span class="string">&quot;handleNodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">    <span class="attr">nodes</span>: []</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> handleNodes = <span class="function"><span class="params">nodeItem</span> =&gt;</span> &#123;</span><br><span class="line">    data.nodes.push(nodeItem)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...toRefs(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mixin-的合并行为更改"><a href="#mixin-的合并行为更改" class="headerlink" title="mixin 的合并行为更改"></a>mixin 的合并行为更改</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue2.x</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$data); <span class="comment">// &#123;name: &#x27;zhangsan&#x27;, age: 30&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// &#x27;zhangsan</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age); <span class="comment">// 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3.x</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$data); <span class="comment">// &#123;age: 30&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// &#x27;zhangsan</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age); <span class="comment">// 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得出结论：</strong></p><p>1、与vue2.x一样会覆盖掉mixin中相同的响应属性。</p><p>2、vue3.x中当前实例的$data是不会包含mixin中定义的响应属性</p><h5 id="v-if和v-for优先级"><a href="#v-if和v-for优先级" class="headerlink" title="v-if和v-for优先级"></a>v-if和v-for优先级</h5><p>当v-if和v-for同时作用于一个元素上时：</p><p>Vue2.x中v-for的优先级会高于v-if;</p><p>Vue3.x中v-if的优先级会高于v-for;</p><p>使用禁忌: Vue3.x中不能将v -for和v-if放在同-个元素上。只能使用v-for嵌套v -if使用</p><p>使用建议:官方建议使用计算属性来处理,即提高性能，又能兼容Vue3.x。</p><h5 id="attrs和-listener的融合"><a href="#attrs和-listener的融合" class="headerlink" title="$attrs和$listener的融合"></a>$attrs和$listener的融合</h5><p>我们知道，在vue2中我们使用v-bind=”$attrs”, v-on=”$listenner”来将数据和事件做一个承 上启下的作用,但是在vue3中,首先是删除了v-on指令，其次是发现这两个组件的属性过于累赘，所以在当前版本中将$attrs 和$listenner他们的功能进行了融合, $listenner 现在已作为$attrs 的其中一部分进行传递,所以只需要在组建上指定v-bind=”$attrs”，那么将同时拥有传值和传递事件的功能。</p><h5 id="setup说明"><a href="#setup说明" class="headerlink" title="setup说明"></a>setup说明</h5><ul><li>setup</li></ul><p>setup有两个参数props和context</p><ul><li><p>props：接收父组件传的值</p></li><li><p>context：vue3.x里面没有this，提供了一个context上下文属性，你可以通过这个属性去获取进行一些vue2.x用this实现的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props.title);</span><br><span class="line">    </span><br><span class="line">    context.attrs</span><br><span class="line">    context.slots</span><br><span class="line">    context.parent</span><br><span class="line">    context.root</span><br><span class="line">    context.emit</span><br><span class="line">    context.refs</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在setup中定义的变量或方法，都必须通过<strong>return</strong> {xxx,xxx} 暴露出去，外界才能使用</p><p><strong>注意：</strong>props为响应式代理，如果使用es6的数据解构操作，将使得结构后的数据失去响应式（即不能实时获取到父组件传来的值）</p><p><strong>扩展：</strong>父组件通过属性传的值在子组件中的各个部分的获取：</p><ol><li>props：通过父传子的方式直接获取到值</li><li>setup(props, context){}方法中的props只能拿到选项props中已经定义的属性</li><li>setup(props, {attrs, emit, slots}){}方法中的attrs只能拿到未在选项props中定义的属性</li><li>通过{proxy} = getCurrentInstance(); proxy.attrs; 组件实例中的attrs也只能拿到未在选项props中定义的属性</li></ol><p><strong>context：</strong>非响应式的对象，包含了组件暴露的三个property</p><ol><li>context.attrs：传入组件中但是未被props接收的对象</li><li>context.emit：用于触发当前组件实例上的传值事件</li><li>context.slots：用来访问被插槽分发的内容（一般用于使用渲染函数来书写一个组件时）</li></ol><p>**return()**：若需要在当前组件视图中或其它组件中使用当前组件创建的响应式变量及方法，则需要导出相应的响应式变量及方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> name = ref(<span class="string">&quot;zhang_san&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; name &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>return 也有渲染功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> h(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>&#125;, <span class="string">&#x27;内容&#x27;</span>);</span><br><span class="line">    <span class="comment">// &lt;template&gt;&lt;div class=&quot;red&quot;&gt;内容&lt;/div&gt;&lt;/template&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="响应式数据对象-reactive"><a href="#响应式数据对象-reactive" class="headerlink" title="响应式数据对象 reactive"></a>响应式数据对象 reactive</h5><p>1、概述：函数，创建一个响应式数据对象，响应式会影响到所有的子集嵌套</p><p>2、用例：由vue提供，按需引入：import { reactive } from ‘vue’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; user &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="延伸方法–readonly只读对象"><a href="#延伸方法–readonly只读对象" class="headerlink" title="延伸方法–readonly只读对象"></a>延伸方法–readonly只读对象</h5><p><strong>readonly()</strong></p><p>1、概述：创建一个只读代理且原对象的任何嵌套属性也将是只读的</p><p>2、用例：由vue提供，按需引入：import { readonly } from ‘vue’</p><p>3、对普通变量创建只读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="keyword">return</span> &#123; copy &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">copy.age++ <span class="comment">// warning! target is readonly</span></span><br></pre></td></tr></table></figure><p>4、对reactive创建只读</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="keyword">return</span> &#123; copy &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">user.age++<span class="number">21</span></span><br><span class="line">copy.age++ <span class="comment">// warning! target is readonly</span></span><br></pre></td></tr></table></figure><h5 id="延伸方法–isProxy"><a href="#延伸方法–isProxy" class="headerlink" title="延伸方法–isProxy()"></a>延伸方法–isProxy()</h5><p>1、概述判断对象是否由reactive创建或者是readonly创建的代理</p><p>2、用例：由vue提供，按需引入：import { isproxy } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref, reactive, readonly, isproxy&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ref创建</span></span><br><span class="line"><span class="keyword">const</span> refVal = ref(<span class="number">123</span>)</span><br><span class="line">isProxy(refVal) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reactive创建</span></span><br><span class="line"><span class="keyword">const</span> reactiveVal = reactive(&#123;<span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">isProxy(reactiveVal) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reactive创建</span></span><br><span class="line"><span class="keyword">const</span> readonlyVal = readonly(reactiveVal)</span><br><span class="line">isProxy(readonlyVal) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通变量</span></span><br><span class="line"><span class="keyword">const</span> defaultVal = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">isProxy(defaultVal) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive()"></a>isReactive()</h5><p>1、检查对象是否由reactive创建</p><p>2、用例：由vue提供，按需引入：import { isReactive } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, isReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(user)); <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还能判断readonly代理的对象是否由reactive创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, isReactive, readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建普通只读代理</span></span><br><span class="line">    <span class="keyword">const</span> plain = readonly(&#123;<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(plain)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建reactive制度代理</span></span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(copy)); <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–-isReadonly"><a href="#延伸方法–-isReadonly" class="headerlink" title="延伸方法– isReadonly()"></a>延伸方法– isReadonly()</h5><p>1、概述：检查代理是否由readonly创建</p><p>2、用例：由vue提供，按需引入：import { isReadonly } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly, isReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="built_in">console</span>.log(isReadonly(copy)); <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–toRaw"><a href="#延伸方法–toRaw" class="headerlink" title="延伸方法–toRaw()"></a>延伸方法–toRaw()</h5><p>1、概述：返回由reactive或者是readonly代理的原始对象</p><p>2、用例：由vue提供，按需引入：import { toRaw } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly, isProxy, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> reactiveUser = reactive(user)</span><br><span class="line">    <span class="keyword">const</span> readonlyUser = readonly(readonlyUser)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(toRaw(reactiveUser) === user); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(toRaw(readonlyUser) === user); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(reactiveUser))); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(readonlyUser))); <span class="comment">// false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–markRaw"><a href="#延伸方法–markRaw" class="headerlink" title="延伸方法–markRaw()"></a>延伸方法–markRaw()</h5><p>1、概述：标记一个对象，被标记后，该对象永远不会被转换为代理</p><p>2、用例：由vue提供，按需引入：import { markRaw } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markRaw, reactive, isReactive, isProxy &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = markRaw(&#123;&#125;)</span><br><span class="line">    <span class="keyword">const</span> reactiveUser = reactive(user)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(reactiveUser)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reactiveUser1 = reactive(&#123; user &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(reactiveUser1))); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(reactiveUser1.user))); <span class="comment">// false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–shallowReactive"><a href="#延伸方法–shallowReactive" class="headerlink" title="延伸方法–shallowReactive()"></a>延伸方法–shallowReactive()</h5><p>1、概述：创建一个反应式代理，但只是浅度创建</p><p>2、用例：由vue提供，按需引入：import { shallowReactive } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isReactive, shallowReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = shallowReactive(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">content</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    data.count++ <span class="comment">// 11 逻辑层数据已发生变化,视图重新渲染</span></span><br><span class="line">    isReactive(data.content) <span class="comment">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class="line">    data.content.age++ <span class="comment">// 21 逻辑层数据发生变化，但是视图层不会被更新渲染</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–shallowReadonly"><a href="#延伸方法–shallowReadonly" class="headerlink" title="延伸方法–shallowReadonly()"></a>延伸方法–shallowReadonly()</h5><p>1、概述：创建一个只读代理，但只是浅度创建</p><p>2、用例：由vue提供，按需引入：import { shallowReadonly } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isReadonly, shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = shallowReadonly(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">content</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    data.count++ <span class="comment">// warning! target is readonly.</span></span><br><span class="line">    isReadonly(data.content) <span class="comment">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class="line">    data.content.age++ <span class="comment">// 21 深度嵌套未被代理，所以操作成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应式数据–-ref"><a href="#响应式数据–-ref" class="headerlink" title="响应式数据– ref"></a>响应式数据– ref</h5><p>1、概述：函数，创建并返回一个响应式数据对象，并在此对象上只包含一个.value属性指向该数据值</p><p>2、用例：由vue提供，按需引入：import { ref } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line">  &lt;!-- 视图中直接使用即可，不需要.value --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> name = ref(<span class="string">&#x27;zhang_san&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(name.value); <span class="comment">// &#x27;zhang_san&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 同样需要return返回</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; name &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果使用ref将一个对象创建为响应式代理的话，则该对象会被进行深度响应式创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data.count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   &lt;!-- <span class="number">0</span> --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data.content.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   &lt;!-- <span class="number">10</span> --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> defaultVal = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">content</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="number">10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> data = ref(defaultVal)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(data.value.count); <span class="comment">// 0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(data.value.content.age); <span class="comment">// 10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; data &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">data.value.count++ <span class="comment">// 1 视图重新渲染</span></span><br><span class="line">data.value.content.age++ <span class="comment">// 11 视图重新渲染</span></span><br></pre></td></tr></table></figure><h5 id="ref数据能访问到的部分常用方法及延伸方法"><a href="#ref数据能访问到的部分常用方法及延伸方法" class="headerlink" title="ref数据能访问到的部分常用方法及延伸方法"></a>ref数据能访问到的部分常用方法及延伸方法</h5><h6 id="unref"><a href="#unref" class="headerlink" title="unref()"></a>unref()</h6><p>1、概述：返回代理原始值，如果参数为ref则返回代理原始值，如果不是ref则返回参数本身</p><p>2、用例：由vue提供，按需引入：import { unref } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; unref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> a = ref(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(unref(a)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(unref(b)); <span class="comment">// &#x27;zhang_san&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="toRef"><a href="#toRef" class="headerlink" title="toRef()"></a>toRef()</h6><p>1、概述：可以将reactive创建的代理的某个属性传递出来用ref进行代理</p><p>2、用例：由vue提供，按需引入：import { toRef } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> toRefValue = toRef(data, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">toRefValue.value++ <span class="comment">// toRefValue.value 21</span></span><br><span class="line"><span class="built_in">console</span>.log(data.age); <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">data.age++ <span class="comment">// data.age 22</span></span><br><span class="line"><span class="built_in">console</span>.log(toRefValue.value); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>3、<strong>注意：使用toRef将reactive的属性代理后，属性的值的变化会同时影响toRef后的值和原本的reactive的属性值</strong></p><p>4、实例：在将prop的引用传递给复合函数的时候，toRef将非常有用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">userHandler(toRef(props, <span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="comment">// 这将使得userHandler拿到的name为响应式代理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h6><p>1、概述：可以将reactive创建的代理的所有属性传递出来用ref进行代理</p><p>2、用例：由vue提供，按需引入：import { toRefs } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> toRefValue = toRefs(data)</span><br><span class="line"></span><br><span class="line">toRefValue.age.value++ <span class="comment">// toRefValue.age.value 21</span></span><br><span class="line"><span class="built_in">console</span>.log(data.age); <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">data.age++ <span class="comment">// data.age 22</span></span><br><span class="line"><span class="built_in">console</span>.log(toRefValue.age.value); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>3、<strong>注意：使用toRefs将reactive的属性代理后，属性的值的变化会同时影响toRef后的对应属性值和原本的reactive的属性值</strong></p><p>4、实例：从组合函数返回响应式对象时，这将很有用，<strong>而不是使用es6数据结构的方式，这样会使reactive的属性失去响应式代理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age &#125; = userHandler()</span><br><span class="line">    <span class="keyword">return</span> &#123; name, age &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="isRef"><a href="#isRef" class="headerlink" title="isRef()"></a>isRef()</h6><p>1、概述：判断响应式代理是否为ref所创建</p><p>2、用例：由vue提供，按需引入：import { isRef } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> name = ref(<span class="string">&#x27;zhang_san&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> user = reactive(&#123; <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isRef(name)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isRef(user)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 应用场景，在获取一个未知的数据对象的值时，如：</span></span><br><span class="line"><span class="keyword">const</span> newV = isRef(name) ? name.value : name</span><br></pre></td></tr></table></figure><h5 id="toRefs-–-解构响应式对象数据"><a href="#toRefs-–-解构响应式对象数据" class="headerlink" title="toRefs – 解构响应式对象数据"></a>toRefs – 解构响应式对象数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>解构响应式对象数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>UserName: &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> user = reactive(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">username</span>: <span class="string">&#x27;zhang_san&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">age</span>: <span class="number">20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; ...toRefs(user) &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="reactive和ref的相互作用"><a href="#reactive和ref的相互作用" class="headerlink" title="reactive和ref的相互作用"></a>reactive和ref的相互作用</h5><p>1、将ref的数据对象挂载到reactive上时，会把原始的响应数据对象展开为原始值，这样就不需要.value而被直接访问到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ref1 = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(reactive1.ref1); <span class="comment">// 0</span></span><br><span class="line">    reactive1.ref1++</span><br><span class="line">    <span class="built_in">console</span>.log(reactive1.ref1); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(ref1.value); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、新的ref会覆盖旧的ref</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ref1 = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> ref2 = ref(<span class="number">100</span>)</span><br><span class="line">    reactive.ref1 = ref2</span><br><span class="line">    reactive.ref1++</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(reactive1.ref1); <span class="comment">// 101</span></span><br><span class="line">    <span class="built_in">console</span>.log(ref2.value); <span class="comment">// 101</span></span><br><span class="line">    <span class="built_in">console</span>.log(ref1.value); <span class="comment">// 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="reactive和ref的区别"><a href="#reactive和ref的区别" class="headerlink" title="reactive和ref的区别"></a>reactive和ref的区别</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">10</span></span><br><span class="line">    <span class="keyword">let</span> num2 = ref(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">let</span> num3 = reactive(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(num1); <span class="comment">// 定义的纯数字10, 打印结果是一个数字类型的10</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2); <span class="comment">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(num3); <span class="comment">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br><span class="line">    <span class="keyword">return</span> &#123; num1, num2, num3 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现使用ref定义的数据，打印结果是一个被对象包裹的响应的数据，使用reactive的方式和纯变量声明的方式打印结果是一样的，这是什么原因呢</p><p>我们发现在控制台输出一个警告信息，提示100这个值不能被reactive创建，官方也推荐我们在定义数据的时候，reactive定义复杂的数据类型的数据，ref推荐定义基本数据类型，所以如果要使用reactive第一基本数据类型的话，我们需要在reactive中将数据包裹一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num3 = reactive(&#123;<span class="attr">val</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p>我们在使用reactive定义数据的时候用对象做一层包裹，这样控制台就不会报警告信息了</p><p>但是使用reactive定义的数据和ref定义的数据打印结果有一些差异</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num2 = ref(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> num3 = reactive(&#123;<span class="attr">val</span>: <span class="number">100</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br></pre></td></tr></table></figure><p>我们发现ref定义的数据打印结果需要.value才能获取到结果，而reactive则不需要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num2 = ref(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> num3 = reactive(&#123;<span class="attr">val</span>:<span class="number">100</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(num2.value) <span class="comment">// 10 </span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// &#123;val:100&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>reactive和ref都是用来定义响应式数据的，reactive更推荐去定义复杂的数据类型，ref更推荐定义基本数据类型</p><p>ref和reactive本质我们可以简单的理解为ref是对reactive的二次包装，ref定义的数据访问的时候要多一个.value</p><p>使用ref定义一本数据类型，ref也可以定义数组和对象</p><p><strong>ref函数仅能监听基本类型的变化，不能监听复杂类型的变化(比如数组，对象)</strong></p><h5 id="计算属性–-computed"><a href="#计算属性–-computed" class="headerlink" title="计算属性– computed"></a>计算属性– computed</h5><p>1、概述：vue2.x中的计算属性，在vue3.x中以方法的形式使用</p><p>2、用例：用例：由vue提供，按需引入：import { computed } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">const</span> userAge = computed(<span class="function">() =&gt;</span> <span class="string">`今年<span class="subst">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; userAge &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有get和set功能的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">const</span> userAge = computed(&#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="string">`今年<span class="subst">$&#123;age.value&#125;</span>岁了`</span>,</span><br><span class="line">      <span class="attr">set</span>: <span class="function"><span class="params">val</span> =&gt;</span> age.value = age + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; userAge &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="观察者–-watch"><a href="#观察者–-watch" class="headerlink" title="观察者– watch"></a>观察者– watch</h5><p>1、概述：vue2.x中的响应式变量监听，在vue3.x中以方法的形式使用</p><p>2、用例：用例：由vue提供，按需引入：import { watch} from ‘vue’</p><p>3、监听单一数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, computed, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//ref</span></span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    watch(<span class="function">() =&gt;</span> age.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reactive</span></span><br><span class="line">    <span class="keyword">const</span> product = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;pig&#x27;</span>, <span class="attr">conut</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    watch(<span class="function">() =&gt;</span> product.count, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// props</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> props.msg, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//computed</span></span><br><span class="line">    <span class="keyword">const</span> userAge = computed(<span class="function">() =&gt;</span> <span class="string">`今年<span class="subst">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class="line">    watch(<span class="function">() =&gt;</span> userAge.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、监听对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//ref</span></span><br><span class="line">    <span class="keyword">const</span> user = ref(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// 如果我们只需要监听name的值，那么</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value.name, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reactive</span></span><br><span class="line">    <span class="keyword">const</span> reactiveData = reactive(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;&#125;)</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// 如果我们只需要监听name的值，那么</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user.name, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、监听数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//ref</span></span><br><span class="line">    <span class="keyword">const</span> user = ref([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;li_si&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    ])</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reactive</span></span><br><span class="line">    <span class="keyword">const</span> reactiveData = reactive(&#123; <span class="attr">user</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;li_si&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    ]&#125;)</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、监听多个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">const</span> user = ref(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"></span><br><span class="line">    watch([<span class="function">() =&gt;</span> age.value, <span class="function">() =&gt;</span> user.name], <span class="function">(<span class="params">[newAge, newName], [oldAge, newName]</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、终止监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line"><span class="comment">// watch监听会返回一个方法</span></span><br><span class="line"><span class="keyword">const</span> stop = watch(age, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"><span class="comment">// 当调用此方法后，该监听就会被移除</span></span><br><span class="line">stop()</span><br></pre></td></tr></table></figure><p>8、清除watch中无效的异步任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keywords&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> keywords = ref(<span class="string">&quot;&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//异步任务：打印用户输入的关键词</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> asyncPrint = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(val);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    watch(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      keywords,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function">(<span class="params">keywords, prevKeywords, onCleanup</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 执行异步任务，并得到关闭异步任务的 timerId</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> timerId = asyncPrint(keywords)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 如果 watch 监听被重复了，则会先清除上次未完成的异步任务</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        onCleanup(<span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timerId))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123; <span class="attr">lazy</span>: <span class="literal">true</span> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    )</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; keywords &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h5><p>1、概述：实现嵌套组件树形数据传递与接收</p><p>2、使用：由vue提供，按需引入：import { provide, inject } from ‘vue’</p><p>3、用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//父组件注入</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    provide(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zhang_san&#x27;</span>)</span><br><span class="line">    <span class="comment">// 如果是需要注入多个值则重复使用provide即可</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件接收</span></span><br><span class="line"><span class="keyword">const</span> children = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// inject的第二个参数为没有接收到注入的数据时的默认返回值，如果没有，则返回undefined</span></span><br><span class="line">    <span class="keyword">const</span> user = inject(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;li_si&#x27;</span>)</span><br><span class="line">    <span class="comment">// 需要接收多个注入的值也是重复使用inject</span></span><br><span class="line">    <span class="keyword">return</span> &#123; user &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、实例：在实际使用过程中，往往我们需要将注入的值实现响应式变化，则需要注入响应式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件注入</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    provide(<span class="string">&#x27;user&#x27;</span>, user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件接收后，如果父组件中的user发生了改变，则子组件中也会发生响应式变化</span></span><br><span class="line"><span class="keyword">const</span> children = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = inject(<span class="string">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; user &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、注意：<strong>不建议在注入时对响应式变量进行改变(在子组件中改变注入的值)，因为此操作会改变vue的单向数据流，建议采用注入改变其值的方法来对响应式变量进行改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//父组件注入</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      user.age = <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">    provide(<span class="string">&#x27;user&#x27;</span>, user)</span><br><span class="line">    provide(<span class="string">&#x27;changeHandler&#x27;</span>, changeHandler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件接收后，通过调用注入的方法来对响应式变量进行改变</span></span><br><span class="line"><span class="keyword">const</span> children = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = inject(<span class="string">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class="line">    <span class="keyword">const</span> changeHandler = inject(<span class="string">&#x27;changeHandler&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; user, changeHandler &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="template和ref获取元素或组件实例"><a href="#template和ref获取元素或组件实例" class="headerlink" title="template和ref获取元素或组件实例"></a>template和ref获取元素或组件实例</h5><p>1、概述：通过ref获取模板元素节点</p><p>2：使用：由vue提供，按需引入：import { ref } from ‘vue’</p><p>3、回顾：options API中是：this.refs.refAdd(获取某个组件)或者this.refs.refDiv(获取某个元素节点)</p><p>4、用例：</p><ul><li>在组件或节点中定义ref属性：add(ref=”refAdd”)或div(ref=”refDiv”)</li><li>在setup中定义对应ref属性相同的变量名，赋值为任意值即可</li><li>访问方式为：refAdd.value或refDiv.value</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;divBox&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> divBox = ref(<span class="literal">null</span>); <span class="comment">// &lt;div ref=&quot;divBox&quot;&gt;content&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> user = ref(<span class="literal">null</span>); <span class="comment">// user.value -&gt; null</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; divBox &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>4、注意：</p><p><strong>①：元素节点对应ref的分配只会在render时进行对比赋值，因此若在setup中未将对应的响应式变量return出来，则不会获取到组件实例或元素节点</strong></p><p><strong>②：在满足①的前提下，只要在定义变量时变量名称与当前组件中ref属性值相同，则该变量会被统一赋值为组件实例或元素节点，与定义变量时的赋值无关</strong></p><p>setup的context中访问到refs对象，所以获取组件实例或者元素节点的方式还可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;divBox&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; refs &#125;</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> divBox = refs.divBox;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; divBox &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="vue3-x中的emits选项"><a href="#vue3-x中的emits选项" class="headerlink" title="vue3.x中的emits选项"></a>vue3.x中的emits选项</h5><p>vue3.x组件自定义事件实现子组件给父组件传值</p><p>注意：vue官方推荐你始终使用<strong>kebab-case</strong>的事件名</p><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作、</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">emit</span>: [<span class="string">&#x27;run-parent&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&quot;run-parent&quot;</span>, <span class="string">&quot;传给爸爸&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>1、概述：当前组件的通过emit的事件列表</p><p>2：类型：Array|Object</p><p>3、作用：vue3.0中使用emit发起事件时会要求当前组件记录emit事件(没有则控制台会抛出警告)</p><p>4、用途：用于记录当前组件emit的事件，当为对象时，则可以验证传入的值是否有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">prop, &#123; emit &#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> changeOne = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    emit(<span class="string">&#x27;on-changeOne&#x27;</span>, val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> changeTwo = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    emit(<span class="string">&#x27;on-changeTwo&#x27;</span>, val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法一：数组用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;on-changeOne&#x27;</span>, <span class="string">&#x27;on-changeTwo&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法二：对象用法，当emits为对象时，可以验证事件中的参数是否有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;on-changeOne&#x27;</span>: <span class="function"><span class="params">payload</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 验证通过</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">&#x27;验证失败！&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 验证失败，控制台打印警告信息“验证失败”</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;on-changeTwo&#x27;</span>: <span class="function"><span class="params">payload</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="vue3-x核心值getCurrentInstance"><a href="#vue3-x核心值getCurrentInstance" class="headerlink" title="vue3.x核心值getCurrentInstance"></a>vue3.x核心值getCurrentInstance</h5><p>1、概述：一个很重要的方法，获取当前组件的实例、上下文来操作router和vuex等</p><p>2、使用：由vue提供，按需引入：import { getCurrentInstance } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 获取当前组件实例</span></span><br><span class="line"><span class="keyword">const</span> instance = getCurrentInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前组件的上下文，下面两种方式都能获取到组件的上下文</span></span><br><span class="line"><span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance(); <span class="comment">// 方式一，这种方式只能在开发环境下使用，生产环境下的ctx将访问不到</span></span><br><span class="line"><span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance(); <span class="comment">// 方式二，此方法在开发环境及生产环境都能放到组件上下文对象(推荐)</span></span><br><span class="line"><span class="comment">// ctx 中包含了组件中由ref和reactive创建的响应式数据对象，以及以下对象及方法</span></span><br><span class="line">proxy.$attrs</span><br><span class="line">proxy.$data</span><br><span class="line">proxy.$el</span><br><span class="line">proxy.$emit</span><br><span class="line">proxy.$forceUpdate</span><br><span class="line">proxy.$nextTick</span><br><span class="line">proxy.$options</span><br><span class="line">proxy.$parent</span><br><span class="line">proxy.$props</span><br><span class="line">proxy.$refs</span><br><span class="line">proxy.$root</span><br><span class="line">proxy.$slots</span><br><span class="line">proxy.$watch</span><br></pre></td></tr></table></figure><h5 id="vue3-x中我们采用mitt实现全局事件总成"><a href="#vue3-x中我们采用mitt实现全局事件总成" class="headerlink" title="vue3.x中我们采用mitt实现全局事件总成"></a>vue3.x中我们采用mitt实现全局事件总成</h5><p>1、前言：由于vue3.x中删除了on和off，因此不能借助于一个单独的vue实例来实现全局事件的发布和订阅与取消订阅(也就是组件通讯)</p><p>2、概述：mitt是一个三方库，npm安装：npm install -D mitt</p><p>3、使用：我们同样使用插件的方式将mitt集成到vue中</p><p>4、mitt对象：</p><ul><li>all (map对象)：包含了所有订阅的事件名称，及对应的处理方法数组</li><li>emit (方法)：触发事件，参数为（事件名(方法名), 携带的参数），当前携带的参数只能为一个，不能为多个</li><li>on (方法)：创建事件订阅，参数为(事件名，处理方法)</li><li>off (方法)：取消事件订阅，参数为(事件名，处理方法)</li></ul><p>5、全局事件总成搭建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue, options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _emitter = mitt()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局发布(在vue全局方法中自定义$pub发布方法)</span></span><br><span class="line">    <span class="comment">// 这里做了$pub方法能够携带多个参数的处理，方便我们在业务中触发事件时带多个参数</span></span><br><span class="line">    Vue.config.globalProperties.$pub = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      _emitter.emit(_.head(args), args.slice(<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局订阅(在vue全局方法中自定义$sub订阅方法)</span></span><br><span class="line">    Vue.config.globalProperties.$sub = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">Reflect</span>.apply(_emitter.on, _emitter, _.toArray(<span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消订阅</span></span><br><span class="line">    Vue.config.globalProperties.$unsub = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">Reflect</span>.apply(_emitter.off, _emitter, _.toArray(<span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、组件实例中使用：</p><p><strong>全局事件发布</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;pubHandler&quot;</span>&gt;</span>发起事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> pubHandler = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      proxy.$pub(<span class="string">&#x27;foo&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; pubHandler &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>全局事件订阅/取消订阅</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unsubHandler&quot;</span>&gt;</span>注销事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> watchHandler = <span class="function">(<span class="params">[a, b, c] = args</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件监听触发！&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      proxy.$sub(<span class="string">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> unsubHandler = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      proxy.$unsub(<span class="string">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; unsubHandler &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="Vue-Router在vue3-x中的使用方式及特性"><a href="#Vue-Router在vue3-x中的使用方式及特性" class="headerlink" title="Vue-Router在vue3.x中的使用方式及特性"></a>Vue-Router在vue3.x中的使用方式及特性</h5><p>1、描述：区别于vue2，在vue3中vue-router将使用新的方法来创建路由，其中重要的是：createRouter, createWebHashHistory, createWebHistory这三个方法</p><p>2、创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [...]</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="comment">// 区别于vue2的mode,vue3中将使用history属性来决定采用哪种路由模式</span></span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(), <span class="comment">// 默认为hash模式，可设置createWebHistory模式</span></span><br><span class="line">  <span class="comment">// 区别于vue2的base，vue3中的基础路由路径将作为createWebHashHistory或者createWebHistory的唯一参数配置到路由中</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"><span class="comment">// 注册路由</span></span><br><span class="line">app.use(router)</span><br></pre></td></tr></table></figure><p>3、扩展：在组件中使用路由，查看路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.vue</span></span><br><span class="line"><span class="comment">// vue-router库当中暴露了useRouter和useRoute两个方法供组件使用，还暴露有其他方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter, useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span><br><span class="line">    <span class="keyword">const</span> router = useRouter()</span><br><span class="line">    <span class="keyword">const</span> route = useRoute()</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(proxy.$router === router); <span class="comment">// true</span></span><br><span class="line">      <span class="built_in">console</span>.log(route); &#123;path, params, query ...&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h5><p>Vue3的hook函数相当于vue2的mixin，不同在于hooks是函数</p><p>Vue3的hook函数可以帮助我们提高代码的复用性，让我们能在不同的组件中都利用hooks函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeUnmounted, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(-<span class="number">1</span>); <span class="comment">// x绑定为响应式数据</span></span><br><span class="line">  <span class="keyword">const</span> y = ref(-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> clickHandler = <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    x.value = event.pageX</span><br><span class="line">    y.value = event.pageY</span><br><span class="line">  &#125;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickHandler)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, clickHandler)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x, y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新组件–-Teleport"><a href="#新组件–-Teleport" class="headerlink" title="新组件– Teleport"></a>新组件– Teleport</h5><p>Teleport是一种能够将我们的模板移动到DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”</p><p>场景：像modals,toast等这样的元素，很多情况下，我们将它完全的和我们的vue应用的DOM完全剥离，管理起来反而会方便容易很多</p><p>原因在于如果我们嵌套在vue的某个组件内部，那么处理前套组件的定位、z-index和样式就会变得很困难</p><p>另外，像modals,toast等这样的元素需要使用到vue组件的状态(data或者props)的值</p><p>这就是Teleport派上用场的地方，我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的data或props，然后在vue应用的范围之外渲染它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;showToast&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>&gt;打开toast&lt;/button&gt;</span><br><span class="line">&lt;!-- to 属性就是目标位置 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;#teleport-target&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;visiable&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toast-warp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-msg&quot;</span>&gt;</span>我是一个toast文案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="vue3中css使用js变量"><a href="#vue3中css使用js变量" class="headerlink" title="vue3中css使用js变量"></a>vue3中css使用js变量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Vue 3.0 + Vite<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">backg</span>: <span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; color, backg&#125;&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-tag">h1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--backg);</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3对比vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组去重方法</title>
      <link href="/2021/10/13/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2021/10/13/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="1-将数组的每一个元素依次与其他元素做比较，发现重复元素，删除"><a href="#1-将数组的每一个元素依次与其他元素做比较，发现重复元素，删除" class="headerlink" title="1.将数组的每一个元素依次与其他元素做比较，发现重复元素，删除"></a>1.将数组的每一个元素依次与其他元素做比较，发现重复元素，删除</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 23, 1, 1, 1, 3, 23, 5, 6, 7, 9, 9, 8, 5, 5, 5, 5]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat1</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]===arr[j])&#123;</span><br><span class="line">                    arr.splice(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr2 = noRepeat1(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);    <span class="comment">//[1, 23, 3, 5, 6, 7, 9, 8]</span></span><br></pre></td></tr></table></figure><h5 id="2-借助indexOf-方法判断此元素在该数组中首次出现的位置下标与循环的下标是否相等"><a href="#2-借助indexOf-方法判断此元素在该数组中首次出现的位置下标与循环的下标是否相等" class="headerlink" title="2.借助indexOf()方法判断此元素在该数组中首次出现的位置下标与循环的下标是否相等"></a>2.借助<font color="red">indexOf()</font>方法判断此元素在该数组中首次出现的位置下标与循环的下标是否相等</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 23, 1, 1, 1, 3, 23, 5, 6, 7, 9, 9, 8, 5, 5, 5]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr.indexOf(arr[i]) != i) &#123;</span><br><span class="line">                arr.splice(i,<span class="number">1</span>);<span class="comment">//删除数组元素后数组长度减1后面的元素前移</span></span><br><span class="line">                i--;<span class="comment">//数组下标回退</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> newArr = noRepeat2(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);    <span class="comment">//[1, 23, 3, 5, 6, 7, 9, 8]</span></span><br></pre></td></tr></table></figure><h5 id="3-利用数组中的filter方法"><a href="#3-利用数组中的filter方法" class="headerlink" title="3.利用数组中的filter方法"></a>3.利用数组中的<font color="red">filter</font>方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">//[&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;orange&quot;]</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.indexOf(value) === index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//[&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;]</span></span><br></pre></td></tr></table></figure><h5 id="4-借助新数组-通过indexOf方判断当前元素在数组中的索引如果与循环的下标相等则添加到新数组中"><a href="#4-借助新数组-通过indexOf方判断当前元素在数组中的索引如果与循环的下标相等则添加到新数组中" class="headerlink" title="4.借助新数组 通过indexOf方判断当前元素在数组中的索引如果与循环的下标相等则添加到新数组中"></a>4.借助<font color="red">新数组</font> 通过indexOf方判断当前元素在数组中的索引如果与循环的下标相等则添加到新数组中</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr)    <span class="comment">//[1, 23, 1, 1, 1, 3, 23, 5, 6, 7, 9, 9, 8, 5, 5, 5]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat4</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr.indexOf(arr[i]) == i) &#123;</span><br><span class="line">                ret.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr2 = noRepeat4(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);    <span class="comment">//[1, 23, 3, 5, 6, 7, 9, 8]</span></span><br></pre></td></tr></table></figure><h5 id="5-利用空对象来记录新数组中已经存储过的元素"><a href="#5-利用空对象来记录新数组中已经存储过的元素" class="headerlink" title="5.利用空对象来记录新数组中已经存储过的元素"></a>5.利用<font color="red">空对象</font>来记录新数组中已经存储过的元素</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr)    <span class="comment">//[1, 23, 1, 1, 1, 3, 23, 5, 6, 7, 9, 9, 8, 5]</span></span><br><span class="line">    <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!obj[arr[i]])&#123;</span><br><span class="line">            obj[arr[i]]=<span class="literal">true</span>;</span><br><span class="line">            newArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);    <span class="comment">//[1, 23, 3, 5, 6, 7, 9, 8]</span></span><br></pre></td></tr></table></figure><h5 id="6-借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中"><a href="#6-借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中" class="headerlink" title="6.借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中"></a>6.借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 23, 1, 1, 1, 3, 23, 5, 6, 7, 9, 9, 8, 5]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat6</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(newArr.indexOf(arr[i]) == -<span class="number">1</span>)&#123;</span><br><span class="line">                newArr.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr2 = noRepeat6(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);    <span class="comment">//[1, 23, 3, 5, 6, 7, 9, 8]</span></span><br></pre></td></tr></table></figure><h5 id="7-借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中（原数组长度不变但被按字符串顺序排序）"><a href="#7-借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中（原数组长度不变但被按字符串顺序排序）" class="headerlink" title="7.借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中（原数组长度不变但被按字符串顺序排序）"></a>7.借助新数组，判断新数组中是否存在该元素如果不存在则将此元素添加到新数组中（原数组长度不变但被按字符串顺序排序）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 23, 1, 1, 1, 3, 23, 5, 6, 7, 9, 9, 8, 5]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat7</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = [],</span><br><span class="line">            end;<span class="comment">//临时变量用于对比重复元素</span></span><br><span class="line">        arr.sort();<span class="comment">//将数重新组排序</span></span><br><span class="line">        end = arr[<span class="number">0</span>];</span><br><span class="line">        ret.push(arr[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != end) &#123;<span class="comment">//当前元素如果和临时元素不等则将此元素添加到新数组中</span></span><br><span class="line">                ret.push(arr[i]);</span><br><span class="line">                end = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr2 = noRepeat7(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);    <span class="comment">//[1, 23, 3, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h5 id="8-此方法没有借助新数组直接改变原数组-并且去重后的数组被排序"><a href="#8-此方法没有借助新数组直接改变原数组-并且去重后的数组被排序" class="headerlink" title="8.此方法没有借助新数组直接改变原数组,并且去重后的数组被排序"></a>8.此方法没有借助新数组直接改变原数组,并且去重后的数组被排序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 23, 1, 1, 1, 3, 23, 5, 6, 7, 9, 9, 8, 5]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat8</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> end;<span class="comment">//临时变量用于对比重复元素</span></span><br><span class="line">        arr.sort();<span class="comment">//将数重新组排序</span></span><br><span class="line">        end = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == end) &#123;<span class="comment">//当前元素如果和临时元素相等则将此元素从数组中删除</span></span><br><span class="line">                arr.splice(i,<span class="number">1</span>);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr2 = noRepeat8(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);    <span class="comment">//[1, 23, 3, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h5 id="9-双层循环改变原数组"><a href="#9-双层循环改变原数组" class="headerlink" title="9.双层循环改变原数组"></a>9.<font color="red">双层循环</font>改变原数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 4, 3, 1, 2, 6, 6, 6, 6]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat9</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] == arr[j] &amp;&amp; i != j) &#123;<span class="comment">//将后面重复的数删掉</span></span><br><span class="line">                    arr.splice(j, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr2  = noRepeat9(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);    <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h5 id="10-借助新数组"><a href="#10-借助新数组" class="headerlink" title="10.借助新数组"></a>10.借助新数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 4, 3, 2, 1, 1, 1]</span></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> repArr = [];<span class="comment">//接收重复数据后面的下标</span></span><br><span class="line">        <span class="comment">//内层循环找出有重复数据的下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">                repArr.push(j);<span class="comment">//找出后面重复数据的下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//console.log(repArr);</span></span><br><span class="line">        <span class="keyword">if</span> (repArr.length == <span class="number">0</span>) &#123;<span class="comment">//若重复数组没有值说明其不是重复数据</span></span><br><span class="line">            newArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);    <span class="comment">//[5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h5 id="11-借助ES6提供的Set结构"><a href="#11-借助ES6提供的Set结构" class="headerlink" title="11.借助ES6提供的Set结构"></a>11.借助ES6提供的<font color="red">Set</font>结构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);    <span class="comment">//[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 4, 3, 2, 1, 1, 1]</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noRepeat11</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = [];</span><br><span class="line">        <span class="keyword">var</span> myset = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);<span class="comment">//利用了Set结构不能接收重复数据的特点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> val <span class="keyword">of</span> myset)&#123;</span><br><span class="line">            newArr.push(val)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr2 = noRepeat11(arr)</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);    <span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js数组去重方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js函数柯里化</title>
      <link href="/2021/10/12/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2021/10/12/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。</p><p>&emsp;&emsp;如何实现add(1)(2)(3)(4)=10</p><p><strong>方法一</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 将传入的不定参数转为数组对象</span></span><br><span class="line"><span class="keyword">var</span> _args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="keyword">var</span> _adder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">_args.push(...arguments)</span><br><span class="line"><span class="keyword">return</span> _adder</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// toString隐形转换的特性</span></span><br><span class="line">_adder.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> _args.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _adder</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化，利用递归和闭包实现</span></span><br><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = fn.length; <span class="comment">// 获取初始函数fn的形参个数</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// curry返回改造后的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> innerLength = <span class="built_in">arguments</span>.length; <span class="comment">// 获取t的实参个数</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将类数组arguments对象转为真正的数组（类数组arguments对象是函数传入的实际参数，类似数组，拥有数组属性，但不是数组）</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (innerLength &gt;= len) &#123; <span class="comment">// 递归出口，如果t实参个数已经大于fn形参个数,则终止递归</span></span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="literal">undefined</span>, args) <span class="comment">// 执行改造后的函数</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果t的实参个数少于fn的形参个数，说明柯里化并没有完成，则继续执行柯里化</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将类数组arguments对象转为真正的数组（类数组arguments对象是函数传入的实际参数，类似数组，拥有数组属性，但不是数组）</span></span><br><span class="line">        <span class="keyword">const</span> allArgs = args.concat(innerArgs);</span><br><span class="line">        <span class="keyword">return</span> t.apply(<span class="literal">undefined</span>, allArgs)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">num1, num2, num3, num4, num5</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2 + num3 + num4 + num5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> finalFun = curry(add);</span><br><span class="line"><span class="keyword">const</span> result1 = finalFun(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> result2 = finalFun(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> result3 = finalFun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> result4 = finalFun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1, result2, result3, result4); <span class="comment">// 15 15 15 15</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js函数柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS white-space 属性</title>
      <link href="/2021/10/11/white-space/"/>
      <url>/2021/10/11/white-space/</url>
      
        <content type="html"><![CDATA[<h5 id="兼容性："><a href="#兼容性：" class="headerlink" title="兼容性："></a>兼容性：</h5><p>&emsp;&emsp;所有浏览器都支持 white-space 属性。</p><p>&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。</p><h5 id="官方定义和用法："><a href="#官方定义和用法：" class="headerlink" title="官方定义和用法："></a>官方定义和用法：</h5><p>&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认。空白会被浏览器忽略。</td></tr><tr><td>pre</td><td>空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></td></tr><tr><td>nowrap</td><td>文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</td></tr><tr><td>pre-wrap</td><td>保留空白符序列，但是正常地进行换行。</td></tr><tr><td>pre-line</td><td>合并空白符序列，但是保留换行符。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 white-space 属性的值。</td></tr></tbody></table><h6 id="pre-line"><a href="#pre-line" class="headerlink" title="pre-line"></a>pre-line</h6><p>&emsp;&emsp;合并空格，保留换行符，允许自动换行</p><h6 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行</p><h6 id="nowrap"><a href="#nowrap" class="headerlink" title="nowrap"></a>nowrap</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行</p><h6 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h6><p>&emsp;&emsp;保留空格，保留换行符，不允许自动换行</p><h6 id="pre-wrap"><a href="#pre-wrap" class="headerlink" title="pre-wrap"></a>pre-wrap</h6><p>&emsp;&emsp;保留空格，保留换行符，允许自动换行。</p><table><thead><tr><th><strong>值</strong></th><th><strong>空白符</strong></th><th><strong>换行符</strong></th><th><strong>自动换行</strong></th></tr></thead><tbody><tr><td>pre-line</td><td>合并</td><td>保留</td><td>允许</td></tr><tr><td>normal</td><td>合并</td><td>忽略</td><td>允许</td></tr><tr><td>nowrap</td><td>合并</td><td>忽略</td><td>不允许</td></tr><tr><td>pre</td><td>保留</td><td>保留</td><td>不允许</td></tr><tr><td>pre-wrap</td><td>保留</td><td>保留</td><td>允许</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> white-space </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await详解</title>
      <link href="/2021/10/09/async-await%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/10/09/async-await%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h4><p>&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。</p><h4 id="2、详解"><a href="#2、详解" class="headerlink" title="2、详解"></a>2、详解</h4><p>&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。</p><h5 id="2-1、async"><a href="#2-1、async" class="headerlink" title="2.1、async"></a>2.1、async</h5><p>&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。</p><ul><li>函数返回非Promise对象</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg"></p><p>&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。</p><ul><li><h6 id="函数返回Promise对象"><a href="#函数返回Promise对象" class="headerlink" title="函数返回Promise对象"></a>函数返回Promise对象</h6></li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg"></p><p>&emsp;&emsp;可以看出返回的也是Promise对象。</p><h5 id="2-2、await"><a href="#2-2、await" class="headerlink" title="2.2、await"></a>2.2、await</h5><p>&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png"></p><p>&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。</p><h5 id="2-3、async、await结合使用"><a href="#2-3、async、await结合使用" class="headerlink" title="2.3、async、await结合使用"></a>2.3、async、await结合使用</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">await</span> XXX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;请求中...&#x27;</span>)</span><br><span class="line">resolve(<span class="string">&#x27;resolve return&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="string">&#x27;reject return&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAsync2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;请求中2...&#x27;</span>)</span><br><span class="line">resolve(<span class="string">&#x27;resolve return2&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="string">&#x27;reject return2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;test开始...&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> value1 = <span class="keyword">await</span> testAsync();</span><br><span class="line"><span class="built_in">console</span>.log(value1);</span><br><span class="line"><span class="keyword">var</span> value2 = <span class="keyword">await</span> testAsync2();</span><br><span class="line"><span class="built_in">console</span>.log(value2);</span><br><span class="line"><span class="keyword">var</span> value3 = <span class="keyword">await</span> <span class="string">&#x27;test结束...&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(value3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test());</span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg" style="zoom:50%;"><p>&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。</p><p>&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;函数1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;函数2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(fun1());</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// async/await函数</span></span><br><span class="line"><span class="built_in">console</span>.log(fun2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(fun3());</span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg" style="zoom:50%;"><p>梳理一下函数的执行过程:</p><ol><li>先执行函数1</li><li>进入test函数并输出开始</li><li>在test函数中遇到await，立即返回Promise对象</li><li>执行函数2</li><li>执行test函数中的testAsync方法</li><li>等到test函数中的testAsync方法执行完后，继续执行testAsync2方法</li><li>test函数结束</li></ol><p>&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p><h5 id="2-4、async、await异常处理"><a href="#2-4、async、await异常处理" class="headerlink" title="2.4、async、await异常处理"></a>2.4、async、await异常处理</h5><p>&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try…catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> something();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> somethingPromise()</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><p>&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p><p>&emsp;&emsp;可以使用try…catch或.catch对async函数进行异常处理。</p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础</title>
      <link href="/2021/10/08/vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/10/08/vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h5 id="Setter"><a href="#Setter" class="headerlink" title="Setter"></a>Setter</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> <span class="attr">el</span>: <span class="string">&#x27;#el&#x27;</span>,</span><br><span class="line"> <span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">price</span>: &#123;</span><br><span class="line">   <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.num = newValue * <span class="number">100</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.num/<span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="绑定value"><a href="#绑定value" class="headerlink" title="绑定value"></a>绑定value</h5><p>表单控件的值可以绑定在vue实例的动态属性上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">v-bind:true-value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">v-bind:false-value</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 选中：vm.checked==vm.a</span><br><span class="line"></span><br><span class="line">// 未选中：vm.hchecked==vm.b</span><br></pre></td></tr></table></figure><h5 id="内联样式绑定"><a href="#内联样式绑定" class="headerlink" title="内联样式绑定"></a>内联样式绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;dada&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line"> dada: &#123;</span><br><span class="line">  color: &#x27;green&#x27;,</span><br><span class="line">  fontSize: &#x27;10px&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[ styleObjectA, styleObjectB ]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h5><p>v-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(index,item) in items&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; – &#123;&#123;$index&#125;&#125; – &#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vue.js中提供了$set方法，修改数据的同时进行试图更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$set(<span class="string">&#x27;item[0]&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;da&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$set( target, key, value )</span><br></pre></td></tr></table></figure><h5 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-pre指令，表示跳过编译这个元素和子元素，显示原始的&#123;&#123;&#125;&#125;Mustache标签，用来减少编译时间</span><br></pre></td></tr></table></figure><h5 id="v-for-中使用-key"><a href="#v-for-中使用-key" class="headerlink" title="v-for 中使用 key"></a>v-for 中使用 key</h5><p>​        使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；</p><p>​        使用key的注意事项：</p><ul><li>不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）</li><li>不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。</li><li>如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。</li></ul><h5 id="v-if-v-else-if-v-else-中使用-key"><a href="#v-if-v-else-if-v-else-中使用-key" class="headerlink" title="v-if/v-else-if/v-else 中使用 key"></a>v-if/v-else-if/v-else 中使用 key</h5><blockquote><p>可能很多人都会忽略这个点</p></blockquote><p>​        原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。</p><blockquote><p>如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了</p></blockquote><p>​        相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;isEditing&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:click</span>=<span class="string">&quot;isEditing = false&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Save</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:click</span>=<span class="string">&quot;isEditing = true&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Edit</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-active</span>, <span class="selector-class">.v-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-enter</span>, <span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的</p><h5 id="v-for-和-v-if-不要一起使用"><a href="#v-for-和-v-if-不要一起使用" class="headerlink" title="v-for 和 v-if 不要一起使用"></a>v-for 和 v-if 不要一起使用</h5><blockquote><p>此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整</p><p><strong>永远不要把 v-if 和 v-for 同时用在同一个元素上。</strong></p></blockquote><p>​        原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.active&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点</p><p>​        如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// js</span><br><span class="line">let usersActive = computed(()=&gt;users.filter(user =&gt; user.active))</span><br><span class="line"></span><br><span class="line">// template</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;user in usersActive&quot;&gt;</span><br><span class="line">      &#123;&#123; user.name &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h5 id="使用简单的-计算属性"><a href="#使用简单的-计算属性" class="headerlink" title="使用简单的 计算属性"></a>使用简单的 计算属性</h5><p>​        computed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> price = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> basePrice = manufactureCost / (<span class="number">1</span> - profitMargin)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      basePrice -</span><br><span class="line">      basePrice * (discountPercent || <span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​        当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> basePrice = computed(<span class="function">() =&gt;</span> manufactureCost / (<span class="number">1</span> - profitMargin))</span><br><span class="line"><span class="keyword">let</span> discount = computed(<span class="function">() =&gt;</span> basePrice * (discountPercent || <span class="number">0</span>))</span><br><span class="line"><span class="keyword">let</span> finalPrice = computed(<span class="function">() =&gt;</span> basePrice - discount)</span><br></pre></td></tr></table></figure><p>​        如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice</p><h5 id="functional-函数式组件（Vue2）"><a href="#functional-函数式组件（Vue2）" class="headerlink" title="functional 函数式组件（Vue2）"></a>functional 函数式组件<strong>（Vue2）</strong></h5><p>优化前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;cell&quot;&gt;</span><br><span class="line">        &lt;div v-if=&quot;value&quot; class=&quot;on&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#x27;value&#x27;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>优化后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">    &lt;div class=&quot;cell&quot;&gt;</span><br><span class="line">        &lt;div v-if=&quot;props.value&quot; class=&quot;on&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#x27;value&#x27;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>没有this（没有实例）</li><li>没有响应式数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git版本回退</title>
      <link href="/2021/10/07/git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/"/>
      <url>/2021/10/07/git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</url>
      
        <content type="html"><![CDATA[<p>对于git版本的回退，我们一般会用到如下两个命令：</p><ul><li>git reset</li><li>git revert</li></ul><p>这两个命令有什么区别呢？</p><h5 id="1、git-reset"><a href="#1、git-reset" class="headerlink" title="1、git reset"></a>1、git reset</h5><p>假设有如下几个提交:</p><p><img src="https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png"></p><p>执行如下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard a0fvf8</span><br></pre></td></tr></table></figure><p>命令执行之后，HEAD指针就会移动到B提交下</p><p><img src="https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png"></p><p>此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure><p>这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。</p><h5 id="2、git-revert"><a href="#2、git-revert" class="headerlink" title="2、git revert"></a>2、git revert</h5><p>通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。</p><p>用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert 5lk4er</span><br><span class="line">git revert 76sdeb</span><br></pre></td></tr></table></figure><p><img src="https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png"></p><p>如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert OLDER_COMMIT^..NEWER_COMMIT</span><br></pre></td></tr></table></figure><p>这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3阴影(box-shadow)</title>
      <link href="/2021/10/06/CSS3%E9%98%B4%E5%BD%B1-box-shadow/"/>
      <url>/2021/10/06/CSS3%E9%98%B4%E5%BD%B1-box-shadow/</url>
      
        <content type="html"><![CDATA[<h5 id="1、单侧投影"><a href="#1、单侧投影" class="headerlink" title="1、单侧投影"></a>1、单侧投影</h5><ul><li><p>外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 </p></li><li><p>单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: -<span class="number">8px</span> <span class="number">0</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: <span class="number">8px</span> <span class="number">0</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">8px</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top&#x27;</span>&gt;</span>上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom&#x27;</span>&gt;</span>下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png"></p><h5 id="2、立体文字阴影"><a href="#2、立体文字阴影" class="headerlink" title="2、立体文字阴影"></a>2、立体文字阴影</h5><ul><li>立体文字阴影的关键点在于多层 text-shadow 的叠加</li><li>合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码</li><li>运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和</li><li>HSL(颜色值)</li><li><ul><li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li><li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li><li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="keyword">@function</span> blessing($<span class="attribute">color</span>) &#123;</span><br><span class="line"> $val: <span class="number">0px</span> <span class="number">0px</span> $color;</span><br><span class="line"> <span class="keyword">@for</span> $i from <span class="number">1</span> through <span class="number">50</span> &#123;</span><br><span class="line"> $<span class="attribute">color</span>: <span class="built_in">fade-out</span>(<span class="built_in">desaturate</span>($color, <span class="number">1%</span>), .<span class="number">02</span>);</span><br><span class="line"> $val: #&#123;$val&#125;, -#&#123;$<span class="selector-tag">i</span>&#125;px #&#123;$<span class="selector-tag">i</span>&#125;px #&#123;$<span class="attribute">color</span>&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@return</span> $val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">20vmin</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">45vh</span>;</span><br><span class="line"> <span class="attribute">text-shadow</span>: <span class="built_in">blessing</span>(<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>));</span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">14</span>, <span class="number">100%</span>, <span class="number">60%</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;福&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png"></p><h5 id="3、线性渐变模拟长阴影"><a href="#3、线性渐变模拟长阴影" class="headerlink" title="3、线性渐变模拟长阴影"></a>3、线性渐变模拟长阴影</h5><ul><li>借用了元素的两个伪元素</li><li>通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">30vmin</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">30vmin</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">30vh</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">30vmin</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&#x27;:before&#x27;</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">30vh</span>;</span><br><span class="line"> <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, <span class="number">0</span>) <span class="built_in">skewY</span>(<span class="number">45deg</span>) <span class="built_in">scaleX</span>(.<span class="number">6</span>);</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>), transparent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&#x27;:after&#x27;</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">30vh</span>;</span><br><span class="line"> <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0%</span>, <span class="number">100%</span>) <span class="built_in">skewX</span>(<span class="number">45deg</span>) <span class="built_in">scaleY</span>(.<span class="number">6</span>);</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>), transparent);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;Web秀&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png"></p><h5 id="4、渐变实现内切角"><a href="#4、渐变实现内切角" class="headerlink" title="4、渐变实现内切角"></a>4、渐变实现内切角</h5><ul><li>阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果</li><li>阴影实现缺点，单个标签最多只能是2个内切圆角</li><li>径向渐变实现内切圆角可以是4边</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">8vw</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">1vw</span> auto;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">1vmin</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">8vw</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="attribute">top</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">left</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15vw</span> <span class="number">#e91e63</span>; </span><br><span class="line"> <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="attribute">bottom</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">right</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15vw</span> <span class="number">#e91e63</span>; </span><br><span class="line"> <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.linear</span> &#123;</span><br><span class="line"> <span class="attribute">background-size</span>: <span class="number">70%</span> <span class="number">70%</span>;</span><br><span class="line"> <span class="attribute">background-image</span>: </span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">100%</span> <span class="number">100%</span>, </span><br><span class="line"> transparent <span class="number">1vw</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>),</span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">0</span> <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>),</span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">100%</span> <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>),</span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">0</span> <span class="number">100%</span>, </span><br><span class="line"> transparent <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>);</span><br><span class="line"> <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"> <span class="attribute">background-position</span>: </span><br><span class="line"> right bottom, </span><br><span class="line"> left top, </span><br><span class="line"> right top, </span><br><span class="line"> left bottom;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;shadow&quot;&gt;阴影实现缺点最多是<span class="number">2</span>边&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;linear&quot;&gt;径向渐变内切圆角<span class="number">4</span>边&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js中一些好用的数组方法</title>
      <link href="/2021/10/04/js%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
      <url>/2021/10/04/js%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="1、some"><a href="#1、some" class="headerlink" title="1、some()"></a>1、some()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.some(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>),<span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把10修改成20</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">5</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span><br><span class="line">ages.some(<span class="function"><span class="keyword">function</span> (<span class="params">currentValue, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (currentValue === <span class="number">10</span>) &#123;</span><br><span class="line">    ages[index] = <span class="number">20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ages);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把10修改成20 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">5</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span><br><span class="line">ages.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="number">10</span>) &#123;</span><br><span class="line">    ages[index] = <span class="number">20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ages);</span><br></pre></td></tr></table></figure><h5 id="2、every"><a href="#2、every" class="headerlink" title="2、every()"></a>2、every()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.every(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断每个元素的值是否都大于4</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">5</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = ages.some(<span class="function"><span class="keyword">function</span> (<span class="params">currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">//输出：true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">var</span> res = ages.some(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="keyword">var</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> every = arr.every( <span class="function"><span class="keyword">function</span>(<span class="params"> val, index, arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&#x27;val：&#x27;</span> + val); <span class="comment">//打印1，不会打印2、3、4、5、6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val &gt; <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(every); <span class="comment">//返回false</span></span><br></pre></td></tr></table></figure><h5 id="3、reduce"><a href="#3、reduce" class="headerlink" title="3、reduce()"></a>3、reduce()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br><span class="line"><span class="function"><span class="title">total</span>：必需。初始值, 或者计算结束后的返回值。</span></span><br><span class="line"><span class="function"><span class="title">currentValue</span>：必需。当前元素</span></span><br><span class="line"><span class="function"><span class="title">currentIndex</span>：可选。当前元素的索引</span></span><br><span class="line"><span class="function"><span class="title">arr</span>：可选。当前元素所属的数组对象。</span></span><br><span class="line"><span class="function"><span class="title">initialValue</span>：可选。传递给函数的初始值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算所有元素的和</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">15.5</span>, <span class="number">2.3</span>, <span class="number">1.1</span>, <span class="number">4.7</span>];</span><br><span class="line"><span class="keyword">var</span> res = numbers.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total, currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> total += currentValue</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">//23.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算大于4的元素的和</span></span><br><span class="line"><span class="keyword">var</span> result = numbers.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">4</span>).reduce(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total += item, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//20.2</span></span><br></pre></td></tr></table></figure><h5 id="4、includes"><a href="#4、includes" class="headerlink" title="4、includes()"></a>4、includes()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(searchElement)</span><br><span class="line">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, -<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="5、copyWithin"><a href="#5、copyWithin" class="headerlink" title="5、copyWithin()"></a>5、copyWithin()</h5><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.copyWithin(target, start, end)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>target</em></td><td align="left">必需。复制到指定目标索引位置。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选。元素复制的起始位置。</td></tr><tr><td align="left"><em>end</em></td><td align="left">可选。停止复制的索引位置 (默认为 <em>array</em>.length)。如果为负值，表示倒数。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">arr.copyWithin(<span class="number">3</span>) <span class="comment">// [0, 1, 2, 0, 1, 2, 3]</span></span><br><span class="line">arr.copyWithin(<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// [0, 1, 2, 4, 5, 6, 6]</span></span><br><span class="line">arr.copyWithin(<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>) <span class="comment">//[2, 3, 4, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h5 id="6、fill"><a href="#6、fill" class="headerlink" title="6、fill()"></a>6、fill()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">arr.fill(<span class="string">&quot;b&quot;</span>) <span class="comment">//[&quot;b&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;]</span></span><br><span class="line">arr.fill(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>) <span class="comment">//[0, 1, 2, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;]</span></span><br><span class="line">arr.fill(<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="number">4</span>) <span class="comment">//[0, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webSocket</title>
      <link href="/2021/10/04/webSocket/"/>
      <url>/2021/10/04/webSocket/</url>
      
        <content type="html"><![CDATA[<h5 id="websocket是什么"><a href="#websocket是什么" class="headerlink" title="websocket是什么"></a>websocket是什么</h5><p>WebSocket 是一种在单个TCP连接上进行全双工通信的协议。WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。</p><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。（维基百科）</p><p>WebSocket 本质上一种计算机网络应用层的协议，用来弥补 http 协议在持久通信能力上的不足。</p><p>WebSocket 协议在2008年诞生，2011年成为国际标准。现在最新版本浏览器都已经支持了。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p>WebSocket 的其他特点包括：</p><ul><li>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>（3）数据格式比较轻量，性能开销小，通信高效。</li><li>（4）可以发送文本，也可以发送二进制数据。</li><li>（5）没有同源限制，客户端可以与任意服务器通信。</li><li>（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws://example.com:80/some/path</span><br></pre></td></tr></table></figure><p><img src="https://p26.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/7b1dae8c025e4ed3a5006000f0f8722c.png?from=pc" alt="一文吃透 WebSocket 原理"></p><p>&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。</p><p>&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定。</p><h5 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h5><p>&emsp;&emsp;广播和收听</p><img src="https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png" style="zoom: 67%;"><h5 id="为什么需要websocket协议"><a href="#为什么需要websocket协议" class="headerlink" title="为什么需要websocket协议"></a>为什么需要websocket协议</h5><p>　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。<br>　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p><p>举例来说，我们想了解查询今天的天气实时数据，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p><p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用”轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。</p><p>在 WebSocket 协议出现以前，创建一个和服务端进双通道通信的 web 应用，需要依赖HTTP协议，进行不停的轮询，这会导致一些问题：</p><ul><li>服务端被迫维持来自每个客户端的大量不同的连接</li><li>大量的轮询请求会造成高开销，比如会带上多余的header，造成了无用的数据传输。</li></ul><p>http 协议本身是没有持久通信能力的，但是我们在实际的应用中，是很需要这种能力的，所以，为了解决这些问题，WebSocket 协议由此而生，于2011年被IETF定为标准RFC6455，并被RFC7936所补充规范。并且在 HTML5 标准中增加了有关 WebSocket 协议的相关 api ，所以只要实现了 HTML5 标准的客户端，就可以与支持 WebSocket 协议的服务器进行全双工的持久通信了。</p><h5 id="WebSocket-与-HTTP-的区别"><a href="#WebSocket-与-HTTP-的区别" class="headerlink" title="WebSocket 与 HTTP 的区别"></a>WebSocket 与 HTTP 的区别</h5><p><img src="https://p26.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/24b5143d012e4234aa0f0ade3da44c16.png?from=pc" alt="一文吃透 WebSocket 原理"></p><ul><li><strong>相同点：</strong> 都是一样基于TCP的，都是可靠性传输协议。都是应用层协议。</li><li><strong>联系：</strong> WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的。</li></ul><p>下面一张图说明了 HTTP 与 WebSocket 的主要区别：</p><p><img src="https://p26.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/24b1bbe39dcf428196f25c31500354a2.png?from=pc" alt="一文吃透 WebSocket 原理"></p><p>不同点：</p><ul><li>1、 WebSocket 是双向通信协议，模拟 Socket 协议，可以双向发送或接受信息，而 HTTP 是单向的；</li><li>2、 WebSocket 是需要浏览器和服务器握手进行建立连接的，而 http 是浏览器发起向服务器的连接。</li><li>3、 虽然 HTTP/2 也具备服务器推送功能，但 HTTP/2 只能推送静态资源，无法推送指定的信息。</li></ul><h5 id="WebSocket协议的原理"><a href="#WebSocket协议的原理" class="headerlink" title="WebSocket协议的原理"></a>WebSocket协议的原理</h5><p>与http协议一样， WebSocket 协议也需要通过已建立的TCP连接来传输数据。具体实现上是通过http协议建立通道，然后在此基础上用真正 WebSocket 协议进行通信，所以WebSocket协议和http协议是有一定的交叉关系的。首先， WebSocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说。简单的举个例子吧，用目前应用比较广泛的 PHP 生命周期来解释。</p><p>HTTP 的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次 HTTP 请求就结束了。</p><p>在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request = Response， 在 HTTP 中永远是这样，也就是说一个 Request 只能有一个 Response。而且这个 Response 也是被动的，不能主动发起。首先 WebSocket 是基于 HTTP 协议的，或者说借用了 HTTP 协议来完成一部分握手。</p><p>首先我们来看个典型的 WebSocket 握手</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http://example.com  </span><br></pre></td></tr></table></figure><p>熟悉 HTTP 的童鞋可能发现了，这段类似 HTTP 协议的握手请求中，多了这么几个东西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure><p>这个就是 WebSocket 的核心了，告诉 Apache 、 Nginx 等服务器：注意啦，我发起的请求要用 WebSocket 协议，快点帮我找到对应的助理处理~而不是那个老土的 HTTP 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><ul><li>首先， Sec-WebSocket-Key 是一个 Base64 encode 的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠我，我要验证你是不是真的是 WebSocket 助理。</li><li>然后， Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同 URL 下，不同的服务所需要的协议。简单理解：今晚我要服务A，别搞错啦~</li><li>最后， Sec-WebSocket-Version 是告诉服务器所使用的 WebSocket Draft （协议版本），在最初的时候，WebSocket 协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么 Firefox 和 Chrome 用的不是一个版本之类的，当初 WebSocket 协议太多可是一个大难题。。不过现在还好，已经定下来啦~大家都使用同一个版本：服务员，我要的是13岁的噢→_→ 然后服务器会返回下列东西，表示已经接受到请求， 成功建立 WebSocket 啦！</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure><p>这里开始就是 HTTP 最后负责的区域了，告诉客户，我已经成功切换协议啦~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure><p>依然是固定的，告诉客户端即将升级的是 WebSocket 协议，而不是 mozillasocket ，lurnarsocket 或者 shitsocket。</p><p>然后， Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key。服务器：好啦好啦，知道啦，给你看我的 ID CARD 来证明行了吧。后面的， Sec-WebSocket-Protocol 则是表示最终使用的协议。至此，HTTP 已经完成它所有工作了，接下来就是完全按照 WebSocket 协议进行了。总结， WebSocket 连接的过程是：</p><ul><li>首先，客户端发起http请求，经过3次握手后，建立起TCP连接；http 请求里存放 WebSocket 支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version等；</li><li>然后，服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据；</li><li>最后，客户端收到连接成功的消息后，开始借助于TCP传输信道进行全双工通信。</li></ul><h5 id="什么场景下用websocket"><a href="#什么场景下用websocket" class="headerlink" title="什么场景下用websocket"></a>什么场景下用websocket</h5><ol><li>websocket社交订阅</li><li>websocket多玩家游戏</li><li>websocket协同编辑/编程</li><li>websocket收集点击流数据</li><li>股票基金报价</li><li>体育实况更新</li><li>多媒体聊天</li><li>基于位置的应用</li><li>在线教育</li><li>论坛的消息广播</li><li>弹幕、客服等等</li></ol><h5 id="怎么使用websocket"><a href="#怎么使用websocket" class="headerlink" title="怎么使用websocket"></a>怎么使用websocket</h5><p>服务器端：…</p><p>客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io</p><ol><li>启动服务器</li><li>启动客户端程序连接服务器（<strong>永久</strong>连接）</li><li>服务器为每个客户创建专用对象（负责当前客户消息的收发）</li><li>客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）</li></ol><p><strong>客户端</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reset()&quot;</span>/&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:80/websocket/ws&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Socket </span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//向服务器发送数据</span></span><br><span class="line">    <span class="comment">//socket.send(&#x27;哈哈哈哈&#x27;); </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收数据事件</span></span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    body.innerHTML+=<span class="string">&quot;&lt;br/&gt;对方：&quot;</span>+event.data;</span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket关闭事件</span></span><br><span class="line">    socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    body.innerHTML+=<span class="string">&quot;&lt;br/&gt;系统：已和服务器断开连接！！！&quot;</span>;</span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭socket</span></span><br><span class="line">    <span class="comment">//socket.close()</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------</span></span><br><span class="line"><span class="keyword">var</span> body=<span class="built_in">document</span>.getElementById(<span class="string">&quot;body&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg=<span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).value;<span class="comment">//获取输入框内容</span></span><br><span class="line">    socket.send(msg);<span class="comment">//发送消息</span></span><br><span class="line">    reset();<span class="comment">//清空输入框</span></span><br><span class="line">    body.innerHTML+=<span class="string">&quot;&lt;br/&gt;我：&quot;</span>+msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).value=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务器端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.CloseReason;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,</span></span><br><span class="line"><span class="comment">//结构形式为“ws：//ip:端口/项目名/指定的url”</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WSServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">//连接打开时执行</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.session=session;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个客户端连接进来了 ... 它的sessionid是：&quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收到消息时执行</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">    System.out.println(session.getId()+<span class="string">&quot;客户端发送的消息是：&quot;</span>+message);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sendMessage(message);<span class="comment">//消息发回给客户端</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//return currentUser + &quot;：&quot; + message;如果有返回值，则客户端发送消息后会收到这个返回值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接关闭时执行</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session, CloseReason closeReason)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个客户端关闭了，它的sessionid是：&quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接错误时执行</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义的方法，用于发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">        <span class="comment">//this.session.getAsyncRemote().sendText(message);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="websocket-断线重连"><a href="#websocket-断线重连" class="headerlink" title="websocket 断线重连"></a>websocket 断线重连</h5><p>心跳就是客户端定时的给服务端发送消息，证明客户端是在线的， 如果超过一定的时间没有发送则就是离线了。</p><h6 id="如何判断在线离线？"><a href="#如何判断在线离线？" class="headerlink" title="如何判断在线离线？"></a>如何判断在线离线？</h6><p>当客户端第一次发送请求至服务端时会携带唯一标识、以及时间戳，服务端到db或者缓存去查询改请求的唯一标识，如果不存在就存入db或者缓存中， 第二次客户端定时再次发送请求依旧携带唯一标识、以及时间戳，服务端到db或者缓存去查询改请求的唯一标识，如果存在就把上次的时间戳拿取出来，使用当前时间戳减去上次的时间， 得出的毫秒秒数判断是否大于指定的时间，若小于的话就是在线，否则就是离线；</p><h6 id="如何解决断线问题"><a href="#如何解决断线问题" class="headerlink" title="如何解决断线问题"></a>如何解决断线问题</h6><p>通过查阅资料了解到 nginx 代理的 websocket 转发，无消息连接会出现超时断开问题。网上资料提到解决方案两种，一种是修改nginx配置信息，第二种是 websocket 发送心跳包。下面就来总结一下本次项目实践中解决的 websocket 的断线 和 重连 这两个问题的解决方案。主动触发包括主动断开连接，客户端主动发送消息给后端</p><ul><li>1 主动断开连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.close();</span><br></pre></td></tr></table></figure><p>主动断开连接，根据需要使用，基本很少用到。</p><ul><li>2 主动发送消息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.send(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure><ul><li>断线的可能原因1：websocket超时没有消息自动断开连接，应对措施：这时候我们就需要知道服务端设置的超时时长是多少，在小于超时时间内发送心跳包，有2中方案:一种是客户端主动发送上行心跳包，另一种方案是服务端主动发送下行心跳包。</li></ul><p>下面主要讲一下客户端也就是前端如何实现心跳包：</p><p>首先了解一下心跳包机制</p><p>跳包之所以叫心跳包是因为：它像心跳一样每隔固定时间发一次，以此来告诉服务器，这个客户端还活着。事实上这是为了保持长连接，至于这个包的内容，是没有什么特别规定的，不过一般都是很小的包，或者只包含包头的一个空包。</p><p>在 TCP 的机制里面，本身是存在有心跳包的机制的，也就是 TCP 的选项：SO_KEEPALIVE 。系统默认是设置的2小时的心跳频率。但是它检查不到机器断电、网线拔出、防火墙这些断线。而且逻辑层处理断线可能也不是那么好处理。一般，如果只是用于保活还是可以的。</p><p>心跳包一般来说都是在逻辑层发送空的 echo 包来实现的。下一个定时器，在一定时间间隔下发送一个空包给客户端，然后客户端反馈一个同样的空包回来，服务器如果在一定时间内收不到客户端发送过来的反馈包，那就只有认定说掉线了。</p><p>在长连接下，有可能很长一段时间都没有数据往来。理论上说，这个连接是一直保持连接的，但是实际情况中，如果中间节点出现什么故障是难以知道的。更要命的是，有的节点(防火墙)会自动把一定时间之内没有数据交互的连接给断掉。在这个时候，就需要我们的心跳包了，用于维持长连接，保活。</p><p>心跳检测步骤：</p><ul><li>客户端每隔一个时间间隔发生一个探测包给服务器</li><li>客户端发包时启动一个超时定时器</li><li>服务器端接收到检测包，应该回应一个包</li><li>如果客户机收到服务器的应答包，则说明服务器正常，删除超时定时器</li><li>如果客户端的超时定时器超时，依然没有收到应答包，则说明服务器挂了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 前端解决方案：心跳检测</span><br><span class="line">var heartCheck = &#123;</span><br><span class="line">    timeout: 30000, //30秒发一次心跳</span><br><span class="line">    timeoutObj: null,</span><br><span class="line">    serverTimeoutObj: null,</span><br><span class="line">    reset: function()&#123;</span><br><span class="line">        clearTimeout(this.timeoutObj);</span><br><span class="line">        clearTimeout(this.serverTimeoutObj);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;,</span><br><span class="line">    start: function()&#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        this.timeoutObj = setTimeout(function()&#123;</span><br><span class="line">            //这里发送一个心跳，后端收到后，返回一个心跳消息，</span><br><span class="line">            //onmessage拿到返回的心跳就说明连接正常</span><br><span class="line">            ws.send(&quot;ping&quot;);</span><br><span class="line">            console.log(&quot;ping!&quot;)</span><br><span class="line"></span><br><span class="line">            self.serverTimeoutObj = setTimeout(function()&#123;//如果超过一定时间还没重置，说明后端主动断开了</span><br><span class="line">                ws.close(); //如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次</span><br><span class="line">            &#125;, self.timeout);</span><br><span class="line">        &#125;, this.timeout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>断线的可能原因2：websocket 异常包括服务端出现中断，交互切屏等等客户端异常中断等等 当若服务端宕机了，客户端怎么做、服务端再次上线时怎么做？客户端则需要断开连接，通过 onclose 关闭连接，服务端再次上线时则需要清除之间存的数据，若不清除 则会造成只要请求到服务端的都会被视为离线。</li></ul><p>针对这种异常的中断解决方案就是处理重连，下面我们给出的重连方案是使用js库处理：引入reconnecting-websocket.min.js，ws建立链接方法使用js库api方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var ws = new ReconnectingWebSocket(url);</span><br><span class="line">// 断线重连：</span><br><span class="line">reconnectSocket()&#123;</span><br><span class="line">    if (&#x27;ws&#x27; in window) &#123;</span><br><span class="line">        ws = new ReconnectingWebSocket(url);</span><br><span class="line">    &#125; else if (&#x27;MozWebSocket&#x27; in window) &#123;</span><br><span class="line">       ws = new MozWebSocket(url);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      ws = new SockJS(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断网监测支持使用js库：offline.min.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">onLineCheck()&#123;</span><br><span class="line">    Offline.check();</span><br><span class="line">    console.log(Offline.state,&#x27;---Offline.state&#x27;);</span><br><span class="line">    console.log(this.socketStatus,&#x27;---this.socketStatus&#x27;);</span><br><span class="line"></span><br><span class="line">    if(!this.socketStatus)&#123;</span><br><span class="line">        console.log(&#x27;网络连接已断开！&#x27;);</span><br><span class="line">        if(Offline.state === &#x27;up&#x27; &amp;&amp; websocket.reconnectAttempts &gt; websocket.maxReconnectInterval)&#123;</span><br><span class="line">            window.location.reload();</span><br><span class="line">        &#125;</span><br><span class="line">        reconnectSocket();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        console.log(&#x27;网络连接成功！&#x27;);</span><br><span class="line">        websocket.send(&quot;heartBeat&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用：在websocket断开链接时调用网络中断监测</span><br><span class="line">websocket.onclose =&gt; () &#123;</span><br><span class="line">    onLineCheck();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>WebSocket 是为了在 web 应用上进行双通道通信而产生的协议，相比于轮询HTTP请求的方式，WebSocket 有节省服务器资源，效率高等优点。WebSocket 中的掩码是为了防止早期版本中存在中间缓存污染攻击等问题而设置的，客户端向服务端发送数据需要掩码，服务端向客户端发送数据不需要掩码。WebSocket 中 Sec-WebSocket-Key 的生成算法是拼接服务端和客户端生成的字符串，进行SHA1哈希算法，再用base64编码。WebSocket 协议握手是依靠 HTTP 协议的，依靠于 HTTP 响应101进行协议升级转换。</p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用CSS代码让你的列表网页提升渲染性能</title>
      <link href="/2021/10/03/%E7%94%A8CSS%E4%BB%A3%E7%A0%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8%E7%BD%91%E9%A1%B5%E6%8F%90%E5%8D%87%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD/"/>
      <url>/2021/10/03/%E7%94%A8CSS%E4%BB%A3%E7%A0%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8%E7%BD%91%E9%A1%B5%E6%8F%90%E5%8D%87%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。</p><h5 id="content-visibility属性有三个可选值"><a href="#content-visibility属性有三个可选值" class="headerlink" title="content-visibility属性有三个可选值:"></a>content-visibility属性有三个可选值:</h5><ul><li>visible: 默认值。对布局和呈现不会产生什么影响。</li><li>hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。</li><li>auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。</li></ul><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处省略n个&lt;div class=&quot;card&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">   <span class="attribute">transition-duration</span>: <span class="number">0.3s</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#ffaa00</span>;</span><br><span class="line">   <span class="attribute">content</span>-<span class="attribute">visibility</span>: auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题</p><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。</p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的表单验证</title>
      <link href="/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h5 id="1、判断字符串是否是-https-mailto-tal-开头的"><a href="#1、判断字符串是否是-https-mailto-tal-开头的" class="headerlink" title="1、判断字符串是否是 https?:|mailto:|tal:  开头的"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isExternal</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(https?:|mailto:|tel:)/</span>.test(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、检验字符串是否是-admin-editor"><a href="#2、检验字符串是否是-admin-editor" class="headerlink" title="2、检验字符串是否是 admin  editor"></a>2、检验字符串是否是 admin  editor</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validUsername</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> valid_map = [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;editor&#x27;</span>]</span><br><span class="line">  <span class="keyword">return</span> valid_map.indexOf(str.trim()) &gt;= <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、判断网址"><a href="#3、判断网址" class="headerlink" title="3、判断网址"></a>3、判断网址</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^(http?|https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?&#x27;\\+&amp;%$#=~_-]+))*$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、判断都是小写字母"><a href="#4、判断都是小写字母" class="headerlink" title="4、判断都是小写字母"></a>4、判断都是小写字母</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validLowerCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[a-z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、判断都是大写字母"><a href="#5、判断都是大写字母" class="headerlink" title="5、判断都是大写字母"></a>5、判断都是大写字母</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validUpperCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[A-Z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、判断是只能是数字和字母"><a href="#6、判断是只能是数字和字母" class="headerlink" title="6、判断是只能是数字和字母"></a>6、判断是只能是数字和字母</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validAlphabets</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[0-9A-Za-z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、用户密码格式"><a href="#7、用户密码格式" class="headerlink" title="7、用户密码格式"></a>7、用户密码格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isEvolPass</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/</span>.test(str) <span class="comment">// 用户密码格式正则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、邮箱校验"><a href="#8、邮箱校验" class="headerlink" title="8、邮箱校验"></a>8、邮箱校验</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">email</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、验证字符串"><a href="#9、验证字符串" class="headerlink" title="9、验证字符串"></a>9、验证字符串</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span> || str <span class="keyword">instanceof</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10、手机号码校验"><a href="#10、手机号码校验" class="headerlink" title="10、手机号码校验"></a>10、手机号码校验</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPhone</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\d&#123;8&#125;$/</span>.test(str) <span class="comment">//  手机号码正则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11、验证是数组"><a href="#11、验证是数组" class="headerlink" title="11、验证是数组"></a>11、验证是数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.isArray === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、判断只能是汉字"><a href="#12、判断只能是汉字" class="headerlink" title="12、判断只能是汉字"></a>12、判断只能是汉字</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isChinese</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> reg=<span class="regexp">/^[\u0391-\uFFE5]+$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13、校验时间大小"><a href="#13、校验时间大小" class="headerlink" title="13、校验时间大小"></a>13、校验时间大小</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkDate</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj_value=obj.replace(<span class="regexp">/-/g</span>,<span class="string">&quot;/&quot;</span>);<span class="comment">//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span></span><br><span class="line">    <span class="comment">// var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span></span><br><span class="line">    <span class="keyword">const</span> date1=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(obj_value));</span><br><span class="line">    <span class="keyword">const</span> date2=<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//取今天的日期</span></span><br><span class="line">    <span class="keyword">if</span>(date1&gt;date2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不能大于当前时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14、判断ip"><a href="#14、判断ip" class="headerlink" title="14、判断ip"></a>14、判断ip</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isIP</span>(<span class="params">strIP</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isNull(strIP)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> re=<span class="regexp">/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/g</span> <span class="comment">//匹配IP地址的正则表达式</span></span><br><span class="line">    <span class="keyword">if</span>(re.test(strIP))&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">RegExp</span>.$1 &lt;<span class="number">256</span> &amp;&amp; <span class="built_in">RegExp</span>.$2&lt;<span class="number">256</span> &amp;&amp; <span class="built_in">RegExp</span>.$3&lt;<span class="number">256</span> &amp;&amp; <span class="built_in">RegExp</span>.$4&lt;<span class="number">256</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15、检查输入字符串是否为空或者全部都是空格"><a href="#15、检查输入字符串是否为空或者全部都是空格" class="headerlink" title="15、检查输入字符串是否为空或者全部都是空格"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isNull</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( str == <span class="string">&quot;&quot;</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> regu = <span class="string">&quot;^[ ]+$&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">const</span> = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regu);</span><br><span class="line">    <span class="keyword">return</span> re.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="16、判断是否是日期-输入：date：日期；fmt：日期格式"><a href="#16、判断是否是日期-输入：date：日期；fmt：日期格式" class="headerlink" title="16、判断是否是日期  (输入：date：日期；fmt：日期格式)"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params"> date, fmt </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fmt==<span class="literal">null</span>) fmt=<span class="string">&quot;yyyyMMdd&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> yIndex = fmt.indexOf(<span class="string">&quot;yyyy&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(yIndex==-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> year = date.substring(yIndex,yIndex+<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">const</span> mIndex = fmt.indexOf(<span class="string">&quot;MM&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(mIndex==-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> month = date.substring(mIndex,mIndex+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> dIndex = fmt.indexOf(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(dIndex==-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> day = date.substring(dIndex,dIndex+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(!isNumber(year)||year&gt;<span class="string">&quot;2100&quot;</span> || year&lt; <span class="string">&quot;1900&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!isNumber(month)||month&gt;<span class="string">&quot;12&quot;</span> || month&lt; <span class="string">&quot;01&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(day&gt;getMaxDay(year,month) || day&lt; <span class="string">&quot;01&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="17、字符1是否以字符串2开始和结束"><a href="#17、字符1是否以字符串2开始和结束" class="headerlink" title="17、字符1是否以字符串2开始和结束"></a>17、字符1是否以字符串2开始和结束</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFirstMatch</span>(<span class="params">str1,str2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> index = str1.indexOf(str2);</span><br><span class="line">    <span class="keyword">if</span>(index==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isLastMatch</span>(<span class="params">str1,str2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> index = str1.lastIndexOf(str2);</span><br><span class="line">    <span class="keyword">if</span>(str1.length==index+str2.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
