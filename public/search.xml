<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端程序员必须知道的 Web 漏洞</title>
      <link href="/hb-myblog.github.io/2022/01/14/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84-Web-%E6%BC%8F%E6%B4%9E/"/>
      <url>/hb-myblog.github.io/2022/01/14/%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84-Web-%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>随着互联网的发展，早已经不是仅限于简单的网页或是社交，电商购物、银行转账、企业管理等等。 Web 安全也是非常值得注意的。</p><h5 id="什么是-Web-安全？"><a href="#什么是-Web-安全？" class="headerlink" title="什么是 Web 安全？"></a>什么是 Web 安全？</h5><p>黑客利用网络操作系统的漏洞和 Web 服务器的 SQL 注入漏洞等，得到 Web 服务器的控制权，轻则篡改、删除、添加数据，重则窃取重要的商业信息、转账等，更严重的就是在网页中植入恶意代码，使网站受到不可预期的侵害。</p><p>常见的攻击可分为三类：XSS、CSRF、SQL注入。</p><h5 id="1、XSS-攻击"><a href="#1、XSS-攻击" class="headerlink" title="1、XSS 攻击"></a>1、XSS 攻击</h5><p>Cross Site Scripting 跨站脚本攻击，为了与 CSS 区分，所以简写为 XSS 。</p><p>恶意攻击给 Web 页面植入恶意的 Script 代码，当用户浏览该网页的时候，嵌入 Web 里面的 script 代码会被执行，从而达到攻击的效果。</p><p>讲直白点，就是恶意攻击者通过在输入框处添加恶意 script 代码，用户浏览网页的时候执行 script 代码，从而达到恶意攻击用户的目的。</p><h6 id="1-1、XSS-的危害"><a href="#1-1、XSS-的危害" class="headerlink" title="1.1、XSS 的危害"></a>1.1、XSS 的危害</h6><ul><li>盗用各类账号，然后进行数据各种任意操作。</li><li>控制企业数据，包括删除、添加、篡改敏感信息等。</li><li>盗取具有商业价值信息。</li><li>强制发送电子邮件，获取验证码。</li><li>控制受害者的机器向其他网站发起攻击。</li></ul><h6 id="1-2、XSS-的攻击类型"><a href="#1-2、XSS-的攻击类型" class="headerlink" title="1.2、XSS 的攻击类型"></a>1.2、XSS 的攻击类型</h6><ul><li>反射型 XSS 跨站脚本攻击</li></ul><p>发出请求时，XSS代码会出现在 url 中，作为输入提交到服务器端，服务器再返回给浏览器，然后浏览器解析执行 XSS 代码，这一过程像一次反射，所以称之为反射型。</p><p>这种类型的攻击，通常是把 XSS 攻击代码放入请求地址的 数据传输部分，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com?q=&lt;script&gt;alert(&quot;恶意脚本&quot;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">http://www.xxx.com?n=&lt;img src=&quot;1 onerror=alert(&#x27;恶意代码&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>存储型 XSS 跨站脚本攻击</li></ul><p>提交的 XSS 代码会存储在服务器端，如数据库、内存、文件系统内，下次请求目标页面时不再提交 XSS 代码。</p><p>如在留言板输入框位置添加 script 代码或 html、css 代码，把代码为转义，直接存入数据库。</p><ul><li>文档型 XSS 跨站脚本攻击</li></ul><p>文档型的 XSS 攻击不会经过服务器，作为中间人的角色，在数据传输过程中劫持到网络数据包，然后修改里面的 html 文档。</p><h6 id="1-3、XSS-的防御措施"><a href="#1-3、XSS-的防御措施" class="headerlink" title="1.3、XSS 的防御措施"></a>1.3、XSS 的防御措施</h6><p>措施1：编码。</p><p>对这些数据进行 html entity 编码。客户端和服务器端都需要进行转义编码。</p><p>措施2：过滤。</p><p>移除用户上传的 DOM 属性，如上边的 onerror。</p><p>移除用户上传的 style、script、iframe 节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 如</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123; <span class="attribute">display</span>:none &#125; </span></span><br><span class="line"><span class="css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>措施3：利用 CSP</p><p>浏览器中的内容安全策略，就是决策浏览器加载哪些资源。</p><h5 id="2、CSRF-攻击"><a href="#2、CSRF-攻击" class="headerlink" title="2、CSRF 攻击"></a>2、CSRF 攻击</h5><p>Cross site request forgery 跨站点请求伪造。</p><p>攻击者诱导受害者进入第三方网站，向被攻击网站发送跨站请求，利用被攻击者在被攻击网站已经获取的注册凭证，绕过后台的用户验证达到冒充用户对攻击网站进行的某种操作。</p><h6 id="CSRF-攻击特点："><a href="#CSRF-攻击特点：" class="headerlink" title="CSRF 攻击特点："></a>CSRF 攻击特点：</h6><ul><li>并没有劫持 cookie，只是伪造受害者的身份。</li><li>攻击一般发起在第三方网站，被攻击网站无法防止攻击发生。</li><li>跨站请求可以是各种方式，如：图片url、超链接、CORS、form提交。</li></ul><h6 id="2-1、CSRF-的危害"><a href="#2-1、CSRF-的危害" class="headerlink" title="2.1、CSRF 的危害"></a>2.1、CSRF 的危害</h6><ul><li>在社交网络，网站被劫持之后，点击会自动关注 + 分享。</li><li>银行系统，被攻击以后可以查询余额，也可以自动转账。</li><li>电商类系统，如果被攻击可以添加、删除、清空购物车。</li></ul><h6 id="2-2、CSRF-的攻击类型"><a href="#2-2、CSRF-的攻击类型" class="headerlink" title="2.2、CSRF 的攻击类型"></a>2.2、CSRF 的攻击类型</h6><ul><li>GET 类型攻击</li></ul><p>使用非常简单，只需要一个 http 请求。</p><p>比如页面中的一个图片添加链接，还有 iframe、script ，最容易完成 CSFR 攻击，且不易被用户发现，隐蔽性超强。</p><p>由于 get 接口是最常见的一种 CSRF 攻击类型，所以很多重要的接口不适用 get 方式，使用 post 一定程度上可以防止 CSRF 攻击。</p><ul><li>POST 类型攻击</li></ul><p>这种类型的 SCRF 攻击，通常使用的是一个自动提交的表单。简单讲就是伪造一个自动提交的表单，一旦访问页面时，表单就会自动提交。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://xxx.com/widthdraw&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;web&quot;</span> /&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;psd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="built_in">document</span>.forms[<span class="number">0</span>].submit()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>链接类型的攻击</li></ul><p>比起前两个，这个类型的比较少见，链接类型的攻击必须要用户点击链接，才能触发。</p><p>通常在论坛中发布的图片嵌入恶意的链接，或以广告的形式诱导用户点击中招。所以我们在邮箱中看到乱七八糟的广告，尽量别点击，防止遇到三方攻击。</p><ul><li>登录 CSRF 攻击方式</li></ul><p>伪造一种新型的攻击方式，用户误以为是在网站正常登录，实际上是使用账户和密码登录到了黑客网站，这样黑客可以监听到用户的所有操作，甚至知道用户的账户信息。</p><h6 id="2-3、CSRF-的防御措施"><a href="#2-3、CSRF-的防御措施" class="headerlink" title="2.3、CSRF 的防御措施"></a>2.3、CSRF 的防御措施</h6><p><strong>措施</strong>1：检查 http 头部的 referer 信息</p><p>referer 包含在请求头内，表示请求接口的页面来源。</p><p>服务端通过检查 referer 信息，发现来源于外域时，就可以拦截请求，通过阻止不明外域的访问，一定程度上可以减少攻击。</p><p><strong>措施</strong>2：使用一次性令牌</p><p>使用一次性令牌做身份识别，黑客是无法通过跨域拿到一次性令牌的，所以服务端可以通过判断是否携带一次性令牌，就可以排除一部分的非法操作者。</p><p><strong>措施</strong>3：使用验证图片</p><p>服务端生成一些文本和数字，在服务端保存这份信息，同时以图片的形式在客户端展现，让用户去合法填写信息，当 CSRF 攻击时，拿不到这个验证码的时候，无法向服务器提供这个信息，导致匹配失败，从而识别它是非法攻击者。</p><p>这个应用非常常见，登录的时候，需要填写图形验证码。</p><p>现在滑动图片验证也非常常见。</p><h5 id="3、SQL注入"><a href="#3、SQL注入" class="headerlink" title="3、SQL注入"></a>3、SQL注入</h5><p>SQL 注入，一般发生在注册、评论、添加等，只有有用户输入的地方，就有可能发生 SQL 注入。SQL 注入是一种常见的 Web 安全漏洞，攻击者会利用这个漏洞，可以访问或修改数据，利用潜在的数据库漏洞进行攻击。</p><p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将(恶意的)SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入(恶意)SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击.</p><h6 id="3-1、SQL-注入危害"><a href="#3-1、SQL-注入危害" class="headerlink" title="3.1、SQL 注入危害"></a>3.1、SQL 注入危害</h6><p>任意的账号都可以登录，可以进行任意的操作，粗暴点讲，就是随便来。</p><h6 id="3-2、-SQL注入分类"><a href="#3-2、-SQL注入分类" class="headerlink" title="3.2、 SQL注入分类"></a>3.2、 SQL注入分类</h6><ul><li>数字型注入</li></ul><p>当输入的参数为整数时，则有可能存在数字型漏洞。</p><ul><li>字符型注入</li></ul><p>当输入参数为字符串时，则可能存在字符型注入漏洞。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符型一般需要使用单引号来闭合。</p><p>字符型注入最关键的是如何闭合 SQL 语句以及注释多余的代码。</p><ul><li>其他类型</li></ul><p>其实我觉得 SQL 注入只有两种类型：数字型与字符型。很多人可能会说还有如：Cookie 注入、POST 注入、延时注入等。</p><p>的确如此，但这些类型的注入归根结底也是数字型和字符型注入的不同展现形式或者注入的位置不同罢了</p><p>以下是一些常见的注入叫法：</p><ul><li>POST注入：注入字段在 POST 数据中</li><li>Cookie注入：注入字段在 Cookie 数据中</li><li>延时注入：使用数据库延时特性注入</li><li>搜索注入：注入处为搜索的地方</li><li>base64注入：注入字符串需要经过 base64 加密</li></ul><h6 id="3-3、SQL注入的防范措施"><a href="#3-3、SQL注入的防范措施" class="headerlink" title="3.3、SQL注入的防范措施"></a>3.3、SQL注入的防范措施</h6><p>凡是用户输入的地方，我们都应该防止黑客攻击，永远不要相信用户的输入。所以对应的防御措施分别有：</p><ul><li>添加正则验证，使用正则表达式过滤传入的参数。</li><li>屏蔽敏感词汇。</li><li>字符串过滤。</li></ul><h5 id="4、接口加密"><a href="#4、接口加密" class="headerlink" title="4、接口加密"></a>4、接口加密</h5><p>前后端分离之后，前端每天都会接触到很多接口。发送网络请求的时候，有些接口就会使用 get 方法。最常见的传参方式就是，直接在 url 地址后面加参数。</p><p>直接采用这种方式传输数据，如果数据被劫持或抓包工具偷走之后，就会直接被人盗取走，特别危险。若是采用接口加密，如下：</p><p>接口加密就是将接口请求调用中传递的参数进行加密，目的就是为了保证接口请求中传递参数和返回的结果的安全性，一般比较敏感数据，如身份证、电话号码、账号、密码等需要进行加密。</p><p>常见的加密方式：</p><ul><li>md5 加密</li><li>base64 加密</li><li>RSA 加密</li><li>对称加密算法</li><li>bcryptjs</li></ul><p>加密方式较多，可以根据自己具体的需要和项目语言选择其中一种。</p><p>加密之后的数据更安全，那我们能不能将接口所有的数据都进行加密呢？加密是非常消耗资源的，如果有大批量的数据都进行加密时，返回数据需要的时间就更长，会直接影响用户体验。所以我们进行加密时，只需要对敏感的重要的信息进行加密。</p>]]></content>
      
      
      <categories>
          
          <category> 前端安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite构建工具的使用</title>
      <link href="/hb-myblog.github.io/2022/01/14/Vite/"/>
      <url>/hb-myblog.github.io/2022/01/14/Vite/</url>
      
        <content type="html"><![CDATA[<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>极速的服务启动，使用原生 ESM 文件，无需打包!</li><li>轻量快速的热重载，无论应用程序大小如何，都始终极快的模块热重载（HMR）</li><li>丰富的功能，对 TypeScript、JSX、CSS 等支持开箱即用。</li><li>优化的构建，可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建</li><li>通用的插件，在开发和构建之间共享 Rollup-superset 插件接口。</li><li>完全类型化的API，灵活的 API 和完整 TypeScript 类型。</li></ul><h5 id="为什么选-Vite"><a href="#为什么选-Vite" class="headerlink" title="为什么选 Vite"></a>为什么选 Vite</h5><p>直接点说，现市面上的构建工具太慢了（webpack、Rollup 和、Parcel等），Vite直接利用浏览器原生的ES模块使构建速度更快</p><h5 id="搭建第一个-Vite-项目"><a href="#搭建第一个-Vite-项目" class="headerlink" title="搭建第一个 Vite 项目"></a>搭建第一个 Vite 项目</h5><p>使用 npm:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><p>使用 yarn:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><p>然后按照提示操作即可！</p><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># npm <span class="number">6.</span>x</span><br><span class="line">npm init vite@latest my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"># npm <span class="number">7</span>+, 需要额外的双横线：</span><br><span class="line">npm init vite@latest my-vue-app -- --template vue</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure><h5 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h5><p>在安装了 Vite 的项目中，可以在 npm scripts 中使用 vite 可执行文件，或者直接使用 npx vite 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>, <span class="comment">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>, <span class="comment">// 为生产环境构建产物</span></span><br><span class="line">    <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span> <span class="comment">// 本地预览生产构建产物</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以指定额外的命令行选项，如 –port 或 –https。运行 npx vite –help 获得完整的命令行选项列表。</p><h5 id="配置文件解析（常用配置）"><a href="#配置文件解析（常用配置）" class="headerlink" title="配置文件解析（常用配置）"></a>配置文件解析（常用配置）</h5><p>当以命令行方式运行 vite 时，Vite 会自动解析 项目根目录 下名为 vite.config.js 的文件。</p><p>最基础的配置文件是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 配置选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：即使项目没有在 package.json 中开启 type: “module”，Vite 也支持在配置文件中使用 ESM 语法。这种情况下，配置文件会在被加载前自动进行预处理。</p><p>你可以显式地通过 –config 命令行选项指定一个配置文件（相对于 cwd 路径进行解析）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vite --config my-config.js</span><br></pre></td></tr></table></figure><h5 id="配置智能提示"><a href="#配置智能提示" class="headerlink" title="配置智能提示"></a>配置智能提示</h5><p>因为 Vite 本身附带 Typescript 类型，所以你可以通过 IDE 和 jsdoc 的配合来实现智能提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;import(&#x27;vite&#x27;).UserConfig&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config</span><br></pre></td></tr></table></figure><p>另外你可以使用 defineConfig 工具函数，这样不用 jsdoc 注解也可以获取类型提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vite 也直接支持 TS 配置文件。你可以在 vite.config.ts 中使用 defineConfig 工具函数。</p><h5 id="情景配置"><a href="#情景配置" class="headerlink" title="情景配置"></a>情景配置</h5><p>如果配置文件需要基于（dev/serve 或 build）命令或者不同的 模式 来决定选项，则可以选择导出这样一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (command === <span class="string">&#x27;serve&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// dev 独有配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// command === &#x27;build&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// build 独有配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要注意的是，在 Vite 的 API 中，在开发环境下 command 的值为 serve（在 CLI 中， vite dev 和 vite serve 是 vite 的别名），而在生产环境下为 build（vite build）。</p><h5 id="异步配置"><a href="#异步配置" class="headerlink" title="异步配置"></a>异步配置</h5><p>如果配置需要调用一个异步函数，也可以转而导出一个异步函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="keyword">async</span> (&#123; command, mode &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> asyncFunction()</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 构建模式所需的特有配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="共享配置"><a href="#共享配置" class="headerlink" title="共享配置"></a>共享配置</h5><h6 id="root"><a href="#root" class="headerlink" title="root"></a>root</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> process.cwd()项目根目录（index.html 文件所在的位置）。可以是一个绝对路径，或者一个相对于该配置文件本身的相对路径。</li></ul><h6 id="base"><a href="#base" class="headerlink" title="base"></a>base</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> /开发或生产环境服务的公共基础路径。合法的值包括以下几种：绝对 URL 路径名，例如 /foo/完整的 URL，例如 <a href="https://foo.com/%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%96">https://foo.com/空字符串或</a> ./（用于开发环境）</li></ul><h6 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> ‘development’（开发模式），’production’（生产模式）在配置中指明将会把 <strong>serve 和 build</strong> 时的模式 <strong>都</strong> 覆盖掉。也可以通过命令行 –mode 选项来重写。</li></ul><h6 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h6><ul><li><strong>类型：</strong> (Plugin | Plugin[])[]需要用到的插件数组。Falsy 虚值的插件将被忽略，插件数组将被扁平化（flatten）。</li></ul><h6 id="publicDir"><a href="#publicDir" class="headerlink" title="publicDir"></a>publicDir</h6><ul><li><strong>类型：</strong> string | false</li><li><strong>默认：</strong> “public”作为静态资源服务的文件夹。该目录中的文件在开发期间在 / 处提供，并在构建期间复制到 outDir 的根目录，并且始终按原样提供或复制而无需进行转换。该值可以是文件系统的绝对路径，也可以是相对于项目的根目录的相对路径。将 publicDir 设定为 false 可以关闭此项功能。</li></ul><h5 id="开发服务器选项"><a href="#开发服务器选项" class="headerlink" title="开发服务器选项"></a>开发服务器选项</h5><h6 id="server-host"><a href="#server-host" class="headerlink" title="server.host"></a>server.host</h6><ul><li><strong>类型：</strong> string | boolean</li><li><strong>默认：</strong> ‘127.0.0.1’指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。也可以通过 CLI 使用 –host 0.0.0.0 或 –host 来设置。</li></ul><h6 id="server-port"><a href="#server-port" class="headerlink" title="server.port"></a>server.port</h6><ul><li><strong>类型：</strong> number</li><li><strong>默认值：</strong> 3000指定开发服务器端口。注意：如果端口已经被使用，Vite 会自动尝试下一个可用的端口，所以这可能不是开发服务器最终监听的实际端口</li></ul><h6 id="server-https"><a href="#server-https" class="headerlink" title="server.https"></a>server.https</h6><ul><li><strong>类型：</strong> boolean | https.ServerOptions启用 TLS + HTTP/2。注意：当 server.proxy 选项 也被使用时，将会仅使用 TLS。这个值也可以是一个传递给 https.createServer() 的 选项对象。</li></ul><h6 id="server-open"><a href="#server-open" class="headerlink" title="server.open"></a>server.open</h6><ul><li><strong>类型：</strong> boolean | string在开发服务器启动时自动在浏览器中打开应用程序。当此值为字符串时，会被用作 URL 的路径名。若你想指定喜欢的浏览器打开服务器，你可以设置环境变量 process.env.BROWSER（例如：firefox）。示例：**export default defineConfig({ server: { open: ‘/docs/index.html’ } })</li></ul><h6 id="server-proxy"><a href="#server-proxy" class="headerlink" title="server.proxy"></a>server.proxy</h6><ul><li><strong>类型：</strong> Record&lt;string, string | ProxyOptions&gt;为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。如果 key 值以 ^ 开头，将会被解释为 RegExp。configure 可用于访问 proxy 实例。使用 http-proxy。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 字符串简写写法</span></span><br><span class="line">      <span class="string">&#x27;/foo&#x27;</span>: <span class="string">&#x27;http://localhost:4567&#x27;</span>,</span><br><span class="line">      <span class="comment">// 选项写法</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 正则表达式写法</span></span><br><span class="line">      <span class="string">&#x27;^/fallback/.*&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\/fallback/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 使用 proxy 实例</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configure</span>: <span class="function">(<span class="params">proxy, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// proxy 是 &#x27;http-proxy&#x27; 的实例</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="构建选项"><a href="#构建选项" class="headerlink" title="构建选项"></a>构建选项</h5><h6 id="build-target"><a href="#build-target" class="headerlink" title="build.target#"></a>build.target#</h6><ul><li><strong>类型：</strong> string | string[]</li><li><strong>默认：</strong> ‘modules’</li><li><strong>相关内容：:</strong> 浏览器兼容性设置最终构建的浏览器兼容目标。默认值是一个 Vite 特有的值——‘modules’，这是指 支持原生 ES 模块的浏览器。另一个特殊值是 “esnext” —— 即假设有原生动态导入支持，并且将会转译得尽可能小：如果 build.minify 选项为 ‘terser’， ‘esnext’ 将会强制降级为 ‘es2019’。其他情况下将完全不会执行转译。转换过程将会由 esbuild 执行，并且此值应该是一个合法的 esbuild 目标选项。自定义目标也可以是一个 ES 版本（例如：es2015）、一个浏览器版本（例如：chrome58）或是多个目标组成的一个数组。注意：如果代码包含不能被 esbuild 安全地编译的特性，那么构建将会失败。查看 esbuild 文档 获取更多细节。</li></ul><h6 id="build-outDir"><a href="#build-outDir" class="headerlink" title="build.outDir"></a>build.outDir</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> dist指定输出路径（相对于 项目根目录).</li></ul><h6 id="build-assetsDir"><a href="#build-assetsDir" class="headerlink" title="build.assetsDir"></a>build.assetsDir</h6><ul><li><strong>类型：</strong> string</li><li><strong>默认：</strong> assets指定生成静态资源的存放路径（相对于 build.outDir）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官方地址：https://vitejs.cn/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3对比vue2</title>
      <link href="/hb-myblog.github.io/2021/11/02/vue3%E5%AF%B9%E6%AF%94vue2/"/>
      <url>/hb-myblog.github.io/2021/11/02/vue3%E5%AF%B9%E6%AF%94vue2/</url>
      
        <content type="html"><![CDATA[<h5 id="使用vue-cli4-0创建项目"><a href="#使用vue-cli4-0创建项目" class="headerlink" title="使用vue-cli4.0创建项目"></a>使用vue-cli4.0创建项目</h5><p>先把脚手架升级到最新版本，之前没有安装的话，直接全局安装就是最新版4.0</p><p><strong>安装</strong>vue-cli npm install -g @vue/cli</p><p><strong>更新</strong>vue-cli npm update -g @vue/cli</p><p><strong>创建项目：</strong></p><p>vue create vue3-demo</p><p>cd vue3-demo</p><p>yarn serve</p><p><strong>升级vue2项目</strong></p><p>yarn add vue-next</p><h5 id="创建vue3项目-vite方式"><a href="#创建vue3项目-vite方式" class="headerlink" title="创建vue3项目-vite方式"></a>创建vue3项目-vite方式</h5><p>npm init vite-app <project-name></project-name></p><p>cd <project-name></project-name></p><p>yarn</p><p>yarn dev</p><p><strong>vite</strong>是一个基于vue3单文件组件的非打包开发服务器，它做到了本地快速开发启动</p><ul><li>快速的冷启动，不需要等待打包操作</li><li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li><li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变</li></ul><h5 id="生命周期的变化"><a href="#生命周期的变化" class="headerlink" title="生命周期的变化"></a>生命周期的变化</h5><table><thead><tr><th>vue2.x</th><th>vue3.x</th></tr></thead><tbody><tr><td>beforeCreate</td><td>移除(setup)</td></tr><tr><td>created</td><td>移除(setup)</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmounte</td><td>onBeforeUnmounte</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>renderTriggered</td><td>onRenderTriggered</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">impor &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;component is mounted&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="main-js中变化-新增全局API-createApp"><a href="#main-js中变化-新增全局API-createApp" class="headerlink" title="main.js中变化 新增全局API: createApp()"></a>main.js中变化 新增全局API: createApp()</h5><p>vue2.x中采用的是new Vue()，vue3.x中使用如下方式创建应用实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;);</span><br></pre></td></tr></table></figure><h5 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h5><p>vue3.x需要引入createRouter创建地址路由。createWebHashHistory对应之前的hash,createWebHistory对应之前的history。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;homepage&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/homepage&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/homepage/index.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line"><span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h5 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h5><p>vue3.x中状态管理的创建方式变为了createStore，代码结构更精简合理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.config-&gt;app.config</span><br><span class="line"></span><br><span class="line">Vue.config.ignoredElements-&gt;app.config.ignoredElements</span><br><span class="line"></span><br><span class="line">Vue.component-&gt;app.component</span><br><span class="line"></span><br><span class="line">Vue.directive-&gt;app.directive</span><br><span class="line"></span><br><span class="line">Vue.mixin-&gt;app.mixin</span><br><span class="line"></span><br><span class="line">Vue.use-&gt;app.use</span><br></pre></td></tr></table></figure><p>config: 包含Vue应用程序全局配置的对象，在挂载应用之前配置相应的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;);</span><br><span class="line">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure><ol><li><p>devtools（类型：Boolean，默认：false），配置是否开启vue-devtools检查，一般在开发环境是true，生产环境为false。<br>app.config.devtools = true</p></li><li><p>errorHandler（类型：function，参数err：错误内容，vm：对应的实例，info：Vue特定的错误信息，如某个生命周期中出现的错误）<br>app.config.errorHandler = (err, vm, info) =&gt; {}</p></li><li><p>warnHandler（类型：function，参数msg：警告内容，vm：对应的实例，trace：组件的层次追踪）<br>app.config.warnHandler = (msg, vm, trace) =&gt; {};</p></li><li><p>globalProperties (类型: any)用于添加到应用程序中任何组件都能使用的全局属性，当与组件内部的属性冲突时，将优先使用组件内部的属性值。可代替Vue2中的Vue .prototype.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2.x</span></span><br><span class="line">Vue.prototype.name = <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line"><span class="comment">// Vue3.x</span></span><br><span class="line">app.config.globalProperties.name = <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line">app.component(<span class="string">&#x27;child-component&#x27;</span>, &#123;</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>isCustomElement (类型: (tag: string) =&gt; boolean)，用于来识别Vue之外的自定义元素(如，三方web组件api) ，如果组件或元素符合这个条件，则组件不会被实例化，Vue也不会对组件或元素发出警告信息。<br>app.config.isCustomElement = tag =&gt; tag.startsWith(‘ion’);</p></li></ol><h5 id="挂载应用程序"><a href="#挂载应用程序" class="headerlink" title="挂载应用程序"></a>挂载应用程序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>; </span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.mount( #app<span class="string">&#x27;); </span></span><br></pre></td></tr></table></figure><h5 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;);</span><br><span class="line"><span class="comment">// myComponent为组件实例</span></span><br><span class="line">app.component(<span class="string">&#x27;my-component, myComponent);</span></span><br><span class="line"><span class="string">//重置组件</span></span><br><span class="line"><span class="string">const MyComponent = app.component(&#x27;</span>my-component<span class="string">&#x27;, &#123;&#125;);</span></span><br></pre></td></tr></table></figure><h5 id="新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取"><a href="#新增全局注入-提取：provide-inject-父组件数据注入与子孙组件数据获取" class="headerlink" title="新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)"></a>新增全局注入/提取：provide/inject (父组件数据注入与子孙组件数据获取)</h5><p>参数: Object | () =&gt; Object.</p><p>概述: provide一般与inject一起使用，provide为当前实例的所有子孙组件注入数据，inject在当前实例的子孙组件中获取注入的数据。</p><p>用例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> ;</span><br><span class="line"><span class="comment">//全局注入数据</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line"><span class="attr">procide</span>: &#123;</span><br><span class="line"><span class="attr">user</span>: <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line">app.component(‘my-component<span class="string">&#x27;, &#123;</span></span><br><span class="line"><span class="string">inject: [ &#x27;</span>user<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">data() &#123;...&#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h5 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2.x</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">Vue.nextTick(<span class="function">()=&gt;</span>&#123; ... &#125;)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123; ... &#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">...</span><br><span class="line">nextTick(<span class="function">()=&gt;</span>&#123; ... &#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义指令：directive"><a href="#自定义指令：directive" class="headerlink" title="自定义指令：directive"></a>自定义指令：directive</h5><p>Vue3.x中对自定义指令的创建提供了更加细致的API（类似于组件的生命周期）</p><ol><li>bind                            -&gt;    beforeMount（挂载前）</li><li>inserted                        -&gt;    mounted（挂载后）</li><li>​                                        -&gt;    beforeUpdate（新增，更新前）</li><li>update                            -&gt;    删除</li><li>componentUpdate        -&gt;    update（更新后）</li><li>​                                        -&gt;    beforeUnmounted（新增，卸载前）</li><li>unbind                            -&gt;    unmounted（卸载后）</li></ol><h5 id="跨组件通讯"><a href="#跨组件通讯" class="headerlink" title="跨组件通讯"></a>跨组件通讯</h5><p>vue2.x eventBus</p><p>Vue3.x 中全局事件总成将使用mitt来实现跨组件通讯。</p><p>使用<strong>mitt</strong>之前先安装mitt模块<strong>npm install –save mitt</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> VueEvent = mitt()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueEvent;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doLogin&quot;</span>&gt;</span>父子组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VueEvent <span class="keyword">from</span> <span class="string">&#x27;../model/event&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">doLogin</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">VueEvent.emit(<span class="string">&#x27;login&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">用户登录组件</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> VueEvent <span class="keyword">from</span> <span class="string">&#x27;../model/event&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">VueEvent.on(<span class="string">&#x27;login&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&#x27;doLogin&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="Vue3-x组件自定义事件验证"><a href="#Vue3-x组件自定义事件验证" class="headerlink" title="Vue3.x组件自定义事件验证"></a>Vue3.x组件自定义事件验证</h5><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">login</span> @<span class="attr">submit</span>=<span class="string">&quot;getChild&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;./Login&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">Login</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">getChild</span>(<span class="params">data</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(data)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;br&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">emits</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">submit</span> :<span class="function">(<span class="params">&#123;</span></span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="javascript"><span class="xml">username,</span></span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="javascript"><span class="xml">password</span></span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="javascript"><span class="xml">&#125;</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">if</span> (username &amp;&amp; password) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.warn(<span class="string">&quot;传入的参数不能为空&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">username</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.$emit(<span class="string">&#x27;submit&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">username</span>: <span class="built_in">this</span>.username,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">password</span>: <span class="built_in">this</span>.password</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="Vue3-x过滤器"><a href="#Vue3-x过滤器" class="headerlink" title="Vue3.x过滤器"></a>Vue3.x过滤器</h5><p>在3.x中，过滤器被删除，不再受支持。建议用方法调用或计算属性替换它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bank Account Balance<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; accountBalance | currencyUSD &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">accountBalance</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">require</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">filters</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">currencyUSD</span>(<span class="params">value</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span> + value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bank Account Balance<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; currencyUSD &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">accountBalance</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">require</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">currencyUSD</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="string">&#x27;$&#x27;</span> + <span class="built_in">this</span>.accountBalance</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="多根节点组件"><a href="#多根节点组件" class="headerlink" title="多根节点组件"></a>多根节点组件</h5><p>Vue2.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>Vue3.x中可以使用多个根节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><p>Vue2.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup<span class="number">.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">Vue.config.keyCode= &#123; f1: 112 &#125;</span></span><br></pre></td></tr></table></figure><p>Vue3.x 别名支持任意键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.delete=<span class="string">&quot;cancel&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.f1</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="渲染功能render函数"><a href="#渲染功能render函数" class="headerlink" title="渲染功能render函数"></a>渲染功能render函数</h5><p>Vue2.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>&#125;, <span class="string">&#x27;hello, Vue3.x!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Vue3更好用的v-model指令"><a href="#Vue3更好用的v-model指令" class="headerlink" title="Vue3更好用的v-model指令"></a>Vue3更好用的v-model指令</h5><p>1、概述：数据双向绑定</p><p>2、回顾：在Vue2.x中，v-model进行数据双向绑定（语法糖）的原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-model=<span class="string">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg=$event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-components</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中接收绑定数据和触发数据改变</span></span><br><span class="line">props:&#123; <span class="attr">msg</span>: <span class="built_in">String</span> &#125; <span class="comment">// 获取数据</span></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br></pre></td></tr></table></figure><p>用于自定义组件时，v-model的prop和事件默认名称已更改：</p><p>prop: value -&gt; modelValue</p><p>event: input -&gt; update:modelValue</p><p>即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxComponent v-model=<span class="string">&quot;varA&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxComponent :modelValue=<span class="string">&quot;varA&quot;</span> @update:modelValue=<span class="string">&quot;varA = $event&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>且在Vue2.x中不能绑定多个v-model</p><p>3、用例：Vue3.x重写了v-model的实现方式以适用绑定多个v-model</p><p>①：单个数据实现数据双向绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-model=<span class="string">&quot;msg&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">myComponent</span> <span class="attr">:modelValue</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">update:modelValue</span>=<span class="string">&quot;msg = $event&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中接收绑定数据和触发数据改变</span></span><br><span class="line">props:&#123; <span class="attr">modelValue</span>: <span class="built_in">String</span> &#125; <span class="comment">// 获取数据</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class="line">  emit(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②：多个数据实现数据双向绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-model:msg=<span class="string">&quot;msg&quot;</span> v-model:name=<span class="string">&quot;name&quot;</span>&gt;&lt;/my-components&gt;</span><br><span class="line">&lt;!-- 等价于 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">myComponent</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">update:msg</span>=<span class="string">&quot;msg = $event&quot;</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">update:name</span>=<span class="string">&quot;name = $event&quot;</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中接收绑定数据和触发数据改变</span></span><br><span class="line">props:&#123; <span class="attr">msg</span>: <span class="built_in">String</span>, <span class="attr">name</span>: <span class="built_in">String</span> &#125; <span class="comment">// 获取数据</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class="line">  emit(<span class="string">&#x27;update:msg&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br><span class="line">  emit(<span class="string">&#x27;update:name&#x27;</span>, <span class="string">&#x27;newValue&#x27;</span>) <span class="comment">// 触发事件并传值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h6><p>支持vue2.x的所有修饰符</p><ul><li>.lazy 取代input监听change事件</li><li>.number 输入字符串转为有效的数字</li><li>.trim 输入首尾空格过滤</li></ul><h6 id="支持自定义修饰符"><a href="#支持自定义修饰符" class="headerlink" title="支持自定义修饰符"></a>支持自定义修饰符</h6><p>例子：自定义prop名+自定义修饰符</p><p><strong>父组件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;zi v-model:content.camelCase=&quot;word&quot; /&gt;</span><br></pre></td></tr></table></figure><p>子组件较复杂，用组合式API来演示。</p><p>defineProps函数的写法就是这样，先写content，然后写contentModifiers，这是Vue的规定，必须是prop名跟Modefiers字串。contentModifiers必须是这样一个函数。</p><p>useContext和getCurrentInstance在开发中会经常用到。useContext()能拿到几个变量，包括props变量。getCurrentInstance()能拿到组件实例this，用来执行.emit()</p><p>content必须是计算变量，否则传入prop新值之后，子组件无法感知</p><p>emitCamelCase方法里，if语句是为了确认修饰符正确</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;content&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;emitCamelCase&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; useContext, getCurrentInstance, defineProps, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">defineProps(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">content</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">contentModifiers</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> ctx = useContext()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> instance = getCurrentInstance()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> content = computed(<span class="function">() =&gt;</span> &#123; ctx.props.content &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">emitCamelCase</span>(<span class="params">e</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (ctx.props.contentModifiers.camelCase) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    instance.emit(<span class="string">&quot;update:content&quot;</span>, e.target.value.replace(<span class="regexp">/_./g</span>, <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> a[<span class="number">1</span>].toUpperCase()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="vue3-v-is指令"><a href="#vue3-v-is指令" class="headerlink" title="vue3 v-is指令"></a>vue3 v-is指令</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue的动态组件中使用is</span></span><br><span class="line">&lt;component is=<span class="string">&quot;foo&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line"><span class="comment">// vue2.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class="line"><span class="comment">// vue3.x --&gt; is的值指的是要渲染的组件的名称；渲染foo组件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般组件中使用is</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">user-edit</span> <span class="attr">is</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-edit</span>&gt;</span></span></span><br><span class="line"><span class="comment">// vue2.x --&gt; is的值指的是要江染的组件的名称;渲染foo组件</span></span><br><span class="line"><span class="comment">// vue3.x --&gt; 渲染user- edit组件; is将作为组件的prop进行值的传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般元素中使用is</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;val&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="comment">// vue2.x ---&gt; is的值会被编译为boolean; 且元素会被动态加载或销毁(会触发transition效果)</span></span><br><span class="line"><span class="comment">// vue3.x ---&gt; is的值为any; 值的变化不会造成元素任何变化(丢失了vue2中元素上使用的s的功能，因此vue3中引入了新的指令v-is)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3.x的新指令 v-is</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-is</span>=<span class="string">&quot;val&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 与vue2. x中-般元素上使用is的效果-致</span></span><br></pre></td></tr></table></figure><h5 id="v-for中使用ref"><a href="#v-for中使用ref" class="headerlink" title="v-for中使用ref"></a>v-for中使用ref</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2.x </span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=”item <span class="keyword">in</span> renderData<span class="string">&quot; :key=&quot;</span>item.name<span class="string">&quot; ref=”nodes&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.nodes) <span class="comment">// 返回所有循环的p元素节点</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue3.x</span></span><br><span class="line"><span class="comment">//如果还是按照Vue2.x的方式</span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">&quot;item in renderData&quot;</span> :key= <span class="string">&quot;item.name&quot;</span> ref=<span class="string">&quot;nodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.nodes) <span class="comment">//此时只能得到循环后最后一个P元素节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3.x中，使用函数处理v-for中的ref;且用变量单独存储。</span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">&quot;item in renderData&quot;</span> :key=<span class="string">&quot; item.name&quot;</span> ref=<span class="string">&quot;handleNodes&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">    <span class="attr">nodes</span>: []</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> handleNodes = <span class="function"><span class="params">nodeItem</span> =&gt;</span> &#123;</span><br><span class="line">    data.nodes.push(nodeItem)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...toRefs(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mixin-的合并行为更改"><a href="#mixin-的合并行为更改" class="headerlink" title="mixin 的合并行为更改"></a>mixin 的合并行为更改</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue2.x</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$data); <span class="comment">// &#123;name: &#x27;zhangsan&#x27;, age: 30&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// &#x27;zhangsan</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age); <span class="comment">// 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3.x</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$data); <span class="comment">// &#123;age: 30&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// &#x27;zhangsan</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age); <span class="comment">// 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得出结论：</strong></p><p>1、与vue2.x一样会覆盖掉mixin中相同的响应属性。</p><p>2、vue3.x中当前实例的$data是不会包含mixin中定义的响应属性</p><h5 id="v-if和v-for优先级"><a href="#v-if和v-for优先级" class="headerlink" title="v-if和v-for优先级"></a>v-if和v-for优先级</h5><p>当v-if和v-for同时作用于一个元素上时：</p><p>Vue2.x中v-for的优先级会高于v-if;</p><p>Vue3.x中v-if的优先级会高于v-for;</p><p>使用禁忌: Vue3.x中不能将v -for和v-if放在同-个元素上。只能使用v-for嵌套v -if使用</p><p>使用建议:官方建议使用计算属性来处理,即提高性能，又能兼容Vue3.x。</p><h5 id="attrs和-listener的融合"><a href="#attrs和-listener的融合" class="headerlink" title="$attrs和$listener的融合"></a>$attrs和$listener的融合</h5><p>我们知道，在vue2中我们使用v-bind=”$attrs”, v-on=”$listenner”来将数据和事件做一个承 上启下的作用,但是在vue3中,首先是删除了v-on指令，其次是发现这两个组件的属性过于累赘，所以在当前版本中将$attrs 和$listenner他们的功能进行了融合, $listenner 现在已作为$attrs 的其中一部分进行传递,所以只需要在组建上指定v-bind=”$attrs”，那么将同时拥有传值和传递事件的功能。</p><h5 id="setup说明"><a href="#setup说明" class="headerlink" title="setup说明"></a>setup说明</h5><ul><li>setup</li></ul><p>setup有两个参数props和context</p><ul><li><p>props：接收父组件传的值</p></li><li><p>context：vue3.x里面没有this，提供了一个context上下文属性，你可以通过这个属性去获取进行一些vue2.x用this实现的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props.title);</span><br><span class="line">    </span><br><span class="line">    context.attrs</span><br><span class="line">    context.slots</span><br><span class="line">    context.parent</span><br><span class="line">    context.root</span><br><span class="line">    context.emit</span><br><span class="line">    context.refs</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在setup中定义的变量或方法，都必须通过<strong>return</strong> {xxx,xxx} 暴露出去，外界才能使用</p><p><strong>注意：</strong>props为响应式代理，如果使用es6的数据解构操作，将使得结构后的数据失去响应式（即不能实时获取到父组件传来的值）</p><p><strong>扩展：</strong>父组件通过属性传的值在子组件中的各个部分的获取：</p><ol><li>props：通过父传子的方式直接获取到值</li><li>setup(props, context){}方法中的props只能拿到选项props中已经定义的属性</li><li>setup(props, {attrs, emit, slots}){}方法中的attrs只能拿到未在选项props中定义的属性</li><li>通过{proxy} = getCurrentInstance(); proxy.attrs; 组件实例中的attrs也只能拿到未在选项props中定义的属性</li></ol><p><strong>context：</strong>非响应式的对象，包含了组件暴露的三个property</p><ol><li>context.attrs：传入组件中但是未被props接收的对象</li><li>context.emit：用于触发当前组件实例上的传值事件</li><li>context.slots：用来访问被插槽分发的内容（一般用于使用渲染函数来书写一个组件时）</li></ol><p>**return()**：若需要在当前组件视图中或其它组件中使用当前组件创建的响应式变量及方法，则需要导出相应的响应式变量及方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> name = ref(<span class="string">&quot;zhang_san&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; name &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>return 也有渲染功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> h(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>&#125;, <span class="string">&#x27;内容&#x27;</span>);</span><br><span class="line">    <span class="comment">// &lt;template&gt;&lt;div class=&quot;red&quot;&gt;内容&lt;/div&gt;&lt;/template&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="响应式数据对象-reactive"><a href="#响应式数据对象-reactive" class="headerlink" title="响应式数据对象 reactive"></a>响应式数据对象 reactive</h5><p>1、概述：函数，创建一个响应式数据对象，响应式会影响到所有的子集嵌套</p><p>2、用例：由vue提供，按需引入：import { reactive } from ‘vue’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; user &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="延伸方法–readonly只读对象"><a href="#延伸方法–readonly只读对象" class="headerlink" title="延伸方法–readonly只读对象"></a>延伸方法–readonly只读对象</h5><p><strong>readonly()</strong></p><p>1、概述：创建一个只读代理且原对象的任何嵌套属性也将是只读的</p><p>2、用例：由vue提供，按需引入：import { readonly } from ‘vue’</p><p>3、对普通变量创建只读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="keyword">return</span> &#123; copy &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">copy.age++ <span class="comment">// warning! target is readonly</span></span><br></pre></td></tr></table></figure><p>4、对reactive创建只读</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="keyword">return</span> &#123; copy &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">user.age++<span class="number">21</span></span><br><span class="line">copy.age++ <span class="comment">// warning! target is readonly</span></span><br></pre></td></tr></table></figure><h5 id="延伸方法–isProxy"><a href="#延伸方法–isProxy" class="headerlink" title="延伸方法–isProxy()"></a>延伸方法–isProxy()</h5><p>1、概述判断对象是否由reactive创建或者是readonly创建的代理</p><p>2、用例：由vue提供，按需引入：import { isproxy } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref, reactive, readonly, isproxy&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ref创建</span></span><br><span class="line"><span class="keyword">const</span> refVal = ref(<span class="number">123</span>)</span><br><span class="line">isProxy(refVal) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reactive创建</span></span><br><span class="line"><span class="keyword">const</span> reactiveVal = reactive(&#123;<span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">isProxy(reactiveVal) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reactive创建</span></span><br><span class="line"><span class="keyword">const</span> readonlyVal = readonly(reactiveVal)</span><br><span class="line">isProxy(readonlyVal) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通变量</span></span><br><span class="line"><span class="keyword">const</span> defaultVal = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">isProxy(defaultVal) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive()"></a>isReactive()</h5><p>1、检查对象是否由reactive创建</p><p>2、用例：由vue提供，按需引入：import { isReactive } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, isReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(user)); <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还能判断readonly代理的对象是否由reactive创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, isReactive, readonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建普通只读代理</span></span><br><span class="line">    <span class="keyword">const</span> plain = readonly(&#123;<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(plain)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建reactive制度代理</span></span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(copy)); <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–-isReadonly"><a href="#延伸方法–-isReadonly" class="headerlink" title="延伸方法– isReadonly()"></a>延伸方法– isReadonly()</h5><p>1、概述：检查代理是否由readonly创建</p><p>2、用例：由vue提供，按需引入：import { isReadonly } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly, isReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="keyword">const</span> copy = readonly(user)</span><br><span class="line">    <span class="built_in">console</span>.log(isReadonly(copy)); <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–toRaw"><a href="#延伸方法–toRaw" class="headerlink" title="延伸方法–toRaw()"></a>延伸方法–toRaw()</h5><p>1、概述：返回由reactive或者是readonly代理的原始对象</p><p>2、用例：由vue提供，按需引入：import { toRaw } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly, isProxy, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> reactiveUser = reactive(user)</span><br><span class="line">    <span class="keyword">const</span> readonlyUser = readonly(readonlyUser)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(toRaw(reactiveUser) === user); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(toRaw(readonlyUser) === user); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(reactiveUser))); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(readonlyUser))); <span class="comment">// false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–markRaw"><a href="#延伸方法–markRaw" class="headerlink" title="延伸方法–markRaw()"></a>延伸方法–markRaw()</h5><p>1、概述：标记一个对象，被标记后，该对象永远不会被转换为代理</p><p>2、用例：由vue提供，按需引入：import { markRaw } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markRaw, reactive, isReactive, isProxy &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = markRaw(&#123;&#125;)</span><br><span class="line">    <span class="keyword">const</span> reactiveUser = reactive(user)</span><br><span class="line">    <span class="built_in">console</span>.log(isReactive(reactiveUser)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reactiveUser1 = reactive(&#123; user &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(reactiveUser1))); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(isProxy(toRaw(reactiveUser1.user))); <span class="comment">// false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–shallowReactive"><a href="#延伸方法–shallowReactive" class="headerlink" title="延伸方法–shallowReactive()"></a>延伸方法–shallowReactive()</h5><p>1、概述：创建一个反应式代理，但只是浅度创建</p><p>2、用例：由vue提供，按需引入：import { shallowReactive } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isReactive, shallowReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = shallowReactive(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">content</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    data.count++ <span class="comment">// 11 逻辑层数据已发生变化,视图重新渲染</span></span><br><span class="line">    isReactive(data.content) <span class="comment">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class="line">    data.content.age++ <span class="comment">// 21 逻辑层数据发生变化，但是视图层不会被更新渲染</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="延伸方法–shallowReadonly"><a href="#延伸方法–shallowReadonly" class="headerlink" title="延伸方法–shallowReadonly()"></a>延伸方法–shallowReadonly()</h5><p>1、概述：创建一个只读代理，但只是浅度创建</p><p>2、用例：由vue提供，按需引入：import { shallowReadonly } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isReadonly, shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = shallowReadonly(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">content</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    data.count++ <span class="comment">// warning! target is readonly.</span></span><br><span class="line">    isReadonly(data.content) <span class="comment">// 因为data.content属于深度嵌套，未被代理</span></span><br><span class="line">    data.content.age++ <span class="comment">// 21 深度嵌套未被代理，所以操作成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="响应式数据–-ref"><a href="#响应式数据–-ref" class="headerlink" title="响应式数据– ref"></a>响应式数据– ref</h5><p>1、概述：函数，创建并返回一个响应式数据对象，并在此对象上只包含一个.value属性指向该数据值</p><p>2、用例：由vue提供，按需引入：import { ref } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line">  &lt;!-- 视图中直接使用即可，不需要.value --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> name = ref(<span class="string">&#x27;zhang_san&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(name.value); <span class="comment">// &#x27;zhang_san&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 同样需要return返回</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; name &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果使用ref将一个对象创建为响应式代理的话，则该对象会被进行深度响应式创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data.count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   &lt;!-- <span class="number">0</span> --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;data.content.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>   &lt;!-- <span class="number">10</span> --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> defaultVal = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">content</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="number">10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> data = ref(defaultVal)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(data.value.count); <span class="comment">// 0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(data.value.content.age); <span class="comment">// 10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; data &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">data.value.count++ <span class="comment">// 1 视图重新渲染</span></span><br><span class="line">data.value.content.age++ <span class="comment">// 11 视图重新渲染</span></span><br></pre></td></tr></table></figure><h5 id="ref数据能访问到的部分常用方法及延伸方法"><a href="#ref数据能访问到的部分常用方法及延伸方法" class="headerlink" title="ref数据能访问到的部分常用方法及延伸方法"></a>ref数据能访问到的部分常用方法及延伸方法</h5><h6 id="unref"><a href="#unref" class="headerlink" title="unref()"></a>unref()</h6><p>1、概述：返回代理原始值，如果参数为ref则返回代理原始值，如果不是ref则返回参数本身</p><p>2、用例：由vue提供，按需引入：import { unref } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; unref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> a = ref(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;zhang_san&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(unref(a)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(unref(b)); <span class="comment">// &#x27;zhang_san&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="toRef"><a href="#toRef" class="headerlink" title="toRef()"></a>toRef()</h6><p>1、概述：可以将reactive创建的代理的某个属性传递出来用ref进行代理</p><p>2、用例：由vue提供，按需引入：import { toRef } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> toRefValue = toRef(data, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">toRefValue.value++ <span class="comment">// toRefValue.value 21</span></span><br><span class="line"><span class="built_in">console</span>.log(data.age); <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">data.age++ <span class="comment">// data.age 22</span></span><br><span class="line"><span class="built_in">console</span>.log(toRefValue.value); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>3、<strong>注意：使用toRef将reactive的属性代理后，属性的值的变化会同时影响toRef后的值和原本的reactive的属性值</strong></p><p>4、实例：在将prop的引用传递给复合函数的时候，toRef将非常有用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">userHandler(toRef(props, <span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="comment">// 这将使得userHandler拿到的name为响应式代理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h6><p>1、概述：可以将reactive创建的代理的所有属性传递出来用ref进行代理</p><p>2、用例：由vue提供，按需引入：import { toRefs } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> toRefValue = toRefs(data)</span><br><span class="line"></span><br><span class="line">toRefValue.age.value++ <span class="comment">// toRefValue.age.value 21</span></span><br><span class="line"><span class="built_in">console</span>.log(data.age); <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">data.age++ <span class="comment">// data.age 22</span></span><br><span class="line"><span class="built_in">console</span>.log(toRefValue.age.value); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>3、<strong>注意：使用toRefs将reactive的属性代理后，属性的值的变化会同时影响toRef后的对应属性值和原本的reactive的属性值</strong></p><p>4、实例：从组合函数返回响应式对象时，这将很有用，<strong>而不是使用es6数据结构的方式，这样会使reactive的属性失去响应式代理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age &#125; = userHandler()</span><br><span class="line">    <span class="keyword">return</span> &#123; name, age &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="isRef"><a href="#isRef" class="headerlink" title="isRef()"></a>isRef()</h6><p>1、概述：判断响应式代理是否为ref所创建</p><p>2、用例：由vue提供，按需引入：import { isRef } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> name = ref(<span class="string">&#x27;zhang_san&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> user = reactive(&#123; <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isRef(name)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isRef(user)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 应用场景，在获取一个未知的数据对象的值时，如：</span></span><br><span class="line"><span class="keyword">const</span> newV = isRef(name) ? name.value : name</span><br></pre></td></tr></table></figure><h5 id="toRefs-–-解构响应式对象数据"><a href="#toRefs-–-解构响应式对象数据" class="headerlink" title="toRefs – 解构响应式对象数据"></a>toRefs – 解构响应式对象数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>解构响应式对象数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>UserName: &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> user = reactive(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">username</span>: <span class="string">&#x27;zhang_san&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">age</span>: <span class="number">20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; ...toRefs(user) &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="reactive和ref的相互作用"><a href="#reactive和ref的相互作用" class="headerlink" title="reactive和ref的相互作用"></a>reactive和ref的相互作用</h5><p>1、将ref的数据对象挂载到reactive上时，会把原始的响应数据对象展开为原始值，这样就不需要.value而被直接访问到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ref1 = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(reactive1.ref1); <span class="comment">// 0</span></span><br><span class="line">    reactive1.ref1++</span><br><span class="line">    <span class="built_in">console</span>.log(reactive1.ref1); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(ref1.value); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、新的ref会覆盖旧的ref</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ref1 = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> reactive1 = reactive(&#123;ref1&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> ref2 = ref(<span class="number">100</span>)</span><br><span class="line">    reactive.ref1 = ref2</span><br><span class="line">    reactive.ref1++</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(reactive1.ref1); <span class="comment">// 101</span></span><br><span class="line">    <span class="built_in">console</span>.log(ref2.value); <span class="comment">// 101</span></span><br><span class="line">    <span class="built_in">console</span>.log(ref1.value); <span class="comment">// 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="reactive和ref的区别"><a href="#reactive和ref的区别" class="headerlink" title="reactive和ref的区别"></a>reactive和ref的区别</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">10</span></span><br><span class="line">    <span class="keyword">let</span> num2 = ref(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">let</span> num3 = reactive(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(num1); <span class="comment">// 定义的纯数字10, 打印结果是一个数字类型的10</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2); <span class="comment">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(num3); <span class="comment">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br><span class="line">    <span class="keyword">return</span> &#123; num1, num2, num3 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现使用ref定义的数据，打印结果是一个被对象包裹的响应的数据，使用reactive的方式和纯变量声明的方式打印结果是一样的，这是什么原因呢</p><p>我们发现在控制台输出一个警告信息，提示100这个值不能被reactive创建，官方也推荐我们在定义数据的时候，reactive定义复杂的数据类型的数据，ref推荐定义基本数据类型，所以如果要使用reactive第一基本数据类型的话，我们需要在reactive中将数据包裹一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num3 = reactive(&#123;<span class="attr">val</span>: <span class="number">100</span>&#125;)</span><br></pre></td></tr></table></figure><p>我们在使用reactive定义数据的时候用对象做一层包裹，这样控制台就不会报警告信息了</p><p>但是使用reactive定义的数据和ref定义的数据打印结果有一些差异</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num2 = ref(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> num3 = reactive(&#123;<span class="attr">val</span>: <span class="number">100</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// 使用vue3中提供的ref方法定义的值 打印的时候是一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// 使用reactive定义的num3 结果是一个数值类型100</span></span><br></pre></td></tr></table></figure><p>我们发现ref定义的数据打印结果需要.value才能获取到结果，而reactive则不需要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num2 = ref(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> num3 = reactive(&#123;<span class="attr">val</span>:<span class="number">100</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(num2.value) <span class="comment">// 10 </span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// &#123;val:100&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>reactive和ref都是用来定义响应式数据的，reactive更推荐去定义复杂的数据类型，ref更推荐定义基本数据类型</p><p>ref和reactive本质我们可以简单的理解为ref是对reactive的二次包装，ref定义的数据访问的时候要多一个.value</p><p>使用ref定义一本数据类型，ref也可以定义数组和对象</p><p><strong>ref函数仅能监听基本类型的变化，不能监听复杂类型的变化(比如数组，对象)</strong></p><h5 id="计算属性–-computed"><a href="#计算属性–-computed" class="headerlink" title="计算属性– computed"></a>计算属性– computed</h5><p>1、概述：vue2.x中的计算属性，在vue3.x中以方法的形式使用</p><p>2、用例：用例：由vue提供，按需引入：import { computed } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">const</span> userAge = computed(<span class="function">() =&gt;</span> <span class="string">`今年<span class="subst">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; userAge &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有get和set功能的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">const</span> userAge = computed(&#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="string">`今年<span class="subst">$&#123;age.value&#125;</span>岁了`</span>,</span><br><span class="line">      <span class="attr">set</span>: <span class="function"><span class="params">val</span> =&gt;</span> age.value = age + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; userAge &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="观察者–-watch"><a href="#观察者–-watch" class="headerlink" title="观察者– watch"></a>观察者– watch</h5><p>1、概述：vue2.x中的响应式变量监听，在vue3.x中以方法的形式使用</p><p>2、用例：用例：由vue提供，按需引入：import { watch} from ‘vue’</p><p>3、监听单一数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, computed, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//ref</span></span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    watch(<span class="function">() =&gt;</span> age.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reactive</span></span><br><span class="line">    <span class="keyword">const</span> product = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;pig&#x27;</span>, <span class="attr">conut</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    watch(<span class="function">() =&gt;</span> product.count, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// props</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> props.msg, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//computed</span></span><br><span class="line">    <span class="keyword">const</span> userAge = computed(<span class="function">() =&gt;</span> <span class="string">`今年<span class="subst">$&#123;age.value&#125;</span>岁了`</span>)</span><br><span class="line">    watch(<span class="function">() =&gt;</span> userAge.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、监听对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//ref</span></span><br><span class="line">    <span class="keyword">const</span> user = ref(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// 如果我们只需要监听name的值，那么</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value.name, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reactive</span></span><br><span class="line">    <span class="keyword">const</span> reactiveData = reactive(&#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;&#125;)</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用user.value.age = 30 这种方式修改user的age值，将不会触发上面的监听，需要使用watch的第三个参数(深度监听)</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="comment">// 如果我们只需要监听name的值，那么</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user.name, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、监听数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//ref</span></span><br><span class="line">    <span class="keyword">const</span> user = ref([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;li_si&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    ])</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> user.value, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reactive</span></span><br><span class="line">    <span class="keyword">const</span> reactiveData = reactive(&#123; <span class="attr">user</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;li_si&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    ]&#125;)</span><br><span class="line">    <span class="comment">// 字面量引发的监听触发： user.value = &#123; ... &#125;</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">    <span class="comment">// 如果使用数组的操作方法( 如：push() )或者user.value[0].age = 20这类操作去修改数组某项的属性值，将不会触发监听，也需要使用深度监听</span></span><br><span class="line">    watch(<span class="function">() =&gt;</span> reactiveData.user, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、监听多个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">const</span> user = ref(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"></span><br><span class="line">    watch([<span class="function">() =&gt;</span> age.value, <span class="function">() =&gt;</span> user.name], <span class="function">(<span class="params">[newAge, newName], [oldAge, newName]</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、终止监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = ref(<span class="number">20</span>)</span><br><span class="line"><span class="comment">// watch监听会返回一个方法</span></span><br><span class="line"><span class="keyword">const</span> stop = watch(age, <span class="function">(<span class="params">nv, ov</span>) =&gt;</span> &#123; ... &#125;)</span><br><span class="line"><span class="comment">// 当调用此方法后，该监听就会被移除</span></span><br><span class="line">stop()</span><br></pre></td></tr></table></figure><p>8、清除watch中无效的异步任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keywords&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> keywords = ref(<span class="string">&quot;&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//异步任务：打印用户输入的关键词</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> asyncPrint = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(val);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    watch(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      keywords,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function">(<span class="params">keywords, prevKeywords, onCleanup</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 执行异步任务，并得到关闭异步任务的 timerId</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> timerId = asyncPrint(keywords)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 如果 watch 监听被重复了，则会先清除上次未完成的异步任务</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        onCleanup(<span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timerId))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#123; <span class="attr">lazy</span>: <span class="literal">true</span> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    )</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; keywords &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h5><p>1、概述：实现嵌套组件树形数据传递与接收</p><p>2、使用：由vue提供，按需引入：import { provide, inject } from ‘vue’</p><p>3、用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//父组件注入</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    provide(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zhang_san&#x27;</span>)</span><br><span class="line">    <span class="comment">// 如果是需要注入多个值则重复使用provide即可</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件接收</span></span><br><span class="line"><span class="keyword">const</span> children = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// inject的第二个参数为没有接收到注入的数据时的默认返回值，如果没有，则返回undefined</span></span><br><span class="line">    <span class="keyword">const</span> user = inject(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;li_si&#x27;</span>)</span><br><span class="line">    <span class="comment">// 需要接收多个注入的值也是重复使用inject</span></span><br><span class="line">    <span class="keyword">return</span> &#123; user &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、实例：在实际使用过程中，往往我们需要将注入的值实现响应式变化，则需要注入响应式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件注入</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    provide(<span class="string">&#x27;user&#x27;</span>, user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件接收后，如果父组件中的user发生了改变，则子组件中也会发生响应式变化</span></span><br><span class="line"><span class="keyword">const</span> children = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = inject(<span class="string">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; user &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、注意：<strong>不建议在注入时对响应式变量进行改变(在子组件中改变注入的值)，因为此操作会改变vue的单向数据流，建议采用注入改变其值的方法来对响应式变量进行改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//父组件注入</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhang_san&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      user.age = <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">    provide(<span class="string">&#x27;user&#x27;</span>, user)</span><br><span class="line">    provide(<span class="string">&#x27;changeHandler&#x27;</span>, changeHandler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件接收后，通过调用注入的方法来对响应式变量进行改变</span></span><br><span class="line"><span class="keyword">const</span> children = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = inject(<span class="string">&#x27;user&#x27;</span>, &#123;&#125;)</span><br><span class="line">    <span class="keyword">const</span> changeHandler = inject(<span class="string">&#x27;changeHandler&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; user, changeHandler &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="template和ref获取元素或组件实例"><a href="#template和ref获取元素或组件实例" class="headerlink" title="template和ref获取元素或组件实例"></a>template和ref获取元素或组件实例</h5><p>1、概述：通过ref获取模板元素节点</p><p>2：使用：由vue提供，按需引入：import { ref } from ‘vue’</p><p>3、回顾：options API中是：this.refs.refAdd(获取某个组件)或者this.refs.refDiv(获取某个元素节点)</p><p>4、用例：</p><ul><li>在组件或节点中定义ref属性：add(ref=”refAdd”)或div(ref=”refDiv”)</li><li>在setup中定义对应ref属性相同的变量名，赋值为任意值即可</li><li>访问方式为：refAdd.value或refDiv.value</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;divBox&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> divBox = ref(<span class="literal">null</span>); <span class="comment">// &lt;div ref=&quot;divBox&quot;&gt;content&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> user = ref(<span class="literal">null</span>); <span class="comment">// user.value -&gt; null</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; divBox &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>4、注意：</p><p><strong>①：元素节点对应ref的分配只会在render时进行对比赋值，因此若在setup中未将对应的响应式变量return出来，则不会获取到组件实例或元素节点</strong></p><p><strong>②：在满足①的前提下，只要在定义变量时变量名称与当前组件中ref属性值相同，则该变量会被统一赋值为组件实例或元素节点，与定义变量时的赋值无关</strong></p><p>setup的context中访问到refs对象，所以获取组件实例或者元素节点的方式还可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;divBox&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; refs &#125;</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> divBox = refs.divBox;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; divBox &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="vue3-x中的emits选项"><a href="#vue3-x中的emits选项" class="headerlink" title="vue3.x中的emits选项"></a>vue3.x中的emits选项</h5><p>vue3.x组件自定义事件实现子组件给父组件传值</p><p>注意：vue官方推荐你始终使用<strong>kebab-case</strong>的事件名</p><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;run&quot;</span>&gt;</span>通过广播方式实现子组件给父组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 建议定义所有发出的事件，以便更好地记录组件应该如何工作、</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">emit</span>: [<span class="string">&#x27;run-parent&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&quot;run-parent&quot;</span>, <span class="string">&quot;传给爸爸&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>1、概述：当前组件的通过emit的事件列表</p><p>2：类型：Array|Object</p><p>3、作用：vue3.0中使用emit发起事件时会要求当前组件记录emit事件(没有则控制台会抛出警告)</p><p>4、用途：用于记录当前组件emit的事件，当为对象时，则可以验证传入的值是否有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">prop, &#123; emit &#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> changeOne = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    emit(<span class="string">&#x27;on-changeOne&#x27;</span>, val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> changeTwo = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    emit(<span class="string">&#x27;on-changeTwo&#x27;</span>, val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法一：数组用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;on-changeOne&#x27;</span>, <span class="string">&#x27;on-changeTwo&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法二：对象用法，当emits为对象时，可以验证事件中的参数是否有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;on-changeOne&#x27;</span>: <span class="function"><span class="params">payload</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 验证通过</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">&#x27;验证失败！&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 验证失败，控制台打印警告信息“验证失败”</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;on-changeTwo&#x27;</span>: <span class="function"><span class="params">payload</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="vue3-x核心值getCurrentInstance"><a href="#vue3-x核心值getCurrentInstance" class="headerlink" title="vue3.x核心值getCurrentInstance"></a>vue3.x核心值getCurrentInstance</h5><p>1、概述：一个很重要的方法，获取当前组件的实例、上下文来操作router和vuex等</p><p>2、使用：由vue提供，按需引入：import { getCurrentInstance } from ‘vue’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 获取当前组件实例</span></span><br><span class="line"><span class="keyword">const</span> instance = getCurrentInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前组件的上下文，下面两种方式都能获取到组件的上下文</span></span><br><span class="line"><span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance(); <span class="comment">// 方式一，这种方式只能在开发环境下使用，生产环境下的ctx将访问不到</span></span><br><span class="line"><span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance(); <span class="comment">// 方式二，此方法在开发环境及生产环境都能放到组件上下文对象(推荐)</span></span><br><span class="line"><span class="comment">// ctx 中包含了组件中由ref和reactive创建的响应式数据对象，以及以下对象及方法</span></span><br><span class="line">proxy.$attrs</span><br><span class="line">proxy.$data</span><br><span class="line">proxy.$el</span><br><span class="line">proxy.$emit</span><br><span class="line">proxy.$forceUpdate</span><br><span class="line">proxy.$nextTick</span><br><span class="line">proxy.$options</span><br><span class="line">proxy.$parent</span><br><span class="line">proxy.$props</span><br><span class="line">proxy.$refs</span><br><span class="line">proxy.$root</span><br><span class="line">proxy.$slots</span><br><span class="line">proxy.$watch</span><br></pre></td></tr></table></figure><h5 id="vue3-x中我们采用mitt实现全局事件总成"><a href="#vue3-x中我们采用mitt实现全局事件总成" class="headerlink" title="vue3.x中我们采用mitt实现全局事件总成"></a>vue3.x中我们采用mitt实现全局事件总成</h5><p>1、前言：由于vue3.x中删除了on和off，因此不能借助于一个单独的vue实例来实现全局事件的发布和订阅与取消订阅(也就是组件通讯)</p><p>2、概述：mitt是一个三方库，npm安装：npm install -D mitt</p><p>3、使用：我们同样使用插件的方式将mitt集成到vue中</p><p>4、mitt对象：</p><ul><li>all (map对象)：包含了所有订阅的事件名称，及对应的处理方法数组</li><li>emit (方法)：触发事件，参数为（事件名(方法名), 携带的参数），当前携带的参数只能为一个，不能为多个</li><li>on (方法)：创建事件订阅，参数为(事件名，处理方法)</li><li>off (方法)：取消事件订阅，参数为(事件名，处理方法)</li></ul><p>5、全局事件总成搭建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue, options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _emitter = mitt()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局发布(在vue全局方法中自定义$pub发布方法)</span></span><br><span class="line">    <span class="comment">// 这里做了$pub方法能够携带多个参数的处理，方便我们在业务中触发事件时带多个参数</span></span><br><span class="line">    Vue.config.globalProperties.$pub = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      _emitter.emit(_.head(args), args.slice(<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局订阅(在vue全局方法中自定义$sub订阅方法)</span></span><br><span class="line">    Vue.config.globalProperties.$sub = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">Reflect</span>.apply(_emitter.on, _emitter, _.toArray(<span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消订阅</span></span><br><span class="line">    Vue.config.globalProperties.$unsub = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">Reflect</span>.apply(_emitter.off, _emitter, _.toArray(<span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、组件实例中使用：</p><p><strong>全局事件发布</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;pubHandler&quot;</span>&gt;</span>发起事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> pubHandler = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      proxy.$pub(<span class="string">&#x27;foo&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; pubHandler &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>全局事件订阅/取消订阅</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unsubHandler&quot;</span>&gt;</span>注销事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; onMounted, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> watchHandler = <span class="function">(<span class="params">[a, b, c] = args</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件监听触发！&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      proxy.$sub(<span class="string">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> unsubHandler = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      proxy.$unsub(<span class="string">&#x27;foo&#x27;</span>, watchHandler)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123; unsubHandler &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="Vue-Router在vue3-x中的使用方式及特性"><a href="#Vue-Router在vue3-x中的使用方式及特性" class="headerlink" title="Vue-Router在vue3.x中的使用方式及特性"></a>Vue-Router在vue3.x中的使用方式及特性</h5><p>1、描述：区别于vue2，在vue3中vue-router将使用新的方法来创建路由，其中重要的是：createRouter, createWebHashHistory, createWebHistory这三个方法</p><p>2、创建：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [...]</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="comment">// 区别于vue2的mode,vue3中将使用history属性来决定采用哪种路由模式</span></span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(), <span class="comment">// 默认为hash模式，可设置createWebHistory模式</span></span><br><span class="line">  <span class="comment">// 区别于vue2的base，vue3中的基础路由路径将作为createWebHashHistory或者createWebHistory的唯一参数配置到路由中</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"><span class="comment">// 注册路由</span></span><br><span class="line">app.use(router)</span><br></pre></td></tr></table></figure><p>3、扩展：在组件中使用路由，查看路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.vue</span></span><br><span class="line"><span class="comment">// vue-router库当中暴露了useRouter和useRoute两个方法供组件使用，还暴露有其他方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter, useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span><br><span class="line">    <span class="keyword">const</span> router = useRouter()</span><br><span class="line">    <span class="keyword">const</span> route = useRoute()</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(proxy.$router === router); <span class="comment">// true</span></span><br><span class="line">      <span class="built_in">console</span>.log(route); &#123;path, params, query ...&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h5><p>Vue3的hook函数相当于vue2的mixin，不同在于hooks是函数</p><p>Vue3的hook函数可以帮助我们提高代码的复用性，让我们能在不同的组件中都利用hooks函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeUnmounted, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(-<span class="number">1</span>); <span class="comment">// x绑定为响应式数据</span></span><br><span class="line">  <span class="keyword">const</span> y = ref(-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> clickHandler = <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    x.value = event.pageX</span><br><span class="line">    y.value = event.pageY</span><br><span class="line">  &#125;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, clickHandler)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, clickHandler)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x, y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新组件–-Teleport"><a href="#新组件–-Teleport" class="headerlink" title="新组件– Teleport"></a>新组件– Teleport</h5><p>Teleport是一种能够将我们的模板移动到DOM中Vue app之外的其他位置的技术，就有点像哆啦A梦的“任意门”</p><p>场景：像modals,toast等这样的元素，很多情况下，我们将它完全的和我们的vue应用的DOM完全剥离，管理起来反而会方便容易很多</p><p>原因在于如果我们嵌套在vue的某个组件内部，那么处理前套组件的定位、z-index和样式就会变得很困难</p><p>另外，像modals,toast等这样的元素需要使用到vue组件的状态(data或者props)的值</p><p>这就是Teleport派上用场的地方，我们可以在组件的逻辑位置写模板代码，这意味着我们可以使用组件的data或props，然后在vue应用的范围之外渲染它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;showToast&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>&gt;打开toast&lt;/button&gt;</span><br><span class="line">&lt;!-- to 属性就是目标位置 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;#teleport-target&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;visiable&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toast-warp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-msg&quot;</span>&gt;</span>我是一个toast文案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="vue3中css使用js变量"><a href="#vue3中css使用js变量" class="headerlink" title="vue3中css使用js变量"></a>vue3中css使用js变量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Vue 3.0 + Vite<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">backg</span>: <span class="string">&quot;blue&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">vars</span>=<span class="string">&quot;&#123; color, backg&#125;&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-tag">h1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--backg);</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3对比vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js函数柯里化</title>
      <link href="/hb-myblog.github.io/2021/10/12/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/hb-myblog.github.io/2021/10/12/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;函数柯里化，指的是将一个接受多个参数的函数，变为接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)。</p><p>&emsp;&emsp;如何实现add(1)(2)(3)(4)=10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 将传入的不定参数转为数组对象</span></span><br><span class="line"><span class="keyword">var</span> _args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="keyword">var</span> _adder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">_args.push(...arguments)</span><br><span class="line"><span class="keyword">return</span> _adder</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// toString隐形转换的特性</span></span><br><span class="line">_adder.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> _args.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _adder</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js函数柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS white-space 属性</title>
      <link href="/hb-myblog.github.io/2021/10/11/white-space/"/>
      <url>/hb-myblog.github.io/2021/10/11/white-space/</url>
      
        <content type="html"><![CDATA[<h5 id="兼容性："><a href="#兼容性：" class="headerlink" title="兼容性："></a>兼容性：</h5><p>&emsp;&emsp;所有浏览器都支持 white-space 属性。</p><p>&emsp;&emsp;注释：任何的版本的 Internet Explorer （包括 IE8）都不支持属性值 “inherit”。</p><h5 id="官方定义和用法："><a href="#官方定义和用法：" class="headerlink" title="官方定义和用法："></a>官方定义和用法：</h5><p>&emsp;&emsp;这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认。空白会被浏览器忽略。</td></tr><tr><td>pre</td><td>空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></td></tr><tr><td>nowrap</td><td>文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</td></tr><tr><td>pre-wrap</td><td>保留空白符序列，但是正常地进行换行。</td></tr><tr><td>pre-line</td><td>合并空白符序列，但是保留换行符。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 white-space 属性的值。</td></tr></tbody></table><h6 id="pre-line"><a href="#pre-line" class="headerlink" title="pre-line"></a>pre-line</h6><p>&emsp;&emsp;合并空格，保留换行符，允许自动换行</p><h6 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，允许自动换行</p><h6 id="nowrap"><a href="#nowrap" class="headerlink" title="nowrap"></a>nowrap</h6><p>&emsp;&emsp;合并空格，换行符转化为一个空格，不允许自动换行</p><h6 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h6><p>&emsp;&emsp;保留空格，保留换行符，不允许自动换行</p><h6 id="pre-wrap"><a href="#pre-wrap" class="headerlink" title="pre-wrap"></a>pre-wrap</h6><p>&emsp;&emsp;保留空格，保留换行符，允许自动换行。</p><table><thead><tr><th><strong>值</strong></th><th><strong>空白符</strong></th><th><strong>换行符</strong></th><th><strong>自动换行</strong></th></tr></thead><tbody><tr><td>pre-line</td><td>合并</td><td>保留</td><td>允许</td></tr><tr><td>normal</td><td>合并</td><td>忽略</td><td>允许</td></tr><tr><td>nowrap</td><td>合并</td><td>忽略</td><td>不允许</td></tr><tr><td>pre</td><td>保留</td><td>保留</td><td>不允许</td></tr><tr><td>pre-wrap</td><td>保留</td><td>保留</td><td>允许</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> white-space </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await详解</title>
      <link href="/hb-myblog.github.io/2021/10/09/async-await%E8%AF%A6%E8%A7%A3/"/>
      <url>/hb-myblog.github.io/2021/10/09/async-await%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h4><p>&emsp;&emsp;async函数，也就是我们常说的async/await，是在ES2017(ES8)引入的新特性，主要目的是为了简化使用基于Promise的API时所需的语法。async和await关键字让我们可以用一种更简洁的方式写出基于Promise的异步行为，而无需刻意地链式调用Promise。</p><h4 id="2、详解"><a href="#2、详解" class="headerlink" title="2、详解"></a>2、详解</h4><p>&emsp;&emsp;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。需要注意的是await关键字只在async函数内有效，如果在async函数体之外使用它，会抛出语法错误。</p><h5 id="2-1、async"><a href="#2-1、async" class="headerlink" title="2.1、async"></a>2.1、async</h5><p>&emsp;&emsp;async函数返回一个 Promise对象，可以使用then方法添加回调函数。只要使用async，不管函数内部返回的是不是Promise对象，都会被包装成Promise对象。</p><ul><li>函数返回非Promise对象</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/10/70747f2e8bf92b93.jpg"></p><p>&emsp;&emsp;可以看出函数直接返回字符串时，返回的是Promise对象，相当于直接通过Promise.resolve()将字符串封装为Promise对象。如果函数没有返回值时，PromiseResult结果为undefined。</p><ul><li><h6 id="函数返回Promise对象"><a href="#函数返回Promise对象" class="headerlink" title="函数返回Promise对象"></a>函数返回Promise对象</h6></li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/10/40b7d757806a77dd.jpg"></p><p>&emsp;&emsp;可以看出返回的也是Promise对象。</p><h5 id="2-2、await"><a href="#2-2、await" class="headerlink" title="2.2、await"></a>2.2、await</h5><p>&emsp;&emsp;await关键字可以跟在任意变量或者表达式之前，但通常await后面会跟一个异步过程。await使用时，会阻塞后续代码执行。我们先抛开async，单独谈await。</p><p><img src="https://s3.bmp.ovh/imgs/2021/10/27e1e9190d623cff.png"></p><p>&emsp;&emsp;可以看出，使用了await后，必须得等testAsync方法执行完后，才会执行后续代码。也可以尝试一下把testAsync前的async去掉，看看跟加上await时有啥区别。</p><h5 id="2-3、async、await结合使用"><a href="#2-3、async、await结合使用" class="headerlink" title="2.3、async、await结合使用"></a>2.3、async、await结合使用</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">await</span> XXX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;请求中...&#x27;</span>)</span><br><span class="line">resolve(<span class="string">&#x27;resolve return&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="string">&#x27;reject return&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAsync2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;请求中2...&#x27;</span>)</span><br><span class="line">resolve(<span class="string">&#x27;resolve return2&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="string">&#x27;reject return2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;test开始...&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> value1 = <span class="keyword">await</span> testAsync();</span><br><span class="line"><span class="built_in">console</span>.log(value1);</span><br><span class="line"><span class="keyword">var</span> value2 = <span class="keyword">await</span> testAsync2();</span><br><span class="line"><span class="built_in">console</span>.log(value2);</span><br><span class="line"><span class="keyword">var</span> value3 = <span class="keyword">await</span> <span class="string">&#x27;test结束...&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(value3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test());</span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2021/10/6be29362930c2ac9.jpg" style="zoom:50%;"><p>&emsp;&emsp;上图可以看出遇到第一个await后，立即返回了Promise对象，然后再按顺序去执行testAsync函数，等待testAsync函数执行后再去执行testAsync2函数。还可以看出async函数可以简化Promise的语法，以往我们需要使用.then去处理回调，现在我们可以使用await像写同步代码一样去写异步代码。</p><p>&emsp;&emsp;再升级一下，在上面的基础上再加入两个普通函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;函数1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;函数2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(fun1());</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// async/await函数</span></span><br><span class="line"><span class="built_in">console</span>.log(fun2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(fun3());</span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2021/10/0f950b00a372fa86.jpg" style="zoom:50%;"><p>梳理一下函数的执行过程:</p><ol><li>先执行函数1</li><li>进入test函数并输出开始</li><li>在test函数中遇到await，立即返回Promise对象</li><li>执行函数2</li><li>执行test函数中的testAsync方法</li><li>等到test函数中的testAsync方法执行完后，继续执行testAsync2方法</li><li>test函数结束</li></ol><p>&emsp;&emsp;可以看出，async函数在遇到await后会立即返回Promise对象，继续执行async函数外部后续逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p><h5 id="2-4、async、await异常处理"><a href="#2-4、async、await异常处理" class="headerlink" title="2.4、async、await异常处理"></a>2.4、async、await异常处理</h5><p>&emsp;&emsp;await后面的函数是有可能出现异常的，所以最好把await命令放在try…catch代码块中。如果await后是Promise对象，也可以使用.catch进行捕获。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> something();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> somethingPromise()</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><p>&emsp;&emsp;async函数在遇到await后会立即返回Promise对象，继续执行async函数外部逻辑，async函数内部会被await阻塞并按顺序执行代码逻辑。</p><p>&emsp;&emsp;可以使用try…catch或.catch对async函数进行异常处理。</p>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础</title>
      <link href="/hb-myblog.github.io/2021/10/08/vue%E5%9F%BA%E7%A1%80/"/>
      <url>/hb-myblog.github.io/2021/10/08/vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h5 id="Setter"><a href="#Setter" class="headerlink" title="Setter"></a>Setter</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"> <span class="attr">el</span>: <span class="string">&#x27;#el&#x27;</span>,</span><br><span class="line"> <span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">price</span>: &#123;</span><br><span class="line">   <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.num = newValue * <span class="number">100</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.num/<span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="绑定value"><a href="#绑定value" class="headerlink" title="绑定value"></a>绑定value</h5><p>表单控件的值可以绑定在vue实例的动态属性上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">v-bind:true-value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">v-bind:false-value</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 选中：vm.checked==vm.a</span><br><span class="line"></span><br><span class="line">// 未选中：vm.hchecked==vm.b</span><br></pre></td></tr></table></figure><h5 id="内联样式绑定"><a href="#内联样式绑定" class="headerlink" title="内联样式绑定"></a>内联样式绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;dada&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line"> dada: &#123;</span><br><span class="line">  color: &#x27;green&#x27;,</span><br><span class="line">  fontSize: &#x27;10px&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组语法：v-bind:style允许将多个样式对象绑定到统一元素上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[ styleObjectA, styleObjectB ]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h5><p>v-for 内置了 $index 变量，输出当前数组元素的索引，也可以自己指定索引的别名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(index,item) in items&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; – &#123;&#123;$index&#125;&#125; – &#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vue.js中提供了$set方法，修改数据的同时进行试图更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$set(<span class="string">&#x27;item[0]&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;da&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$set( target, key, value )</span><br></pre></td></tr></table></figure><h5 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-pre指令，表示跳过编译这个元素和子元素，显示原始的&#123;&#123;&#125;&#125;Mustache标签，用来减少编译时间</span><br></pre></td></tr></table></figure><h5 id="v-for-中使用-key"><a href="#v-for-中使用-key" class="headerlink" title="v-for 中使用 key"></a>v-for 中使用 key</h5><p>​        使用 v-for 更新已渲染的元素列表时，默认用就地复用策略；列表数据修改的时候，他会根据 key 值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素；</p><p>​        使用key的注意事项：</p><ul><li>不要使用可能重复的或者可能变化 key 值（控制台也会给出提醒）</li><li>不要使用数组的 index 作为 key 值，因为如果在数组中插入一个元素时，其后面的元素 index 将会变化。</li><li>如果数组中没有唯一的 key 值可用，可以考虑对其添加一个 key 字段，值为 Symbol() 即可保证唯一。</li></ul><h5 id="v-if-v-else-if-v-else-中使用-key"><a href="#v-if-v-else-if-v-else-中使用-key" class="headerlink" title="v-if/v-else-if/v-else 中使用 key"></a>v-if/v-else-if/v-else 中使用 key</h5><blockquote><p>可能很多人都会忽略这个点</p></blockquote><p>​        原因：默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的副作用。</p><blockquote><p>如果只有一个 v-if ，没有 v-else 或者 v-if-else的话，就没有必要加 key 了</p></blockquote><p>​        相对于 v-for 的 key， v-if/v-else-if/v-else 中的 key 相对简单，我们可以直接写入固定的字符串或者数组即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;isEditing&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:click</span>=<span class="string">&quot;isEditing = false&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Save</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-else</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:click</span>=<span class="string">&quot;isEditing = true&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Edit</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-active</span>, <span class="selector-class">.v-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-enter</span>, <span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        例如对于上面的代码， 你会发现虽然对 button 添加了 过渡效果， 但是如果不添加 key 切换时是无法触发过渡的</p><h5 id="v-for-和-v-if-不要一起使用"><a href="#v-for-和-v-if-不要一起使用" class="headerlink" title="v-for 和 v-if 不要一起使用"></a>v-for 和 v-if 不要一起使用</h5><blockquote><p>此优化技巧仅限于Vue2，Vue3 中对 v-for 和 v-if 的优先级做了调整</p><p><strong>永远不要把 v-if 和 v-for 同时用在同一个元素上。</strong></p></blockquote><p>​        原因是 v-for 的 优先级高于 v-if，所以当它们使用再同一个标签上时，每一个渲染都会先循环再进行条件判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.active&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        我们应该尽量将 v-if 移动到上级 或者 使用 计算属性来处理数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        如果你不想让循环的内容多出一个无需有的上级容器，那么你可以选择使用 template 来作为其父元素，template 不会被浏览器渲染为 DOM 节点</p><p>​        如果我想要判断遍历对象里面每一项的内容来选择渲染的数据的话，可以使用 computed 来对遍历对象进行过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// js</span><br><span class="line">let usersActive = computed(()=&gt;users.filter(user =&gt; user.active))</span><br><span class="line"></span><br><span class="line">// template</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;user in usersActive&quot;&gt;</span><br><span class="line">      &#123;&#123; user.name &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h5 id="使用简单的-计算属性"><a href="#使用简单的-计算属性" class="headerlink" title="使用简单的 计算属性"></a>使用简单的 计算属性</h5><p>​        computed 大家后很熟悉， 它会在其表达式中依赖的响应式数据发送变化时重新计算。如果我们在一个计算属性中书写了比较复杂的表达式，那么其依赖的响应式数据也任意变得更多。当其中任何一个依赖项变化时整个表达式都需要重新计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> price = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> basePrice = manufactureCost / (<span class="number">1</span> - profitMargin)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      basePrice -</span><br><span class="line">      basePrice * (discountPercent || <span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​        当 manufactureCost、profitMargin、discountPercent 中任何一个变化时都会重新计算整个 price。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> basePrice = computed(<span class="function">() =&gt;</span> manufactureCost / (<span class="number">1</span> - profitMargin))</span><br><span class="line"><span class="keyword">let</span> discount = computed(<span class="function">() =&gt;</span> basePrice * (discountPercent || <span class="number">0</span>))</span><br><span class="line"><span class="keyword">let</span> finalPrice = computed(<span class="function">() =&gt;</span> basePrice - discount)</span><br></pre></td></tr></table></figure><p>​        如果当 discountPercent 变化时，只会 重新计算 discount 和 finalPrice，由于 computed 的缓存特性，不会重新计算 basePrice</p><h5 id="functional-函数式组件（Vue2）"><a href="#functional-函数式组件（Vue2）" class="headerlink" title="functional 函数式组件（Vue2）"></a>functional 函数式组件<strong>（Vue2）</strong></h5><p>优化前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class="line">        &lt;div v-if=&quot;value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class="line">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class="line">    &lt;/div&gt; </span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt; </span><br><span class="line">export default &#123; </span><br><span class="line">    props: [&#x27;value&#x27;], </span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>优化后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template functional&gt; </span><br><span class="line">    &lt;div class=&quot;cell&quot;&gt; </span><br><span class="line">        &lt;div v-if=&quot;props.value&quot; class=&quot;on&quot;&gt;&lt;/div&gt; </span><br><span class="line">        &lt;section v-else class=&quot;off&quot;&gt;&lt;/section&gt; </span><br><span class="line">    &lt;/div&gt; </span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt; </span><br><span class="line">export default &#123; </span><br><span class="line">    props: [&#x27;value&#x27;], </span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>没有this（没有实例）</li><li>没有响应式数据</li></ul><h5 id="采用合理的数据处理算法"><a href="#采用合理的数据处理算法" class="headerlink" title="采用合理的数据处理算法"></a>采用合理的数据处理算法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组转树形结构,时间复杂度O(n)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>list 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>idKey 元素id键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>parIdKey 元素父id键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>parId 第一级根节点的父id值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">listToTree</span> (<span class="params">list,idKey,parIdKey,parId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> len = list.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建map</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//将数组中数据转为键值对结构 (这里的数组和obj会相互引用，这是算法实现的重点)</span></span><br><span class="line">        map[list[i][idKey]] = list[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建树形数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> itemParId = list[i][parIdKey];</span><br><span class="line">        <span class="comment">// 顶级节点</span></span><br><span class="line">        <span class="keyword">if</span>(itemParId === parId) &#123;</span><br><span class="line">            result.push(list[i]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 孤儿节点，舍弃(不存在其父节点)</span></span><br><span class="line">        <span class="keyword">if</span>(!map[itemParId])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将当前节点插入到父节点的children中（由于是引用数据类型，obj中对于节点变化，result中对应节点会跟着变化）</span></span><br><span class="line">        <span class="keyword">if</span>(map[itemParId].children) &#123;</span><br><span class="line">            map[itemParId].children.push(list[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map[itemParId].children = [list[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git版本回退</title>
      <link href="/hb-myblog.github.io/2021/10/07/git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/"/>
      <url>/hb-myblog.github.io/2021/10/07/git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</url>
      
        <content type="html"><![CDATA[<p>对于git版本的回退，我们一般会用到如下两个命令：</p><ul><li>git reset</li><li>git revert</li></ul><p>这两个命令有什么区别呢？</p><h5 id="1、git-reset"><a href="#1、git-reset" class="headerlink" title="1、git reset"></a>1、git reset</h5><p>假设有如下几个提交:</p><p><img src="https://i.bmp.ovh/imgs/2021/10/acf69ed2c12427dd.png"></p><p>执行如下命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard a0fvf8</span><br></pre></td></tr></table></figure><p>命令执行之后，HEAD指针就会移动到B提交下</p><p><img src="https://i.bmp.ovh/imgs/2021/10/fc6aaccc7c536e28.png"></p><p>此时，远程仓库的指针依然在D提交上。直接push的话，无法将更改推送到远程仓库，只能使用-f强推到远程仓库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure><p>这个方法的弊端显而易见，之前的C、D提交将会被抹除，无法再找回了。</p><h5 id="2、git-revert"><a href="#2、git-revert" class="headerlink" title="2、git revert"></a>2、git revert</h5><p>通过反做创建一个新的版本，新版本的内容与要回退的目标版本一样，而HEAD指针指向新生成的版本。</p><p>用git revert 来实现上述例子的话可以先revert D，再revert C（由新到旧依次revert）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert 5lk4er</span><br><span class="line">git revert 76sdeb</span><br></pre></td></tr></table></figure><p><img src="https://i.bmp.ovh/imgs/2021/10/9acffeb81c1085a5.png"></p><p>如果回退的数量较大，一个个回退容易出错，可以使用以下方法进行批量回退</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert OLDER_COMMIT^..NEWER_COMMIT</span><br></pre></td></tr></table></figure><p>这样操作的话HEAD指针是往后移动的，可以直接push到远程仓库中。将来甩锅便有迹可循</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3阴影(box-shadow)</title>
      <link href="/hb-myblog.github.io/2021/10/06/CSS3%E9%98%B4%E5%BD%B1-box-shadow/"/>
      <url>/hb-myblog.github.io/2021/10/06/CSS3%E9%98%B4%E5%BD%B1-box-shadow/</url>
      
        <content type="html"><![CDATA[<h5 id="1、单侧投影"><a href="#1、单侧投影" class="headerlink" title="1、单侧投影"></a>1、单侧投影</h5><ul><li><p>外 box-shadow 前四个参数：x 偏移值、y 偏移值 、模糊半径、扩张半径。 </p></li><li><p>单侧投影的核心是第四个参数：扩张半径。这个参数会根据你指定的值去扩大或缩小投影尺寸，如果我们用一个负的扩张半径，而他的值刚好等于模糊半径，那么投影的尺寸就会与投影所属的元素尺寸完全一致，除非使用偏移量来移动他，否则我们将看不到任何投影。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: -<span class="number">8px</span> <span class="number">0</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: <span class="number">8px</span> <span class="number">0</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">8px</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top&#x27;</span>&gt;</span>上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom&#x27;</span>&gt;</span>下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/990e7064af72aa94.png"></p><h5 id="2、立体文字阴影"><a href="#2、立体文字阴影" class="headerlink" title="2、立体文字阴影"></a>2、立体文字阴影</h5><ul><li>立体文字阴影的关键点在于多层 text-shadow 的叠加</li><li>合理运用了 SASS 函数来自动计算多层 text-shadow 的 CSS 代码</li><li>运用了 Sass 的颜色函数，渐进实现层级阴影颜色 - fade-out: 改变颜色的透明度，让颜色更加透明 - desaturate: 改变颜色的饱和度值，让颜色更少的饱和</li><li>HSL(颜色值)</li><li><ul><li>H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360</li><li>S：Saturation(饱和度)。取值为：0.0% - 100.0%</li><li>L：Lightness(亮度)。取值为：0.0% - 100.0%</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="keyword">@function</span> blessing($<span class="attribute">color</span>) &#123;</span><br><span class="line"> $val: <span class="number">0px</span> <span class="number">0px</span> $color;</span><br><span class="line"> <span class="keyword">@for</span> $i from <span class="number">1</span> through <span class="number">50</span> &#123;</span><br><span class="line"> $<span class="attribute">color</span>: <span class="built_in">fade-out</span>(<span class="built_in">desaturate</span>($color, <span class="number">1%</span>), .<span class="number">02</span>);</span><br><span class="line"> $val: #&#123;$val&#125;, -#&#123;$<span class="selector-tag">i</span>&#125;px #&#123;$<span class="selector-tag">i</span>&#125;px #&#123;$<span class="attribute">color</span>&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@return</span> $val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">20vmin</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">45vh</span>;</span><br><span class="line"> <span class="attribute">text-shadow</span>: <span class="built_in">blessing</span>(<span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>));</span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">14</span>, <span class="number">100%</span>, <span class="number">60%</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;福&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/d8c04e272d3e7109.png"></p><h5 id="3、线性渐变模拟长阴影"><a href="#3、线性渐变模拟长阴影" class="headerlink" title="3、线性渐变模拟长阴影"></a>3、线性渐变模拟长阴影</h5><ul><li>借用了元素的两个伪元素</li><li>通过渐变色填充两个伪元素，再通过位移、变换放置在合适的位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">30vmin</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">30vmin</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">30vh</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">30vmin</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&#x27;:before&#x27;</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">30vh</span>;</span><br><span class="line"> <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, <span class="number">0</span>) <span class="built_in">skewY</span>(<span class="number">45deg</span>) <span class="built_in">scaleX</span>(.<span class="number">6</span>);</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>), transparent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&#x27;:after&#x27;</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">30vh</span>;</span><br><span class="line"> <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0%</span>, <span class="number">100%</span>) <span class="built_in">skewX</span>(<span class="number">45deg</span>) <span class="built_in">scaleY</span>(.<span class="number">6</span>);</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>), transparent);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;Web秀&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/ca90721fe4663ef1.png"></p><h5 id="4、渐变实现内切角"><a href="#4、渐变实现内切角" class="headerlink" title="4、渐变实现内切角"></a>4、渐变实现内切角</h5><ul><li>阴影实现的关键点在于使用伪元素绝对定位在容器的一角，元素本身透明，阴影扩散开形成内切圆角效果</li><li>阴影实现缺点，单个标签最多只能是2个内切圆角</li><li>径向渐变实现内切圆角可以是4边</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">8vw</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">1vw</span> auto;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">1vmin</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">8vw</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="attribute">top</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">left</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15vw</span> <span class="number">#e91e63</span>; </span><br><span class="line"> <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="attribute">bottom</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">right</span>: -<span class="number">2vw</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">4vw</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15vw</span> <span class="number">#e91e63</span>; </span><br><span class="line"> <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.linear</span> &#123;</span><br><span class="line"> <span class="attribute">background-size</span>: <span class="number">70%</span> <span class="number">70%</span>;</span><br><span class="line"> <span class="attribute">background-image</span>: </span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">100%</span> <span class="number">100%</span>, </span><br><span class="line"> transparent <span class="number">1vw</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>),</span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">0</span> <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>),</span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">100%</span> <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>),</span><br><span class="line"> <span class="built_in">radial-gradient</span>(</span><br><span class="line"> circle at <span class="number">0</span> <span class="number">100%</span>, </span><br><span class="line"> transparent <span class="number">0</span>, </span><br><span class="line"> transparent <span class="number">2vw</span>, </span><br><span class="line"> <span class="number">#03A9F5</span> <span class="number">2vw</span>);</span><br><span class="line"> <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"> <span class="attribute">background-position</span>: </span><br><span class="line"> right bottom, </span><br><span class="line"> left top, </span><br><span class="line"> right top, </span><br><span class="line"> left bottom;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;shadow&quot;&gt;阴影实现缺点最多是<span class="number">2</span>边&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;linear&quot;&gt;径向渐变内切圆角<span class="number">4</span>边&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2021/10/f96a46e2de9e4910.png"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js中一些好用的数组方法</title>
      <link href="/hb-myblog.github.io/2021/10/04/js%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
      <url>/hb-myblog.github.io/2021/10/04/js%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="1、some"><a href="#1、some" class="headerlink" title="1、some()"></a>1、some()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.some(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>),<span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把10修改成20</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">5</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span><br><span class="line">ages.some(<span class="function"><span class="keyword">function</span> (<span class="params">currentValue, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (currentValue === <span class="number">10</span>) &#123;</span><br><span class="line">    ages[index] = <span class="number">20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ages);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把10修改成20 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">5</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span><br><span class="line">ages.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="number">10</span>) &#123;</span><br><span class="line">    ages[index] = <span class="number">20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ages);</span><br></pre></td></tr></table></figure><h5 id="2、every"><a href="#2、every" class="headerlink" title="2、every()"></a>2、every()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.every(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断每个元素的值是否都大于4</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">5</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = ages.some(<span class="function"><span class="keyword">function</span> (<span class="params">currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">//输出：true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">var</span> res = ages.some(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="keyword">var</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> every = arr.every( <span class="function"><span class="keyword">function</span>(<span class="params"> val, index, arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&#x27;val：&#x27;</span> + val); <span class="comment">//打印1，不会打印2、3、4、5、6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val &gt; <span class="number">4</span>; </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(every); <span class="comment">//返回false</span></span><br></pre></td></tr></table></figure><h5 id="3、reduce"><a href="#3、reduce" class="headerlink" title="3、reduce()"></a>3、reduce()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br><span class="line"><span class="function"><span class="title">total</span>：必需。初始值, 或者计算结束后的返回值。</span></span><br><span class="line"><span class="function"><span class="title">currentValue</span>：必需。当前元素</span></span><br><span class="line"><span class="function"><span class="title">currentIndex</span>：可选。当前元素的索引</span></span><br><span class="line"><span class="function"><span class="title">arr</span>：可选。当前元素所属的数组对象。</span></span><br><span class="line"><span class="function"><span class="title">initialValue</span>：可选。传递给函数的初始值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算所有元素的和</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">15.5</span>, <span class="number">2.3</span>, <span class="number">1.1</span>, <span class="number">4.7</span>];</span><br><span class="line"><span class="keyword">var</span> res = numbers.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total, currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> total += currentValue</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">//23.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算大于4的元素的和</span></span><br><span class="line"><span class="keyword">var</span> result = numbers.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">4</span>).reduce(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total += item, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">//20.2</span></span><br></pre></td></tr></table></figure><h5 id="4、includes"><a href="#4、includes" class="headerlink" title="4、includes()"></a>4、includes()</h5><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(searchElement)</span><br><span class="line">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, -<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webSocket</title>
      <link href="/hb-myblog.github.io/2021/10/04/webSocket/"/>
      <url>/hb-myblog.github.io/2021/10/04/webSocket/</url>
      
        <content type="html"><![CDATA[<h5 id="websocket是什么"><a href="#websocket是什么" class="headerlink" title="websocket是什么"></a>websocket是什么</h5><p>&emsp;&emsp;服务器给客户端发送一个主动的消息技术。比如登录一个网页，在我们打开一个浏览器，在浏览器去请求一个网页的时候，会请求一个二维码，放到浏览器端，用手机微信去扫描的时候，微信手机端会把扫描的结果推送到微信的服务器，微信的服务器会将消息推送到第三方的另一个服务器，地三方服务器会主动推送一条消息到浏览器前端，第三方服务器主动推送消息的地方用到的技术就是websocket，也就是由服务器主动推送消息到浏览器，这就是websocket。</p><p>&emsp;&emsp;这个时候有一个疑惑，为什么不使用http呢？http首先带有协议头和协议body，协议头比较大，如果只推送几个字节或十几个字节的情况下，会产生大量的response，大部分都是无用的消息，利用率不高。又为什么不用裸TCP呢？TCP是一个传输层的协议，对于使用浏览器的版本和其他的版本，并没有做到协议上的鉴定，不能跟http一起。</p><h5 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h5><p>&emsp;&emsp;广播和收听</p><img src="https://i.bmp.ovh/imgs/2021/10/45f75f823c203613.png" style="zoom: 67%;"><h5 id="为什么需要websocket协议"><a href="#为什么需要websocket协议" class="headerlink" title="为什么需要websocket协议"></a>为什么需要websocket协议</h5><p>　　因为 HTTP 协议有一个缺陷：通信只能先由客户端发起，然后服务器再作出响应，并不能由服务器主动向客户端推送消息。<br>　　WebSocket 协议最大的特点是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p><h5 id="什么场景下用websocket"><a href="#什么场景下用websocket" class="headerlink" title="什么场景下用websocket"></a>什么场景下用websocket</h5><ol><li>websocket社交订阅</li><li>websocket多玩家游戏</li><li>websocket协同编辑/编程</li><li>websocket收集点击流数据</li><li>股票基金报价</li><li>体育实况更新</li><li>多媒体聊天</li><li>基于位置的应用</li><li>在线教育</li><li>论坛的消息广播</li><li>弹幕、客服等等</li></ol><h5 id="怎么使用websocket"><a href="#怎么使用websocket" class="headerlink" title="怎么使用websocket"></a>怎么使用websocket</h5><p>服务器端：略</p><p>客户端：浏览器原生对象websocket（功能较少）、第三方 socket.io</p><ol><li>启动服务器</li><li>启动客户端程序连接服务器（<strong>永久</strong>连接）</li><li>服务器为每个客户创建专用对象（负责当前客户消息的收发）</li><li>客户端可以向服务器发消息、服务器向所有客户发送广播消息（每个客户接收消息）</li></ol><p><strong>客户端</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reset()&quot;</span>/&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://127.0.0.1:80/websocket/ws&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Socket </span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//向服务器发送数据</span></span><br><span class="line">    <span class="comment">//socket.send(&#x27;哈哈哈哈&#x27;); </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收数据事件</span></span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    body.innerHTML+=<span class="string">&quot;&lt;br/&gt;对方：&quot;</span>+event.data;</span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket关闭事件</span></span><br><span class="line">    socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    body.innerHTML+=<span class="string">&quot;&lt;br/&gt;系统：已和服务器断开连接！！！&quot;</span>;</span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭socket</span></span><br><span class="line">    <span class="comment">//socket.close()</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------</span></span><br><span class="line"><span class="keyword">var</span> body=<span class="built_in">document</span>.getElementById(<span class="string">&quot;body&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg=<span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).value;<span class="comment">//获取输入框内容</span></span><br><span class="line">    socket.send(msg);<span class="comment">//发送消息</span></span><br><span class="line">    reset();<span class="comment">//清空输入框</span></span><br><span class="line">    body.innerHTML+=<span class="string">&quot;&lt;br/&gt;我：&quot;</span>+msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>).value=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务器端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.CloseReason;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ServerEndpoint注解中的内容是用户客户端websocket的连接url,例如ws://127.0.0.1:80/websocket/ws,</span></span><br><span class="line"><span class="comment">//结构形式为“ws：//ip:端口/项目名/指定的url”</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WSServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">//连接打开时执行</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.session=session;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个客户端连接进来了 ... 它的sessionid是：&quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收到消息时执行</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">    System.out.println(session.getId()+<span class="string">&quot;客户端发送的消息是：&quot;</span>+message);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sendMessage(message);<span class="comment">//消息发回给客户端</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//return currentUser + &quot;：&quot; + message;如果有返回值，则客户端发送消息后会收到这个返回值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接关闭时执行</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session, CloseReason closeReason)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个客户端关闭了，它的sessionid是：&quot;</span> + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接错误时执行</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义的方法，用于发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">        <span class="comment">//this.session.getAsyncRemote().sendText(message);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用CSS代码让你的列表网页提升渲染性能</title>
      <link href="/hb-myblog.github.io/2021/10/03/%E7%94%A8CSS%E4%BB%A3%E7%A0%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8%E7%BD%91%E9%A1%B5%E6%8F%90%E5%8D%87%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD/"/>
      <url>/hb-myblog.github.io/2021/10/03/%E7%94%A8CSS%E4%BB%A3%E7%A0%81%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8%E7%BD%91%E9%A1%B5%E6%8F%90%E5%8D%87%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在长列表网页，DOM元素较多的情况下，我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，需要写大量的js或者css逻辑去实现。现在，我们多了一种方式——content-visibility。只需要一行CSS代码，就可以实现可见网页只加载可见区域内容。</p><h5 id="content-visibility属性有三个可选值"><a href="#content-visibility属性有三个可选值" class="headerlink" title="content-visibility属性有三个可选值:"></a>content-visibility属性有三个可选值:</h5><ul><li>visible: 默认值。对布局和呈现不会产生什么影响。</li><li>hidden: 元素跳过其内容的呈现。用户代理功能（例如，在页面中查找，按Tab键顺序导航等）不可访问已跳过的内容，也不能选择或聚焦。类似于对其内容设置了display: none属性。</li><li>auto: 对于用户可见区域的元素，浏览器会正常渲染其内容；对于不可见区域的元素，浏览器会暂时跳过其内容的呈现，等到其处于用户可见区域时，浏览器在渲染其内容。</li></ul><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处省略n个&lt;div class=&quot;card&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">   <span class="attribute">transition-duration</span>: <span class="number">0.3s</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#ffaa00</span>;</span><br><span class="line">   <span class="attribute">content</span>-<span class="attribute">visibility</span>: auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>&emsp;&emsp;当元素的部分内容如img标签这种，元素的高度是有图片内容决定的，因此在这种情况下，如果使用content-visibility，则可见视图外的img初始未渲染，高度为0，随着滚动条向下滑动，页面高度增加，会导致滚动条的滚动有问题</p><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>&emsp;&emsp;如果在已知元素高度的情况下，可以使用contains-intrinsic-size属性，为上面的card添加：contains-intrinsic-size：312px;，这会给内容附一个初始高度值。（如果高度不固定也可以附一个大致的初始高度值，会使滚动条问题相对减少）。</p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>&emsp;&emsp;content-visibility是一个非常实用的CSS属性，虽然其兼容性现在不是很好，但是相信不久的将来这并不是问题。现在来看是部分场景下它对浏览器的滚动条影响问题，如果你的列表项高度相同，那么可以通过contain-intrinsic-size来设置一个初始高度解决。如果列表项高度不固定而又非常重视用户的滚动条体验，那么不建议使用此属性。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的表单验证</title>
      <link href="/hb-myblog.github.io/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/hb-myblog.github.io/2021/10/02/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h5 id="1、判断字符串是否是-https-mailto-tal-开头的"><a href="#1、判断字符串是否是-https-mailto-tal-开头的" class="headerlink" title="1、判断字符串是否是 https?:|mailto:|tal:  开头的"></a>1、判断字符串是否是 https?:|mailto:|tal:  开头的</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isExternal</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(https?:|mailto:|tel:)/</span>.test(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、检验字符串是否是-admin-editor"><a href="#2、检验字符串是否是-admin-editor" class="headerlink" title="2、检验字符串是否是 admin  editor"></a>2、检验字符串是否是 admin  editor</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validUsername</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> valid_map = [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;editor&#x27;</span>]</span><br><span class="line">  <span class="keyword">return</span> valid_map.indexOf(str.trim()) &gt;= <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、判断网址"><a href="#3、判断网址" class="headerlink" title="3、判断网址"></a>3、判断网址</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^(http?|https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?&#x27;\\+&amp;%$#=~_-]+))*$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、判断都是小写字母"><a href="#4、判断都是小写字母" class="headerlink" title="4、判断都是小写字母"></a>4、判断都是小写字母</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validLowerCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[a-z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、判断都是大写字母"><a href="#5、判断都是大写字母" class="headerlink" title="5、判断都是大写字母"></a>5、判断都是大写字母</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validUpperCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[A-Z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、判断是只能是数字和字母"><a href="#6、判断是只能是数字和字母" class="headerlink" title="6、判断是只能是数字和字母"></a>6、判断是只能是数字和字母</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validAlphabets</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[0-9A-Za-z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、用户密码格式"><a href="#7、用户密码格式" class="headerlink" title="7、用户密码格式"></a>7、用户密码格式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isEvolPass</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(?=.*[0-9])(?=.*[a-zA-Z]).&#123;8,30&#125;$/</span>.test(str) <span class="comment">// 用户密码格式正则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、邮箱校验"><a href="#8、邮箱校验" class="headerlink" title="8、邮箱校验"></a>8、邮箱校验</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">email</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、验证字符串"><a href="#9、验证字符串" class="headerlink" title="9、验证字符串"></a>9、验证字符串</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span> || str <span class="keyword">instanceof</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10、手机号码校验"><a href="#10、手机号码校验" class="headerlink" title="10、手机号码校验"></a>10、手机号码校验</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPhone</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[0-9])\d&#123;8&#125;$/</span>.test(str) <span class="comment">//  手机号码正则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11、验证是数组"><a href="#11、验证是数组" class="headerlink" title="11、验证是数组"></a>11、验证是数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.isArray === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、判断只能是汉字"><a href="#12、判断只能是汉字" class="headerlink" title="12、判断只能是汉字"></a>12、判断只能是汉字</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isChinese</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> reg=<span class="regexp">/^[\u0391-\uFFE5]+$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13、校验时间大小"><a href="#13、校验时间大小" class="headerlink" title="13、校验时间大小"></a>13、校验时间大小</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkDate</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj_value=obj.replace(<span class="regexp">/-/g</span>,<span class="string">&quot;/&quot;</span>);<span class="comment">//替换字符，变成标准格式(检验格式为：&#x27;2009-12-10&#x27;)</span></span><br><span class="line">    <span class="comment">// var obj_value=obj.replace(&quot;-&quot;,&quot;/&quot;);//替换字符，变成标准格式(检验格式为：&#x27;2010-12-10 11:12&#x27;)</span></span><br><span class="line">    <span class="keyword">const</span> date1=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(obj_value));</span><br><span class="line">    <span class="keyword">const</span> date2=<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//取今天的日期</span></span><br><span class="line">    <span class="keyword">if</span>(date1&gt;date2)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不能大于当前时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="14、判断ip"><a href="#14、判断ip" class="headerlink" title="14、判断ip"></a>14、判断ip</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isIP</span>(<span class="params">strIP</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isNull(strIP)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> re=<span class="regexp">/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/g</span> <span class="comment">//匹配IP地址的正则表达式</span></span><br><span class="line">    <span class="keyword">if</span>(re.test(strIP))&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">RegExp</span>.$1 &lt;<span class="number">256</span> &amp;&amp; <span class="built_in">RegExp</span>.$2&lt;<span class="number">256</span> &amp;&amp; <span class="built_in">RegExp</span>.$3&lt;<span class="number">256</span> &amp;&amp; <span class="built_in">RegExp</span>.$4&lt;<span class="number">256</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="15、检查输入字符串是否为空或者全部都是空格"><a href="#15、检查输入字符串是否为空或者全部都是空格" class="headerlink" title="15、检查输入字符串是否为空或者全部都是空格"></a>15、检查输入字符串是否为空或者全部都是空格</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isNull</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( str == <span class="string">&quot;&quot;</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> regu = <span class="string">&quot;^[ ]+$&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">const</span> = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regu);</span><br><span class="line">    <span class="keyword">return</span> re.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="16、判断是否是日期-输入：date：日期；fmt：日期格式"><a href="#16、判断是否是日期-输入：date：日期；fmt：日期格式" class="headerlink" title="16、判断是否是日期  (输入：date：日期；fmt：日期格式)"></a>16、判断是否是日期  (输入：date：日期；fmt：日期格式)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params"> date, fmt </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fmt==<span class="literal">null</span>) fmt=<span class="string">&quot;yyyyMMdd&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> yIndex = fmt.indexOf(<span class="string">&quot;yyyy&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(yIndex==-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> year = date.substring(yIndex,yIndex+<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">const</span> mIndex = fmt.indexOf(<span class="string">&quot;MM&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(mIndex==-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> month = date.substring(mIndex,mIndex+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> dIndex = fmt.indexOf(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(dIndex==-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> day = date.substring(dIndex,dIndex+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(!isNumber(year)||year&gt;<span class="string">&quot;2100&quot;</span> || year&lt; <span class="string">&quot;1900&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!isNumber(month)||month&gt;<span class="string">&quot;12&quot;</span> || month&lt; <span class="string">&quot;01&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(day&gt;getMaxDay(year,month) || day&lt; <span class="string">&quot;01&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="17、字符1是否以字符串2开始和结束"><a href="#17、字符1是否以字符串2开始和结束" class="headerlink" title="17、字符1是否以字符串2开始和结束"></a>17、字符1是否以字符串2开始和结束</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFirstMatch</span>(<span class="params">str1,str2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> index = str1.indexOf(str2);</span><br><span class="line">    <span class="keyword">if</span>(index==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isLastMatch</span>(<span class="params">str1,str2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> index = str1.lastIndexOf(str2);</span><br><span class="line">    <span class="keyword">if</span>(str1.length==index+str2.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
